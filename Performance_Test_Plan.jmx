<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="4.0" jmeter="4.0 r1823414">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Performance_Test_Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
    </TestPlan>
    <hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Env_Variables" enabled="false"/>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="TEST" enabled="false"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Var: Employers" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="==================APOLLO EMPLOYER===============" elementType="Argument">
                <stringProp name="Argument.name">==================APOLLO EMPLOYER===============</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="employerIdFull" elementType="Argument">
                <stringProp name="Argument.name">employerIdFull</stringProp>
                <stringProp name="Argument.value">1419047566</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="apolloFull" elementType="Argument">
                <stringProp name="Argument.name">apolloFull</stringProp>
                <stringProp name="Argument.value">APOLLO FULL TEST</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="apolloSelf" elementType="Argument">
                <stringProp name="Argument.name">apolloSelf</stringProp>
                <stringProp name="Argument.value">APOLLO SELF TEST</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="==================VOL EMPLOYER=================" elementType="Argument">
                <stringProp name="Argument.name">==================VOL EMPLOYER=================</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="volEmployer" elementType="Argument">
                <stringProp name="Argument.name">volEmployer</stringProp>
                <stringProp name="Argument.value">1421784313</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="==================Elevate EMPLOYER=================" elementType="Argument">
                <stringProp name="Argument.name">==================Elevate EMPLOYER=================</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="elevate.employer.id" elementType="Argument">
                <stringProp name="Argument.name">elevate.employer.id</stringProp>
                <stringProp name="Argument.value">1414448843</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <stringProp name="Argument.desc">Eve Testing</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Var: Users" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="==================APOLLO USERS=================" elementType="Argument">
                <stringProp name="Argument.name">==================APOLLO USERS=================</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="apolloID_1" elementType="Argument">
                <stringProp name="Argument.name">apolloID_1</stringProp>
                <stringProp name="Argument.value">1419967623</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="apolloID_2" elementType="Argument">
                <stringProp name="Argument.name">apolloID_2</stringProp>
                <stringProp name="Argument.value">1421477348</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="apolloID_3" elementType="Argument">
                <stringProp name="Argument.name">apolloID_3</stringProp>
                <stringProp name="Argument.value">1421142264</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="apolloID_4" elementType="Argument">
                <stringProp name="Argument.name">apolloID_4</stringProp>
                <stringProp name="Argument.value">1421517192</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="apolloID_5" elementType="Argument">
                <stringProp name="Argument.name">apolloID_5</stringProp>
                <stringProp name="Argument.value">1421142322</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="==================VOL USERS===================" elementType="Argument">
                <stringProp name="Argument.name">==================VOL USERS===================</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vol.id.1" elementType="Argument">
                <stringProp name="Argument.name">vol.id.1</stringProp>
                <stringProp name="Argument.value">1421973197</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vol.id.2" elementType="Argument">
                <stringProp name="Argument.name">vol.id.2</stringProp>
                <stringProp name="Argument.value">1421973486</stringProp>
                <stringProp name="Argument.desc">Mainly used for ANDROID data upload</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="==================SAPPHIRE USERS================" elementType="Argument">
                <stringProp name="Argument.name">==================SAPPHIRE USERS================</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="sapphireID_1" elementType="Argument">
                <stringProp name="Argument.name">sapphireID_1</stringProp>
                <stringProp name="Argument.value">1421467364</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="sapphireID_2" elementType="Argument">
                <stringProp name="Argument.name">sapphireID_2</stringProp>
                <stringProp name="Argument.value">1421469352</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="sapphireID_3" elementType="Argument">
                <stringProp name="Argument.name">sapphireID_3</stringProp>
                <stringProp name="Argument.value">1421469360</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="sapUserWithGoals_1" elementType="Argument">
                <stringProp name="Argument.name">sapUserWithGoals_1</stringProp>
                <stringProp name="Argument.value">1421785849</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="==================ELEVATE USERS=================" elementType="Argument">
                <stringProp name="Argument.name">==================ELEVATE USERS=================</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="elevateID_1" elementType="Argument">
                <stringProp name="Argument.name">elevateID_1</stringProp>
                <stringProp name="Argument.value">1414985091</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="elevate.id.1" elementType="Argument">
                <stringProp name="Argument.name">elevate.id.1</stringProp>
                <stringProp name="Argument.value">1414985091</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="elevate.id.2" elementType="Argument">
                <stringProp name="Argument.name">elevate.id.2</stringProp>
                <stringProp name="Argument.value">1414984581</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="elevate.id.3" elementType="Argument">
                <stringProp name="Argument.name">elevate.id.3</stringProp>
                <stringProp name="Argument.value">1414984607</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="elevate.id.4" elementType="Argument">
                <stringProp name="Argument.name">elevate.id.4</stringProp>
                <stringProp name="Argument.value">1414984656</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="elevate.id.5" elementType="Argument">
                <stringProp name="Argument.name">elevate.id.5</stringProp>
                <stringProp name="Argument.value">1414984664</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="==================MANULIFE USERS================" elementType="Argument">
                <stringProp name="Argument.name">==================MANULIFE USERS================</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="manulifeID_1" elementType="Argument">
                <stringProp name="Argument.name">manulifeID_1</stringProp>
                <stringProp name="Argument.value">1415413622</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="==================VERIZON USERS=================" elementType="Argument">
                <stringProp name="Argument.name">==================VERIZON USERS=================</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="verizonId_1" elementType="Argument">
                <stringProp name="Argument.name">verizonId_1</stringProp>
                <stringProp name="Argument.value">1421968577</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vrzn.id.1" elementType="Argument">
                <stringProp name="Argument.name">vrzn.id.1</stringProp>
                <stringProp name="Argument.value">1421968577</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="==================CRUNCH USERS=================" elementType="Argument">
                <stringProp name="Argument.name">==================CRUNCH USERS=================</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="crunchID_1" elementType="Argument">
                <stringProp name="Argument.name">crunchID_1</stringProp>
                <stringProp name="Argument.value">1421980986</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="==================BIW USERS=====================" elementType="Argument">
                <stringProp name="Argument.name">==================BIW USERS=====================</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="biw.id.1" elementType="Argument">
                <stringProp name="Argument.name">biw.id.1</stringProp>
                <stringProp name="Argument.value">1421992544</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="biw.id.2" elementType="Argument">
                <stringProp name="Argument.name">biw.id.2</stringProp>
                <stringProp name="Argument.value">1421992569</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <stringProp name="Argument.desc">Mainly used for ANDROID data upload</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Var: RTE" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="================== Partner Id ===================" elementType="Argument">
                <stringProp name="Argument.name">================== Partner Id ===================</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vrznPartnerId--" elementType="Argument">
                <stringProp name="Argument.name">vrznPartnerId--</stringProp>
                <stringProp name="Argument.value">VERIZON</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vrznPartnerId" elementType="Argument">
                <stringProp name="Argument.name">vrznPartnerId</stringProp>
                <stringProp name="Argument.value">VERIZONDUMMY</stringProp>
                <stringProp name="Argument.desc">This meant to be for 2nd Dummy Group.</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="bbPartnerId--" elementType="Argument">
                <stringProp name="Argument.name">bbPartnerId--</stringProp>
                <stringProp name="Argument.value">BESTBUY</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="bbPartnerId" elementType="Argument">
                <stringProp name="Argument.name">bbPartnerId</stringProp>
                <stringProp name="Argument.value">BESTBUYDUMMY</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <stringProp name="Argument.desc">This meant to be for 2nd Dummy Group.</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Var: Zuul Configs" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="zuulRteNode01" elementType="Argument">
                <stringProp name="Argument.name">zuulRteNode01</stringProp>
                <stringProp name="Argument.value">zuul.tvg.test01.tvgose.discsrv.co.za</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="zuulVgBase" elementType="Argument">
                <stringProp name="Argument.name">zuulVgBase</stringProp>
                <stringProp name="Argument.value">zuul-noauth.qa.tvgose.discsrv.co.za</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="zuulBase" elementType="Argument">
                <stringProp name="Argument.name">zuulBase</stringProp>
                <stringProp name="Argument.value">zuul.tvg.test.tvgose.discsrv.co.za</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="zuulPort" elementType="Argument">
                <stringProp name="Argument.name">zuulPort</stringProp>
                <stringProp name="Argument.value">80</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Var: DHDB" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="arDbHost" elementType="Argument">
                <stringProp name="Argument.name">arDbHost</stringProp>
                <stringProp name="Argument.value">vgqdb01</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="dbHost" elementType="Argument">
                <stringProp name="Argument.name">dbHost</stringProp>
                <stringProp name="Argument.value">vgtdb01</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="dbPort" elementType="Argument">
                <stringProp name="Argument.name">dbPort</stringProp>
                <stringProp name="Argument.value">1532</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="dbUserName" elementType="Argument">
                <stringProp name="Argument.name">dbUserName</stringProp>
                <stringProp name="Argument.value">dNesterovq</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="dbPassword" elementType="Argument">
                <stringProp name="Argument.name">dbPassword</stringProp>
                <stringProp name="Argument.value">eRoV#0929</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="member_table" elementType="Argument">
                <stringProp name="Argument.name">member_table</stringProp>
                <stringProp name="Argument.value">VSA_ADMIN.A_MEMBER</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="volBranch" elementType="Argument">
                <stringProp name="Argument.name">volBranch</stringProp>
                <stringProp name="Argument.value">AND m.curnt_brncd_a = &apos;SQUADTWO&apos;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="VOL_EMPLOYER" elementType="Argument">
                <stringProp name="Argument.name">VOL_EMPLOYER</stringProp>
                <stringProp name="Argument.value">VITALITY ONE FOR LEGACY</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Var: TEST" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="enviroment" elementType="Argument">
                <stringProp name="Argument.name">enviroment</stringProp>
                <stringProp name="Argument.value">TEST</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="====================GENERAL============" elementType="Argument">
                <stringProp name="Argument.name">====================GENERAL============</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="employerIdFull" elementType="Argument">
                <stringProp name="Argument.name">employerIdFull</stringProp>
                <stringProp name="Argument.value">1419047566</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vitalityIdForCG" elementType="Argument">
                <stringProp name="Argument.name">vitalityIdForCG</stringProp>
                <stringProp name="Argument.value">1420821439</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="apolloIdForCG" elementType="Argument">
                <stringProp name="Argument.name">apolloIdForCG</stringProp>
                <stringProp name="Argument.value">IY90WR46A03VGANRZZ0H</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="povBase" elementType="Argument">
                <stringProp name="Argument.name">povBase</stringProp>
                <stringProp name="Argument.value">integrationtest.powerofvitality.com</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vapBase" elementType="Argument">
                <stringProp name="Argument.name">vapBase</stringProp>
                <stringProp name="Argument.value">vgtweblogic04.discsrv.co.za</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vapPort" elementType="Argument">
                <stringProp name="Argument.name">vapPort</stringProp>
                <stringProp name="Argument.value">7002</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ssoBase" elementType="Argument">
                <stringProp name="Argument.name">ssoBase</stringProp>
                <stringProp name="Argument.value">integrationtest.powerofvitality.com</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="binLocation" elementType="Argument">
                <stringProp name="Argument.name">binLocation</stringProp>
                <stringProp name="Argument.value">/Users/DNesterov/apache-jmeter-4.0/bin</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="aetnaTokenBash" elementType="Argument">
                <stringProp name="Argument.name">aetnaTokenBash</stringProp>
                <stringProp name="Argument.value">test_curl_EYW.sh</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="surveyId" elementType="Argument">
                <stringProp name="Argument.name">surveyId</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="====================ZUUL==============" elementType="Argument">
                <stringProp name="Argument.name">====================ZUUL==============</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="zuulRteBase" elementType="Argument">
                <stringProp name="Argument.name">zuulRteBase</stringProp>
                <stringProp name="Argument.value">zuul.tvg.test.tvgose.discsrv.co.za</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="zuulRteNode02" elementType="Argument">
                <stringProp name="Argument.name">zuulRteNode02</stringProp>
                <stringProp name="Argument.value">zuul.tvg.test02.tvgose.discsrv.co.za</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="====================Mobile Service=========" elementType="Argument">
                <stringProp name="Argument.name">====================Mobile Service=========</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="msBase" elementType="Argument">
                <stringProp name="Argument.name">msBase</stringProp>
                <stringProp name="Argument.value">integrationtest.powerofvitality.com</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="====================VSL===============" elementType="Argument">
                <stringProp name="Argument.name">====================VSL===============</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vslBase" elementType="Argument">
                <stringProp name="Argument.name">vslBase</stringProp>
                <stringProp name="Argument.value">test.vitalityservicing.com</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vslBase" elementType="Argument">
                <stringProp name="Argument.name">vslBase</stringProp>
                <stringProp name="Argument.value">apitest.powerofvitality.com</stringProp>
                <stringProp name="Argument.desc">Local AR</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vslKey" elementType="Argument">
                <stringProp name="Argument.name">vslKey</stringProp>
                <stringProp name="Argument.value">aClxh9e9ByUctXv12GXwdmY9ELsa</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vslSecret" elementType="Argument">
                <stringProp name="Argument.name">vslSecret</stringProp>
                <stringProp name="Argument.value">wAn5gEPDcBhR4e81FwEk3T1xznIa</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="====================APITEST=============" elementType="Argument">
                <stringProp name="Argument.name">====================APITEST=============</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="wso2Base" elementType="Argument">
                <stringProp name="Argument.name">wso2Base</stringProp>
                <stringProp name="Argument.value">apitest.powerofvitality.com</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="wso2Key" elementType="Argument">
                <stringProp name="Argument.name">wso2Key</stringProp>
                <stringProp name="Argument.value">eBvQ7mJE2OCJxJGDw04GDugeZIUa</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="wso2Secret" elementType="Argument">
                <stringProp name="Argument.name">wso2Secret</stringProp>
                <stringProp name="Argument.value">dFLsVZCOYIeMuBrzLRKMgOfxbp0a</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="msWso2Key--" elementType="Argument">
                <stringProp name="Argument.name">msWso2Key--</stringProp>
                <stringProp name="Argument.value">nm0H71_E_ALEHGlFNJRKNcw5jvka</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="msWso2Secret--" elementType="Argument">
                <stringProp name="Argument.name">msWso2Secret--</stringProp>
                <stringProp name="Argument.value">NWQR2GUpffbFfCxC08t1PXJ31VUa</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="msWso2Key" elementType="Argument">
                <stringProp name="Argument.name">msWso2Key</stringProp>
                <stringProp name="Argument.value">eBvQ7mJE2OCJxJGDw04GDugeZIUa</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="msWso2Secret" elementType="Argument">
                <stringProp name="Argument.name">msWso2Secret</stringProp>
                <stringProp name="Argument.value">dFLsVZCOYIeMuBrzLRKMgOfxbp0a</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="=====================Active Calories========" elementType="Argument">
                <stringProp name="Argument.name">=====================Active Calories========</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vdpBasicTenant_2" elementType="Argument">
                <stringProp name="Argument.name">vdpBasicTenant_2</stringProp>
                <stringProp name="Argument.value">Basic cHNmZlRiVlpUTzIyOUF1OXBJTkQzcDhXYlBBYTp6QWZtTWFoNXdfaWpvaUw3RHl4aVg3MDgyTk1h</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vdpBasicTenant_27" elementType="Argument">
                <stringProp name="Argument.name">vdpBasicTenant_27</stringProp>
                <stringProp name="Argument.value">Basic VTBoR2xHZlVrSVBkOHBjRGhGM05sWDEyTHFjYTpkdVpRM1hYWGVwaWhtcDhId3IzcnlyaWtMMzhh</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vdpBasicTenant_32" elementType="Argument">
                <stringProp name="Argument.name">vdpBasicTenant_32</stringProp>
                <stringProp name="Argument.value">Basic NXkxWU53cU0zMUpDTEQ2OU1SeWVXTHNQbFFNYTppY0RhVVN5YzU4TF93QUE2dDV0MmxkZWU5eW9h</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vdpBasicTenant_103" elementType="Argument">
                <stringProp name="Argument.name">vdpBasicTenant_103</stringProp>
                <stringProp name="Argument.value">Basic Rm1EX1F0MnR0N2RKdTU4YzBGZ1RKYlIyWFRvYTo5bkRSZjZ0NHU3UHVQMU1URWxOMTlnQ1hZZE1h</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="=====================Vindicia========" elementType="Argument">
                <stringProp name="Argument.name">=====================Vindicia========</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="soapVindiciaBase" elementType="Argument">
                <stringProp name="Argument.name">soapVindiciaBase</stringProp>
                <stringProp name="Argument.value">soap.prodtest.sj.vindicia.com</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="autobillId--" elementType="Argument">
                <stringProp name="Argument.name">autobillId--</stringProp>
                <stringProp name="Argument.value">14144763311797f931-287c-4d92-9376-a0248c0d3d16</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="soapUsn" elementType="Argument">
                <stringProp name="Argument.name">soapUsn</stringProp>
                <stringProp name="Argument.value">vitalitygroup_soap</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <stringProp name="Argument.desc">US SOAP Login </stringProp>
              </elementProp>
              <elementProp name="soapPswd" elementType="Argument">
                <stringProp name="Argument.name">soapPswd</stringProp>
                <stringProp name="Argument.value">f22ccBLnVkJUptY9h86BCP8PaVMa3HdF</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <stringProp name="Argument.desc">US SOAP PASWD </stringProp>
              </elementProp>
              <elementProp name="soapUsn--" elementType="Argument">
                <stringProp name="Argument.name">soapUsn--</stringProp>
                <stringProp name="Argument.value">vitalitygroupca_soap</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <stringProp name="Argument.desc">CA SOAP Login </stringProp>
              </elementProp>
              <elementProp name="soapPswd--" elementType="Argument">
                <stringProp name="Argument.name">soapPswd--</stringProp>
                <stringProp name="Argument.value">Y4HgOWhogM7nCK3kiDYnlTAQfmhE4gnB</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <stringProp name="Argument.desc">CA SOAP PASWD </stringProp>
              </elementProp>
              <elementProp name="=====================MANGO===========" elementType="Argument">
                <stringProp name="Argument.name">=====================MANGO===========</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="wgBase" elementType="Argument">
                <stringProp name="Argument.name">wgBase</stringProp>
                <stringProp name="Argument.value">m-int1.walgreens.com</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="mangoId" elementType="Argument">
                <stringProp name="Argument.name">mangoId</stringProp>
                <stringProp name="Argument.value">1421797687</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="returningUserLogin" elementType="Argument">
                <stringProp name="Argument.name">returningUserLogin</stringProp>
                <stringProp name="Argument.value">VGeidreylqcnrixwjryscg@mango.com</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="returningUserPassword" elementType="Argument">
                <stringProp name="Argument.name">returningUserPassword</stringProp>
                <stringProp name="Argument.value">Mango2019</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="partnerId" elementType="Argument">
                <stringProp name="Argument.name">partnerId</stringProp>
                <stringProp name="Argument.value">WGConsumer</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="==================CORE SERVICES===========" elementType="Argument">
                <stringProp name="Argument.name">==================CORE SERVICES===========</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="coreServer" elementType="Argument">
                <stringProp name="Argument.name">coreServer</stringProp>
                <stringProp name="Argument.value">vgtvsa.dhna.corp</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="================== AR JSON ===========" elementType="Argument">
                <stringProp name="Argument.name">================== AR JSON ===========</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="supplierId" elementType="Argument">
                <stringProp name="Argument.name">supplierId</stringProp>
                <stringProp name="Argument.value">1414480614</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="b2Wso2Key" elementType="Argument">
                <stringProp name="Argument.name">b2Wso2Key</stringProp>
                <stringProp name="Argument.value">tCBVf4qsMAnSuaURwikl7JSfOQEa</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="b2Wso2Secret" elementType="Argument">
                <stringProp name="Argument.name">b2Wso2Secret</stringProp>
                <stringProp name="Argument.value">vKjJEGKPnVg7b07yk0y9uZHyt7Ia</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Var: TIBCO" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="===================== TIBCO ========" elementType="Argument">
                <stringProp name="Argument.name">===================== TIBCO ========</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="tibcoBase" elementType="Argument">
                <stringProp name="Argument.name">tibcoBase</stringProp>
                <stringProp name="Argument.value">vgttibco01.discsrv.co.za</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="awSupplierId" elementType="Argument">
                <stringProp name="Argument.name">awSupplierId</stringProp>
                <stringProp name="Argument.value">1414480614</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="tibcoGDLQueue" elementType="Argument">
                <stringProp name="Argument.name">tibcoGDLQueue</stringProp>
                <stringProp name="Argument.value">TVG.US.GDL.TVG.WORKOUT.TEST.T</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Var: VDP" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="vdp.base.url" elementType="Argument">
                <stringProp name="Argument.name">vdp.base.url</stringProp>
                <stringProp name="Argument.value">test.vitalityservicing.com</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="===========================V2=============================" elementType="Argument">
                <stringProp name="Argument.name">===========================V2=============================</stringProp>
                <stringProp name="Argument.value">===========================V2=============================</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vdp.token.path.v2" elementType="Argument">
                <stringProp name="Argument.name">vdp.token.path.v2</stringProp>
                <stringProp name="Argument.value">vdp/api/token</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vdp.source.type.v2" elementType="Argument">
                <stringProp name="Argument.name">vdp.source.type.v2</stringProp>
                <stringProp name="Argument.value">test.vitality.developer.com</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="gdl.path.v2" elementType="Argument">
                <stringProp name="Argument.name">gdl.path.v2</stringProp>
                <stringProp name="Argument.value">vdp/api/vdp-api/1.0/upload/tenant</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vdp.client.token.v2.2" elementType="Argument">
                <stringProp name="Argument.name">vdp.client.token.v2.2</stringProp>
                <stringProp name="Argument.value">cHNmZlRiVlpUTzIyOUF1OXBJTkQzcDhXYlBBYTp6QWZtTWFoNXdfaWpvaUw3RHl4aVg3MDgyTk1h</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vdp.client.token.v2.27" elementType="Argument">
                <stringProp name="Argument.name">vdp.client.token.v2.27</stringProp>
                <stringProp name="Argument.value">VTBoR2xHZlVrSVBkOHBjRGhGM05sWDEyTHFjYTpkdVpRM1hYWGVwaWhtcDhId3IzcnlyaWtMMzhh</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vdp.client.token.v2.30" elementType="Argument">
                <stringProp name="Argument.name">vdp.client.token.v2.30</stringProp>
                <stringProp name="Argument.value">OEdpMjBaZlFIVERVbmJsZWRVN1FxRTB6UXF3YTpCVDdtTEVVbEVneXhMeVUwd0tmYkh6eEQyTzRh</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vdp.client.token.v2.32" elementType="Argument">
                <stringProp name="Argument.name">vdp.client.token.v2.32</stringProp>
                <stringProp name="Argument.value">NXkxWU53cU0zMUpDTEQ2OU1SeWVXTHNQbFFNYTppY0RhVVN5YzU4TF93QUE2dDV0MmxkZWU5eW9h</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vdp.client.token.v2.37" elementType="Argument">
                <stringProp name="Argument.name">vdp.client.token.v2.37</stringProp>
                <stringProp name="Argument.value">T01IYV8zVTNQQmFudGZtSzRFNFhwOGRZNkpVYTpUeWk5dXVibUkwa0hvZlc3dkkxTXJHSnZnSk1h</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vdp.client.token.v2.38" elementType="Argument">
                <stringProp name="Argument.name">vdp.client.token.v2.38</stringProp>
                <stringProp name="Argument.value">bGZUNE5sTURhMTA5RUlxMlZXbmRwQkxLZTZFYTpPdmtZYmpSZ1VFR0hFS0h2NEtFTUlHV2lLYk1h</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vdp.client.token.v2.45" elementType="Argument">
                <stringProp name="Argument.name">vdp.client.token.v2.45</stringProp>
                <stringProp name="Argument.value">bjJfZlFScHlMODZ4TDdmaFlQUVE4ekdncFlJYTpVQ3BCdE8ydFZiQzNYUGVGeTdCZTBob2d5Wmdh</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vdp.client.token.v2.46" elementType="Argument">
                <stringProp name="Argument.name">vdp.client.token.v2.46</stringProp>
                <stringProp name="Argument.value">Y0FmZWxXNkhHMTVJdmJtWEpMRWJYZHZVZ01JYTpmV1gzNkFDUXhwRlhQMlAzY0tsSzNSZUZnUE1h</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vdp.client.token.v2.103" elementType="Argument">
                <stringProp name="Argument.name">vdp.client.token.v2.103</stringProp>
                <stringProp name="Argument.value">Rm1EX1F0MnR0N2RKdTU4YzBGZ1RKYlIyWFRvYTo5bkRSZjZ0NHU3UHVQMU1URWxOMTlnQ1hZZE1h</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">===========================V1=============================</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Var: VAP" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="vap.base" elementType="Argument">
                <stringProp name="Argument.name">vap.base</stringProp>
                <stringProp name="Argument.value">vgtweblogic04.discsrv.co.za</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <stringProp name="Argument.desc">no appache</stringProp>
              </elementProp>
              <elementProp name="vap.port" elementType="Argument">
                <stringProp name="Argument.name">vap.port</stringProp>
                <stringProp name="Argument.value">7002</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Var: CSV" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="active.users--" elementType="Argument">
                <stringProp name="Argument.name">active.users--</stringProp>
                <stringProp name="Argument.value">EVE_TESTING_all_Active</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="active.users" elementType="Argument">
                <stringProp name="Argument.name">active.users</stringProp>
                <stringProp name="Argument.value">OMAR_5_4_3_2_All_Active_TEST</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="STAGE" enabled="false"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Var: STAGE" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="enviroment" elementType="Argument">
                <stringProp name="Argument.name">enviroment</stringProp>
                <stringProp name="Argument.value">STAGE</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="====================GENERAL============" elementType="Argument">
                <stringProp name="Argument.name">====================GENERAL============</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="apolloId" elementType="Argument">
                <stringProp name="Argument.name">apolloId</stringProp>
                <stringProp name="Argument.value">IY90WQ3V203WJCIOHTKX</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vitalityIdForCG" elementType="Argument">
                <stringProp name="Argument.name">vitalityIdForCG</stringProp>
                <stringProp name="Argument.value">1428262057</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="apolloIdForCG" elementType="Argument">
                <stringProp name="Argument.name">apolloIdForCG</stringProp>
                <stringProp name="Argument.value">IY90WQ3V203WJCIOHTKX</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="povBase" elementType="Argument">
                <stringProp name="Argument.name">povBase</stringProp>
                <stringProp name="Argument.value">qa.powerofvitality.com</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vapBase" elementType="Argument">
                <stringProp name="Argument.name">vapBase</stringProp>
                <stringProp name="Argument.value">vgqvap.dhna.corp</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vapBase--" elementType="Argument">
                <stringProp name="Argument.name">vapBase--</stringProp>
                <stringProp name="Argument.value">vgtstg01-qa.dhna.corp</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vapPort" elementType="Argument">
                <stringProp name="Argument.name">vapPort</stringProp>
                <stringProp name="Argument.value">7007</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ssoBase" elementType="Argument">
                <stringProp name="Argument.name">ssoBase</stringProp>
                <stringProp name="Argument.value">qa.powerofvitality.com</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="binLocation" elementType="Argument">
                <stringProp name="Argument.name">binLocation</stringProp>
                <stringProp name="Argument.value">/Users/DNesterov/Documents/Apollo/AetnaLoginCurl</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="aetnaTokenBash" elementType="Argument">
                <stringProp name="Argument.name">aetnaTokenBash</stringProp>
                <stringProp name="Argument.value">pre_prod_curl_EYW.sh</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="surveyId" elementType="Argument">
                <stringProp name="Argument.name">surveyId</stringProp>
                <stringProp name="Argument.value">4576704444</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="====================ZUUL==============" elementType="Argument">
                <stringProp name="Argument.name">====================ZUUL==============</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="zuulTvgBase" elementType="Argument">
                <stringProp name="Argument.name">zuulTvgBase</stringProp>
                <stringProp name="Argument.value">zuul-noauth.test.tvgose.discsrv.co.za</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="zuulBase" elementType="Argument">
                <stringProp name="Argument.name">zuulBase</stringProp>
                <stringProp name="Argument.value">zuul.tvg.test.tvgose.discsrv.co.za</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="zuulRteBase" elementType="Argument">
                <stringProp name="Argument.name">zuulRteBase</stringProp>
                <stringProp name="Argument.value">zuul.tvg.qa.tvgose.discsrv.co.za</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="zuulRtePath" elementType="Argument">
                <stringProp name="Argument.name">zuulRtePath</stringProp>
                <stringProp name="Argument.value">vitality-enrolment-service-service-qa-1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="zuulRteNode01" elementType="Argument">
                <stringProp name="Argument.name">zuulRteNode01</stringProp>
                <stringProp name="Argument.value">zuul.tvg.qa01.tvgose.discsrv.co.za</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="zuulRteNode02" elementType="Argument">
                <stringProp name="Argument.name">zuulRteNode02</stringProp>
                <stringProp name="Argument.value">zuul.tvg.qa02.tvgose.discsrv.co.za</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="==================Mobile Services==========" elementType="Argument">
                <stringProp name="Argument.name">==================Mobile Services==========</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="msBase--" elementType="Argument">
                <stringProp name="Argument.name">msBase--</stringProp>
                <stringProp name="Argument.value">vgqwebservice.dhna.corp</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <stringProp name="Argument.desc">LVS load balancer</stringProp>
              </elementProp>
              <elementProp name="msBase" elementType="Argument">
                <stringProp name="Argument.name">msBase</stringProp>
                <stringProp name="Argument.value">integrationqa.powerofvitality.com</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="=====================VSL==============" elementType="Argument">
                <stringProp name="Argument.name">=====================VSL==============</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vslBase" elementType="Argument">
                <stringProp name="Argument.name">vslBase</stringProp>
                <stringProp name="Argument.value">qa.vitalityservicing.com</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vslBase--" elementType="Argument">
                <stringProp name="Argument.name">vslBase--</stringProp>
                <stringProp name="Argument.value">apiqa.powerofvitality.com</stringProp>
                <stringProp name="Argument.desc">Local AR- apiqa</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vslBearerToken--" elementType="Argument">
                <stringProp name="Argument.name">vslBearerToken--</stringProp>
                <stringProp name="Argument.value">Bearer 32f9325d-a25b-33c7-94dc-655fdf51750b</stringProp>
                <stringProp name="Argument.desc">Local AR - apiqa</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vslKey-" elementType="Argument">
                <stringProp name="Argument.name">vslKey-</stringProp>
                <stringProp name="Argument.value">9eHPZfFMA2w6s0yRNCEc9f40raga</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vslSecret-" elementType="Argument">
                <stringProp name="Argument.name">vslSecret-</stringProp>
                <stringProp name="Argument.value">rFIlBQct2ZRqS549_PaXitgd0sIa</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vslKey" elementType="Argument">
                <stringProp name="Argument.name">vslKey</stringProp>
                <stringProp name="Argument.value">Bridge2Secret</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vslSecret" elementType="Argument">
                <stringProp name="Argument.name">vslSecret</stringProp>
                <stringProp name="Argument.value">6541a06c9f7f55cca3141768df8a403c</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="=====================APIQA.POV==========" elementType="Argument">
                <stringProp name="Argument.name">=====================APIQA.POV==========</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="wso2Base" elementType="Argument">
                <stringProp name="Argument.name">wso2Base</stringProp>
                <stringProp name="Argument.value">apiqa.powerofvitality.com</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="wso2Key" elementType="Argument">
                <stringProp name="Argument.name">wso2Key</stringProp>
                <stringProp name="Argument.value">8uPOF9FINVj2Z7bWn5nnBiMVcX8a</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="wso2Secret" elementType="Argument">
                <stringProp name="Argument.name">wso2Secret</stringProp>
                <stringProp name="Argument.value">AzlTjYn3xsEeS7hKjf6uS5dTunsa</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="msWso2Key" elementType="Argument">
                <stringProp name="Argument.name">msWso2Key</stringProp>
                <stringProp name="Argument.value">8uPOF9FINVj2Z7bWn5nnBiMVcX8a</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="msWso2Secret" elementType="Argument">
                <stringProp name="Argument.name">msWso2Secret</stringProp>
                <stringProp name="Argument.value">AzlTjYn3xsEeS7hKjf6uS5dTunsa</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="===================== TIBCO =========" elementType="Argument">
                <stringProp name="Argument.name">===================== TIBCO =========</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="tibcoBase" elementType="Argument">
                <stringProp name="Argument.name">tibcoBase</stringProp>
                <stringProp name="Argument.value">vgqtibco.discsrv.co.za</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="awSupplierId" elementType="Argument">
                <stringProp name="Argument.name">awSupplierId</stringProp>
                <stringProp name="Argument.value">1414480614</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="tibcoGDLQueue" elementType="Argument">
                <stringProp name="Argument.name">tibcoGDLQueue</stringProp>
                <stringProp name="Argument.value">TVG.US.GDL.TVG.WORKOUT.QA.T</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="=====================Vindicia===========" elementType="Argument">
                <stringProp name="Argument.name">=====================Vindicia===========</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="soapVindiciaBase" elementType="Argument">
                <stringProp name="Argument.name">soapVindiciaBase</stringProp>
                <stringProp name="Argument.value">soap.prodtest.sj.vindicia.com</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="soapUsn" elementType="Argument">
                <stringProp name="Argument.name">soapUsn</stringProp>
                <stringProp name="Argument.value">VitalityGroup18US_soap</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <stringProp name="Argument.desc">US SOAP Login </stringProp>
              </elementProp>
              <elementProp name="soapPswd" elementType="Argument">
                <stringProp name="Argument.name">soapPswd</stringProp>
                <stringProp name="Argument.value">pOMfb5q0Xq9VGzFaDrvF0wzYolmJNUPF</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <stringProp name="Argument.desc">US SOAP PASWD </stringProp>
              </elementProp>
              <elementProp name="soapUsn" elementType="Argument">
                <stringProp name="Argument.name">soapUsn</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.desc">CA SOAP Login </stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="soapPswd" elementType="Argument">
                <stringProp name="Argument.name">soapPswd</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.desc">CA SOAP PASWD </stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="autobillId" elementType="Argument">
                <stringProp name="Argument.name">autobillId</stringProp>
                <stringProp name="Argument.value">14144763311797f931-287c-4d92-9376-a0248c0d3d16</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="=====================MANGO===========" elementType="Argument">
                <stringProp name="Argument.name">=====================MANGO===========</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="wgBase" elementType="Argument">
                <stringProp name="Argument.name">wgBase</stringProp>
                <stringProp name="Argument.value">m-qa2.walgreens.com</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="mangoId--" elementType="Argument">
                <stringProp name="Argument.name">mangoId--</stringProp>
                <stringProp name="Argument.value">1431347721</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="returningUserLogin" elementType="Argument">
                <stringProp name="Argument.name">returningUserLogin</stringProp>
                <stringProp name="Argument.value">VGpjwhtjmkfkdjchisuudm@mango.com</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="returningUserPassword" elementType="Argument">
                <stringProp name="Argument.name">returningUserPassword</stringProp>
                <stringProp name="Argument.value">Mango2019</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="jwtToken--" elementType="Argument">
                <stringProp name="Argument.name">jwtToken--</stringProp>
                <stringProp name="Argument.value">eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE1NjE2MTAxOTgsImV4cCI6MTU2MTYxMzc5OCwiaXNzIjoiV0FMR1JFRU5TIiwic3ViIjoiMTQzMTM0NzcyMSJ9.F492HcqN0xWgrg4StKv9_zI7RVW-0eb1OeZ2aBC3_KO3qzaz9mhuRrmVx9-hq_bo5X6o3RozaD5p6LfUgiqIM-MrkOp9HuV9M9OzRBUXvhRpRE_AubyW8gmyGbCXVsLr9a_neeUfoQfpF7Ijbgyd74s8CawC3SED0r9mQhs-oZQq3pq0WKoJd5VcIF784FPR0JZtPOl-soHj049G-wu52jJ5JyNaq9mW4USvp91z1FAbXcufWnzBq29Pv369I67CNQ0uX9lZ7ck3c6M3Ab-6Z6jNuKbCyiQmP5xPnj4N2RWQ6aUkD5b3OHYPYn62SnCpilvJRXgl-M2Vnwz80YDnBA</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="mangoEmployerId" elementType="Argument">
                <stringProp name="Argument.name">mangoEmployerId</stringProp>
                <stringProp name="Argument.value">1429223686</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="partnerId" elementType="Argument">
                <stringProp name="Argument.name">partnerId</stringProp>
                <stringProp name="Argument.value">WGConsumer</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="==================CORE SERVICES===========" elementType="Argument">
                <stringProp name="Argument.name">==================CORE SERVICES===========</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="coreServer" elementType="Argument">
                <stringProp name="Argument.name">coreServer</stringProp>
                <stringProp name="Argument.value">qavitalitycoreus.dhna.corp</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="===================== VERIZON ===========" elementType="Argument">
                <stringProp name="Argument.name">===================== VERIZON ===========</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vrznPartnerId" elementType="Argument">
                <stringProp name="Argument.name">vrznPartnerId</stringProp>
                <stringProp name="Argument.value">VERIZON</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="================== AR JSON ===========" elementType="Argument">
                <stringProp name="Argument.name">================== AR JSON ===========</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="supplierId" elementType="Argument">
                <stringProp name="Argument.name">supplierId</stringProp>
                <stringProp name="Argument.value">1414480614</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Var: Employers" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="==================APOLLO EMPLOYER===============" elementType="Argument">
                <stringProp name="Argument.name">==================APOLLO EMPLOYER===============</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="employerIdFull" elementType="Argument">
                <stringProp name="Argument.name">employerIdFull</stringProp>
                <stringProp name="Argument.value">1427256035</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="apolloFull" elementType="Argument">
                <stringProp name="Argument.name">apolloFull</stringProp>
                <stringProp name="Argument.value">APOLLO FULL TEST</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="apolloSelf" elementType="Argument">
                <stringProp name="Argument.name">apolloSelf</stringProp>
                <stringProp name="Argument.value">APOLLO SELF TEST</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="==================VOL EMPLOYER=================" elementType="Argument">
                <stringProp name="Argument.name">==================VOL EMPLOYER=================</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="VOL_EMPLOYER" elementType="Argument">
                <stringProp name="Argument.name">VOL_EMPLOYER</stringProp>
                <stringProp name="Argument.value">VITALITY ONE FOR LEGACY</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="volEmployer" elementType="Argument">
                <stringProp name="Argument.name">volEmployer</stringProp>
                <stringProp name="Argument.value">1431390341</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="==================ELEVATE EMPLOYER=================" elementType="Argument">
                <stringProp name="Argument.name">==================ELEVATE EMPLOYER=================</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="elevate.employer.id" elementType="Argument">
                <stringProp name="Argument.name">elevate.employer.id</stringProp>
                <stringProp name="Argument.value">1424927299</stringProp>
                <stringProp name="Argument.desc">Eve Dummy Beta</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Var: Users" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="==================APOLLO USERS=================" elementType="Argument">
                <stringProp name="Argument.name">==================APOLLO USERS=================</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="apolloID_1" elementType="Argument">
                <stringProp name="Argument.name">apolloID_1</stringProp>
                <stringProp name="Argument.value">1429097882</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="apolloID_2" elementType="Argument">
                <stringProp name="Argument.name">apolloID_2</stringProp>
                <stringProp name="Argument.value">1428262057</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="apolloID_3" elementType="Argument">
                <stringProp name="Argument.name">apolloID_3</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="apolloID_4" elementType="Argument">
                <stringProp name="Argument.name">apolloID_4</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="apolloID_5" elementType="Argument">
                <stringProp name="Argument.name">apolloID_5</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="==================VOL USERS===================" elementType="Argument">
                <stringProp name="Argument.name">==================VOL USERS===================</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vol.id.1" elementType="Argument">
                <stringProp name="Argument.name">vol.id.1</stringProp>
                <stringProp name="Argument.value">1431860814</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vol.id.2" elementType="Argument">
                <stringProp name="Argument.name">vol.id.2</stringProp>
                <stringProp name="Argument.value">1431415858</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <stringProp name="Argument.desc">Mainly used for ANDROID data upload</stringProp>
              </elementProp>
              <elementProp name="==================SAPPHIRE USERS================" elementType="Argument">
                <stringProp name="Argument.name">==================SAPPHIRE USERS================</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="sapphireID_1" elementType="Argument">
                <stringProp name="Argument.name">sapphireID_1</stringProp>
                <stringProp name="Argument.value">1429092537</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="sapphireID_2" elementType="Argument">
                <stringProp name="Argument.name">sapphireID_2</stringProp>
                <stringProp name="Argument.value">1429092545</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="sapphireID_3" elementType="Argument">
                <stringProp name="Argument.name">sapphireID_3</stringProp>
                <stringProp name="Argument.value">1429092552</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="sapUserWithGoals_1" elementType="Argument">
                <stringProp name="Argument.name">sapUserWithGoals_1</stringProp>
                <stringProp name="Argument.value">1431299500</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="==================ELEVATE USERS=================" elementType="Argument">
                <stringProp name="Argument.name">==================ELEVATE USERS=================</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="elevateID_1" elementType="Argument">
                <stringProp name="Argument.name">elevateID_1</stringProp>
                <stringProp name="Argument.value">1424935342</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="elevate.id.1" elementType="Argument">
                <stringProp name="Argument.name">elevate.id.1</stringProp>
                <stringProp name="Argument.value">1424935078</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="elevate.id.2" elementType="Argument">
                <stringProp name="Argument.name">elevate.id.2</stringProp>
                <stringProp name="Argument.value">1424935086</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="elevate.id.3" elementType="Argument">
                <stringProp name="Argument.name">elevate.id.3</stringProp>
                <stringProp name="Argument.value">1424935094</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="elevate.id.4" elementType="Argument">
                <stringProp name="Argument.name">elevate.id.4</stringProp>
                <stringProp name="Argument.value">1424935102</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="elevate.id.5" elementType="Argument">
                <stringProp name="Argument.name">elevate.id.5</stringProp>
                <stringProp name="Argument.value">1424935110</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="==================MANULIFE USERS================" elementType="Argument">
                <stringProp name="Argument.name">==================MANULIFE USERS================</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="manulifeID_1" elementType="Argument">
                <stringProp name="Argument.name">manulifeID_1</stringProp>
                <stringProp name="Argument.value">1425606603</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="==================VERIZON USERS=================" elementType="Argument">
                <stringProp name="Argument.name">==================VERIZON USERS=================</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vrzn.id.1" elementType="Argument">
                <stringProp name="Argument.name">vrzn.id.1</stringProp>
                <stringProp name="Argument.value">1432423158</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vrzn.id.2" elementType="Argument">
                <stringProp name="Argument.name">vrzn.id.2</stringProp>
                <stringProp name="Argument.value">1431405362</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="==================CRUNCH USERS=================" elementType="Argument">
                <stringProp name="Argument.name">==================CRUNCH USERS=================</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="crunchID_1" elementType="Argument">
                <stringProp name="Argument.name">crunchID_1</stringProp>
                <stringProp name="Argument.value">1432505384</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="==================BIW USERS=================" elementType="Argument">
                <stringProp name="Argument.name">==================BIW USERS=================</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="biw.id.1" elementType="Argument">
                <stringProp name="Argument.name">biw.id.1</stringProp>
                <stringProp name="Argument.value">1432502639</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="biw.id.2" elementType="Argument">
                <stringProp name="Argument.name">biw.id.2</stringProp>
                <stringProp name="Argument.value">1432502647</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <stringProp name="Argument.desc">Mainly used for ANDROID data upload</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Var: DHDB" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="arDbHost" elementType="Argument">
                <stringProp name="Argument.name">arDbHost</stringProp>
                <stringProp name="Argument.value">vgtdb01</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="dbHost" elementType="Argument">
                <stringProp name="Argument.name">dbHost</stringProp>
                <stringProp name="Argument.value">vgqdb01</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="dbPort" elementType="Argument">
                <stringProp name="Argument.name">dbPort</stringProp>
                <stringProp name="Argument.value">1532</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="dbUserName" elementType="Argument">
                <stringProp name="Argument.name">dbUserName</stringProp>
                <stringProp name="Argument.value">dNesterovq</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="dbPassword" elementType="Argument">
                <stringProp name="Argument.name">dbPassword</stringProp>
                <stringProp name="Argument.value">eRoV#0929</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="member_table" elementType="Argument">
                <stringProp name="Argument.name">member_table</stringProp>
                <stringProp name="Argument.value">VSA_ADMIN.A_MEMBER_VIEW</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="volBranch" elementType="Argument">
                <stringProp name="Argument.name">volBranch</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Var: Zuul Configs" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="zuulRteNode01" elementType="Argument">
                <stringProp name="Argument.name">zuulRteNode01</stringProp>
                <stringProp name="Argument.value">zuul.tvg.qa01.tvgose.discsrv.co.za</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="zuulVgBase" elementType="Argument">
                <stringProp name="Argument.name">zuulVgBase</stringProp>
                <stringProp name="Argument.value">zuul-noauth.test.tvgose.discsrv.co.za</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="zuulBase" elementType="Argument">
                <stringProp name="Argument.name">zuulBase</stringProp>
                <stringProp name="Argument.value">zuul.tvg.qa.tvgose.discsrv.co.za</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Var: VDP" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="vdp.base.url" elementType="Argument">
                <stringProp name="Argument.name">vdp.base.url</stringProp>
                <stringProp name="Argument.value">qa.vitalityservicing.com</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">===========================V2=============================</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vdp.token.path.v2" elementType="Argument">
                <stringProp name="Argument.name">vdp.token.path.v2</stringProp>
                <stringProp name="Argument.value">vdp/api/token</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vdp.source.type.v2" elementType="Argument">
                <stringProp name="Argument.name">vdp.source.type.v2</stringProp>
                <stringProp name="Argument.value">qa.vitality.developer.com</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="gdl.path.v2" elementType="Argument">
                <stringProp name="Argument.name">gdl.path.v2</stringProp>
                <stringProp name="Argument.value">vdp/api/vdp-api/1.0/upload/tenant</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vdp.client.token.v2.2" elementType="Argument">
                <stringProp name="Argument.name">vdp.client.token.v2.2</stringProp>
                <stringProp name="Argument.value">SHpTQ0RNaGZ4QzA0NFZDTXQ1VEtLM3BJMFFVYTpRalBCTUhsNk9LeVFZVTdMNlA2NGNOODR6Q2dh</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vdp.client.token.v2.27" elementType="Argument">
                <stringProp name="Argument.name">vdp.client.token.v2.27</stringProp>
                <stringProp name="Argument.value">RmtTOEpiREhGVl84UnhuMllHbUx1M24wMndzYTpUTXhHM29iT19jbFUxcjFNQ0E4cUhXU2o3MThh</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vdp.client.token.v2.30" elementType="Argument">
                <stringProp name="Argument.name">vdp.client.token.v2.30</stringProp>
                <stringProp name="Argument.value">V2R1NjhpS0ZWQmFIYVAyZ0ZBNDJoVHBjU1lFYTptNGVGdW1fQUs3Ynd2c245WjJZVkY0UkJINkFh</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vdp.client.token.v2.32" elementType="Argument">
                <stringProp name="Argument.name">vdp.client.token.v2.32</stringProp>
                <stringProp name="Argument.value">U0FzZkRlS0hLQ3lKbG1kb2Y4WGxORExRdFFRYTpSemk4dDl0b2ZhVFlCbExBcWFZempzc1pwbFVh</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vdp.client.token.v2.37" elementType="Argument">
                <stringProp name="Argument.name">vdp.client.token.v2.37</stringProp>
                <stringProp name="Argument.value">WWViSlJBVlpHTVBQaXNvVDRyVzVlZEl4UnVjYTpfeUVGSlF6WXJPUllfYVF6T2NFSjJBdzRRS01h</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vdp.client.token.v2.38" elementType="Argument">
                <stringProp name="Argument.name">vdp.client.token.v2.38</stringProp>
                <stringProp name="Argument.value">eG1wS01mWVZfYnVpTmdIU2VNdXlhSUxmZWRnYTpzVGtwcmZiUmJZVnVjYl9lajk0R2JCMnJGUXdh</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vdp.client.token.v2.45" elementType="Argument">
                <stringProp name="Argument.name">vdp.client.token.v2.45</stringProp>
                <stringProp name="Argument.value">NE9EV29TUWozZlJpc1BzTDVQWkJidHVMRmZnYTpRSUNEb2tVWTN0ckZLWWR2bVViQ0JpdEN1amdh</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vdp.client.token.v2.46" elementType="Argument">
                <stringProp name="Argument.name">vdp.client.token.v2.46</stringProp>
                <stringProp name="Argument.value">TTlYQWhlTmY3OVNjcndVWVJpcU9Oc2lLcTk0YTpqQnJNZWZDcjZtU1hLWG9lVF8xUk5mZzlrZ3dh</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vdp.client.token.v2.103" elementType="Argument">
                <stringProp name="Argument.name">vdp.client.token.v2.103</stringProp>
                <stringProp name="Argument.value">MFQyaXJnYXNETkNCZGJqMHhuSGN3bVFxSEJRYTo3MnE2WmhhdlpFaHlKY29jZFE1YmVXZm5iczRh</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">===========================V1=============================</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Var: VAP" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="vap.base" elementType="Argument">
                <stringProp name="Argument.name">vap.base</stringProp>
                <stringProp name="Argument.value">vgqvap.dhna.corp</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vap.port" elementType="Argument">
                <stringProp name="Argument.name">vap.port</stringProp>
                <stringProp name="Argument.value">7007</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Var: CSV" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="active.users" elementType="Argument">
                <stringProp name="Argument.name">active.users</stringProp>
                <stringProp name="Argument.value">Vitality_Group</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <stringProp name="Argument.desc">no appache</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="PROD" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Var: PROD" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="enviroment" elementType="Argument">
                <stringProp name="Argument.name">enviroment</stringProp>
                <stringProp name="Argument.value">PROD</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="====================GENERAL============" elementType="Argument">
                <stringProp name="Argument.name">====================GENERAL============</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vitalityIdForCG" elementType="Argument">
                <stringProp name="Argument.name">vitalityIdForCG</stringProp>
                <stringProp name="Argument.value">1431787777</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="apolloIdForCG" elementType="Argument">
                <stringProp name="Argument.name">apolloIdForCG</stringProp>
                <stringProp name="Argument.value">171090057</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="povBase" elementType="Argument">
                <stringProp name="Argument.name">povBase</stringProp>
                <stringProp name="Argument.value">www.powerofvitality.com</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vapBase--" elementType="Argument">
                <stringProp name="Argument.name">vapBase--</stringProp>
                <stringProp name="Argument.value">vgpvap.dhna.corp</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vapBase" elementType="Argument">
                <stringProp name="Argument.name">vapBase</stringProp>
                <stringProp name="Argument.value">vgpvap.discsrv.co.za</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vapPort" elementType="Argument">
                <stringProp name="Argument.name">vapPort</stringProp>
                <stringProp name="Argument.value">7007</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="ssoBase" elementType="Argument">
                <stringProp name="Argument.name">ssoBase</stringProp>
                <stringProp name="Argument.value">www.powerofvitality.com</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="binLocation" elementType="Argument">
                <stringProp name="Argument.name">binLocation</stringProp>
                <stringProp name="Argument.value">/Users/DNesterov/apache-jmeter-4.0/bin</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="aetnaTokenBash" elementType="Argument">
                <stringProp name="Argument.name">aetnaTokenBash</stringProp>
                <stringProp name="Argument.value">prod_curl_EYW.sh</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="surveyId" elementType="Argument">
                <stringProp name="Argument.name">surveyId</stringProp>
                <stringProp name="Argument.value">15578680919</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="====================ZUUL===============" elementType="Argument">
                <stringProp name="Argument.name">====================ZUUL===============</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="zuulBase" elementType="Argument">
                <stringProp name="Argument.name">zuulBase</stringProp>
                <stringProp name="Argument.value">zuul.tvg.tvgose.discsrv.co.za</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="zuulRteBase" elementType="Argument">
                <stringProp name="Argument.name">zuulRteBase</stringProp>
                <stringProp name="Argument.value">zuul.tvg.tvgose.discsrv.co.za</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="zuulRteNode01" elementType="Argument">
                <stringProp name="Argument.name">zuulRteNode01</stringProp>
                <stringProp name="Argument.value">zuul.tvg.prod01.tvgose.discsrv.co.za</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="zuulRteNode02" elementType="Argument">
                <stringProp name="Argument.name">zuulRteNode02</stringProp>
                <stringProp name="Argument.value">zuul.tvg.prod02.tvgose.discsrv.co.za</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="=================Mobile Servises============" elementType="Argument">
                <stringProp name="Argument.name">=================Mobile Servises============</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="msBase" elementType="Argument">
                <stringProp name="Argument.name">msBase</stringProp>
                <stringProp name="Argument.value">integration.powerofvitality.com</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="msBase-" elementType="Argument">
                <stringProp name="Argument.name">msBase-</stringProp>
                <stringProp name="Argument.value">172.26.11.151</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="====================VSL================" elementType="Argument">
                <stringProp name="Argument.name">====================VSL================</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vslBase" elementType="Argument">
                <stringProp name="Argument.name">vslBase</stringProp>
                <stringProp name="Argument.value">www.vitalityservicing.com</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vslServiceApi" elementType="Argument">
                <stringProp name="Argument.name">vslServiceApi</stringProp>
                <stringProp name="Argument.value">www.vitalityservicing.com/serviceapi</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vslBearerToken--" elementType="Argument">
                <stringProp name="Argument.name">vslBearerToken--</stringProp>
                <stringProp name="Argument.value">Bearer d643ee40-5d08-32b2-97e6-48dce3e80f8b</stringProp>
                <stringProp name="Argument.desc">John Local api.pov</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vslBase--" elementType="Argument">
                <stringProp name="Argument.name">vslBase--</stringProp>
                <stringProp name="Argument.value">api.powerofvitality.com</stringProp>
                <stringProp name="Argument.desc">John Local api.pov</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vslKey" elementType="Argument">
                <stringProp name="Argument.name">vslKey</stringProp>
                <stringProp name="Argument.value">C0NvvGaGebDyv3HNCDork3gSFCAa</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vslSecret" elementType="Argument">
                <stringProp name="Argument.name">vslSecret</stringProp>
                <stringProp name="Argument.value">fiFoJWIrOgR6pRdaKbRdE4gTt3ka</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="====================API.POV=============" elementType="Argument">
                <stringProp name="Argument.name">====================API.POV=============</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="wso2Base" elementType="Argument">
                <stringProp name="Argument.name">wso2Base</stringProp>
                <stringProp name="Argument.value">api.powerofvitality.com</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="wso2Key" elementType="Argument">
                <stringProp name="Argument.name">wso2Key</stringProp>
                <stringProp name="Argument.value">ldpbiIxjsYRRuWEvcyD0kcDTKK8a</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="wso2Secret" elementType="Argument">
                <stringProp name="Argument.name">wso2Secret</stringProp>
                <stringProp name="Argument.value">8Kc_SkBNWiK1TGWmUhOLMfYxMw0a</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="msWso2Key" elementType="Argument">
                <stringProp name="Argument.name">msWso2Key</stringProp>
                <stringProp name="Argument.value">51MYDUeP_0jRR7O9bhjmbFNppoMa</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="msWso2Secret" elementType="Argument">
                <stringProp name="Argument.name">msWso2Secret</stringProp>
                <stringProp name="Argument.value">K28gOwYEcfCFcQJKjlJ77YnDGoUa</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="=====================LOCAL TIBCO========" elementType="Argument">
                <stringProp name="Argument.name">=====================LOCAL TIBCO========</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="tibcoBase" elementType="Argument">
                <stringProp name="Argument.name">tibcoBase</stringProp>
                <stringProp name="Argument.value">vgptibco.discsrv.co.za</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="awSupplierId" elementType="Argument">
                <stringProp name="Argument.name">awSupplierId</stringProp>
                <stringProp name="Argument.value">1423838950</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="=====================Vindicia===========" elementType="Argument">
                <stringProp name="Argument.name">=====================Vindicia===========</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="soapVindiciaBase" elementType="Argument">
                <stringProp name="Argument.name">soapVindiciaBase</stringProp>
                <stringProp name="Argument.value">soap.vindicia.com</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="soapUsn" elementType="Argument">
                <stringProp name="Argument.name">soapUsn</stringProp>
                <stringProp name="Argument.value">vitalitygroup_soap</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="soapPswd" elementType="Argument">
                <stringProp name="Argument.name">soapPswd</stringProp>
                <stringProp name="Argument.value">pnCSpVW10ktC6Ux9TwgYtcLZ4rdS8BSQ</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vindicia.soap.ca.login" elementType="Argument">
                <stringProp name="Argument.name">vindicia.soap.ca.login</stringProp>
                <stringProp name="Argument.value">vitalitygroupca_soap</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vindicia.soap.ca.password" elementType="Argument">
                <stringProp name="Argument.name">vindicia.soap.ca.password</stringProp>
                <stringProp name="Argument.value">PBTM13pXI5Miyql0mZq3s1OQEEGglMah</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="autobillId" elementType="Argument">
                <stringProp name="Argument.name">autobillId</stringProp>
                <stringProp name="Argument.value">143178778500c052f0-fb67-4bfa-b57a-a504a03c38a6</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="==================CORE SERVICES===========" elementType="Argument">
                <stringProp name="Argument.name">==================CORE SERVICES===========</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="coreServer" elementType="Argument">
                <stringProp name="Argument.name">coreServer</stringProp>
                <stringProp name="Argument.value">vitalitycoreus.dhna.corp</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="=====================MANGO===========" elementType="Argument">
                <stringProp name="Argument.name">=====================MANGO===========</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="wgBase" elementType="Argument">
                <stringProp name="Argument.name">wgBase</stringProp>
                <stringProp name="Argument.value">www.walgreens.com</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="mangoEmployerId" elementType="Argument">
                <stringProp name="Argument.name">mangoEmployerId</stringProp>
                <stringProp name="Argument.value">1435284698</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="mangoLogin" elementType="Argument">
                <stringProp name="Argument.name">mangoLogin</stringProp>
                <stringProp name="Argument.value">hufflepuff9653456@gmail.com</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="mangoPassword" elementType="Argument">
                <stringProp name="Argument.name">mangoPassword</stringProp>
                <stringProp name="Argument.value">Test12345!</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="partnerId" elementType="Argument">
                <stringProp name="Argument.name">partnerId</stringProp>
                <stringProp name="Argument.value">WGCDummy</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="===================== VERIZON ===========" elementType="Argument">
                <stringProp name="Argument.name">===================== VERIZON ===========</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vrznPartnerId" elementType="Argument">
                <stringProp name="Argument.name">vrznPartnerId</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="povId--" elementType="Argument">
                <stringProp name="Argument.name">povId--</stringProp>
                <stringProp name="Argument.value">1422254688</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="tibcoGDLQueue" elementType="Argument">
                <stringProp name="Argument.name">tibcoGDLQueue</stringProp>
                <stringProp name="Argument.value">TVG.US.GDL.TVG.WORKOUT.PROD.T</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="supplierId" elementType="Argument">
                <stringProp name="Argument.name">supplierId</stringProp>
                <stringProp name="Argument.value">1423838950</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Var: DHDB" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="dbHost" elementType="Argument">
                <stringProp name="Argument.name">dbHost</stringProp>
                <stringProp name="Argument.value">DSPDB</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="dbPort" elementType="Argument">
                <stringProp name="Argument.name">dbPort</stringProp>
                <stringProp name="Argument.value">1530</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="dbUserName" elementType="Argument">
                <stringProp name="Argument.name">dbUserName</stringProp>
                <stringProp name="Argument.value">dNesterovq</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="dbPassword" elementType="Argument">
                <stringProp name="Argument.name">dbPassword</stringProp>
                <stringProp name="Argument.value">eRoV#0929</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="member_table" elementType="Argument">
                <stringProp name="Argument.name">member_table</stringProp>
                <stringProp name="Argument.value">VSA_ADMIN.A_MEMBER_VIEW</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Var: Employers" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="==================APOLLO EMPLOYER===============" elementType="Argument">
                <stringProp name="Argument.name">==================APOLLO EMPLOYER===============</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="employerIdFull" elementType="Argument">
                <stringProp name="Argument.name">employerIdFull</stringProp>
                <stringProp name="Argument.value">1429100447</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="apolloFull" elementType="Argument">
                <stringProp name="Argument.name">apolloFull</stringProp>
                <stringProp name="Argument.value">ATTAIN BY AETNA FULL</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="apolloSelf" elementType="Argument">
                <stringProp name="Argument.name">apolloSelf</stringProp>
                <stringProp name="Argument.value">ATTAIN BY AETNA SELF</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="==================VOL EMPLOYER=================" elementType="Argument">
                <stringProp name="Argument.name">==================VOL EMPLOYER=================</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="VOL_EMPLOYER" elementType="Argument">
                <stringProp name="Argument.name">VOL_EMPLOYER</stringProp>
                <stringProp name="Argument.value">VITALITY ONE FOR LEGACY</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="volEmployer" elementType="Argument">
                <stringProp name="Argument.name">volEmployer</stringProp>
                <stringProp name="Argument.value">1436460131</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Var: Zuul Configs" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="zuulRteNode01" elementType="Argument">
                <stringProp name="Argument.name">zuulRteNode01</stringProp>
                <stringProp name="Argument.value">zuul.tvg.tvgose.discsrv.co.za</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="zuulVgBase" elementType="Argument">
                <stringProp name="Argument.name">zuulVgBase</stringProp>
                <stringProp name="Argument.value">zuul-noauth.tvgose.discsrv.co.za</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="zuulVapBase" elementType="Argument">
                <stringProp name="Argument.name">zuulVapBase</stringProp>
                <stringProp name="Argument.value">vgtstg01-prod.dhna.corp</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Var: Users" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="==================APOLLO USERS=================" elementType="Argument">
                <stringProp name="Argument.name">==================APOLLO USERS=================</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="apolloID_1" elementType="Argument">
                <stringProp name="Argument.name">apolloID_1</stringProp>
                <stringProp name="Argument.value">1431787793</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="externalID_1" elementType="Argument">
                <stringProp name="Argument.name">externalID_1</stringProp>
                <stringProp name="Argument.value">180490929</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="apolloID_2" elementType="Argument">
                <stringProp name="Argument.name">apolloID_2</stringProp>
                <stringProp name="Argument.value">1431787777</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="apolloID_3" elementType="Argument">
                <stringProp name="Argument.name">apolloID_3</stringProp>
                <stringProp name="Argument.value">1432309738</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="apolloID_4" elementType="Argument">
                <stringProp name="Argument.name">apolloID_4</stringProp>
                <stringProp name="Argument.value">1432242103</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="==================SAPPHIRE USERS================" elementType="Argument">
                <stringProp name="Argument.name">==================SAPPHIRE USERS================</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="sapphireID_1" elementType="Argument">
                <stringProp name="Argument.name">sapphireID_1</stringProp>
                <stringProp name="Argument.value">1436438871</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="sapphireID_2" elementType="Argument">
                <stringProp name="Argument.name">sapphireID_2</stringProp>
                <stringProp name="Argument.value">1435096902</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="sapphireID_3" elementType="Argument">
                <stringProp name="Argument.name">sapphireID_3</stringProp>
                <stringProp name="Argument.value">1435096910</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="sapphireID_4" elementType="Argument">
                <stringProp name="Argument.name">sapphireID_4</stringProp>
                <stringProp name="Argument.value">1435096928</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="sapUserWithGoals_1" elementType="Argument">
                <stringProp name="Argument.name">sapUserWithGoals_1</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="==================ELEVATE USERS=================" elementType="Argument">
                <stringProp name="Argument.name">==================ELEVATE USERS=================</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="elevateID_1" elementType="Argument">
                <stringProp name="Argument.name">elevateID_1</stringProp>
                <stringProp name="Argument.value">1422254688</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <stringProp name="Argument.desc">My Vitality Account</stringProp>
              </elementProp>
              <elementProp name="elevate.id.1" elementType="Argument">
                <stringProp name="Argument.name">elevate.id.1</stringProp>
                <stringProp name="Argument.value">1439193010</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="elevate.id.2" elementType="Argument">
                <stringProp name="Argument.name">elevate.id.2</stringProp>
                <stringProp name="Argument.value">1424935300</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="elevate.id.3" elementType="Argument">
                <stringProp name="Argument.name">elevate.id.3</stringProp>
                <stringProp name="Argument.value">1424935672</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="elevate.id.4" elementType="Argument">
                <stringProp name="Argument.name">elevate.id.4</stringProp>
                <stringProp name="Argument.value">1424935078</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="elevate.id.5" elementType="Argument">
                <stringProp name="Argument.name">elevate.id.5</stringProp>
                <stringProp name="Argument.value">1424935086</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="==================MANULIFE USERS================" elementType="Argument">
                <stringProp name="Argument.name">==================MANULIFE USERS================</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="manulifeID_1" elementType="Argument">
                <stringProp name="Argument.name">manulifeID_1</stringProp>
                <stringProp name="Argument.value">1425469309</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="==================VERIZON USERS=================" elementType="Argument">
                <stringProp name="Argument.name">==================VERIZON USERS=================</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vrzn.id.1" elementType="Argument">
                <stringProp name="Argument.name">vrzn.id.1</stringProp>
                <stringProp name="Argument.value">1436494304</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="==================VOL USERS====================" elementType="Argument">
                <stringProp name="Argument.name">==================VOL USERS====================</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vol.id.1" elementType="Argument">
                <stringProp name="Argument.name">vol.id.1</stringProp>
                <stringProp name="Argument.value">1440225801</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vol.id.2" elementType="Argument">
                <stringProp name="Argument.name">vol.id.2</stringProp>
                <stringProp name="Argument.value">1439901594</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <stringProp name="Argument.desc">Mainly used for ANDROID data upload</stringProp>
              </elementProp>
              <elementProp name="==================CRUNCH USERS=================" elementType="Argument">
                <stringProp name="Argument.name">==================CRUNCH USERS=================</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="crunchID_1" elementType="Argument">
                <stringProp name="Argument.name">crunchID_1</stringProp>
                <stringProp name="Argument.value">1438495366</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <stringProp name="Argument.desc">Mine</stringProp>
              </elementProp>
              <elementProp name="crunchID_2" elementType="Argument">
                <stringProp name="Argument.name">crunchID_2</stringProp>
                <stringProp name="Argument.value">1438495168</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <stringProp name="Argument.desc">Monica</stringProp>
              </elementProp>
              <elementProp name="==================BIW USERS====================" elementType="Argument">
                <stringProp name="Argument.name">==================BIW USERS====================</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="biw.id.1" elementType="Argument">
                <stringProp name="Argument.name">biw.id.1</stringProp>
                <stringProp name="Argument.value">1439193010</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="biw.id.2" elementType="Argument">
                <stringProp name="Argument.name">biw.id.2</stringProp>
                <stringProp name="Argument.value">1439192566</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <stringProp name="Argument.desc">Mainly used for ANDROID data upload</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Var: CORE" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="==================CORE SERVICES===========" elementType="Argument">
                <stringProp name="Argument.name">==================CORE SERVICES===========</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="coreServer" elementType="Argument">
                <stringProp name="Argument.name">coreServer</stringProp>
                <stringProp name="Argument.value">vitalitycoreus.dhna.corp</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vitalitycoreusBase" elementType="Argument">
                <stringProp name="Argument.name">vitalitycoreusBase</stringProp>
                <stringProp name="Argument.value">vitalitycoreus</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="core.base" elementType="Argument">
                <stringProp name="Argument.name">core.base</stringProp>
                <stringProp name="Argument.value">vitalitycoreus.dhna.corp</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="core.port" elementType="Argument">
                <stringProp name="Argument.name">core.port</stringProp>
                <stringProp name="Argument.value">7001</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Var: VDP" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="vdp.base.url" elementType="Argument">
                <stringProp name="Argument.name">vdp.base.url</stringProp>
                <stringProp name="Argument.value">www.vitalityservicing.com</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">===========================V2=============================</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vdp.token.path.v2" elementType="Argument">
                <stringProp name="Argument.name">vdp.token.path.v2</stringProp>
                <stringProp name="Argument.value">vdp/api/token</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vdp.source.type.v2" elementType="Argument">
                <stringProp name="Argument.name">vdp.source.type.v2</stringProp>
                <stringProp name="Argument.value">www.vitality.developer.com</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="gdl.path.v2" elementType="Argument">
                <stringProp name="Argument.name">gdl.path.v2</stringProp>
                <stringProp name="Argument.value">vdp/api/vdp-api/1.0/upload/tenant</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vdp.client.token.v2.2" elementType="Argument">
                <stringProp name="Argument.name">vdp.client.token.v2.2</stringProp>
                <stringProp name="Argument.value">b1lJRHBJZk9DUUJ6QmxYN0wyZlFLaFN0WUZJYTp3WnZOcHVNTTJSbU9qZVZiQVNHTGVzdW9JYzRh</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vdp.client.token.v2.27" elementType="Argument">
                <stringProp name="Argument.name">vdp.client.token.v2.27</stringProp>
                <stringProp name="Argument.value">MlZLN1VvVE9mODJVbnhHN0lVTmg0UEhyd2g4YTpYT3dMZGlkS0w2UDFmNkU0Q3BNNGRCaXVFbFVh</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vdp.client.token.v2.30" elementType="Argument">
                <stringProp name="Argument.name">vdp.client.token.v2.30</stringProp>
                <stringProp name="Argument.value">eFRUT1F4eFpDWkJWRjJuQ0o3cTBZOVR4cVVVYTpFTE1rcVdWWmhFVkhPYkcyR2hLSWVZVElTVFFh</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vdp.client.token.v2.32" elementType="Argument">
                <stringProp name="Argument.name">vdp.client.token.v2.32</stringProp>
                <stringProp name="Argument.value">M2pOVUZTOGJfcndFOXAwZzQ0ZWJvalZqMkNZYTpMTEdWV2w2a1p2NzFmZmV3U2p5TFRIR2E2cUlh</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vdp.client.token.v2.37" elementType="Argument">
                <stringProp name="Argument.name">vdp.client.token.v2.37</stringProp>
                <stringProp name="Argument.value">allsOW1wTlJkcm1zc1UzQ3U1VVFua1dNSG5vYTpLVmZLYWp2SENMNFVoVjlOUGY5bjFCWldoN0Fh</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vdp.client.token.v2.38" elementType="Argument">
                <stringProp name="Argument.name">vdp.client.token.v2.38</stringProp>
                <stringProp name="Argument.value">ZXRmU3JkN0VYN3NtMEtLNGpLTHN5b0N4Q01jYTp5cW9DbEtVdGN4U3gyNEdCT2VTd1RIQjRfOWdh</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vdp.client.token.v2.45" elementType="Argument">
                <stringProp name="Argument.name">vdp.client.token.v2.45</stringProp>
                <stringProp name="Argument.value">eGJObl9CNVh4czF5c0pnOVhjTGFqZHBXaEtZYTp2UXNqczZmQkJBT0IwQTFQVFlkWmNfTGd3Mllh</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vdp.client.token.v2.46" elementType="Argument">
                <stringProp name="Argument.name">vdp.client.token.v2.46</stringProp>
                <stringProp name="Argument.value">VEdjSzB4UXVMaF9lZnQxTXlzTHdObmxNV1ZzYToxYldkZXl6aVZEaWFHTUJnMVRadFlFZjY2cTBh</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vdp.client.token.v2.103" elementType="Argument">
                <stringProp name="Argument.name">vdp.client.token.v2.103</stringProp>
                <stringProp name="Argument.value">YlVydVR6dkx2Y3Q5UmZQMjJmbkYwVVg2SFY4YTpWRUdVaEdtdGpOek9GaUN4a2pKY3NzUGxrSzhh</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">===========================V1=============================</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Var: VAP" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="vap.base" elementType="Argument">
                <stringProp name="Argument.name">vap.base</stringProp>
                <stringProp name="Argument.value">vgpvap.discsrv.co.za</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vap.port" elementType="Argument">
                <stringProp name="Argument.name">vap.port</stringProp>
                <stringProp name="Argument.value">7007</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Var: CSV" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="active.users" elementType="Argument">
                <stringProp name="Argument.name">active.users</stringProp>
                <stringProp name="Argument.value">Vitality_Group</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <stringProp name="Argument.desc">no appache</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GLOBAL" enabled="true"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Var: GLOBAL" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="===============GENERAL=================" elementType="Argument">
                <stringProp name="Argument.name">===============GENERAL=================</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="protocol" elementType="Argument">
                <stringProp name="Argument.name">protocol</stringProp>
                <stringProp name="Argument.value">https</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="protocol-" elementType="Argument">
                <stringProp name="Argument.name">protocol-</stringProp>
                <stringProp name="Argument.value">http</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="goalType" elementType="Argument">
                <stringProp name="Argument.name">goalType</stringProp>
                <stringProp name="Argument.value">weekly</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vrsWebServPath" elementType="Argument">
                <stringProp name="Argument.name">vrsWebServPath</stringProp>
                <stringProp name="Argument.value">vrs-web-services</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="===============ZUUL===================" elementType="Argument">
                <stringProp name="Argument.name">===============ZUUL===================</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="zuulPurchasePath" elementType="Argument">
                <stringProp name="Argument.name">zuulPurchasePath</stringProp>
                <stringProp name="Argument.value">purchase-management/2/v1/purchase</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="zuulFinancePath" elementType="Argument">
                <stringProp name="Argument.name">zuulFinancePath</stringProp>
                <stringProp name="Argument.value">finance-management/2/v1/finance</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="zuulGoalProgressPath" elementType="Argument">
                <stringProp name="Argument.name">zuulGoalProgressPath</stringProp>
                <stringProp name="Argument.value">goal-progress/2/api/v1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="zuulCGPath" elementType="Argument">
                <stringProp name="Argument.name">zuulCGPath</stringProp>
                <stringProp name="Argument.value">tvg-campaign-goals-management-service-1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="zuulProxy" elementType="Argument">
                <stringProp name="Argument.name">zuulProxy</stringProp>
                <stringProp name="Argument.value">vgpwebsproxy01</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <stringProp name="Argument.desc">Proxy used for running Zuul while on VPN</stringProp>
              </elementProp>
              <elementProp name="zuulPort" elementType="Argument">
                <stringProp name="Argument.name">zuulPort</stringProp>
                <stringProp name="Argument.value">80</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="zuulProxy--" elementType="Argument">
                <stringProp name="Argument.name">zuulProxy--</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="zuulPortCg" elementType="Argument">
                <stringProp name="Argument.name">zuulPortCg</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="===============Mobile Services=============" elementType="Argument">
                <stringProp name="Argument.name">===============Mobile Services=============</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="msSalt" elementType="Argument">
                <stringProp name="Argument.name">msSalt</stringProp>
                <stringProp name="Argument.value">AFhgd65JFS73l+@JDyD@#DAOddhhgdat@TdYSFHSLJgftadaud</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <stringProp name="Argument.desc">Salt, used for MS user encryption</stringProp>
              </elementProp>
              <elementProp name="msPath" elementType="Argument">
                <stringProp name="Argument.name">msPath</stringProp>
                <stringProp name="Argument.value">vitalitymobileservices</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="msPort-" elementType="Argument">
                <stringProp name="Argument.name">msPort-</stringProp>
                <stringProp name="Argument.value">7007</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="mob.app.version" elementType="Argument">
                <stringProp name="Argument.name">mob.app.version</stringProp>
                <stringProp name="Argument.value">10</stringProp>
                <stringProp name="Argument.desc">mobile services api version</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="===============VSL===================" elementType="Argument">
                <stringProp name="Argument.name">===============VSL===================</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vslGoalProgressPath" elementType="Argument">
                <stringProp name="Argument.name">vslGoalProgressPath</stringProp>
                <stringProp name="Argument.value">goal-progress-api</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vslActiveRewardsPath" elementType="Argument">
                <stringProp name="Argument.name">vslActiveRewardsPath</stringProp>
                <stringProp name="Argument.value">ActiveRewards</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vslActiveRewardsPath--" elementType="Argument">
                <stringProp name="Argument.name">vslActiveRewardsPath--</stringProp>
                <stringProp name="Argument.value">CopyOfActiveRewards3</stringProp>
                <stringProp name="Argument.desc">Local AR - qa.vitalityservicing</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vslActiveRewardsPath--" elementType="Argument">
                <stringProp name="Argument.name">vslActiveRewardsPath--</stringProp>
                <stringProp name="Argument.value">CopyOfActiveRewards</stringProp>
                <stringProp name="Argument.desc">Local AR - test.vitalityservicing</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vslRewardConfigurationPath" elementType="Argument">
                <stringProp name="Argument.name">vslRewardConfigurationPath</stringProp>
                <stringProp name="Argument.value">reward-configuration</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vslGoalConfigurationPath" elementType="Argument">
                <stringProp name="Argument.name">vslGoalConfigurationPath</stringProp>
                <stringProp name="Argument.value">goal-configuration</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vslEmployerIdentifierEYW" elementType="Argument">
                <stringProp name="Argument.name">vslEmployerIdentifierEYW</stringProp>
                <stringProp name="Argument.value">aetna-FI-EYW-weekly-target-1000</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vslVersion" elementType="Argument">
                <stringProp name="Argument.name">vslVersion</stringProp>
                <stringProp name="Argument.value">1.0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="===============API.POV====================" elementType="Argument">
                <stringProp name="Argument.name">===============API.POV====================</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="arPath" elementType="Argument">
                <stringProp name="Argument.name">arPath</stringProp>
                <stringProp name="Argument.value">ActiveRewards</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="wso2RtePath" elementType="Argument">
                <stringProp name="Argument.name">wso2RtePath</stringProp>
                <stringProp name="Argument.value">vitality-enrolment-service-service-1/1.0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="wso2RestPath" elementType="Argument">
                <stringProp name="Argument.name">wso2RestPath</stringProp>
                <stringProp name="Argument.value">restservices/1.0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="timeStamp" elementType="Argument">
                <stringProp name="Argument.name">timeStamp</stringProp>
                <stringProp name="Argument.value">${TESTSTART.MS}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="===============LOCAL TIBCO=================" elementType="Argument">
                <stringProp name="Argument.name">===============LOCAL TIBCO=================</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="tibcoPort" elementType="Argument">
                <stringProp name="Argument.name">tibcoPort</stringProp>
                <stringProp name="Argument.value">18007</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <stringProp name="Argument.desc">Port used for local Tibco</stringProp>
              </elementProp>
              <elementProp name="===============VDP======================" elementType="Argument">
                <stringProp name="Argument.name">===============VDP======================</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="authVitalityId" elementType="Argument">
                <stringProp name="Argument.name">authVitalityId</stringProp>
                <stringProp name="Argument.value">1431386299</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="==================CORE SERVICES===========" elementType="Argument">
                <stringProp name="Argument.name">==================CORE SERVICES===========</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="corePort" elementType="Argument">
                <stringProp name="Argument.name">corePort</stringProp>
                <stringProp name="Argument.value">7001</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="activeRewardsPath" elementType="Argument">
                <stringProp name="Argument.name">activeRewardsPath</stringProp>
                <stringProp name="Argument.value">api/ActiveRewards/1.0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Var: Functions" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="================== MS TOKEN =================" elementType="Argument">
                <stringProp name="Argument.name">================== MS TOKEN =================</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vitalityId_Apollo_Encrypted--" elementType="Argument">
                <stringProp name="Argument.name">vitalityId_Apollo_Encrypted--</stringProp>
                <stringProp name="Argument.value">${__digest(MD5,${vitalityId_Apollo},${msSalt},,vitalityId_Apollo_Encrypted)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="================== WSO2 TOKEN =================" elementType="Argument">
                <stringProp name="Argument.name">================== WSO2 TOKEN =================</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="wso2Token" elementType="Argument">
                <stringProp name="Argument.name">wso2Token</stringProp>
                <stringProp name="Argument.value">${__base64Encode(${wso2Key}:${wso2Secret},wso2Token)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="msWso2Token" elementType="Argument">
                <stringProp name="Argument.name">msWso2Token</stringProp>
                <stringProp name="Argument.value">${__base64Encode(${msWso2Key}:${msWso2Secret},msWso2Token)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="vslBasicToken" elementType="Argument">
                <stringProp name="Argument.name">vslBasicToken</stringProp>
                <stringProp name="Argument.value">${__base64Encode(${vslKey}:${vslSecret},vslBasicToken)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="================== DATE =================" elementType="Argument">
                <stringProp name="Argument.name">================== DATE =================</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="sys.date.time" elementType="Argument">
                <stringProp name="Argument.name">sys.date.time</stringProp>
                <stringProp name="Argument.value">${__time(yyyy-MM-dd&apos;T&apos;hh:mm:ss)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="dateToday" elementType="Argument">
                <stringProp name="Argument.name">dateToday</stringProp>
                <stringProp name="Argument.value">${__timeShift(yyyy-MM-dd,,,,dateToday)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="dateToday2" elementType="Argument">
                <stringProp name="Argument.name">dateToday2</stringProp>
                <stringProp name="Argument.value">${__timeShift(dd-MMM-yy,,,,dateToday)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="dateTomorrow" elementType="Argument">
                <stringProp name="Argument.name">dateTomorrow</stringProp>
                <stringProp name="Argument.value">${__timeShift(yyyy-MM-dd,,P1D,,dateTomorrow)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="dateTodayPlusTwo" elementType="Argument">
                <stringProp name="Argument.name">dateTodayPlusTwo</stringProp>
                <stringProp name="Argument.value">${__timeShift(yyyy-MM-dd,,P2D,,dateTodayPlusTwo)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="dateTodayPlusThree" elementType="Argument">
                <stringProp name="Argument.name">dateTodayPlusThree</stringProp>
                <stringProp name="Argument.value">${__timeShift(yyyy-MM-dd,,P3D,,dateTodayPlusThree)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="dateTodayPlusFour" elementType="Argument">
                <stringProp name="Argument.name">dateTodayPlusFour</stringProp>
                <stringProp name="Argument.value">${__timeShift(yyyy-MM-dd,,P4D,,dateTodayPlusFour)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="dateTodayPlusFive" elementType="Argument">
                <stringProp name="Argument.name">dateTodayPlusFive</stringProp>
                <stringProp name="Argument.value">${__timeShift(yyyy-MM-dd,,P5D,,dateTodayPlusFive)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="dateTodayPlusSix" elementType="Argument">
                <stringProp name="Argument.name">dateTodayPlusSix</stringProp>
                <stringProp name="Argument.value">${__timeShift(yyyy-MM-dd,,P6D,,dateTodayPlusSix)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="dateTodayPlusTwoYears" elementType="Argument">
                <stringProp name="Argument.name">dateTodayPlusTwoYears</stringProp>
                <stringProp name="Argument.value">${__timeShift(yyyy-MM-dd,,P729D,,dateTodayPlusTwoYears)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="================== WSO2 TOKEN For B2=================" elementType="Argument">
                <stringProp name="Argument.name">================== WSO2 TOKEN For B2=================</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="b2Wso2Token" elementType="Argument">
                <stringProp name="Argument.name">b2Wso2Token</stringProp>
                <stringProp name="Argument.value">${__base64Encode(6noeeVXYhG1VxvUvsD81Yu2uTUwa:HAwlqSJSb3jQXJYQQXjHqYX9iaoa,b2Wso2Token)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">${__base64Encode(${vslKey}:${vslSecret},vslBasicToken)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Var: Tenant" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="===============GENERAL=================" elementType="Argument">
                <stringProp name="Argument.name">===============GENERAL=================</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="tenantWhiteLable" elementType="Argument">
                <stringProp name="Argument.name">tenantWhiteLable</stringProp>
                <stringProp name="Argument.value">2</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="tenantApollo" elementType="Argument">
                <stringProp name="Argument.name">tenantApollo</stringProp>
                <stringProp name="Argument.value">27</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="tenantSapphire" elementType="Argument">
                <stringProp name="Argument.name">tenantSapphire</stringProp>
                <stringProp name="Argument.value">32</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="tenantVrzn" elementType="Argument">
                <stringProp name="Argument.name">tenantVrzn</stringProp>
                <stringProp name="Argument.value">37</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="tenant_VOL" elementType="Argument">
                <stringProp name="Argument.name">tenant_VOL</stringProp>
                <stringProp name="Argument.value">38</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="tenantCrunch" elementType="Argument">
                <stringProp name="Argument.name">tenantCrunch</stringProp>
                <stringProp name="Argument.value">46</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
        </hashTree>
      </hashTree>
      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Pre_Processor" enabled="false">
        <stringProp name="filename"></stringProp>
        <stringProp name="parameters"></stringProp>
        <boolProp name="resetInterpreter">true</boolProp>
        <stringProp name="script">${__RandomString(15,qwertyuiopasdfghjklzxcvbnmjkdqwercsafmsjhdce,randomString)}
${__RandomString(10,123456789987654321,randomNumericString)}
${__RandomString(10,1234567890abcdefghiklmnopqrstuvwxyz,randomAlphaNumericString)}
${__RandomString(4,123456789987654321,randomNumericFour)}
${__RandomString(2,123456789987654321,randomNumericTwo)}</stringProp>
      </BeanShellPreProcessor>
      <hashTree/>
      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Encrypted Entity" enabled="false">
        <stringProp name="filename"></stringProp>
        <stringProp name="parameters"></stringProp>
        <boolProp name="resetInterpreter">false</boolProp>
        <stringProp name="script">import java.security.MessageDigest;

//Entity Encription for Apollo
MessageDigest digest = MessageDigest.getInstance(&quot;MD5&quot;);
byte[] bytes = digest.digest((&quot;${vitalityId_Apollo}&quot; + &quot;${msSalt}&quot;).getBytes());
vars.put(&quot;vitalityId_Apollo_Encrypted&quot;,javax.xml.bind.DatatypeConverter.printHexBinary(bytes).toLowerCase());

//Entity Encription for Apollo
MessageDigest digest = MessageDigest.getInstance(&quot;MD5&quot;);
byte[] bytes = digest.digest((&quot;${vitalityId}&quot; + &quot;${msSalt}&quot;).getBytes());
vars.put(&quot;vitality_IdEncrypted&quot;,javax.xml.bind.DatatypeConverter.printHexBinary(bytes).toLowerCase());

${__RandomString(15,qwertyuiopasdfghjklzxcvbnmjkdqwercsafmsjhdce,randomString)}
${__RandomString(10,12345678900987654321,randomNumericString)}</stringProp>
      </BeanShellPreProcessor>
      <hashTree/>
      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Generate Date" enabled="false">
        <stringProp name="filename"></stringProp>
        <stringProp name="parameters"></stringProp>
        <boolProp name="resetInterpreter">false</boolProp>
        <stringProp name="script">import java.text.Format;
import java.text.SimpleDateFormat; 
import java.util.Date;
import java.util.Calendar;

//Today + 2
Date date = new Date(); 
date.setDate(date.getDate()+2); 
SimpleDateFormat df = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;); 
String formattedDate = df.format(date); 
vars.put(&quot;dateTodayPlusTwo&quot;,formattedDate);

//Today + 3
Date date = new Date(); 
date.setDate(date.getDate()+3); 
SimpleDateFormat df = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;); 
String formattedDate = df.format(date); 
vars.put(&quot;dateTodayPlusThree&quot;,formattedDate);

//Today + 4
Date date = new Date(); 
date.setDate(date.getDate()+4); 
SimpleDateFormat df = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;); 
String formattedDate = df.format(date); 
vars.put(&quot;dateTodayPlusFour&quot;,formattedDate);

//Today + 5
Date date = new Date(); 
date.setDate(date.getDate()+5); 
SimpleDateFormat df = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;); 
String formattedDate = df.format(date); 
vars.put(&quot;dateTodayPlusFive&quot;,formattedDate);

//Today + 6
Date date = new Date(); 
date.setDate(date.getDate()+6); 
SimpleDateFormat df = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;); 
String formattedDate = df.format(date); 
vars.put(&quot;dateTodayPlusSix&quot;,formattedDate);

//Today + 2 years
Date date = new Date(); 
date.setDate(date.getDate()+729); 
SimpleDateFormat df = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;); 
String formattedDate = df.format(date); 
vars.put(&quot;dateTwoYears&quot;,formattedDate);

//Returns next Monday (Weekly Goal Start Date)
Calendar now = Calendar.getInstance();
int weekday = now.get(Calendar.DAY_OF_WEEK);
if (weekday != Calendar.MONDAY)
{
    int days = (Calendar.SATURDAY - weekday + 2) % 7;
    now.add(Calendar.DAY_OF_YEAR, days);
}

Date date = now.getTime();
String format = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;).format(date);
vars.put(&quot;weeklyGoalStartDate&quot;,format);

//================================================================
//Calculates the END of WEEKLY GOAL (Next Monday + 7 days) 
Calendar now = Calendar.getInstance();
int weekday = now.get(Calendar.DAY_OF_WEEK);
if (weekday != Calendar.MONDAY)
{
    int days = (Calendar.SATURDAY - weekday + 2) % 7;
    now.add(Calendar.DAY_OF_YEAR, days);
}
Date date = now.getTime();
date.setDate(date.getDate()+7); 
String format = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;).format(date);
vars.put(&quot;weeklyGoalEndDate&quot;,format);

//================================================================
//Returns end of Monitoring Period (next Monday + 6 days)
Calendar now = Calendar.getInstance();
int weekday = now.get(Calendar.DAY_OF_WEEK);
if (weekday != Calendar.MONDAY)
{
    int days = (Calendar.SATURDAY - weekday + 2) % 7;
    now.add(Calendar.DAY_OF_YEAR, days);
}
Date date = now.getTime();
date.setDate(date.getDate()+13); 
String format = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;).format(date);
vars.put(&quot;monitoring_6&quot;,format);
</stringProp>
      </BeanShellPreProcessor>
      <hashTree/>
      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="AES_Encryption" enabled="false">
        <stringProp name="filename"></stringProp>
        <stringProp name="parameters"></stringProp>
        <boolProp name="resetInterpreter">false</boolProp>
        <stringProp name="script">import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.util.Base64;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.spec.SecretKeySpec;

//First Name
String text = &quot;${randomString}&quot;;         
String secret = &quot;Apollo11Apollo11&quot;;
SecretKeySpec aesKey = new SecretKeySpec(secret.getBytes(), &quot;AES&quot;);
Cipher cipher = Cipher.getInstance(&quot;AES&quot;);
cipher.init(Cipher.ENCRYPT_MODE, aesKey);
byte[] encrypted = cipher.doFinal(text.getBytes());
vars.put(&quot;encryptedFirstName&quot;,Base64.getEncoder().encodeToString(encrypted)); 

//Last Name
String text = &quot;Apollo-${randomString}&quot;;         
String secret = &quot;Apollo11Apollo11&quot;;
SecretKeySpec aesKey = new SecretKeySpec(secret.getBytes(), &quot;AES&quot;);
Cipher cipher = Cipher.getInstance(&quot;AES&quot;);
cipher.init(Cipher.ENCRYPT_MODE, aesKey);
byte[] encrypted = cipher.doFinal(text.getBytes());
vars.put(&quot;encryptedLastName&quot;,Base64.getEncoder().encodeToString(encrypted)); 

//DOB
String text = &quot;${__RandomDate(yyyy-MM-dd,1930-01-01,2001-12-31,,)}&quot;;         
String secret = &quot;Apollo11Apollo11&quot;;
SecretKeySpec aesKey = new SecretKeySpec(secret.getBytes(), &quot;AES&quot;);
Cipher cipher = Cipher.getInstance(&quot;AES&quot;);
cipher.init(Cipher.ENCRYPT_MODE, aesKey);
byte[] encrypted = cipher.doFinal(text.getBytes());
vars.put(&quot;encryptedDOB&quot;,Base64.getEncoder().encodeToString(encrypted)); 

//Phone Number
String text = &quot;312-224-${__Random(1000,9999,)}&quot;;         
String secret = &quot;Apollo11Apollo11&quot;;
SecretKeySpec aesKey = new SecretKeySpec(secret.getBytes(), &quot;AES&quot;);
Cipher cipher = Cipher.getInstance(&quot;AES&quot;);
cipher.init(Cipher.ENCRYPT_MODE, aesKey);
byte[] encrypted = cipher.doFinal(text.getBytes());
vars.put(&quot;encryptedPhoneNumber&quot;,Base64.getEncoder().encodeToString(encrypted)); </stringProp>
      </BeanShellPreProcessor>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Active Calories 2.0 SWAW lookup table" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="weightKg" elementType="Argument">
            <stringProp name="Argument.name">weightKg</stringProp>
            <stringProp name="Argument.value">77</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="lwawKilojoule" elementType="Argument">
            <stringProp name="Argument.name">lwawKilojoule</stringProp>
            <stringProp name="Argument.value">1192.44</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="swawKilojoule" elementType="Argument">
            <stringProp name="Argument.name">swawKilojoule</stringProp>
            <stringProp name="Argument.value">2384.88</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="awawKilojoule" elementType="Argument">
            <stringProp name="Argument.name">awawKilojoule</stringProp>
            <stringProp name="Argument.value">3577.32</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code: 200" enabled="false">
        <collectionProp name="Asserion.test_strings">
          <stringProp name="49586">200</stringProp>
          <stringProp name="48">0</stringProp>
          <stringProp name="50549">302</stringProp>
          <stringProp name="49587">201</stringProp>
        </collectionProp>
        <stringProp name="Assertion.custom_message"></stringProp>
        <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
        <boolProp name="Assertion.assume_success">false</boolProp>
        <intProp name="Assertion.test_type">40</intProp>
        <stringProp name="Assertion.scope">all</stringProp>
      </ResponseAssertion>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="POV" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1514078571000</longProp>
        <longProp name="ThreadGroup.end_time">1514078571000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">900</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
        </CookieManager>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV: test data" enabled="true">
          <stringProp name="TestPlan.comments">User&apos;s Creds</stringProp>
          <stringProp name="filename">/Users/DNesterov/apache-jmeter-4.0/CSV/${active.users}.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">elevate.id</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Users" enabled="false">
          <collectionProp name="UserParameters.names">
            <stringProp name="-135932017">elevate.id</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="68183863">
              <stringProp name="-211925331">${elevateID_1}</stringProp>
            </collectionProp>
            <collectionProp name="-1106387488">
              <stringProp name="1281576372">${elevate.id.1}</stringProp>
            </collectionProp>
            <collectionProp name="-1106359892">
              <stringProp name="1281576403">${elevate.id.2}</stringProp>
            </collectionProp>
            <collectionProp name="-1106356383">
              <stringProp name="1281576434">${elevate.id.3}</stringProp>
            </collectionProp>
            <collectionProp name="-1106352874">
              <stringProp name="1281576465">${elevate.id.4}</stringProp>
            </collectionProp>
            <collectionProp name="-1106349365">
              <stringProp name="1281576496">${elevate.id.5}</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Login" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST JWT Token" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;audience&quot;: &quot;${elevate.id}&quot;,&#xd;
	&quot;params&quot;: {}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${vap.base}</stringProp>
            <stringProp name="HTTPSampler.port">${vap.port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">vap/rest/jwt_token/generate/pov_login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response 200" enabled="true">
              <collectionProp name="Asserion.test_strings"/>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract JWT Token" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">jwt.token</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.output</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Login to POV" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="jwt" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${jwt.token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">jwt</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${povBase}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">vitality/jwt/login.srv</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9,ru;q=0.8,uk;q=0.7,de;q=0.6,la;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Connection" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">keep-alive</stringProp>
                </elementProp>
                <elementProp name="Host" elementType="Header">
                  <stringProp name="Header.name">Host</stringProp>
                  <stringProp name="Header.value">${povBase}</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Mode" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                  <stringProp name="Header.value">navigate</stringProp>
                </elementProp>
                <elementProp name="Sec-Fetch-Site" elementType="Header">
                  <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                  <stringProp name="Header.value">none</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.117 Safari/537.36</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response 200" enabled="true">
              <collectionProp name="Asserion.test_strings"/>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Home" enabled="true"/>
        <hashTree>
          <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${povBase}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </ConfigTestElement>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.9,ru;q=0.8,uk;q=0.7,de;q=0.6,la;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Connection" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
              <elementProp name="Host" elementType="Header">
                <stringProp name="Header.name">Host</stringProp>
                <stringProp name="Header.value">${povBase}</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://${povBase}/</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">cors</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.117 Safari/537.36</stringProp>
              </elementProp>
              <elementProp name="X-Requested-With" elementType="Header">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Banner" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">vitality/vap/banner</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code: 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">40</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Client Logo" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">vitality/vap/client_logo</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code: 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">40</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Tiers" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">vitality/home/tiers</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code: 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">40</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Init Managed Links" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">vitality/home/initManagedLinks</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code: 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">40</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Messages" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="include_wl" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">include_wl</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">vitality/vap/messages</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code: 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">40</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Client logo secondary" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="secondary" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">secondary</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">vitality/vap/client_logo</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code: 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">40</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Alerts" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">vitality/vap/alerts</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code: 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">40</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET News Feeds" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="limit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">5</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">limit</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">vitality/vap/news_feeds</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code: 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">40</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Pathway" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="limit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">3</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">limit</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">vitality/vap/pathway</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code: 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">40</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET VCM Status" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">vitality/home/vcm_status</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code: 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">40</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="FitBit" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">50</stringProp>
        <stringProp name="ThreadGroup.ramp_time">100</stringProp>
        <longProp name="ThreadGroup.start_time">1514078571000</longProp>
        <longProp name="ThreadGroup.end_time">1514078571000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">2400</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
        </CookieManager>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV: test data" enabled="true">
          <stringProp name="TestPlan.comments">User&apos;s Creds</stringProp>
          <stringProp name="filename">/Users/DNesterov/apache-jmeter-4.0/CSV/STAGING_All_Active_Users.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">active.user.id</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Users" enabled="false">
          <collectionProp name="UserParameters.names">
            <stringProp name="-135932017">elevate.id</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="68183863">
              <stringProp name="-211925331">${elevateID_1}</stringProp>
            </collectionProp>
            <collectionProp name="-1106387488">
              <stringProp name="1281576372">${elevate.id.1}</stringProp>
            </collectionProp>
            <collectionProp name="-1106359892">
              <stringProp name="1281576403">${elevate.id.2}</stringProp>
            </collectionProp>
            <collectionProp name="-1106356383">
              <stringProp name="1281576434">${elevate.id.3}</stringProp>
            </collectionProp>
            <collectionProp name="-1106352874">
              <stringProp name="1281576465">${elevate.id.4}</stringProp>
            </collectionProp>
            <collectionProp name="-1106349365">
              <stringProp name="1281576496">${elevate.id.5}</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Submit Fitbit Data" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
    &quot;fitBitUserId&quot;:&quot;${active.user.id}&quot;,&#xd;
    &quot;typeDateSetMap&quot;: {}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">integrationqa.powerofvitality.com</stringProp>
          <stringProp name="HTTPSampler.port">443</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">intservices/test/submitFitbitData</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response 200" enabled="true">
            <collectionProp name="Asserion.test_strings"/>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="B2 test" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">10</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Apollo WSO2 Access Token" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="grant_type" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">client_credentials</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">grant_type</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">apiqa.powerofvitality.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api/token</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Basic ${b2Wso2Token}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extracting WSO2 AccessToken" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">wso2AccessToken</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="Sample.scope">all</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Watch Catalogue" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="memberId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">1429097882</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">memberId</stringProp>
              </elementProp>
              <elementProp name="tenantId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">27</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">tenantId</stringProp>
              </elementProp>
              <elementProp name="productIdentifier" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">AppleWatch</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">productIdentifier</stringProp>
              </elementProp>
              <elementProp name="effectiveDate" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${__time(yyyy-MM-dd,)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">effectiveDate</stringProp>
              </elementProp>
              <elementProp name="employerId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${employerIdFull}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">employerId</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">apiqa.powerofvitality.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api/ActiveRewards/1.0/WatchCatalogue</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="x-vsl-timestamp" elementType="Header">
                <stringProp name="Header.name">x-vsl-timestamp</stringProp>
                <stringProp name="Header.value">1458129946413</stringProp>
              </elementProp>
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${wso2AccessToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-78471895">Successfully Retrieved Watch Catalogues and Pricing</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Apollo" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(USERS,10)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${__P(RAMPUP,10)}</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">300</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Users: Apollo" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="1150977610">apolloId</stringProp>
            <stringProp name="-1699764666">externalId</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="-742488485">
              <stringProp name="-1226073238">${apolloID_1}</stringProp>
              <stringProp name="652483502">${externalID_1}</stringProp>
            </collectionProp>
            <collectionProp name="845405037">
              <stringProp name="-1226073207">${apolloID_2}</stringProp>
              <stringProp name="0"></stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">true</boolProp>
        </UserParameters>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${wso2Base}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout">30000</stringProp>
          <stringProp name="HTTPSampler.response_timeout">300000</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Getting AET Token" enabled="false">
          <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
          <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
          <stringProp name="SystemSampler.command">/bin/bash</stringProp>
          <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">${aetnaTokenBash}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="SystemSampler.directory">${binLocation}</stringProp>
        </SystemSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Aetna Token" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">aetToken</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;vitality_token&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings"/>
            <stringProp name="Assertion.custom_message">OK</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: apollo_authenticate" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="aetna_token" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${aetToken}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">aetna_token</stringProp>
              </elementProp>
              <elementProp name="vitalityID" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${vitalityId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">vitalityID</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api/${msPath}/1.0/auth/apollo_authenticate</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
              </elementProp>
              <elementProp name="Vitality-Client" elementType="Header">
                <stringProp name="Header.name">Vitality-Client</stringProp>
                <stringProp name="Header.value">Aetna</stringProp>
              </elementProp>
              <elementProp name="Vitality-App-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-App-Version</stringProp>
                <stringProp name="Header.value">7</stringProp>
              </elementProp>
              <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                <stringProp name="Header.value">IOS</stringProp>
              </elementProp>
              <elementProp name="Vitality-Language" elementType="Header">
                <stringProp name="Header.name">Vitality-Language</stringProp>
                <stringProp name="Header.value">en</stringProp>
              </elementProp>
              <elementProp name="Vitality-Device-Id" elementType="Header">
                <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
              </elementProp>
              <elementProp name="Vitality-Local-Time" elementType="Header">
                <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
              </elementProp>
              <elementProp name="Vitality-API-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-API-Version</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Active Rewards Token" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">ar_Token</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.session.token</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once: GET Auth Token" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Auth Token" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="entity_no" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${apolloId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">entity_no</stringProp>
                </elementProp>
                <elementProp name="encrypted_entity_no" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${apolloIdEncrypted}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">encrypted_entity_no</stringProp>
                </elementProp>
                <elementProp name="_p" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">IOS</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">_p</stringProp>
                </elementProp>
                <elementProp name="_v" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${mob.app.version}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">_v</stringProp>
                </elementProp>
                <elementProp name="_doc_browser_context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">_doc_browser_context</stringProp>
                </elementProp>
                <elementProp name="_c" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">Aetna</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">_c</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${msBase}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${msPath}/auth/simulate_auth</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Active Rewards Token" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">ar_Token</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.session.token</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="LLT Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.session.timeout</stringProp>
              <stringProp name="EXPECTED_VALUE">2280</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Encrypted Entity" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import java.security.MessageDigest;

//Entity Encription for Apollo
MessageDigest digest = MessageDigest.getInstance(&quot;MD5&quot;);
byte[] bytes = digest.digest((&quot;${apolloId}&quot; + &quot;${msSalt}&quot;).getBytes());
vars.put(&quot;apolloIdEncrypted&quot;,javax.xml.bind.DatatypeConverter.printHexBinary(bytes).toLowerCase());</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="api.pov.com: Apollo" enabled="true"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
              </elementProp>
              <elementProp name="Vitality-Client" elementType="Header">
                <stringProp name="Header.name">Vitality-Client</stringProp>
                <stringProp name="Header.value">Aetna</stringProp>
              </elementProp>
              <elementProp name="Vitality-Token" elementType="Header">
                <stringProp name="Header.name">Vitality-Token</stringProp>
                <stringProp name="Header.value">${ar_Token}</stringProp>
              </elementProp>
              <elementProp name="Vitality-App-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-App-Version</stringProp>
                <stringProp name="Header.value">7</stringProp>
              </elementProp>
              <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                <stringProp name="Header.value">IOS</stringProp>
              </elementProp>
              <elementProp name="Vitality-Language" elementType="Header">
                <stringProp name="Header.name">Vitality-Language</stringProp>
                <stringProp name="Header.value">en</stringProp>
              </elementProp>
              <elementProp name="Vitality-Device-Id" elementType="Header">
                <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
              </elementProp>
              <elementProp name="Vitality-Local-Time" elementType="Header">
                <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
              </elementProp>
              <elementProp name="Vitality-API-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-API-Version</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Register Push Token" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="push_token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${randomAlphaNumericString}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">push_token</stringProp>
                </elementProp>
                <elementProp name="device_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${randomNumericString}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">device_id</stringProp>
                </elementProp>
                <elementProp name="platform" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">IOS</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">platform</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/${msPath}/1.0/notifications/register_push_token</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion that Status = 1" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-161783867">&quot;status&quot;:1</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Set Push Enabled" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="enabled" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">enabled</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/${msPath}/1.0/notifications/set_push_enabled</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET CG_Goals" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="offset" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">offset</stringProp>
                </elementProp>
                <elementProp name="limit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">999</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">limit</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/${msPath}/1.0/campaign_goals/goals</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="CGoalId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">CGoalId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.output.goalsArray.goals[0].goalId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="JSON Structure Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="408179302">adjudicator</stringProp>
                <stringProp name="241352577">buttons</stringProp>
                <stringProp name="915719548">eventMnemonic</stringProp>
                <stringProp name="-1318255029">campaignId</stringProp>
                <stringProp name="-1724546052">description</stringProp>
                <stringProp name="-1179356962">externalEndDate</stringProp>
                <stringProp name="-254860736">externalMemberId</stringProp>
                <stringProp name="-1240658034">goalId</stringProp>
                <stringProp name="2054867262">goalState</stringProp>
                <stringProp name="2055481093">goalTitle</stringProp>
                <stringProp name="199149798">howToAchieve</stringProp>
                <stringProp name="1316501932">internalEndDate</stringProp>
                <stringProp name="922683503">monitorEndDate</stringProp>
                <stringProp name="-1795632125">partnerId</stringProp>
                <stringProp name="-2129778896">startDate</stringProp>
                <stringProp name="-109999815">transmitGUID</stringProp>
                <stringProp name="2145596567">vitalityMemberId</stringProp>
                <stringProp name="-2070259289">status&quot;:1</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">34</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET CG_Goal" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="goalId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${CGoalId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">goalId</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/${msPath}/1.0/campaign_goals/goal</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET AR_Current_Goals" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/${msPath}/1.0/active_rewards/current_goals</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Goal ID" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">Goal_ID</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.output.goals[0].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET AR_Goals" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="goalType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">weekly</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">goalType</stringProp>
                </elementProp>
                <elementProp name="offset" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">offset</stringProp>
                </elementProp>
                <elementProp name="limit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">15</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">limit</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/${msPath}/1.0/active_rewards/goals</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Purchase" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/${msPath}/1.0/apple_watch/purchase</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Currency Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="66470">CAD</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">6</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Purchase Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1850889110">&quot;installmentDayOfPeriod&quot;:12</stringProp>
                <stringProp name="850605392">&quot;numberOfInstallmentts&quot;:24</stringProp>
                <stringProp name="1819301357">&quot;amount&quot;:&quot;USD 2.75&quot;,&quot;amountType&quot;:&quot;DiscountLevel4&quot;</stringProp>
                <stringProp name="1819301326">&quot;amount&quot;:&quot;USD 2.75&quot;,&quot;amountType&quot;:&quot;DiscountLevel3&quot;</stringProp>
                <stringProp name="1819301295">&quot;amount&quot;:&quot;USD 2.75&quot;,&quot;amountType&quot;:&quot;DiscountLevel2&quot;</stringProp>
                <stringProp name="1819301264">&quot;amount&quot;:&quot;USD 2.75&quot;,&quot;amountType&quot;:&quot;DiscountLevel1&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Repayment History" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/${msPath}/1.0/apple_watch/repayment_history</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="PurchaseId Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="137050516">10026 - Purchase Not Found</stringProp>
                <stringProp name="297521660">purchaseId</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">34</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Currency Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="66470">CAD</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">6</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Payment history Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1421797203">dayOfPeriod&quot;:12</stringProp>
                <stringProp name="-148443948">numberOfInstallments&quot;:24</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Home Page Widgets" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="filter" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">VITALITY_BUCKS</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">filter</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/${msPath}/1.0/dashboard/home_widgets</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="SUCCESS Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1149187101">SUCCESS</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET AR_Eligibility" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/${msPath}/1.0/active_rewards/eligibility</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="100743639">eligible</stringProp>
                <stringProp name="-161783867">&quot;status&quot;:1</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Events history" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="limit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">100</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">limit</stringProp>
                </elementProp>
                <elementProp name="offset" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">offset</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/${msPath}/1.0/events/history</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Currency Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1108336905">record_number</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="SSO: 50%" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>100.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree>
            <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
              <collectionProp name="CookieManager.cookies"/>
              <boolProp name="CookieManager.clearEachIteration">true</boolProp>
            </CookieManager>
            <hashTree/>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SSO to /Apple_Watch" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: SSO URL to AppleWAtch" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/${msPath}/1.0/sso/redesign?target=/apollo/apple_watch</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ssoLink" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">awSSO</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;output&quot;:&quot;https://${ssoBase}/(.*?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                  <stringProp name="Scope.variable">ssoAW</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SSO: AppleWatch" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${ssoBase}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${awSSO}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Apple Watch page Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="704977160">View installment agreement</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SSO to /Mall" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: SSO URL to Mall" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name"></stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/${msPath}/1.0/sso/redesign?target=/vitality/apollo/mall</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ssoLink" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">mallSSO</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;output&quot;:&quot;https://${ssoBase}/(.*?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                  <stringProp name="Scope.variable">ssoAW</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SSO: Mall" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${ssoBase}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${mallSSO}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Gift Cards Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1964569124">Amazon</stringProp>
                    <stringProp name="-1166115254">App Store &amp; iTunes</stringProp>
                    <stringProp name="1905424970">Best Buy</stringProp>
                    <stringProp name="1622877843">CVS pharmacy</stringProp>
                    <stringProp name="452994361">CharityChoice</stringProp>
                    <stringProp name="-2038980848">Whole Foods Market</stringProp>
                    <stringProp name="875740454">Fandango</stringProp>
                    <stringProp name="2428021">Nike</stringProp>
                    <stringProp name="-140972890">Starbucks</stringProp>
                    <stringProp name="766369346">Target Gift Cards</stringProp>
                    <stringProp name="-1511446376">Walmart</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SSO to /Contact_us" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: SSO URL to Contact_us" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/${msPath}/1.0/sso/redesign?target=/vitality_content/contact_us</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ssoLink" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">ContactUsSSO</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;output&quot;:&quot;https://${ssoBase}/(.*?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                  <stringProp name="Scope.variable">ssoAW</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SSO: Contact_us" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${ssoBase}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${ContactUsSSO}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Contact Us page Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="293979885">How can we help you?</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SSO to /Feedback" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: SSO URL to feedback" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/${msPath}/1.0/sso/redesign?target=/apollo/feedback</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ssoLink" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">feedbackSSO</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;output&quot;:&quot;https://${ssoBase}/(.*?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                  <stringProp name="Scope.variable">ssoAW</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SSO: Feedback" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${ssoBase}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${feedbackSSO}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Feedback page Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-656796170">Tell us what you think of Attain</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SSO to /History" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: SSO URL to History" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/${msPath}/1.0/sso/redesign?target=/apollo/history</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ssoLink" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">historySSO</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;output&quot;:&quot;https://${ssoBase}/(.*?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                  <stringProp name="Scope.variable">ssoAW</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SSO: Mall History" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${ssoBase}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${historySSO}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Mall History Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1838093228">Gift Card History</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="APIs: 50%" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>100.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Activate" enabled="true"/>
            <hashTree>
              <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/${msPath}/1.0/active_rewards/activate</stringProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </ConfigTestElement>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST AR_Activate_FIEYW" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="programType" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">FIEYW</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">programType</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST AR_Activate_FIBYOD" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="programType" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">FIBYOD</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">programType</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST AR_Activate_SIBYOD" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="programType" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">SIBYOD</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">programType</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ACTIVATED Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1303979599">ACTIVATED</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Pair Watch" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="programType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">AWTCH</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">programType</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/${msPath}/1.0/apple_watch/pair_watch</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="AWTCH Assertion" enabled="true">
                <stringProp name="JSON_PATH">$.request.programType</stringProp>
                <stringProp name="EXPECTED_VALUE">AWTCH</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">false</boolProp>
              </JSONPathAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RTE: Validating Existing Member" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"> {&#xd;
  &quot;enrollmentRequestEncrypted&quot;: {&#xd;
    &quot;firstNameEncrypted&quot;: &quot;2tsVKNpgvEGVxdpHGriY3A==&quot;,&#xd;
    &quot;lastNameEncrypted&quot;: &quot;CtEyb0Er9GDo3Qh4UuPW8A==&quot;,&#xd;
    &quot;dateOfBirthEncrypted&quot;: &quot;U5BYkjJz/zDZNWr/paL3vg==&quot;,&#xd;
    &quot;insuredId&quot;: &quot;180490929&quot;,&#xd;
    &quot;gender&quot;: &quot;F&quot;,&#xd;
    &quot;vitalityCoverageEffectiveDate&quot;: &quot;2018-01-08&quot;,&#xd;
    &quot;productIndicator&quot;: &quot;FULL&quot;,&#xd;
    &quot;emailAddress&quot;: &quot;POC@rte-perf.com&quot;,&#xd;
    &quot;zipCode&quot;: &quot;&quot;,&#xd;
    &quot;customerServicePhone&quot;: &quot;ESsolc8Ohjbw4fNF5VZ9iQ==&quot;,&#xd;
    &quot;reportField1&quot;: &quot;123&quot;,&#xd;
    &quot;reportField2&quot;: &quot;20170701&quot;,&#xd;
    &quot;reportField3&quot;: &quot;ABC&quot;,&#xd;
    &quot;reportField4&quot;: &quot;DEF&quot;&#xd;
  }&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/${wso2RtePath}/svc/0/apolloEnrollmentEncrypted</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${wso2AccessToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: Vitality ID present" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1358234543">{&quot;enrollmentResponseEncrypted&quot;:{&quot;insuredId&quot;:&quot;180490929&quot;,&quot;vitalityId&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Health Data Upload" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Health Data Upload Token" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="scope" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">HEALTH_DATA_UPLOAD</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">scope</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/${msPath}/1.0/auth/token</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Client" elementType="Header">
                    <stringProp name="Header.name">Vitality-Client</stringProp>
                    <stringProp name="Header.value">Aetna</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Token" elementType="Header">
                    <stringProp name="Header.name">Vitality-Token</stringProp>
                    <stringProp name="Header.value">${ar_Token}</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-App-Version" elementType="Header">
                    <stringProp name="Header.name">Vitality-App-Version</stringProp>
                    <stringProp name="Header.value">7</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                    <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                    <stringProp name="Header.value">IOS</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Language" elementType="Header">
                    <stringProp name="Header.name">Vitality-Language</stringProp>
                    <stringProp name="Header.value">en</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Device-Id" elementType="Header">
                    <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                    <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Local-Time" elementType="Header">
                    <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                    <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-API-Version" elementType="Header">
                    <stringProp name="Header.name">Vitality-API-Version</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Health Data Token" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">hduToken</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.session.token</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST VDP: ROUTINE" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;header&quot;: {&#xd;
		&quot;uploadDate&quot;: &quot;${dateToday}T00:00:00+03:00&quot;,&#xd;
		&quot;sessionId&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}&quot;,&#xd;
		&quot;user&quot;: {&#xd;
			&quot;entityNo&quot;: &quot;${apolloId}&quot;,&#xd;
			&quot;email&quot;: &quot;${randomString}@vitalitygroup.com&quot;,&#xd;
			&quot;partnerUserId&quot;: &quot;&quot;&#xd;
		},&#xd;
		&quot;partnerSystem&quot;: &quot;Apple&quot;,&#xd;
		&quot;rawUploadData&quot;: &quot;&quot;,&#xd;
		&quot;processingType&quot;: &quot;BATCH&quot;,&#xd;
		&quot;tenantId&quot;: &quot;27&quot;,&#xd;
		&quot;verified&quot;: &quot;true&quot;,&#xd;
		&quot;uploadCount&quot;: 1&#xd;
	},&#xd;
	&quot;device&quot;: {&#xd;
		&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
		&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
		&quot;deviceId&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}&quot;&#xd;
	},&#xd;
	&quot;readings&quot;: [&#xd;
		{&#xd;
			&quot;startTime&quot;: &quot;${dateToday}T00:00:00-05:00&quot;,&#xd;
			&quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00-05:00&quot;,&#xd;
			&quot;readingType&quot;: &quot;WALKING&quot;,&#xd;
			&quot;dataCategory&quot;: &quot;ROUTINE&quot;,&#xd;
			&quot;integrity&quot;: &quot;VERIFIED&quot;,&#xd;
			&quot;workout&quot;: {&#xd;
				&quot;energyExpenditure&quot;: {&#xd;
					&quot;unitOfMeasurement&quot;: &quot;KILOCALORIES&quot;,&#xd;
					&quot;value&quot;: 1245&#xd;
				}&#xd;
			},&#xd;
			&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
			&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
			&quot;partnerReadingId&quot;: &quot;${dateToday}${randomAlphaNumericString}&quot;,&#xd;
			&quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
			&quot;duration&quot;: 86400&#xd;
		},&#xd;
		{&#xd;
			&quot;startTime&quot;: &quot;${dateToday}T00:00:00-05:00&quot;,&#xd;
			&quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00-05:00&quot;,&#xd;
			&quot;readingType&quot;: &quot;WEIGHT&quot;,&#xd;
			&quot;dataCategory&quot;: &quot;BIOMETRIC&quot;,&#xd;
			&quot;integrity&quot;: &quot;UNVERIFIED&quot;,&#xd;
			&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
			&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
			&quot;partnerReadingId&quot;: &quot;${dateToday}${randomAlphaNumericString}&quot;,&#xd;
			&quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
			&quot;healthData&quot;: {&#xd;
				&quot;weight&quot;: {&#xd;
					&quot;unitOfMeasurement&quot;: &quot;KILOGRAMS&quot;,&#xd;
					&quot;value&quot;: 60.980000000000665&#xd;
				}&#xd;
			}&#xd;
		}&#xd;
	]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/${msPath}/1.0/health_data/upload</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Token" elementType="Header">
                    <stringProp name="Header.name">Vitality-Token</stringProp>
                    <stringProp name="Header.value">${hduToken}</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-App-Version" elementType="Header">
                    <stringProp name="Header.name">Vitality-App-Version</stringProp>
                    <stringProp name="Header.value">7</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Language" elementType="Header">
                    <stringProp name="Header.name">Vitality-Language</stringProp>
                    <stringProp name="Header.value">en</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Device-Id" elementType="Header">
                    <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                    <stringProp name="Header.value">swagger-3f802407-77b4-407c-a758-842af5830c2b</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Local-Time" elementType="Header">
                    <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                    <stringProp name="Header.value">${__time(yyyy-MM-dd,)}</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-API-Version" elementType="Header">
                    <stringProp name="Header.name">Vitality-API-Version</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                    <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                    <stringProp name="Header.value">IOS</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Campaign Goals" enabled="false">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">false</boolProp>
          <intProp name="ThroughputController.maxThroughput">1</intProp>
          <FloatProperty>
            <name>ThroughputController.percentThroughput</name>
            <value>100.0</value>
            <savedValue>0.0</savedValue>
          </FloatProperty>
        </ThroughputController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: CG - Create" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&#xd;
{  &#xd;
   &quot;goalManagementMessage&quot;:{  &#xd;
      &quot;managementInstruction&quot;:&quot;CREATE&quot;,&#xd;
      &quot;goal&quot;:{&#xd;
      	&quot;supportedAppVersions&quot;: [&#xd;
		&quot;1.1.0&quot;,&#xd;
		&quot;1.2.*&quot;,&#xd;
		&quot;2.*&quot;&#xd;
		],  &#xd;
         &quot;goalId&quot;:null,&#xd;
         &quot;goalTitle&quot;:&quot;Breathe Goal&quot;,&#xd;
         &quot;vitalityMemberId&quot;:${apolloId},&#xd;
         &quot;campaignId&quot;:${randomNumericString},&#xd;
         &quot;adjudications&quot;: {&#xd;
           &quot;apolloAdjudications&quot;: [&#xd;
             {&#xd;
               &quot;adjudicator&quot;: &quot;AETNA&quot;,&#xd;
               &quot;frequency&quot;: null,&#xd;
               &quot;targetFunction&quot;: &quot;sum&quot;,&#xd;
               &quot;targetMetric&quot;: &quot;sessions&quot;,&#xd;
               &quot;targetOperator&quot;: &quot;&gt;=&quot;,&#xd;
               &quot;targetValue&quot;: 5,&#xd;
               &quot;type&quot;: &quot;breathe&quot;&#xd;
             }&#xd;
           ]&#xd;
         },&#xd;
         &quot;description&quot;:&quot;Please try breathing!&quot;,&#xd;
         &quot;howToAchieve&quot;:&quot;Use the Breathe app&quot;,&#xd;
         &quot;externalMemberId&quot;:&quot;${externalId}&quot;,&#xd;
         &quot;goalState&quot;:&quot;UNAWARDED&quot;,&#xd;
         &quot;startDate&quot;:&quot;${dateToday}T09:52:25.371000000-05:00[America/Chicago]&quot;,&#xd;
         &quot;internalEndDate&quot;:&quot;${dateTodayPlusFour}T09:52:25.371000000-05:00[America/Chicago]&quot;,&#xd;
         &quot;monitorEndDate&quot;:&quot;${dateTodayPlusFive}T09:52:25.371000000-05:00[America/Chicago]&quot;,&#xd;
         &quot;externalEndDate&quot;:&quot;${dateTodayPlusSix}T09:52:25.371000000-05:00[America/Chicago]&quot;,&#xd;
         &quot;transmitGUID&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}-${randomAlphaNumericString}-${randomAlphaNumericString}-${randomAlphaNumericString}&quot;,&#xd;
         &quot;partnerId&quot;:&quot;AETNA&quot;,&#xd;
         &quot;buttons&quot;:[  &#xd;
            {  &#xd;
               &quot;buttonLabel&quot;:&quot;Open in maps!&quot;,&#xd;
               &quot;buttonAction&quot;:&quot;openMaps:http://maps.apple.com/lat=1234323,long=987324&quot;,&#xd;
               &quot;buttonIndex&quot;:0&#xd;
            },&#xd;
            {  &#xd;
               &quot;buttonLabel&quot;:&quot;Find out more!&quot;,&#xd;
               &quot;buttonAction&quot;:&quot;openURL:http://www.aetna.com/breathe.html&quot;,&#xd;
               &quot;buttonIndex&quot;:1&#xd;
            }&#xd;
         ],&#xd;
         &quot;reward&quot;:{  &#xd;
            &quot;coreEvents&quot;:[  &#xd;
               {  &#xd;
                  &quot;eventMnemonic&quot;:&quot;BRTH&quot;,&#xd;
                  &quot;eventValue&quot;:5&#xd;
               }&#xd;
            ]&#xd;
         }&#xd;
      }&#xd;
   }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${zuulBase}</stringProp>
            <stringProp name="HTTPSampler.port">${zuulPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">tvg-campaign-goals-management-service-1/svc/27/maintainGoal</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.proxyHost">${zuulProxy}</stringProp>
            <stringProp name="HTTPSampler.proxyPort">${zuulPortCg}</stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="CampaignGoal_ID" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">CampaignGoal_ID</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.goalNotificationMessage.goal.goalId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CREATED Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1746537160">CREATED</stringProp>
                <stringProp name="-403081501">UNAWARDED</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: CG - Adjudicate" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;goalId&quot;: ${CampaignGoal_ID},&#xd;
	&quot;partnerId&quot;: &quot;AETNA&quot;,&#xd;
	&quot;adjudicationDecision&quot;: &quot;AWARDED&quot;,&#xd;
	&quot;adjudicationDate&quot;: &quot;${dateToday}T09:52:25.371000000-06:00&quot;,&#xd;
	&quot;adjudicationProcessedDate&quot;: &quot;${dateToday}T09:52:25.371000000-06:00[America/Chicago]&quot;&#xd;
	}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/${msPath}/1.0/campaign_goals/adjudicate</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Vitality-Client" elementType="Header">
                  <stringProp name="Header.name">Vitality-Client</stringProp>
                  <stringProp name="Header.value">Aetna</stringProp>
                </elementProp>
                <elementProp name="Vitality-Token" elementType="Header">
                  <stringProp name="Header.name">Vitality-Token</stringProp>
                  <stringProp name="Header.value">${ar_Token}</stringProp>
                </elementProp>
                <elementProp name="Vitality-App-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-App-Version</stringProp>
                  <stringProp name="Header.value">8.4</stringProp>
                </elementProp>
                <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                  <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                  <stringProp name="Header.value">IOS</stringProp>
                </elementProp>
                <elementProp name="Vitality-Language" elementType="Header">
                  <stringProp name="Header.name">Vitality-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Vitality-Device-Id" elementType="Header">
                  <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                  <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                </elementProp>
                <elementProp name="Vitality-Local-Time" elementType="Header">
                  <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                  <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                </elementProp>
                <elementProp name="Vitality-API-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-API-Version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="CampaignGoal_ID" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">CampaignGoal_ID</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.goalNotificationMessage.goal.goalId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ADJUDICATED Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1733827326">ADJUDICATED</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="api.pov.com: RTE, HAS" enabled="false"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Apollo WSO2 Access Token" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="grant_type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">client_credentials</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">grant_type</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/token</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Basic ${wso2Token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extracting WSO2 AccessToken" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">wso2AccessToken</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RTE: Enrolling a new user" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&#xd;
 {&#xd;
  &quot;enrollmentRequestEncrypted&quot;: {&#xd;
    &quot;firstNameEncrypted&quot;: &quot;${encryptedFirstName}&quot;,&#xd;
    &quot;lastNameEncrypted&quot;: &quot;${encryptedLastName}&quot;,&#xd;
    &quot;dateOfBirthEncrypted&quot;: &quot;${encryptedDOB}&quot;,&#xd;
    &quot;insuredId&quot;: &quot;${randomString}&quot;,&#xd;
    &quot;gender&quot;: &quot;${__chooseRandom(M,F,U,randomProduct)}&quot;,&#xd;
    &quot;vitalityCoverageEffectiveDate&quot;: &quot;${__RandomDate(yyyy-MM-dd,2018-01-01,${__time(yyyy-MM-dd)},,)}&quot;,&#xd;
    &quot;productIndicator&quot;: &quot;${__chooseRandom(FULL,SELF,randomProduct)}&quot;,&#xd;
    &quot;emailAddress&quot;: &quot;POC-${randomString}@rte-perf.com&quot;,&#xd;
    &quot;zipCode&quot;: &quot;&quot;,&#xd;
    &quot;customerServicePhone&quot;: &quot;${encryptedPhoneNumber}&quot;,&#xd;
    &quot;reportField1&quot;: &quot;123&quot;,&#xd;
    &quot;reportField2&quot;: &quot;20170701&quot;,&#xd;
    &quot;reportField3&quot;: &quot;ABC&quot;,&#xd;
    &quot;reportField4&quot;: &quot;DEF&quot;&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/${wso2RtePath}/svc/0/apolloEnrollmentEncrypted</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${wso2AccessToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Entity Number" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">entityNo</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.enrollmentResponseEncrypted.vitalityId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert: User has been created" enabled="true">
              <stringProp name="JSON_PATH">$.enrollmentResponseEncrypted.insuredId</stringProp>
              <stringProp name="EXPECTED_VALUE"></stringProp>
              <boolProp name="JSONVALIDATION">false</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: Vitality ID present" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1165624797">vitalityId</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST HAS" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
&quot;ApolloHealthAssessmentSurvey&quot;: {&#xd;
&quot;name&quot;: &quot;Health Ambition Survey&quot;,&#xd;
&quot;webDescription&quot;: &quot;This program is designed to help you reach some of your health goals. In addition to having new opportunities to earn points, the program will involve sending messages for healthier behavior. This survey is meant to help personalize your program. Please answer each question and submit your survey to earn your points.&quot;,&#xd;
&quot;questions&quot;: [&#xd;
	{&#xd;
	&quot;tempUniqueId&quot;: 1,&#xd;
	&quot;order&quot;: 1,&#xd;
	&quot;question&quot;: &quot;Today I feel that I…&quot;,&#xd;
	&quot;questionType&quot;: &quot;chooseOne&quot;,&#xd;
	&quot;questionGuidance&quot;: &quot;Please choose one answer&quot;,&#xd;
	&quot;conditionalParent&quot;: null,&#xd;
	&quot;options&quot;: [&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;A&quot;,&#xd;
					&quot;text&quot;: &quot;have below average health&quot;,&#xd;
					&quot;order&quot;: 1&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;B&quot;,&#xd;
					&quot;text&quot;: &quot;have average health&quot;,&#xd;
					&quot;order&quot;: 2&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;C&quot;,&#xd;
					&quot;text&quot;: &quot;have above average health&quot;,&#xd;
					&quot;order&quot;: 3&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;D&quot;,&#xd;
					&quot;text&quot;: &quot;am very healthy&quot;,&#xd;
					&quot;order&quot;: 4&#xd;
				}]&#xd;
		},&#xd;
		{&#xd;
		&quot;tempUniqueId&quot;: 2,&#xd;
		&quot;order&quot;: 2,&#xd;
		&quot;question&quot;: &quot;What best describes your desire to change your health status…&quot;,&#xd;
		&quot;questionType&quot;: &quot;chooseOne&quot;,&#xd;
		&quot;questionGuidance&quot;: &quot;Choose one&quot;,&#xd;
		&quot;conditionalParent&quot;: {&#xd;
		&quot;tempUniqueIdParent&quot;: 1,&#xd;
		&quot;parentQuestionAnswer&quot;: [&quot;A&quot;]&#xd;
		},&#xd;
			&quot;options&quot;: [&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;A&quot;,&#xd;
					&quot;text&quot;: &quot;I am content with my health&quot;,&#xd;
					&quot;order&quot;: 1&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;B&quot;,&#xd;
					&quot;text&quot;: &quot;I want to take steps to improve my health&quot;,&#xd;
					&quot;order&quot;: 2&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;C&quot;,&#xd;
					&quot;text&quot;: &quot;I am actively taking steps to improve my health&quot;,&#xd;
					&quot;order&quot;: 3&#xd;
				}]&#xd;
		},&#xd;
		{&#xd;
		&quot;tempUniqueId&quot;: 3,&#xd;
		&quot;order&quot;: 3,&#xd;
		&quot;question&quot;: &quot;What best describes your desire to change your health status…&quot;,&#xd;
		&quot;questionType&quot;: &quot;chooseOne&quot;,&#xd;
		&quot;questionGuidance&quot;: &quot;Choose one&quot;,&#xd;
		&quot;conditionalParent&quot;: {&#xd;
		&quot;tempUniqueIdParent&quot;: 1,&#xd;
		&quot;parentQuestionAnswer&quot;: [&quot;B&quot;]&#xd;
		},&#xd;
			&quot;options&quot;: [&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;A&quot;,&#xd;
					&quot;text&quot;: &quot;I am content with my health&quot;,&#xd;
					&quot;order&quot;: 1&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;B&quot;,&#xd;
					&quot;text&quot;: &quot;I want to take steps to improve my health&quot;,&#xd;
					&quot;order&quot;: 2&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;C&quot;,&#xd;
					&quot;text&quot;: &quot;I am actively taking steps to improve my health&quot;,&#xd;
					&quot;order&quot;: 3&#xd;
				}]&#xd;
		},&#xd;
		{&#xd;
		&quot;tempUniqueId&quot;: 4,&#xd;
		&quot;order&quot;: 4,&#xd;
		&quot;question&quot;: &quot;What are your three biggest motivations around health?&quot;,&#xd;
		&quot;questionType&quot;: &quot;chooseMinMax&quot;,&#xd;
		&quot;questionGuidance&quot;: &quot;Please choose up to 3 answers&quot;,&#xd;
		&quot;conditionalParent&quot;: null,&#xd;
		&quot;minMaxOptions&quot;: &#xd;
		{&#xd;
    		&quot;choiceMinimum&quot;: 1,&#xd;
    		&quot;choiceMaximum&quot;: 3&#xd;
    	},&#xd;
			&quot;options&quot;: [&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;A&quot;,&#xd;
					&quot;text&quot;: &quot;I want to be more active&quot;,&#xd;
					&quot;order&quot;: 1&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;B&quot;,&#xd;
					&quot;text&quot;: &quot;I want to have more energy / feel better&quot;,&#xd;
					&quot;order&quot;: 2&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;C&quot;,&#xd;
					&quot;text&quot;: &quot;I want to eat better&quot;,&#xd;
					&quot;order&quot;: 3&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;D&quot;,&#xd;
					&quot;text&quot;: &quot;I want to lose weight&quot;,&#xd;
					&quot;order&quot;: 4&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;E&quot;,&#xd;
					&quot;text&quot;: &quot;I want to look better&quot;,&#xd;
					&quot;order&quot;: 5&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;F&quot;,&#xd;
					&quot;text&quot;: &quot;I want to ensure long-term health for my family&quot;,&#xd;
					&quot;order&quot;: 6&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;G&quot;,&#xd;
					&quot;text&quot;: &quot;I want to reduce medical expenses&quot;,&#xd;
					&quot;order&quot;: 7&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;H&quot;,&#xd;
					&quot;text&quot;: &quot;I want to manage my medical condition better&quot;,&#xd;
					&quot;order&quot;: 8&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;I&quot;,&#xd;
					&quot;text&quot;: &quot;I want to sleep better&quot;,&#xd;
					&quot;order&quot;: 9&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;J&quot;,&#xd;
					&quot;text&quot;: &quot;I want to manage my stress &quot;,&#xd;
					&quot;order&quot;: 10&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;K&quot;,&#xd;
					&quot;text&quot;: &quot;I want to stop using substances that impair my health (alcohol / tobacco / recreational drugs)&quot;,&#xd;
					&quot;order&quot;: 11&#xd;
				}]&#xd;
		},&#xd;
		{&#xd;
		&quot;tempUniqueId&quot;: 5,&#xd;
		&quot;order&quot;: 5,&#xd;
		&quot;question&quot;: &quot;Do any of these barriers prevent you from improving your health?&quot;,&#xd;
		&quot;questionType&quot;: &quot;chooseMinMax&quot;,&#xd;
		&quot;questionGuidance&quot;: &quot;Please choose any that apply&quot;,&#xd;
		&quot;conditionalParent&quot;: null,&#xd;
		&quot;minMaxOptions&quot;: &#xd;
		{&#xd;
    		&quot;choiceMinimum&quot;: 1,&#xd;
    		&quot;choiceMaximum&quot;: 8&#xd;
    	},&#xd;
			&quot;options&quot;: [&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;A&quot;,&#xd;
					&quot;text&quot;: &quot;I am too busy caring for others to spend time on my health&quot;,&#xd;
					&quot;order&quot;: 1&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;B&quot;,&#xd;
					&quot;text&quot;: &quot;I have trouble doing the daily tasks that will improve my health&quot;,&#xd;
					&quot;order&quot;: 2&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;C&quot;,&#xd;
					&quot;text&quot;: &quot;I am too busy professionally to spend time on my health&quot;,&#xd;
					&quot;order&quot;: 3&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;D&quot;,&#xd;
					&quot;text&quot;: &quot;Improving my health will cost too much money&quot;,&#xd;
					&quot;order&quot;: 4&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;E&quot;,&#xd;
					&quot;text&quot;: &quot;I struggle to find the motivation to improve my health&quot;,&#xd;
					&quot;order&quot;: 5&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;F&quot;,&#xd;
					&quot;text&quot;: &quot;I feel my health is beyond my control&quot;,&#xd;
					&quot;order&quot;: 6&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;G&quot;,&#xd;
					&quot;text&quot;: &quot;I do not trust in the health advice I receive&quot;,&#xd;
					&quot;order&quot;: 7&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;H&quot;,&#xd;
					&quot;text&quot;: &quot;The healthcare system is too complex &quot;,&#xd;
					&quot;order&quot;: 8&#xd;
				}]&#xd;
		},&#xd;
		{&#xd;
	    &quot;tempUniqueId&quot;: 6,&#xd;
	    &quot;order&quot;: 6,&#xd;
	    &quot;question&quot;: &quot;How frequently do you experience periods of stress, anxiety or depression?&quot;,&#xd;
	    &quot;questionType&quot;: &quot;chooseOneSlider&quot;,&#xd;
	    &quot;conditionalParent&quot;: null,&#xd;
	    	&quot;options&quot;: [&#xd;
			      {&#xd;
			        &quot;alpha&quot;: &quot;A&quot;,&#xd;
			        &quot;text&quot;: &quot;Never&quot;,&#xd;
			        &quot;order&quot;: 1&#xd;
			      },&#xd;
			      {&#xd;
			        &quot;alpha&quot;: &quot;B&quot;,&#xd;
			        &quot;text&quot;: &quot;Occasionally&quot;,&#xd;
			        &quot;order&quot;: 2&#xd;
			      },&#xd;
			      {&#xd;
			        &quot;alpha&quot;: &quot;C&quot;,&#xd;
			        &quot;text&quot;: &quot;Frequently&quot;,&#xd;
			        &quot;order&quot;: 3&#xd;
			      },&#xd;
			      {&#xd;
			        &quot;alpha&quot;: &quot;D&quot;,&#xd;
			        &quot;text&quot;: &quot;Most of the time&quot;,&#xd;
			        &quot;order&quot;: 4&#xd;
			      }]&#xd;
		},&#xd;
		{&#xd;
	    &quot;tempUniqueId&quot;: 7,&#xd;
	    &quot;order&quot;: 7,&#xd;
	    &quot;question&quot;: &quot;How frequently would you like to receive messages around improving your health or saving money on health-related expenses?&quot;,&#xd;
	    &quot;questionType&quot;: &quot;chooseOneSlider&quot;,&#xd;
	    &quot;conditionalParent&quot;: null,&#xd;
	    	&quot;options&quot;: [&#xd;
			      {&#xd;
			        &quot;alpha&quot;: &quot;A&quot;,&#xd;
			        &quot;text&quot;: &quot;Once a week&quot;,&#xd;
			        &quot;order&quot;: 1&#xd;
			      },&#xd;
			      {&#xd;
			        &quot;alpha&quot;: &quot;B&quot;,&#xd;
			        &quot;text&quot;: &quot;A few times a week&quot;,&#xd;
			        &quot;order&quot;: 2&#xd;
			      },&#xd;
			      {&#xd;
			        &quot;alpha&quot;: &quot;C&quot;,&#xd;
			        &quot;text&quot;: &quot;Once a day&quot;,&#xd;
			        &quot;order&quot;: 3&#xd;
			      },&#xd;
			      {&#xd;
			        &quot;alpha&quot;: &quot;D&quot;,&#xd;
			        &quot;text&quot;: &quot;Multiple times a day&quot;,&#xd;
			        &quot;order&quot;: 4&#xd;
			      }]&#xd;
		},&#xd;
		{&#xd;
		&quot;tempUniqueId&quot;: 8,&#xd;
		&quot;order&quot;: 8,&#xd;
		&quot;question&quot;: &quot;When are you most likely to read short messages from the program on your phone or watch?&quot;,&#xd;
		&quot;questionType&quot;: &quot;chooseOne&quot;,&#xd;
		&quot;questionGuidance&quot;: &quot;Please choose one answer&quot;,&#xd;
		&quot;conditionalParent&quot;: null,&#xd;
			&quot;options&quot;: [&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;A&quot;,&#xd;
					&quot;text&quot;: &quot;Weekdays&quot;,&#xd;
					&quot;order&quot;: 1&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;B&quot;,&#xd;
					&quot;text&quot;: &quot;Weekends&quot;,&#xd;
					&quot;order&quot;: 2&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;C&quot;,&#xd;
					&quot;text&quot;: &quot;Either&quot;,&#xd;
					&quot;order&quot;: 3&#xd;
				}]&#xd;
		},&#xd;
		{&#xd;
	    &quot;tempUniqueId&quot;: 9,&#xd;
	    &quot;order&quot;: 9,&#xd;
	    &quot;question&quot;: &quot;At what time of day do you prefer to receive messages on your phone or watch?&quot;,&#xd;
	    &quot;questionType&quot;: &quot;chooseOneSlider&quot;,&#xd;
	    &quot;conditionalParent&quot;: null,&#xd;
	    	&quot;options&quot;: [&#xd;
			      {&#xd;
			        &quot;alpha&quot;: &quot;A&quot;,&#xd;
			        &quot;text&quot;: &quot;Before 8am&quot;,&#xd;
			        &quot;order&quot;: 1&#xd;
			      },&#xd;
			      {&#xd;
			        &quot;alpha&quot;: &quot;B&quot;,&#xd;
			        &quot;text&quot;: &quot;8am-12pm&quot;,&#xd;
			        &quot;order&quot;: 2&#xd;
			      },&#xd;
			      {&#xd;
			        &quot;alpha&quot;: &quot;C&quot;,&#xd;
			        &quot;text&quot;: &quot;12-4pm&quot;,&#xd;
			        &quot;order&quot;: 3&#xd;
			      },&#xd;
			      {&#xd;
			        &quot;alpha&quot;: &quot;D&quot;,&#xd;
			        &quot;text&quot;: &quot;4-8pm&quot;,&#xd;
			        &quot;order&quot;: 4&#xd;
			      },&#xd;
			      {&#xd;
			        &quot;alpha&quot;: &quot;E&quot;,&#xd;
			        &quot;text&quot;: &quot;After 8pm&quot;,&#xd;
			        &quot;order&quot;: 5&#xd;
			      }]&#xd;
		},&#xd;
		{&#xd;
		&quot;tempUniqueId&quot;: 10,&#xd;
		&quot;order&quot;: 10,&#xd;
		&quot;question&quot;: &quot;Financially:&quot;,&#xd;
		&quot;questionType&quot;: &quot;chooseOne&quot;,&#xd;
		&quot;questionGuidance&quot;: &quot;Choose one&quot;,&#xd;
		&quot;conditionalParent&quot;: null,&#xd;
			&quot;options&quot;: [&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;A&quot;,&#xd;
					&quot;text&quot;: &quot;I am unable to pay my medical expenses&quot;,&#xd;
					&quot;order&quot;: 1&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;B&quot;,&#xd;
					&quot;text&quot;: &quot;I am able to pay my medical expenses, yet I struggle to do so&quot;,&#xd;
					&quot;order&quot;: 2&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;C&quot;,&#xd;
					&quot;text&quot;: &quot;I do not have a problem paying my medical expenses&quot;,&#xd;
					&quot;order&quot;: 3&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;D&quot;,&#xd;
					&quot;text&quot;: &quot;I have not incurred any medical expenses recently&quot;,&#xd;
					&quot;order&quot;: 4&#xd;
				}]&#xd;
		},&#xd;
		{&#xd;
		&quot;tempUniqueId&quot;: 11,&#xd;
		&quot;order&quot;: 11,&#xd;
		&quot;question&quot;: &quot;How aware are you of the options you have to save money on your health such as&quot;,&#xd;
		&quot;questionType&quot;: &quot;chooseMinMax&quot;,&#xd;
		&quot;questionGuidance&quot;: &quot;Choose all that apply&quot;,&#xd;
		&quot;conditionalParent&quot;: {&#xd;
		&quot;tempUniqueIdParent&quot;: 10,&#xd;
		&quot;parentQuestionAnswer&quot;: [&quot;A&quot;]&#xd;
		},&#xd;
			&quot;minMaxOptions&quot;: {&#xd;
    		&quot;choiceMinimum&quot;: 1,&#xd;
    		&quot;choiceMaximum&quot;: 7&#xd;
    	},&#xd;
			&quot;options&quot;: [&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;A&quot;,&#xd;
					&quot;text&quot;: &quot;Using in-network providers&quot;,&#xd;
					&quot;order&quot;: 1&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;B&quot;,&#xd;
					&quot;text&quot;: &quot;Switching from brand name drugs to generic&quot;,&#xd;
					&quot;order&quot;: 2&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;C&quot;,&#xd;
					&quot;text&quot;: &quot;Signing up for home delivery pharmacy&quot;,&#xd;
					&quot;order&quot;: 3&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;D&quot;,&#xd;
					&quot;text&quot;: &quot;Taking advantage of Teladoc&quot;,&#xd;
					&quot;order&quot;: 4&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;E&quot;,&#xd;
					&quot;text&quot;: &quot;Going to walk-in clinics instead of the ER for non-emergent issues&quot;,&#xd;
					&quot;order&quot;: 5&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;F&quot;,&#xd;
					&quot;text&quot;: &quot;Changing to a high-deductible plan during open-enrollment&quot;,&#xd;
					&quot;order&quot;: 6&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;G&quot;,&#xd;
					&quot;text&quot;: &quot;I am not familiar with any of these options&quot;,&#xd;
					&quot;order&quot;: 7&#xd;
				}]&#xd;
		},&#xd;
		{&#xd;
		&quot;tempUniqueId&quot;: 12,&#xd;
		&quot;order&quot;: 12,&#xd;
		&quot;question&quot;: &quot;How aware are you of the options you have to save money on your health such as&quot;,&#xd;
		&quot;questionType&quot;: &quot;chooseMinMax&quot;,&#xd;
		&quot;questionGuidance&quot;: &quot;Choose all that apply&quot;,&#xd;
		&quot;conditionalParent&quot;: {&#xd;
		&quot;tempUniqueIdParent&quot;: 10,&#xd;
		&quot;parentQuestionAnswer&quot;: [&quot;B&quot;]&#xd;
		},&#xd;
			&quot;minMaxOptions&quot;: {&#xd;
    		&quot;choiceMinimum&quot;: 1,&#xd;
    		&quot;choiceMaximum&quot;: 7&#xd;
    	},&#xd;
			&quot;options&quot;: [&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;A&quot;,&#xd;
					&quot;text&quot;: &quot;Using in-network providers&quot;,&#xd;
					&quot;order&quot;: 1&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;B&quot;,&#xd;
					&quot;text&quot;: &quot;Switching from brand name drugs to generic&quot;,&#xd;
					&quot;order&quot;: 2&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;C&quot;,&#xd;
					&quot;text&quot;: &quot;Signing up for home delivery pharmacy&quot;,&#xd;
					&quot;order&quot;: 3&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;D&quot;,&#xd;
					&quot;text&quot;: &quot;Taking advantage of Teladoc&quot;,&#xd;
					&quot;order&quot;: 4&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;E&quot;,&#xd;
					&quot;text&quot;: &quot;Going to walk-in clinics instead of the ER for non-emergent issues&quot;,&#xd;
					&quot;order&quot;: 5&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;F&quot;,&#xd;
					&quot;text&quot;: &quot;Changing to a high-deductible plan during open-enrollment&quot;,&#xd;
					&quot;order&quot;: 6&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;G&quot;,&#xd;
					&quot;text&quot;: &quot;I am not familiar with any of these options&quot;,&#xd;
					&quot;order&quot;: 7&#xd;
				}]&#xd;
		},&#xd;
		{&#xd;
		&quot;tempUniqueId&quot;: 13,&#xd;
		&quot;order&quot;: 13,&#xd;
		&quot;question&quot;: &quot;From whom do you prefer to get healthcare information?&quot;,&#xd;
		&quot;questionType&quot;: &quot;chooseOne&quot;,&#xd;
		&quot;questionGuidance&quot;: &quot;Please choose one answer&quot;,&#xd;
		&quot;conditionalParent&quot;: null,&#xd;
			&quot;options&quot;: [&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;A&quot;,&#xd;
					&quot;text&quot;: &quot;Your doctor&quot;,&#xd;
					&quot;order&quot;: 1&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;B&quot;,&#xd;
					&quot;text&quot;: &quot;A doctor&quot;,&#xd;
					&quot;order&quot;: 2&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;C&quot;,&#xd;
					&quot;text&quot;: &quot;Pharmacist&quot;,&#xd;
					&quot;order&quot;: 3&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;D&quot;,&#xd;
					&quot;text&quot;: &quot;Aetna&quot;,&#xd;
					&quot;order&quot;: 4&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;E&quot;,&#xd;
					&quot;text&quot;: &quot;Online resources&quot;,&#xd;
					&quot;order&quot;: 5&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;F&quot;,&#xd;
					&quot;text&quot;: &quot;Family / friends&quot;,&#xd;
					&quot;order&quot;: 6&#xd;
				}]&#xd;
		},&#xd;
		{&#xd;
		&quot;tempUniqueId&quot;: 14,&#xd;
		&quot;order&quot;: 14,&#xd;
		&quot;question&quot;: &quot;What are you hoping to get out of this program?&quot;,&#xd;
		&quot;questionType&quot;: &quot;chooseMinMax&quot;,&#xd;
		&quot;questionGuidance&quot;: &quot;Choose all that apply&quot;,&#xd;
		&quot;conditionalParent&quot;: null,&#xd;
		&quot;minMaxOptions&quot;: &#xd;
			{&#xd;
		      &quot;choiceMinimum&quot;: 1,&#xd;
		      &quot;choiceMaximum&quot;:7&#xd;
		    },&#xd;
			&quot;options&quot;: [&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;A&quot;,&#xd;
					&quot;text&quot;: &quot;I want extra motivation to be healthy&quot;,&#xd;
					&quot;order&quot;: 1&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;B&quot;,&#xd;
					&quot;text&quot;: &quot;I want to earn money / Watch / other gifts&quot;,&#xd;
					&quot;order&quot;: 2&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;C&quot;,&#xd;
					&quot;text&quot;: &quot;I want help losing weight&quot;,&#xd;
					&quot;order&quot;: 3&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;D&quot;,&#xd;
					&quot;text&quot;: &quot;I want to make a difference by choosing to share information for scientific research&quot;,&#xd;
					&quot;order&quot;: 4&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;E&quot;,&#xd;
					&quot;text&quot;: &quot;I want help improving my medical condition&quot;,&#xd;
					&quot;order&quot;: 5&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;F&quot;,&#xd;
					&quot;text&quot;: &quot;I want to learn more about my health&quot;,&#xd;
					&quot;order&quot;: 6&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;G&quot;,&#xd;
					&quot;text&quot;: &quot;I want something else&quot;,&#xd;
					&quot;order&quot;: 7&#xd;
				}]&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/${wso2RestPath}/apollo/survey/create</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${wso2AccessToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Sapphire" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">10</stringProp>
        <stringProp name="ThreadGroup.ramp_time">10</stringProp>
        <longProp name="ThreadGroup.start_time">1514078571000</longProp>
        <longProp name="ThreadGroup.end_time">1514078571000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">300</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Users: Sapphire" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="966683005">sapphireId</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="230446928">
              <stringProp name="1374910743">${sapphireID_1}</stringProp>
            </collectionProp>
            <collectionProp name="230450437">
              <stringProp name="1374910774">${sapphireID_2}</stringProp>
            </collectionProp>
            <collectionProp name="230478033">
              <stringProp name="1374910805">${sapphireID_3}</stringProp>
            </collectionProp>
            <collectionProp name="230481542">
              <stringProp name="1374910836">${sapphireID_4}</stringProp>
            </collectionProp>
            <collectionProp name="230485051">
              <stringProp name="1374910867">${sapphireID_5}</stringProp>
            </collectionProp>
            <collectionProp name="230488560">
              <stringProp name="1374910898">${sapphireID_6}</stringProp>
            </collectionProp>
            <collectionProp name="230516156">
              <stringProp name="1374910929">${sapphireID_7}</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${wso2Base}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout">30000</stringProp>
          <stringProp name="HTTPSampler.response_timeout">300000</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Encrypting Entity" enabled="true">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">import java.security.MessageDigest;

MessageDigest digest = MessageDigest.getInstance(&quot;MD5&quot;);
byte[] bytes = digest.digest((&quot;${sapphireId}&quot; + &quot;${msSalt}&quot;).getBytes());
vars.put(&quot;sapphireIdEncrypted&quot;,javax.xml.bind.DatatypeConverter.printHexBinary(bytes).toLowerCase());</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST WSO2 Access Token" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="grant_type" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">client_credentials</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">grant_type</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api/token</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Basic ${wso2Token}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extracting WSO2 AccessToken" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">wso2AccessToken</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="Sample.scope">all</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST RTE Token: Generate" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;issuedDate&quot;: &quot;${dateToday}&quot;,&#xd;
  &quot;entityNo&quot;: null,&#xd;
  &quot;expiryDate&quot;: &quot;${dateTomorrow}&quot;,&#xd;
  &quot;verifiedDate&quot;: null,&#xd;
  &quot;partnerId&quot;: &quot;${bbPartnerId}&quot;,&#xd;
  &quot;generatedBy&quot;: &quot;PERF-TEST&quot;,&#xd;
  &quot;tokenType&quot;: &quot;Token&quot;,&#xd;
  &quot;tokenValue&quot;: &quot;${BESTBUY1DUMMY}&quot;,&#xd;
  &quot;status&quot;: &quot;P&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${zuulHostRte}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">vitality-whitelabel-domain-service-1/svc/2/token.json</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.proxyHost">${zuulProxy}</stringProp>
          <stringProp name="HTTPSampler.proxyPort">${proxyPort}</stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="RTE Token: WhiteLable" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">sapphireRteToken</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.tokenValue</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert: sapphireRteToken" enabled="true">
            <stringProp name="JSON_PATH">$.tokenValue</stringProp>
            <stringProp name="EXPECTED_VALUE">${sapphireRteToken}</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST RTE Token Validation" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;validateTokenRequest&quot;: {&#xd;
    &quot;partnerId&quot;: &quot;BESTBUY&quot;,&#xd;
    &quot;tokenId&quot;: &quot;${sapphireRteToken}&quot;&#xd;
  }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api/whitelabel-rte/1.0/svc/2/validateToken</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${wso2AccessToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: Token is valid" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1616563228">validateTokenResponse</stringProp>
              <stringProp name="-374023120">tokenAttributes</stringProp>
              <stringProp name="-2031077811">isTokenValid</stringProp>
              <stringProp name="3569038">true</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RTE: Sapphire Create a New User" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
 &quot;enrollMemberRequest&quot;: {&#xd;
   &quot;coverageEffectiveDate&quot;: &quot;${dateToday}&quot;,&#xd;
   &quot;dateOfBirth&quot;: &quot;${__RandomDate(yyyy-MM-dd,1930-01-01,2001-12-31,,)}&quot;,&#xd;
   &quot;firstName&quot;: &quot;${randomString}&quot;,&#xd;
   &quot;gender&quot;: &quot;${__chooseRandom(M,F,U,randomProduct)}&quot;,&#xd;
   &quot;lastName&quot;: &quot;${randomString}&quot;,&#xd;
   &quot;partnerId&quot;: &quot;BESTBUY&quot;,&#xd;
   &quot;uniqueId&quot;: &quot;${sapphireRteToken}&quot;,&#xd;
   &quot;zipCode&quot;: &quot;60605&quot;&#xd;
 }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api/whitelabel-rte/1.0/svc/2/enrollMember</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${wso2AccessToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: Vitality ID present" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1203236063">errorMessage</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract entityNo" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">sapphireId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.enrollMemberResponse.vitalityId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="POST Activate" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST MS WSO2 Access Token" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="grant_type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">client_credentials</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">grant_type</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/token</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Basic ${msWso2Token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="msWso2Bearer" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">msWso2Bearer</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Activate" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
&quot;tenantId&quot;: &quot;32&quot;,&#xd;
&quot;mode&quot;: &quot;Activate&quot;,&#xd;
&quot;programme&quot;: {&#xd;
&quot;entityNumber&quot;: ${sapphireId}, &#xd;
&quot;programType&quot;: &quot;ActiveRewards&quot;,&#xd;
&quot;effectivePeriods&quot;: [&#xd;
{&#xd;
&quot;effectiveFrom&quot;: &quot;${dateToday}&quot;,&#xd;
&quot;effectiveTo&quot;: &quot;9999-12-30&quot;&#xd;
}&#xd;
]&#xd;
}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/${arPath}/1.0/Activation</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-vsl-timestamp</stringProp>
                  <stringProp name="Header.value">${timeStamp}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${msWso2Bearer}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Programme Activated Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1044234867">Programme Activated</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Auth Token" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="entity_no" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${sapphireId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">entity_no</stringProp>
              </elementProp>
              <elementProp name="encrypted_entity_no" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${sapphireIdEncrypted}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">encrypted_entity_no</stringProp>
              </elementProp>
              <elementProp name="_p" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">IOS</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_p</stringProp>
              </elementProp>
              <elementProp name="_v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${mob.app.version}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_v</stringProp>
              </elementProp>
              <elementProp name="_doc_browser_context" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_doc_browser_context</stringProp>
              </elementProp>
              <elementProp name="_c" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">BESTBUY</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_c</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${msBase}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${msPath}/auth/simulate_auth</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Ignore Response Code" enabled="true">
            <collectionProp name="Asserion.test_strings"/>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Active Rewards Token" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">ar_Token</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.session.token</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-950083557">status&quot; : 1</stringProp>
              <stringProp name="-950083558">status&quot; : 0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">34</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Accept T&amp;C" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api/whitelabel-mobile-api/1.0/registration/accept_terms_and_conditions</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
              </elementProp>
              <elementProp name="Vitality-Client" elementType="Header">
                <stringProp name="Header.name">Vitality-Client</stringProp>
                <stringProp name="Header.value">BESTBUY</stringProp>
              </elementProp>
              <elementProp name="Vitality-Token" elementType="Header">
                <stringProp name="Header.name">Vitality-Token</stringProp>
                <stringProp name="Header.value">${ar_Token}</stringProp>
              </elementProp>
              <elementProp name="Vitality-App-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-App-Version</stringProp>
                <stringProp name="Header.value">7</stringProp>
              </elementProp>
              <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                <stringProp name="Header.value">IOS</stringProp>
              </elementProp>
              <elementProp name="Vitality-Language" elementType="Header">
                <stringProp name="Header.name">Vitality-Language</stringProp>
                <stringProp name="Header.value">en</stringProp>
              </elementProp>
              <elementProp name="Vitality-Device-Id" elementType="Header">
                <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
              </elementProp>
              <elementProp name="Vitality-Local-Time" elementType="Header">
                <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
              </elementProp>
              <elementProp name="Vitality-API-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-API-Version</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-160985414">first_name</stringProp>
              <stringProp name="2013122196">last_name</stringProp>
              <stringProp name="110541305">token</stringProp>
              <stringProp name="-1249512767">gender</stringProp>
              <stringProp name="-1181815352">date_of_birth</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Check Username: Valid" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="username" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${enviroment}${randomString}@sapphire.com</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">username</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api/whitelabel-mobile-api/1.0/registration/check_username</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
              </elementProp>
              <elementProp name="Vitality-Client" elementType="Header">
                <stringProp name="Header.name">Vitality-Client</stringProp>
                <stringProp name="Header.value">BESTBUY</stringProp>
              </elementProp>
              <elementProp name="Vitality-App-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-App-Version</stringProp>
                <stringProp name="Header.value">7</stringProp>
              </elementProp>
              <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                <stringProp name="Header.value">IOS</stringProp>
              </elementProp>
              <elementProp name="Vitality-Language" elementType="Header">
                <stringProp name="Header.name">Vitality-Language</stringProp>
                <stringProp name="Header.value">en</stringProp>
              </elementProp>
              <elementProp name="Vitality-Device-Id" elementType="Header">
                <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
              </elementProp>
              <elementProp name="Vitality-Local-Time" elementType="Header">
                <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
              </elementProp>
              <elementProp name="Vitality-API-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-API-Version</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-161783867">&quot;status&quot;:1</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Check Username: Invalid" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="username" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${enviroment}${randomString}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">username</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api/whitelabel-mobile-api/1.0/registration/check_username</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
              </elementProp>
              <elementProp name="Vitality-Client" elementType="Header">
                <stringProp name="Header.name">Vitality-Client</stringProp>
                <stringProp name="Header.value">BESTBUY</stringProp>
              </elementProp>
              <elementProp name="Vitality-App-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-App-Version</stringProp>
                <stringProp name="Header.value">7</stringProp>
              </elementProp>
              <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                <stringProp name="Header.value">IOS</stringProp>
              </elementProp>
              <elementProp name="Vitality-Language" elementType="Header">
                <stringProp name="Header.name">Vitality-Language</stringProp>
                <stringProp name="Header.value">en</stringProp>
              </elementProp>
              <elementProp name="Vitality-Device-Id" elementType="Header">
                <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
              </elementProp>
              <elementProp name="Vitality-Local-Time" elementType="Header">
                <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
              </elementProp>
              <elementProp name="Vitality-API-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-API-Version</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Ignore 500 code" enabled="true">
            <collectionProp name="Asserion.test_strings"/>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1694715979">You used an invalid email format</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Check Password" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="password" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">P@ssw0rd</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">password</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api/whitelabel-mobile-api/1.0/registration/validate_password</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
              </elementProp>
              <elementProp name="Vitality-Client" elementType="Header">
                <stringProp name="Header.name">Vitality-Client</stringProp>
                <stringProp name="Header.value">BESTBUY</stringProp>
              </elementProp>
              <elementProp name="Vitality-App-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-App-Version</stringProp>
                <stringProp name="Header.value">7</stringProp>
              </elementProp>
              <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                <stringProp name="Header.value">IOS</stringProp>
              </elementProp>
              <elementProp name="Vitality-Language" elementType="Header">
                <stringProp name="Header.name">Vitality-Language</stringProp>
                <stringProp name="Header.value">en</stringProp>
              </elementProp>
              <elementProp name="Vitality-Device-Id" elementType="Header">
                <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
              </elementProp>
              <elementProp name="Vitality-Local-Time" elementType="Header">
                <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
              </elementProp>
              <elementProp name="Vitality-API-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-API-Version</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-161783867">&quot;status&quot;:1</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Get Security Questions" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api/whitelabel-mobile-api/1.0/registration/get_security_questions</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
              </elementProp>
              <elementProp name="Vitality-Client" elementType="Header">
                <stringProp name="Header.name">Vitality-Client</stringProp>
                <stringProp name="Header.value">BESTBUY</stringProp>
              </elementProp>
              <elementProp name="Vitality-Token" elementType="Header">
                <stringProp name="Header.name">Vitality-Token</stringProp>
                <stringProp name="Header.value">${ar_Token}</stringProp>
              </elementProp>
              <elementProp name="Vitality-App-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-App-Version</stringProp>
                <stringProp name="Header.value">7</stringProp>
              </elementProp>
              <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                <stringProp name="Header.value">IOS</stringProp>
              </elementProp>
              <elementProp name="Vitality-Language" elementType="Header">
                <stringProp name="Header.name">Vitality-Language</stringProp>
                <stringProp name="Header.value">en</stringProp>
              </elementProp>
              <elementProp name="Vitality-Device-Id" elementType="Header">
                <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
              </elementProp>
              <elementProp name="Vitality-Local-Time" elementType="Header">
                <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
              </elementProp>
              <elementProp name="Vitality-API-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-API-Version</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Security Questions Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1756474666">What is your mother&apos;s maiden name?</stringProp>
              <stringProp name="-1356961676">In what city was your first job?</stringProp>
              <stringProp name="1564291278">What was your high school mascot?</stringProp>
              <stringProp name="-2093164811">What was your first pet&apos;s name?</stringProp>
              <stringProp name="1430685173">What was your first car?</stringProp>
              <stringProp name="1220463951">What was your childhood nickname?</stringProp>
              <stringProp name="-1442342085">What is your paternal grandmother&apos;s first name?</stringProp>
              <stringProp name="2019996010">In what city were you born?</stringProp>
              <stringProp name="-1737821990">What was the street name of your childhood home?</stringProp>
              <stringProp name="-407625967">What is the name of your favorite teacher?</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET AR Eligibility" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api/whitelabel-mobile-api/1.0/active_rewards/eligibility</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
              </elementProp>
              <elementProp name="Vitality-Client" elementType="Header">
                <stringProp name="Header.name">Vitality-Client</stringProp>
                <stringProp name="Header.value">BESTBUY</stringProp>
              </elementProp>
              <elementProp name="Vitality-Token" elementType="Header">
                <stringProp name="Header.name">Vitality-Token</stringProp>
                <stringProp name="Header.value">${ar_Token}</stringProp>
              </elementProp>
              <elementProp name="Vitality-App-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-App-Version</stringProp>
                <stringProp name="Header.value">7</stringProp>
              </elementProp>
              <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                <stringProp name="Header.value">IOS</stringProp>
              </elementProp>
              <elementProp name="Vitality-Language" elementType="Header">
                <stringProp name="Header.name">Vitality-Language</stringProp>
                <stringProp name="Header.value">en</stringProp>
              </elementProp>
              <elementProp name="Vitality-Device-Id" elementType="Header">
                <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
              </elementProp>
              <elementProp name="Vitality-Local-Time" elementType="Header">
                <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
              </elementProp>
              <elementProp name="Vitality-API-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-API-Version</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Eligibility Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-68120096">APWatch</stringProp>
              <stringProp name="720178462">ActiveRewards</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET AR Goals" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="goalType" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">weekly</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">goalType</stringProp>
              </elementProp>
              <elementProp name="offset" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">offset</stringProp>
              </elementProp>
              <elementProp name="limit" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">15</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">limit</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api/whitelabel-mobile-api/1.0/active_rewards/goals</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
              </elementProp>
              <elementProp name="Vitality-Client" elementType="Header">
                <stringProp name="Header.name">Vitality-Client</stringProp>
                <stringProp name="Header.value">BESTBUY</stringProp>
              </elementProp>
              <elementProp name="Vitality-Token" elementType="Header">
                <stringProp name="Header.name">Vitality-Token</stringProp>
                <stringProp name="Header.value">${ar_Token}</stringProp>
              </elementProp>
              <elementProp name="Vitality-App-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-App-Version</stringProp>
                <stringProp name="Header.value">7</stringProp>
              </elementProp>
              <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                <stringProp name="Header.value">IOS</stringProp>
              </elementProp>
              <elementProp name="Vitality-Language" elementType="Header">
                <stringProp name="Header.name">Vitality-Language</stringProp>
                <stringProp name="Header.value">en</stringProp>
              </elementProp>
              <elementProp name="Vitality-Device-Id" elementType="Header">
                <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
              </elementProp>
              <elementProp name="Vitality-Local-Time" elementType="Header">
                <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
              </elementProp>
              <elementProp name="Vitality-API-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-API-Version</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Goals Type Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-791707519">weekly</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET AR Current Goals" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api/whitelabel-mobile-api/1.0/active_rewards/current_goals</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
              </elementProp>
              <elementProp name="Vitality-Client" elementType="Header">
                <stringProp name="Header.name">Vitality-Client</stringProp>
                <stringProp name="Header.value">BESTBUY</stringProp>
              </elementProp>
              <elementProp name="Vitality-Token" elementType="Header">
                <stringProp name="Header.name">Vitality-Token</stringProp>
                <stringProp name="Header.value">${ar_Token}</stringProp>
              </elementProp>
              <elementProp name="Vitality-App-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-App-Version</stringProp>
                <stringProp name="Header.value">7</stringProp>
              </elementProp>
              <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                <stringProp name="Header.value">IOS</stringProp>
              </elementProp>
              <elementProp name="Vitality-Language" elementType="Header">
                <stringProp name="Header.name">Vitality-Language</stringProp>
                <stringProp name="Header.value">en</stringProp>
              </elementProp>
              <elementProp name="Vitality-Device-Id" elementType="Header">
                <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
              </elementProp>
              <elementProp name="Vitality-Local-Time" elementType="Header">
                <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
              </elementProp>
              <elementProp name="Vitality-API-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-API-Version</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Goal ID" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">arGoalId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.output.goals[0].id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Goals Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-791707519">weekly</stringProp>
              <stringProp name="656467758">Best Buy weekly reward configuration</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET AR Goal" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="goalId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${arGoalId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">goalId</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api/whitelabel-mobile-api/1.0/active_rewards/goal</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
              </elementProp>
              <elementProp name="Vitality-Client" elementType="Header">
                <stringProp name="Header.name">Vitality-Client</stringProp>
                <stringProp name="Header.value">BESTBUY</stringProp>
              </elementProp>
              <elementProp name="Vitality-Token" elementType="Header">
                <stringProp name="Header.name">Vitality-Token</stringProp>
                <stringProp name="Header.value">${ar_Token}</stringProp>
              </elementProp>
              <elementProp name="Vitality-App-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-App-Version</stringProp>
                <stringProp name="Header.value">7</stringProp>
              </elementProp>
              <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                <stringProp name="Header.value">IOS</stringProp>
              </elementProp>
              <elementProp name="Vitality-Language" elementType="Header">
                <stringProp name="Header.name">Vitality-Language</stringProp>
                <stringProp name="Header.value">en</stringProp>
              </elementProp>
              <elementProp name="Vitality-Device-Id" elementType="Header">
                <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
              </elementProp>
              <elementProp name="Vitality-Local-Time" elementType="Header">
                <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
              </elementProp>
              <elementProp name="Vitality-API-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-API-Version</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Goals Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-791707519">weekly</stringProp>
              <stringProp name="656467758">Best Buy weekly reward configuration</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET AR Rewards Groups" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api/whitelabel-mobile-api/1.0/active_rewards/get_rewards_groups</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
              </elementProp>
              <elementProp name="Vitality-Client" elementType="Header">
                <stringProp name="Header.name">Vitality-Client</stringProp>
                <stringProp name="Header.value">BESTBUY</stringProp>
              </elementProp>
              <elementProp name="Vitality-Token" elementType="Header">
                <stringProp name="Header.name">Vitality-Token</stringProp>
                <stringProp name="Header.value">${ar_Token}</stringProp>
              </elementProp>
              <elementProp name="Vitality-App-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-App-Version</stringProp>
                <stringProp name="Header.value">7</stringProp>
              </elementProp>
              <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                <stringProp name="Header.value">IOS</stringProp>
              </elementProp>
              <elementProp name="Vitality-Language" elementType="Header">
                <stringProp name="Header.name">Vitality-Language</stringProp>
                <stringProp name="Header.value">en</stringProp>
              </elementProp>
              <elementProp name="Vitality-Device-Id" elementType="Header">
                <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
              </elementProp>
              <elementProp name="Vitality-Local-Time" elementType="Header">
                <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
              </elementProp>
              <elementProp name="Vitality-API-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-API-Version</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Rewards Group Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2031199">BB10</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST VDP: ROUTINE" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
 &quot;device&quot;: {&#xd;
   &quot;deviceId&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}&quot;,&#xd;
   &quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
   &quot;model&quot;: &quot;iOS 10.0.1&quot;&#xd;
 },&#xd;
	 &quot;header&quot;: {&#xd;
	   &quot;partnerSystem&quot;: &quot;Apple&quot;,&#xd;
	   &quot;processingType&quot;: &quot;BATCH&quot;,&#xd;
	   &quot;rawUploadData&quot;: &quot;&quot;,&#xd;
	   &quot;sessionId&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}&quot;,&#xd;
	   &quot;tenantId&quot;: &quot;32&quot;,&#xd;
	   &quot;uploadCount&quot;: 3,&#xd;
	   &quot;uploadDate&quot;: &quot;${dateToday}T00:00:00+03:00&quot;,&#xd;
	   &quot;user&quot;: {&#xd;
	     &quot;entityNo&quot;: &quot;${sapphireId}&quot;,&#xd;
	     &quot;partnerUserId&quot;: &quot;&quot;&#xd;
	  },&#xd;
	   &quot;verified&quot;: &quot;true&quot;&#xd;
	  },&#xd;
		 &quot;readings&quot;: [&#xd;
		   {&#xd;
		     &quot;dataCategory&quot;: &quot;BIOMETRIC&quot;,&#xd;
		     &quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00+03:00&quot;,&#xd;
		     &quot;healthData&quot;: {&#xd;
		     &quot;weight&quot;: {&#xd;
		     &quot;unitOfMeasurement&quot;: &quot;KILOGRAMS&quot;,&#xd;
		     &quot;value&quot;: 80.5&#xd;
		       }&#xd;
     },&#xd;
     &quot;integrity&quot;: &quot;UNVERIFIED&quot;,&#xd;
     &quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
     &quot;model&quot;: &quot;iOS 10.0.1&quot;,&#xd;
     &quot;partnerReadingId&quot;: &quot;${dateToday}${randomAlphaNumericString}&quot;,&#xd;
     &quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
     &quot;readingType&quot;: &quot;WEIGHT&quot;,&#xd;
     &quot;startTime&quot;: &quot;${dateToday}T00:00:00+03:00&quot;&#xd;
   },&#xd;
   {&#xd;
     &quot;dataCategory&quot;: &quot;ROUTINE&quot;,&#xd;
     &quot;duration&quot;: 86400,&#xd;
     &quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00+03:00&quot;,&#xd;
     &quot;integrity&quot;: &quot;VERIFIED&quot;,&#xd;
     &quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
     &quot;model&quot;: &quot;iOS 10.0.1&quot;,&#xd;
     &quot;partnerReadingId&quot;: &quot;${dateToday}${randomAlphaNumericString}&quot;,&#xd;
     &quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
     &quot;readingType&quot;: &quot;WALKING&quot;,&#xd;
     &quot;startTime&quot;: &quot;${dateToday}T00:00:00+03:00&quot;,&#xd;
     &quot;workout&quot;: {&#xd;
       &quot;energyExpenditure&quot;: {&#xd;
         &quot;unitOfMeasurement&quot;: &quot;KILOCALORIES&quot;,&#xd;
         &quot;value&quot;: 1200&#xd;
       }&#xd;
     }&#xd;
   }&#xd;
   &#xd;
 ]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api/${msPath}/1.0/health_data/upload</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Vitality-Token" elementType="Header">
                <stringProp name="Header.name">Vitality-Token</stringProp>
                <stringProp name="Header.value">${ar_Token}</stringProp>
              </elementProp>
              <elementProp name="Vitality-App-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-App-Version</stringProp>
                <stringProp name="Header.value">7</stringProp>
              </elementProp>
              <elementProp name="Vitality-Language" elementType="Header">
                <stringProp name="Header.name">Vitality-Language</stringProp>
                <stringProp name="Header.value">en</stringProp>
              </elementProp>
              <elementProp name="Vitality-Device-Id" elementType="Header">
                <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                <stringProp name="Header.value">swagger-3f802407-77b4-407c-a758-842af5830c2b</stringProp>
              </elementProp>
              <elementProp name="Vitality-Local-Time" elementType="Header">
                <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                <stringProp name="Header.value">${__time(yyyy-MM-dd,)}</stringProp>
              </elementProp>
              <elementProp name="Vitality-API-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-API-Version</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                <stringProp name="Header.value">IOS</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Health Data Upload Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1880474659">Successfully Uploaded Health Data to GDL</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET AR Streak Summary" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api/whitelabel-mobile-api/1.0/active_rewards/streak_summary</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
              </elementProp>
              <elementProp name="Vitality-Client" elementType="Header">
                <stringProp name="Header.name">Vitality-Client</stringProp>
                <stringProp name="Header.value">BESTBUY</stringProp>
              </elementProp>
              <elementProp name="Vitality-Token" elementType="Header">
                <stringProp name="Header.name">Vitality-Token</stringProp>
                <stringProp name="Header.value">${ar_Token}</stringProp>
              </elementProp>
              <elementProp name="Vitality-App-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-App-Version</stringProp>
                <stringProp name="Header.value">7</stringProp>
              </elementProp>
              <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                <stringProp name="Header.value">IOS</stringProp>
              </elementProp>
              <elementProp name="Vitality-Language" elementType="Header">
                <stringProp name="Header.name">Vitality-Language</stringProp>
                <stringProp name="Header.value">en</stringProp>
              </elementProp>
              <elementProp name="Vitality-Device-Id" elementType="Header">
                <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
              </elementProp>
              <elementProp name="Vitality-Local-Time" elementType="Header">
                <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
              </elementProp>
              <elementProp name="Vitality-API-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-API-Version</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Streak Reward Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1736004014">best-buy-streak-reward</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Health Data Settings" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api/whitelabel-mobile-api/1.0/health_data/settings</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
              </elementProp>
              <elementProp name="Vitality-Client" elementType="Header">
                <stringProp name="Header.name">Vitality-Client</stringProp>
                <stringProp name="Header.value">BESTBUY</stringProp>
              </elementProp>
              <elementProp name="Vitality-Token" elementType="Header">
                <stringProp name="Header.name">Vitality-Token</stringProp>
                <stringProp name="Header.value">${ar_Token}</stringProp>
              </elementProp>
              <elementProp name="Vitality-App-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-App-Version</stringProp>
                <stringProp name="Header.value">7</stringProp>
              </elementProp>
              <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                <stringProp name="Header.value">IOS</stringProp>
              </elementProp>
              <elementProp name="Vitality-Language" elementType="Header">
                <stringProp name="Header.name">Vitality-Language</stringProp>
                <stringProp name="Header.value">en</stringProp>
              </elementProp>
              <elementProp name="Vitality-Device-Id" elementType="Header">
                <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
              </elementProp>
              <elementProp name="Vitality-Local-Time" elementType="Header">
                <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
              </elementProp>
              <elementProp name="Vitality-API-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-API-Version</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Streak Reward Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-2070259289">status&quot;:1</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Dashboard Vitality Bucks " enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api/whitelabel-mobile-api/1.0/health_data/settings</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
              </elementProp>
              <elementProp name="Vitality-Client" elementType="Header">
                <stringProp name="Header.name">Vitality-Client</stringProp>
                <stringProp name="Header.value">BESTBUY</stringProp>
              </elementProp>
              <elementProp name="Vitality-Token" elementType="Header">
                <stringProp name="Header.name">Vitality-Token</stringProp>
                <stringProp name="Header.value">${ar_Token}</stringProp>
              </elementProp>
              <elementProp name="Vitality-App-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-App-Version</stringProp>
                <stringProp name="Header.value">7</stringProp>
              </elementProp>
              <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                <stringProp name="Header.value">IOS</stringProp>
              </elementProp>
              <elementProp name="Vitality-Language" elementType="Header">
                <stringProp name="Header.name">Vitality-Language</stringProp>
                <stringProp name="Header.value">en</stringProp>
              </elementProp>
              <elementProp name="Vitality-Device-Id" elementType="Header">
                <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
              </elementProp>
              <elementProp name="Vitality-Local-Time" elementType="Header">
                <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
              </elementProp>
              <elementProp name="Vitality-API-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-API-Version</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Vitality Bucks Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-2070259289">status&quot;:1</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Register Push Token" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="push_token" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${randomAlphaNumericString}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">push_token</stringProp>
              </elementProp>
              <elementProp name="device_id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${randomNumericString}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">device_id</stringProp>
              </elementProp>
              <elementProp name="platform" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">IOS</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">platform</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api/${msPath}/1.0/notifications/register_push_token</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
              </elementProp>
              <elementProp name="Vitality-Client" elementType="Header">
                <stringProp name="Header.name">Vitality-Client</stringProp>
                <stringProp name="Header.value">BESTBUY</stringProp>
              </elementProp>
              <elementProp name="Vitality-Token" elementType="Header">
                <stringProp name="Header.name">Vitality-Token</stringProp>
                <stringProp name="Header.value">${ar_Token}</stringProp>
              </elementProp>
              <elementProp name="Vitality-App-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-App-Version</stringProp>
                <stringProp name="Header.value">7</stringProp>
              </elementProp>
              <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                <stringProp name="Header.value">IOS</stringProp>
              </elementProp>
              <elementProp name="Vitality-Language" elementType="Header">
                <stringProp name="Header.name">Vitality-Language</stringProp>
                <stringProp name="Header.value">en</stringProp>
              </elementProp>
              <elementProp name="Vitality-Device-Id" elementType="Header">
                <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
              </elementProp>
              <elementProp name="Vitality-Local-Time" elementType="Header">
                <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
              </elementProp>
              <elementProp name="Vitality-API-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-API-Version</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion that Status = 1" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-161783867">&quot;status&quot;:1</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Set Push Enabled" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="enabled" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">enabled</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api/${msPath}/1.0/notifications/set_push_enabled</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
              </elementProp>
              <elementProp name="Vitality-Client" elementType="Header">
                <stringProp name="Header.name">Vitality-Client</stringProp>
                <stringProp name="Header.value">BESTBUY</stringProp>
              </elementProp>
              <elementProp name="Vitality-Token" elementType="Header">
                <stringProp name="Header.name">Vitality-Token</stringProp>
                <stringProp name="Header.value">${ar_Token}</stringProp>
              </elementProp>
              <elementProp name="Vitality-App-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-App-Version</stringProp>
                <stringProp name="Header.value">7</stringProp>
              </elementProp>
              <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                <stringProp name="Header.value">IOS</stringProp>
              </elementProp>
              <elementProp name="Vitality-Language" elementType="Header">
                <stringProp name="Header.name">Vitality-Language</stringProp>
                <stringProp name="Header.value">en</stringProp>
              </elementProp>
              <elementProp name="Vitality-Device-Id" elementType="Header">
                <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
              </elementProp>
              <elementProp name="Vitality-Local-Time" elementType="Header">
                <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
              </elementProp>
              <elementProp name="Vitality-API-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-API-Version</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Feedback Faq" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api/whitelabel-mobile-api/1.0/feedback/faq</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
              </elementProp>
              <elementProp name="Vitality-Client" elementType="Header">
                <stringProp name="Header.name">Vitality-Client</stringProp>
                <stringProp name="Header.value">BESTBUY</stringProp>
              </elementProp>
              <elementProp name="Vitality-Token" elementType="Header">
                <stringProp name="Header.name">Vitality-Token</stringProp>
                <stringProp name="Header.value">${ar_Token}</stringProp>
              </elementProp>
              <elementProp name="Vitality-App-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-App-Version</stringProp>
                <stringProp name="Header.value">7</stringProp>
              </elementProp>
              <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                <stringProp name="Header.value">IOS</stringProp>
              </elementProp>
              <elementProp name="Vitality-Language" elementType="Header">
                <stringProp name="Header.name">Vitality-Language</stringProp>
                <stringProp name="Header.value">en</stringProp>
              </elementProp>
              <elementProp name="Vitality-Device-Id" elementType="Header">
                <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
              </elementProp>
              <elementProp name="Vitality-Local-Time" elementType="Header">
                <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
              </elementProp>
              <elementProp name="Vitality-API-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-API-Version</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Feedback Faq Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-2070259289">status&quot;:1</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Calories Thresholds" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="filter" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">HEALTH_DATA_THRESHOLDS</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">filter</stringProp>
              </elementProp>
              <elementProp name="weightKg" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">80</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">weightKg</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api/whitelabel-mobile-api/1.0/user_settings/settings</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
              </elementProp>
              <elementProp name="Vitality-Client" elementType="Header">
                <stringProp name="Header.name">Vitality-Client</stringProp>
                <stringProp name="Header.value">BESTBUY</stringProp>
              </elementProp>
              <elementProp name="Vitality-Token" elementType="Header">
                <stringProp name="Header.name">Vitality-Token</stringProp>
                <stringProp name="Header.value">${ar_Token}</stringProp>
              </elementProp>
              <elementProp name="Vitality-App-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-App-Version</stringProp>
                <stringProp name="Header.value">7</stringProp>
              </elementProp>
              <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                <stringProp name="Header.value">IOS</stringProp>
              </elementProp>
              <elementProp name="Vitality-Language" elementType="Header">
                <stringProp name="Header.name">Vitality-Language</stringProp>
                <stringProp name="Header.value">en</stringProp>
              </elementProp>
              <elementProp name="Vitality-Device-Id" elementType="Header">
                <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
              </elementProp>
              <elementProp name="Vitality-Local-Time" elementType="Header">
                <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
              </elementProp>
              <elementProp name="Vitality-API-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-API-Version</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Thresholds" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">swawMnemonic;awawMnemonic;swawThreshold;awawThreshold</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.output.healthDataThresholdSettings.caloriesThresholds.thresholds[1].mnemonic;$.output.healthDataThresholdSettings.caloriesThresholds.thresholds[2].mnemonic;$.output.healthDataThresholdSettings.caloriesThresholds.thresholds[1].threshold;$.output.healthDataThresholdSettings.caloriesThresholds.thresholds[2].threshold</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND;NOT_FOUND;NOT_FOUND;NOT_FOUND</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: Token is valid" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1423148013">{&quot;validateTokenResponse&quot;:{&quot;isTokenValid&quot;:&quot;true&quot;}}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="POST Saphire Health Data Upload: OLD" enabled="false"/>
        <hashTree>
          <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${vslBase}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout">30000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">300000</stringProp>
          </ConfigTestElement>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST OLD GDL Token" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="tenantId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${tenantSapphire}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">tenantId</stringProp>
                </elementProp>
                <elementProp name="grantType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">clientCredentials</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">grantType</stringProp>
                </elementProp>
                <elementProp name="clientId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">78600</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">clientId</stringProp>
                </elementProp>
                <elementProp name="reference" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${entityNo}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">reference</stringProp>
                </elementProp>
                <elementProp name="clientSecret" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">c2Vuem9tYWxpbmdh</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">clientSecret</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">serviceapi/TokenManager/Token</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-vsl-timestamp</stringProp>
                  <stringProp name="Header.value">${timeStamp}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="x-vsl-version" elementType="Header">
                  <stringProp name="Header.name">x-vsl-version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="x-vsl-sourcetype" elementType="Header">
                  <stringProp name="Header.name">x-vsl-sourcetype</stringProp>
                  <stringProp name="Header.value">GDL</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, application/*+json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">104</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="apiAccessToken" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">gdlToken</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.payload.content.authDetails.accessToken</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Saphire Health Data Upload: OLD" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
 &quot;device&quot;: {&#xd;
   &quot;deviceId&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}&quot;,&#xd;
   &quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
   &quot;model&quot;: &quot;iOS 10.0.1&quot;&#xd;
 },&#xd;
	 &quot;header&quot;: {&#xd;
	   &quot;partnerSystem&quot;: &quot;Vitality&quot;,&#xd;
	   &quot;processingType&quot;: &quot;BATCH&quot;,&#xd;
	   &quot;rawUploadData&quot;: &quot;&quot;,&#xd;
	   &quot;sessionId&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}&quot;,&#xd;
	   &quot;tenantId&quot;: ${tenantSapphire},&#xd;
	   &quot;uploadCount&quot;: 3,&#xd;
	   &quot;uploadDate&quot;: &quot;${dateToday}T00:00:00+03:00&quot;,&#xd;
	   &quot;user&quot;: {&#xd;
	     &quot;entityNo&quot;: &quot;${entityNo}&quot;,&#xd;
	     &quot;partnerUserId&quot;: &quot;&quot;&#xd;
	  },&#xd;
	   &quot;verified&quot;: true&#xd;
	  },&#xd;
		 &quot;readings&quot;: [&#xd;
		   {&#xd;
		     &quot;dataCategory&quot;: &quot;BIOMETRIC&quot;,&#xd;
		     &quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00+03:00&quot;,&#xd;
		     &quot;healthData&quot;: {&#xd;
		     &quot;weight&quot;: {&#xd;
		     &quot;unitOfMeasurement&quot;: &quot;KILOGRAMS&quot;,&#xd;
		     &quot;value&quot;: 90.450&#xd;
		       }&#xd;
     },&#xd;
     &quot;integrity&quot;: &quot;UNVERIFIED&quot;,&#xd;
     &quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
     &quot;model&quot;: &quot;iOS 10.0.1&quot;,&#xd;
     &quot;partnerReadingId&quot;: &quot;1232F7B67B63528D4D920B8BDBDF48FB&quot;,&#xd;
     &quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
     &quot;readingType&quot;: &quot;WEIGHT&quot;,&#xd;
     &quot;startTime&quot;: &quot;${dateToday}T00:00:00+03:00&quot;&#xd;
   },&#xd;
   {&#xd;
     &quot;dataCategory&quot;: &quot;ROUTINE&quot;,&#xd;
     &quot;duration&quot;: &quot;86400&quot;,&#xd;
     &quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00+03:00&quot;,&#xd;
     &quot;integrity&quot;: &quot;VERIFIED&quot;,&#xd;
     &quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
     &quot;model&quot;: &quot;iOS 10.0.1&quot;,&#xd;
     &quot;partnerReadingId&quot;: &quot;17D2F7B67B63528D4D920B8BDBDF48FB&quot;,&#xd;
     &quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
     &quot;readingType&quot;: &quot;WALKING&quot;,&#xd;
     &quot;startTime&quot;: &quot;${dateToday}T00:00:00+03:00&quot;,&#xd;
     &quot;workout&quot;: {&#xd;
       &quot;energyExpenditure&quot;: {&#xd;
         &quot;unitOfMeasurement&quot;: &quot;KILOCALORIES&quot;,&#xd;
         &quot;value&quot;: 1000&#xd;
       }&#xd;
     }&#xd;
   }&#xd;
   &#xd;
 ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">deviceapi/Device/GenericGDLUpload</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-vsl-timestamp</stringProp>
                  <stringProp name="Header.value">${timeStamp}</stringProp>
                </elementProp>
                <elementProp name="x-vsl-version" elementType="Header">
                  <stringProp name="Header.name">x-vsl-version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="x-vsl-sourcetype" elementType="Header">
                  <stringProp name="Header.name">x-vsl-sourcetype</stringProp>
                  <stringProp name="Header.value">GDL</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-vsl-token</stringProp>
                  <stringProp name="Header.value">${gdlToken}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">743</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="White Lable - Tokens" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">50</stringProp>
        <stringProp name="ThreadGroup.ramp_time">25</stringProp>
        <longProp name="ThreadGroup.start_time">1514078571000</longProp>
        <longProp name="ThreadGroup.end_time">1514078571000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">300</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${zuulRteNode01}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </ConfigTestElement>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="Content-Type" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="Accept" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST RTE Token: Generate" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;issuedDate&quot;: &quot;${dateToday}&quot;,&#xd;
  &quot;entityNo&quot;: null,&#xd;
  &quot;expiryDate&quot;: &quot;9999-12-30&quot;,&#xd;
  &quot;verifiedDate&quot;: null,&#xd;
  &quot;partnerId&quot;: &quot;${bbPartnerId}&quot;,&#xd;
  &quot;generatedBy&quot;: &quot;PERF-TEST&quot;,&#xd;
  &quot;tokenType&quot;: &quot;Token&quot;,&#xd;
  &quot;tokenValue&quot;: &quot;BESTBUY${token}DUMMY&quot;,&#xd;
  &quot;status&quot;: &quot;P&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">vitality-whitelabel-domain-service-1/svc/2/token.json</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="RTE Token: WhiteLable" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">rteToken;partnerId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.tokenValue;$.partnerId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="Sample.scope">all</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND;NOT_FOUND</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert: tokenValue" enabled="true">
            <stringProp name="JSON_PATH">$.tokenValue</stringProp>
            <stringProp name="EXPECTED_VALUE">${rteToken}</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST RTE Token Validation" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;validateTokenRequest&quot;: {&#xd;
    &quot;partnerId&quot;: &quot;${partnerId}&quot;,&#xd;
    &quot;tokenId&quot;: &quot;${rteToken}&quot;&#xd;
  }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">vitality-whitelabel-enrolment-service-1/svc/2/validateToken</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: Token is valid" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1616563228">validateTokenResponse</stringProp>
              <stringProp name="-374023120">tokenAttributes</stringProp>
              <stringProp name="-2031077811">isTokenValid</stringProp>
              <stringProp name="3569038">true</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">true</boolProp>
            <stringProp name="script">FileWriter fstream = new FileWriter(&quot;/Users/DNesterov/Documents/${partnerId}_Tokens${enviroment}.csv&quot;,true);
BufferedWriter out = new BufferedWriter(fstream);
out.write(vars.get(&quot;rteToken&quot;));
out.write(System.getProperty(&quot;line.separator&quot;));
out.close();
fstream.close();</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <kg.apc.jmeter.threads.UltimateThreadGroup guiclass="kg.apc.jmeter.threads.UltimateThreadGroupGui" testclass="kg.apc.jmeter.threads.UltimateThreadGroup" testname="PERF: MC - 20 Active Users" enabled="false">
        <collectionProp name="ultimatethreadgroupdata">
          <collectionProp name="-1819089645">
            <stringProp name="53">5</stringProp>
            <stringProp name="48">0</stringProp>
            <stringProp name="48">0</stringProp>
            <stringProp name="50547">300</stringProp>
            <stringProp name="48">0</stringProp>
          </collectionProp>
          <collectionProp name="1505036265">
            <stringProp name="53">5</stringProp>
            <stringProp name="1629">30</stringProp>
            <stringProp name="48">0</stringProp>
            <stringProp name="49803">270</stringProp>
            <stringProp name="48">0</stringProp>
          </collectionProp>
          <collectionProp name="-1736670784">
            <stringProp name="53">5</stringProp>
            <stringProp name="1722">60</stringProp>
            <stringProp name="48">0</stringProp>
            <stringProp name="49710">240</stringProp>
            <stringProp name="48">0</stringProp>
          </collectionProp>
          <collectionProp name="-1736670784">
            <stringProp reference="../../collectionProp[3]/stringProp"/>
            <stringProp name="1722">60</stringProp>
            <stringProp reference="../../collectionProp[3]/stringProp[3]"/>
            <stringProp reference="../../collectionProp[3]/stringProp[4]"/>
            <stringProp reference="../../collectionProp[3]/stringProp[5]"/>
          </collectionProp>
        </collectionProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
      </kg.apc.jmeter.threads.UltimateThreadGroup>
      <hashTree>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${wso2Base}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <boolProp name="HTTPSampler.image_parser">true</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </ConfigTestElement>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST WSO2 Access Token" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="grant_type" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">client_credentials</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">grant_type</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api/token</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Basic ${wso2Token}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extracting WSO2 AccessToken" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">wso2AccessToken</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="Sample.scope">all</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">wso2AccessToken_NOT_FOUND</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RTE: Mango Consumer" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;enrollMangoConsumerRequest&quot;: {&#xd;
    &quot;dateOfBirth&quot;: &quot;${__RandomDate(yyyy-MM-dd,1930-01-01,2001-12-31,,)}&quot;,&#xd;
    &quot;emailAddress&quot;: &quot;VG${randomString}@mango.com&quot;,&#xd;
    &quot;firstName&quot;: &quot;${randomString}&quot;,&#xd;
    &quot;lastName&quot;: &quot;${randomString}&quot;,&#xd;
    &quot;partnerId&quot;: &quot;WGConsumer&quot;,&#xd;
    &quot;uniqueId&quot;: &quot;${randomAlphaNumericString}&quot;,&#xd;
    &quot;vitalityCoverageEffectiveDate&quot;: &quot;${dateToday}&quot;&#xd;
  }&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api/vitality-mangoconsumer-enrolment-service-1/1.0/svc/2/enrollMangoConsumer</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${wso2AccessToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: Vitality ID present" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1203236063">errorMessage</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract entityNo" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">entityNo</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.enrollMemberResponse.vitalityId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">entityNo_NOT_FOUND</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Mango" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">150</stringProp>
        <stringProp name="ThreadGroup.ramp_time">150</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">300</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${wgBase}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <boolProp name="HTTPSampler.image_parser">true</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </ConfigTestElement>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
        </CookieManager>
        <hashTree/>
        <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
          <boolProp name="clearEachIteration">false</boolProp>
          <boolProp name="useExpires">true</boolProp>
        </CacheManager>
        <hashTree/>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="-563919673">mangoLogin</stringProp>
            <stringProp name="1375404157">mangoPassword</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="-1140881113">
              <stringProp name="-1483517570">mangotestvg2@gmail.com</stringProp>
              <stringProp name="1707845512">Mango2019</stringProp>
            </collectionProp>
            <collectionProp name="378563172">
              <stringProp name="-1692822035">goldensnitch781@gmail.com</stringProp>
              <stringProp name="-1610026624">Test12345!</stringProp>
            </collectionProp>
            <collectionProp name="1916856074">
              <stringProp name="154628002">polyjuice74@gmail.com</stringProp>
              <stringProp name="-1610026624">Test12345!</stringProp>
            </collectionProp>
            <collectionProp name="-212530215">
              <stringProp name="-614097437">fredshouldhavelived@gmail.com</stringProp>
              <stringProp name="-1610026624">Test12345!</stringProp>
            </collectionProp>
            <collectionProp name="-717497903">
              <stringProp name="-2061826348">Gryffindor579@gmail.com</stringProp>
              <stringProp name="-1610026624">Test12345!</stringProp>
            </collectionProp>
            <collectionProp name="127340567">
              <stringProp name="2115215556">Ravenclaw3579@gmail.com</stringProp>
              <stringProp name="-1610026624">Test12345!</stringProp>
            </collectionProp>
            <collectionProp name="474187908">
              <stringProp name="-2000653568">hufflepuff9653456@gmail.com</stringProp>
              <stringProp name="-1610026624">Test12345!</stringProp>
            </collectionProp>
            <collectionProp name="394237045">
              <stringProp name="346552445">horcruxeshewhoshouldnotbenamed@gmail.com</stringProp>
              <stringProp name="-1610026624">Test12345!</stringProp>
            </collectionProp>
            <collectionProp name="-887331272">
              <stringProp name="15251756">ronweasly987654@gmail.com</stringProp>
              <stringProp name="-1610026624">Test12345!</stringProp>
            </collectionProp>
            <collectionProp name="-1690948447">
              <stringProp name="1308773047">grangerhermione645@gmail.com</stringProp>
              <stringProp name="-1610026624">Test12345!</stringProp>
            </collectionProp>
            <collectionProp name="-613411202">
              <stringProp name="-205416168">hp0109229@gmail.com</stringProp>
              <stringProp name="-1610026624">Test12345!</stringProp>
            </collectionProp>
            <collectionProp name="1054086687">
              <stringProp name="-238498634">mangotestvg@gmail.com</stringProp>
              <stringProp name="1707845512">Mango2019</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Mango: FTUJ" enabled="false"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Mango: Reg Personal Info" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">register/regpersonalinfo</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
            <stringProp name="HTTPSampler.concurrentPool"></stringProp>
            <stringProp name="HTTPSampler.embedded_url_re">https:${wgBase}/register/regpersonalinfo</stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout">30000</stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">X-XSRF-TOKEN</stringProp>
              <stringProp name="RegexExtractor.regex">meta name=&quot;_csrf&quot; content=&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Mango: Register new user on WG.com" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;firstName&quot;: &quot;F${randomString}&quot;,&#xd;
	&quot;lastName&quot;: &quot;L${randomString}&quot;,&#xd;
	&quot;login&quot;: &quot;${randomString}@mango.com&quot;,&#xd;
	&quot;password&quot;: &quot;Mango2019&quot;,&#xd;
	&quot;emailOptInInd&quot;: true,&#xd;
	&quot;tncAcceptInd&quot;: true,&#xd;
	&quot;smsOptInInd&quot;: false,&#xd;
	&quot;pliInd&quot;: false,&#xd;
	&quot;regSource&quot;: &quot;loyalty&quot;,&#xd;
	&quot;loyaltyType&quot;: &quot;enroll&quot;,&#xd;
	&quot;phoneNumber&quot;: &quot;77${randomNumericFour}${randomNumericFour}&quot;,&#xd;
	&quot;phoneType&quot;: &quot;cell&quot;,&#xd;
	&quot;dateOfBirth&quot;: &quot;10/10/1983&quot;,&#xd;
	&quot;address&quot;: {&#xd;
		&quot;zipCode&quot;: &quot;60622&quot;&#xd;
	}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">register/signup?instart_disable_injection=true</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool"></stringProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout">30000</stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-XSRF-TOKEN</stringProp>
                  <stringProp name="Header.value">${X-XSRF-TOKEN}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${wgBase}/login.jsp</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: ENROLL Status" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-933465782">ENROLL_SUCCESS</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Mango: RTE via WG.com" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">brhc/createVitalityId</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout">30000</stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract: vitalityId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">mangoId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.vitalityId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract: jwtToken" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">jwtToken</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.jwt</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-202516509">Success</stringProp>
                <stringProp name="1165624797">vitalityId</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET  PHYSICAL_ACTIVITY: SSO to Choose Goals page" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">PHYSICAL_ACTIVITY</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">type</stringProp>
                </elementProp>
                <elementProp name="jwtptn" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${jwtToken}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">jwtptn</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ssoBase}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">vitality/mango_goals/choose_goal</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">1</stringProp>
            <stringProp name="HTTPSampler.embedded_url_re">qa.powerofvitality.com</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Goal ID" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">physicalActivityGoalID</stringProp>
              <stringProp name="RegexExtractor.regex">name=&quot;goalId&quot; value=&quot;(.+)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">0</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="481331987">Choose a physical activity challenge</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Ignore CDN Errors" enabled="false">
              <collectionProp name="Asserion.test_strings"/>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Mango: FTUJ User exist on WG" enabled="false"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Mango: POST LogIn" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;login&quot;: &quot;${mangoLogin}&quot;,&#xd;
	&quot;password&quot;: &quot;${mangoPassword}&quot;,&#xd;
	&quot;isConsentFlow&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/svc/profiles/login?instart_disable_injection=true</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.concurrentPool"></stringProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${wgBase}/login.jsp</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Mango: RTE via WG.com" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">brhc/createVitalityId</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout">30000</stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract: vitalityId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">mangoId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.vitalityId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract: jwtToken" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">jwtToken</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.jwt</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-202516509">Success</stringProp>
                <stringProp name="1165624797">vitalityId</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET  PHYSICAL_ACTIVITY: SSO to Choose Goals page" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">PHYSICAL_ACTIVITY</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">type</stringProp>
                </elementProp>
                <elementProp name="jwtptn" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${jwtToken}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">jwtptn</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ssoBase}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">vitality/mango_goals/choose_goal</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">1</stringProp>
            <stringProp name="HTTPSampler.embedded_url_re">qa.powerofvitality.com</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Goal ID" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">physicalActivityGoalID</stringProp>
              <stringProp name="RegexExtractor.regex">name=&quot;goalId&quot; value=&quot;(.+)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">0</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="481331987">Choose a physical activity challenge</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Ignore CDN Errors" enabled="false">
              <collectionProp name="Asserion.test_strings"/>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Mango: RTUJ via WG" enabled="false"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Mango: POST LogIn" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;login&quot;: &quot;${mangoLogin}&quot;,&#xd;
	&quot;password&quot;: &quot;${mangoPassword}&quot;,&#xd;
	&quot;isConsentFlow&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/svc/profiles/login?instart_disable_injection=true</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.concurrentPool"></stringProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${wgBase}/login.jsp</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Mango: get Vitality Id via WG" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">brhc/getVitalityId</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout">30000</stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract: vitalityId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">mangoId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.vitalityId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract: jwtToken" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">jwtToken</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.jwt</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-202516509">Success</stringProp>
                <stringProp name="1165624797">vitalityId</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET  PHYSICAL_ACTIVITY: SSO to Choose Goals page" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">PHYSICAL_ACTIVITY</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">type</stringProp>
                </elementProp>
                <elementProp name="jwtptn" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${jwtToken}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">jwtptn</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ssoBase}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">vitality/mango_goals/choose_goal</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">1</stringProp>
            <stringProp name="HTTPSampler.embedded_url_re">qa.powerofvitality.com</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Goal ID" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">physicalActivityGoalID</stringProp>
              <stringProp name="RegexExtractor.regex">name=&quot;goalId&quot; value=&quot;(.+)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">0</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="481331987">Choose a physical activity challenge</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Ignore CDN Errors" enabled="false">
              <collectionProp name="Asserion.test_strings"/>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Mango: RTUJ" enabled="false"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Mango: POST LogIn" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;login&quot;: &quot;${returningUserLogin}&quot;,&#xd;
	&quot;password&quot;: &quot;${returningUserPassword}&quot;,&#xd;
	&quot;isConsentFlow&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/svc/profiles/login?instart_disable_injection=true</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.concurrentPool"></stringProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${wgBase}/login.jsp</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Mango: GET Vitality ID and JWT Token" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">brhc/getVitalityId</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract: vitalityId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">mangoId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.vitalityId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract: jwtToken" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">jwtToken</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.jwt</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GET Tiles via WSO2" enabled="true"/>
          <hashTree>
            <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${wso2Base}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </ConfigTestElement>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname=" POST WSO2 Access Token" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="grant_type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">client_credentials</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">grant_type</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/token</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Basic ${wso2Token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extracting WSO2 AccessToken" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">wso2AccessToken</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">wso2AccessToken_NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname=" GET Tiles" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/mango/1.0/mango_tiles/${mangoId}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${wso2AccessToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract: wheel id" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">wheelId</stringProp>
                <stringProp name="RegexExtractor.regex">wheel_data/(.+)..</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="353846044">FIRST_TIME</stringProp>
                  <stringProp name="1247626615">PHYSICAL_ACTIVITY</stringProp>
                  <stringProp name="-1796047851">LIFESTYLE</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">34</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Mango: RTUJ - Enroll to Vitality" enabled="false"/>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-563919673">mangoLogin</stringProp>
              <stringProp name="1375404157">mangoPassword</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-1140881113">
                <stringProp name="-1483517570">mangotestvg2@gmail.com</stringProp>
                <stringProp name="1707845512">Mango2019</stringProp>
              </collectionProp>
              <collectionProp name="378563172">
                <stringProp name="-1692822035">goldensnitch781@gmail.com</stringProp>
                <stringProp name="-1610026624">Test12345!</stringProp>
              </collectionProp>
              <collectionProp name="1916856074">
                <stringProp name="154628002">polyjuice74@gmail.com</stringProp>
                <stringProp name="-1610026624">Test12345!</stringProp>
              </collectionProp>
              <collectionProp name="-212530215">
                <stringProp name="-614097437">fredshouldhavelived@gmail.com</stringProp>
                <stringProp name="-1610026624">Test12345!</stringProp>
              </collectionProp>
              <collectionProp name="-717497903">
                <stringProp name="-2061826348">Gryffindor579@gmail.com</stringProp>
                <stringProp name="-1610026624">Test12345!</stringProp>
              </collectionProp>
              <collectionProp name="127340567">
                <stringProp name="2115215556">Ravenclaw3579@gmail.com</stringProp>
                <stringProp name="-1610026624">Test12345!</stringProp>
              </collectionProp>
              <collectionProp name="474187908">
                <stringProp name="-2000653568">hufflepuff9653456@gmail.com</stringProp>
                <stringProp name="-1610026624">Test12345!</stringProp>
              </collectionProp>
              <collectionProp name="394237045">
                <stringProp name="346552445">horcruxeshewhoshouldnotbenamed@gmail.com</stringProp>
                <stringProp name="-1610026624">Test12345!</stringProp>
              </collectionProp>
              <collectionProp name="-887331272">
                <stringProp name="15251756">ronweasly987654@gmail.com</stringProp>
                <stringProp name="-1610026624">Test12345!</stringProp>
              </collectionProp>
              <collectionProp name="-1690948447">
                <stringProp name="1308773047">grangerhermione645@gmail.com</stringProp>
                <stringProp name="-1610026624">Test12345!</stringProp>
              </collectionProp>
              <collectionProp name="-613411202">
                <stringProp name="-205416168">hp0109229@gmail.com</stringProp>
                <stringProp name="-1610026624">Test12345!</stringProp>
              </collectionProp>
              <collectionProp name="1054086687">
                <stringProp name="-238498634">mangotestvg@gmail.com</stringProp>
                <stringProp name="1707845512">Mango2019</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
          </UserParameters>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Mango: POST LogIn" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;login&quot;: &quot;${mangoLogin}&quot;,&#xd;
	&quot;password&quot;: &quot;${mangoPassword}&quot;,&#xd;
	&quot;isConsentFlow&quot;: true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/svc/profiles/login?instart_disable_injection=true</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.concurrentPool"></stringProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${wgBase}/login.jsp</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Mango: RTE+Tiles" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Mango WSO2 Access Token" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="grant_type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">client_credentials</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">grant_type</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${wso2Base}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/token</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Basic ${msWso2Token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extracting WSO2 AccessToken" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">wso2AccessToken</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">wso2AccessToken_NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Mango: GET Vitality ID and JWT Token" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">brhc/getVitalityId</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract: vitalityId" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">mangoId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.vitalityId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract: jwtToken" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">jwtToken</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.jwt</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Mango: Create Vitality ID" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">brhc/createVitalityId</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout">30000</stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract: vitalityId" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">mangoId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.vitalityId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-202516509">Success</stringProp>
                  <stringProp name="1165624797">vitalityId</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Tiles" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${wso2Base}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/mango/1.0/mango_tiles/${mangoId}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${wso2AccessToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1247626615">PHYSICAL_ACTIVITY</stringProp>
                  <stringProp name="-1796047851">LIFESTYLE</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Mango: Using JWT Token" enabled="false"/>
        <hashTree>
          <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ssoBase}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </ConfigTestElement>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname=" GET  PHYSICAL_ACTIVITY: Choose Challenge" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">PHYSICAL_ACTIVITY</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">type</stringProp>
                </elementProp>
                <elementProp name="jwtptn" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${jwtToken}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">jwtptn</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">vitality/mango_goals/choose_goal</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">1</stringProp>
            <stringProp name="HTTPSampler.embedded_url_re">qa.powerofvitality.com</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Goal ID" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">physicalActivityGoalID</stringProp>
              <stringProp name="RegexExtractor.regex">name=&quot;goalId&quot; value=&quot;(.+)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">0</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="481331987">Choose a physical activity challenge</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Ignore CDN Errors" enabled="false">
              <collectionProp name="Asserion.test_strings"/>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname=" GET  PHYSICAL_ACTIVITY: Choose Challenge NO SSO" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">PHYSICAL_ACTIVITY</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">type</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">vitality/mango_goals/choose_goal</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">1</stringProp>
            <stringProp name="HTTPSampler.embedded_url_re">qa.powerofvitality.com</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Goal ID" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">physicalActivityGoalID</stringProp>
              <stringProp name="RegexExtractor.regex">name=&quot;goalId&quot; value=&quot;(.+)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">0</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="481331987">Choose a physical activity challenge</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Ignore CDN Errors" enabled="false">
              <collectionProp name="Asserion.test_strings"/>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname=" POST PHYSICAL_ACTIVITY: Set Goal Active" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="goalId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${physicalActivityGoalID}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">goalId</stringProp>
                </elementProp>
                <elementProp name="targetCategoryType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">PHYSICAL_ACTIVITY</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">targetCategoryType</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">vitality/mango_goals/set_goal_active</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool"></stringProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract: personal goal Id" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">personalGoalIdPhysAct</stringProp>
              <stringProp name="RegexExtractor.regex">goalId=(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="717319708">current_goal_details</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname=" GET  PHYSICAL_ACTIVITY: Personal Goal Details" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="goalId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${personalGoalIdPhysAct}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">goalId</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">vitality/mango_goals/current_goal_details</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.concurrentPool"></stringProp>
            <stringProp name="HTTPSampler.embedded_url_re">qa.powerofvitality.com</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1832458561">About this 4-week challenge</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname=" GET PHYSICAL_ACTIVITY: Goal Progress" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="goalId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${personalGoalIdPhysAct}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">goalId</stringProp>
                </elementProp>
                <elementProp name="isCurrentWeek" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">isCurrentWeek</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">vitality/vap/getMangoGoalProgress</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.concurrentPool"></stringProp>
            <stringProp name="HTTPSampler.embedded_url_re">qa.powerofvitality.com</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="36500520">progressId</stringProp>
                <stringProp name="-653206855">  &quot;status&quot; : 1</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract: goalProgressId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">goalProgressIdPhysAct</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.output.progressId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname=" POST PHYSICAL_ACTIVITY: Submit Goal Checkin" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{	&#xd;
	&quot;progressId&quot;:${goalProgressIdPhysAct},&#xd;
	&quot;dayIndexInWeek&quot;:1,&#xd;
	&quot;isChecked&quot;:true,&#xd;
	&quot;isCurrentWeek&quot;:true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">vitality/vap/submitMangoGoalCheckin</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool"></stringProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract: personal goal Id" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">personalGoalIdPhysAct</stringProp>
              <stringProp name="RegexExtractor.regex">goalId=(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname=" POST PHYSICAL_ACTIVITY: Cancel Active Goal" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="goalId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${physicalActivityGoalID}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">goalId</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">vitality/vap/cancelActiveGoal</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool"></stringProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract: personal goal Id" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">personalGoalIdPhysAct</stringProp>
              <stringProp name="RegexExtractor.regex">goalId=(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname=" GET  LIFESTYLE: Choose challenge" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">LIFESTYLE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">type</stringProp>
                </elementProp>
                <elementProp name="jwtptn" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${jwtToken}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">jwtptn</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">vitality/mango_goals/choose_goal</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">1</stringProp>
            <stringProp name="HTTPSampler.embedded_url_re">qa.powerofvitality.com</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Goal ID" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">lifeStyleGoalID</stringProp>
              <stringProp name="RegexExtractor.regex">name=&quot;goalId&quot; value=&quot;(.+)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">0</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1155597008">Choose a lifestyle challenge</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname=" GET  LIFESTYLE: Choose challenge NO SSO" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">LIFESTYLE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">type</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">vitality/mango_goals/choose_goal</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">1</stringProp>
            <stringProp name="HTTPSampler.embedded_url_re">qa.powerofvitality.com</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Goal ID" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">lifeStyleGoalID</stringProp>
              <stringProp name="RegexExtractor.regex">name=&quot;goalId&quot; value=&quot;(.+)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">0</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1155597008">Choose a lifestyle challenge</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname=" POST LIFESTYLE: Set Goal Active" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="goalId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${lifeStyleGoalID}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">goalId</stringProp>
                </elementProp>
                <elementProp name="targetCategoryType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">LIFESTYLE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">targetCategoryType</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">vitality/mango_goals/set_goal_active</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool"></stringProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract: personal goal Id" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">personalGoalIdLifeStyle</stringProp>
              <stringProp name="RegexExtractor.regex">goalId=(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="717319708">current_goal_details</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname=" GET LIFESTYLE: Personal Goal Details" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="goalId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${personalGoalIdLifeStyle}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">goalId</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">vitality/mango_goals/current_goal_details</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.concurrentPool"></stringProp>
            <stringProp name="HTTPSampler.embedded_url_re">qa.powerofvitality.com</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1832458561">About this 4-week challenge</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname=" GET LIFESTYLE: Goal Progress" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="goalId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${personalGoalIdLifeStyle}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">goalId</stringProp>
                </elementProp>
                <elementProp name="isCurrentWeek" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">isCurrentWeek</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">vitality/vap/getMangoGoalProgress</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.concurrentPool"></stringProp>
            <stringProp name="HTTPSampler.embedded_url_re">qa.powerofvitality.com</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="36500520">progressId</stringProp>
                <stringProp name="-653206855">  &quot;status&quot; : 1</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract: goalProgressId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">goalProgressIdLifeStyle</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.output.progressId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname=" POST LIFESTYLE: Submit Goal Checkin" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{	&#xd;
	&quot;progressId&quot;:${goalProgressIdLifeStyle},&#xd;
	&quot;dayIndexInWeek&quot;:1,&#xd;
	&quot;isChecked&quot;:true,&#xd;
	&quot;isCurrentWeek&quot;:true&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">vitality/vap/submitMangoGoalCheckin</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool"></stringProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract: personal goal Id" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">personalGoalIdPhysAct</stringProp>
              <stringProp name="RegexExtractor.regex">goalId=(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname=" POST LIFESTYLE: Cancel Active Goal" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="goalId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${personalGoalIdLifeStyle}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">goalId</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">vitality/vap/cancelActiveGoal</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool"></stringProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract: personal goal Id" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">personalGoalIdPhysAct</stringProp>
              <stringProp name="RegexExtractor.regex">goalId=(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname=" GET: Spin via WG" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="jwtptn" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${jwtToken}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">jwtptn</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ssoBase}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">vitality/mango_points_wheel/wheel_data/${wheelId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re">https://qa.powerofvitality.com</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2044230225">Now spin it.</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname=" Points Processed By Core" enabled="false">
            <boolProp name="TransactionController.parent">true</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Wait Until Processed" enabled="true">
              <stringProp name="WhileController.condition">${__groovy(vars.get(&quot;eventPoints&quot;) = &quot;0&quot;,)}</stringProp>
            </WhileController>
            <hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname=" VAP POINTS" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname=" POST VAP: Login" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="j_username" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">dnesterov</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">j_username</stringProp>
                      </elementProp>
                      <elementProp name="j_password" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">Dimon4ik1010</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">j_password</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">vgtstg01-qa</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">vap/admin/j_spring_security_check</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname=" GET VAP: User Policy" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="entity_no" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${mangoId}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">entity_no</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">vgtstg01-qa</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">vap/admin/view_points/get_policies</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">*/*</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract: Policy ID" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">policyId</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.output.policy</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname=" GET VAP: Points" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="policy_no" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${policyId}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">policy_no</stringProp>
                      </elementProp>
                      <elementProp name="adjustment" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">0</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">adjustment</stringProp>
                      </elementProp>
                      <elementProp name="entity_no" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${mangoId}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">entity_no</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">vgtstg01-qa</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">vap/admin/view_points/get_status</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">*/*</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract: eventPoints" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">eventPoints</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.output.statistics.points_events.category[0].sub_category[0].det_category[0].points</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                <stringProp name="IfController.condition">${__groovy(vars.get(&quot;eventPoints&quot;) != &quot;0&quot;,)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
                  <intProp name="ActionProcessor.action">3</intProp>
                  <intProp name="ActionProcessor.target">0</intProp>
                  <stringProp name="ActionProcessor.duration">0</stringProp>
                </TestAction>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="VAP: Mango" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="RTE: WSO2" enabled="false"/>
          <hashTree>
            <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${wso2Base}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </ConfigTestElement>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST WSO2 Access Token" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="grant_type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">client_credentials</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">grant_type</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/token</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Basic ${msWso2Token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extracting WSO2 AccessToken" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">wso2AccessToken</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">wso2AccessToken_NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RTE: Create Mango Consumer user" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;enrollMangoConsumerRequest&quot;: {&#xd;
    &quot;dateOfBirth&quot;: &quot;${__RandomDate(yyyy-MM-dd,1930-01-01,2001-12-31,,)}&quot;,&#xd;
    &quot;emailAddress&quot;: &quot;${randomString}@gmail.com&quot;,&#xd;
    &quot;firstName&quot;: &quot;${randomString}&quot;,&#xd;
    &quot;lastName&quot;: &quot;${randomString}&quot;,&#xd;
    &quot;partnerId&quot;: &quot;${partnerId}&quot;,&#xd;
    &quot;uniqueId&quot;: &quot;${randomAlphaNumericString}&quot;,&#xd;
    &quot;vitalityCoverageEffectiveDate&quot;: &quot;${dateToday}&quot;&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/vitality-mangoconsumer-enrolment-service-1/1.0/svc/2/enrollMangoConsumer</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${wso2AccessToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: Vitality ID present" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1203236063">errorMessage</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">6</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract entityNo" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">mangoId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.enrollMangoConsumerResponse.vitalityId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${vapBase}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </ConfigTestElement>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Tiles" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port">7002</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">vap/rest/mango_tiles/${mangoId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract: physAct" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">physAct</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;challenge_type&quot; : &quot;P(.*)</stringProp>
              <stringProp name="RegexExtractor.template">$0$</stringProp>
              <stringProp name="RegexExtractor.default">physAct NOT FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract: lifeStyle" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">lifeStyle</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;challenge_type&quot; : &quot;L(.*)</stringProp>
              <stringProp name="RegexExtractor.template">$0$</stringProp>
              <stringProp name="RegexExtractor.default">lifeStyle NOT FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: PHYSICAL_ACTIVITY" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1695391557">&quot;challenge_type&quot; : &quot;PHYSICAL_ACTIVITY&quot;,</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">physAct</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: LIFESTYLE" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1668137433">&quot;challenge_type&quot; : &quot;LIFESTYLE&quot;,</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
              <stringProp name="Assertion.scope">variable</stringProp>
              <stringProp name="Scope.variable">lifeStyle</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET  PHYSICAL_ACTIVITY: Choose Goal page" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${vapBase}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">vap/rest/mango_goals/show/PHYSICAL_ACTIVITY/${mangoId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert: Category Type" enabled="true">
              <stringProp name="JSON_PATH">$.output.targetCategoryType</stringProp>
              <stringProp name="EXPECTED_VALUE">PHYSICAL_ACTIVITY</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert: Status" enabled="true">
              <stringProp name="JSON_PATH">$.status</stringProp>
              <stringProp name="EXPECTED_VALUE">1</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract: Goal ID" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">goalIdPhysAct</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.output.goalDescriptions[0].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST PHYSICAL_ACTIVITY: Set Goal Active" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">vap/rest/mango_goals/set_active/${mangoId}/${goalIdPhysAct}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract: activeGoalIdPysActiv" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">activeGoalIdPysActiv</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.output.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert: Status" enabled="true">
              <stringProp name="JSON_PATH">$.status</stringProp>
              <stringProp name="EXPECTED_VALUE">1</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET PHYSICAL_ACTIVITY: Goal Progress" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">vap/rest/mango_goals/progress/${mangoId}/${activeGoalIdPysActiv}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract: goalProgressId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">goalProgressIdPhysAct</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.output.progressId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert: Status" enabled="true">
              <stringProp name="JSON_PATH">$.status</stringProp>
              <stringProp name="EXPECTED_VALUE">1</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST PHYSICAL_ACTIVITY: Submit Goal Checkin" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;dayIndexInWeek&quot;: 1,&#xd;
  &quot;isChecked&quot;: true,&#xd;
  &quot;isCurrentWeek&quot;: true,&#xd;
  &quot;progressId&quot;: ${goalProgressIdPhysAct}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">vap/rest/mango_goals/checkin</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert: Status" enabled="true">
              <stringProp name="JSON_PATH">$.status</stringProp>
              <stringProp name="EXPECTED_VALUE">1</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST PHYSICAL_ACTIVITY: Cancel Active Goal" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">vap/rest/mango_goals/cancel_active/${activeGoalIdPysActiv}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert: Status" enabled="true">
              <stringProp name="JSON_PATH">$.status</stringProp>
              <stringProp name="EXPECTED_VALUE">1</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET LIFESTYLE: Choose Challenge" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">vap/rest/mango_goals/show/LIFESTYLE/${mangoId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert: Category Type" enabled="true">
              <stringProp name="JSON_PATH">$.output.targetCategoryType</stringProp>
              <stringProp name="EXPECTED_VALUE">LIFESTYLE</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert: Status" enabled="true">
              <stringProp name="JSON_PATH">$.status</stringProp>
              <stringProp name="EXPECTED_VALUE">1</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract: Goal ID" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">goalIdLifeStyle</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.output.goalDescriptions[0].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST LIFESTYLE: Set Goal Active" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">vap/rest/mango_goals/set_active/${mangoId}/${goalIdLifeStyle}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract: activeGoalIdPysActiv" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">activeGoalIdLifeStyle</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.output.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert: Status" enabled="true">
              <stringProp name="JSON_PATH">$.status</stringProp>
              <stringProp name="EXPECTED_VALUE">1</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET LIFESTYLE: Goal Progress" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">vap/rest/mango_goals/progress/${mangoId}/${activeGoalIdLifeStyle}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract: goalProgressId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">goalProgressIdLifeStyle</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.output.progressId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert: Status" enabled="true">
              <stringProp name="JSON_PATH">$.status</stringProp>
              <stringProp name="EXPECTED_VALUE">1</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST LIFESTYLE: Submit Goal Checkin" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;dayIndexInWeek&quot;: 1,&#xd;
  &quot;isChecked&quot;: true,&#xd;
  &quot;isCurrentWeek&quot;: true,&#xd;
  &quot;progressId&quot;: ${goalProgressIdLifeStyle}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">vap/rest/mango_goals/checkin</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert: Status" enabled="true">
              <stringProp name="JSON_PATH">$.status</stringProp>
              <stringProp name="EXPECTED_VALUE">1</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST LIFESTYLE: Cancel Active Goal" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">vap/rest/mango_goals/cancel_active/${activeGoalIdLifeStyle}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert: Status" enabled="true">
              <stringProp name="JSON_PATH">$.status</stringProp>
              <stringProp name="EXPECTED_VALUE">1</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Zuul: Mango Consumer RTE" enabled="false"/>
        <hashTree>
          <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request: PROXY" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;enrollMangoConsumerRequest&quot;: {&#xd;
    &quot;dateOfBirth&quot;: &quot;${__RandomDate(yyyy-MM-dd,1930-01-01,2001-12-31,,)}&quot;,&#xd;
    &quot;emailAddress&quot;: &quot;VG${randomString}@gmail.com&quot;,&#xd;
    &quot;firstName&quot;: &quot;${randomString}&quot;,&#xd;
    &quot;lastName&quot;: &quot;${randomString}&quot;,&#xd;
    &quot;partnerId&quot;: &quot;${partnerId}&quot;,&#xd;
    &quot;uniqueId&quot;: &quot;${randomAlphaNumericString}&quot;,&#xd;
    &quot;vitalityCoverageEffectiveDate&quot;: &quot;${dateToday}&quot;&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port">${zuulPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">vitality-whitelabel-enrolment-service-1/svc/2/enrollMangoConsumer</stringProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <stringProp name="HTTPSampler.proxyHost">${zuulProxy}</stringProp>
            <stringProp name="HTTPSampler.proxyPort">${zuulPort}</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </ConfigTestElement>
          <hashTree/>
          <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request: NO PROXY" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;enrollMangoConsumerRequest&quot;: {&#xd;
    &quot;dateOfBirth&quot;: &quot;${__RandomDate(yyyy-MM-dd,1930-01-01,2001-12-31,,)}&quot;,&#xd;
    &quot;emailAddress&quot;: &quot;VG${randomString}@gmail.com&quot;,&#xd;
    &quot;firstName&quot;: &quot;${randomString}&quot;,&#xd;
    &quot;lastName&quot;: &quot;${randomString}&quot;,&#xd;
    &quot;partnerId&quot;: &quot;${partnerId}&quot;,&#xd;
    &quot;uniqueId&quot;: &quot;${randomAlphaNumericString}&quot;,&#xd;
    &quot;vitalityCoverageEffectiveDate&quot;: &quot;${dateToday}&quot;&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port">${zuulPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">vitality-whitelabel-enrolment-service-1/svc/2/enrollMangoConsumer</stringProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </ConfigTestElement>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Zull: POST Mango Consumer RTE LoadBalancer" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${zuulRteBase}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool"></stringProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout">30000</stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">uniqueId;vitalityId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.enrollMangoConsumerResponse.uniqueId;$.enrollMangoConsumerResponse.vitalityId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND;NOT_FOUND</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: Vitality ID present" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2048027549">{&quot;enrollMangoConsumerResponse&quot;:{&quot;uniqueId&quot;:&quot;${uniqueId}&quot;,&quot;vitalityId&quot;:${vitalityId}}}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
              <stringProp name="Scope.variable">uniqueId</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Zull: POST Mango Consumer RTE Node-01" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${zuulRteNode01}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool"></stringProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout">30000</stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">uniqueId;vitalityId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.enrollMangoConsumerResponse.uniqueId;$.enrollMangoConsumerResponse.vitalityId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND;NOT_FOUND</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: Vitality ID present" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2048027549">{&quot;enrollMangoConsumerResponse&quot;:{&quot;uniqueId&quot;:&quot;${uniqueId}&quot;,&quot;vitalityId&quot;:${vitalityId}}}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
              <stringProp name="Scope.variable">uniqueId</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Zull: POST Mango Consumer RTE Node-02" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${zuulRteNode02}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool"></stringProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout">30000</stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">uniqueId;vitalityId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.enrollMangoConsumerResponse.uniqueId;$.enrollMangoConsumerResponse.vitalityId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND;NOT_FOUND</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: Vitality ID present" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2048027549">{&quot;enrollMangoConsumerResponse&quot;:{&quot;uniqueId&quot;:&quot;${uniqueId}&quot;,&quot;vitalityId&quot;:${vitalityId}}}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
              <stringProp name="Scope.variable">uniqueId</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="WSO2: Mango Consumer RTE" enabled="false"/>
        <hashTree>
          <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${wso2Base}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </ConfigTestElement>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="WSO2: POST Access Token" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="grant_type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">client_credentials</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">grant_type</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/token</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Basic ${msWso2Token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extracting WSO2 AccessToken" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">wso2AccessToken</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">wso2AccessToken_NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="WSO2: POST Mango Consumer RTE" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;enrollMangoConsumerRequest&quot;: {&#xd;
    &quot;dateOfBirth&quot;: &quot;${__RandomDate(yyyy-MM-dd,1930-01-01,2001-12-31,,)}&quot;,&#xd;
    &quot;emailAddress&quot;: &quot;VG${randomString}@mango.com&quot;,&#xd;
    &quot;firstName&quot;: &quot;${randomString}&quot;,&#xd;
    &quot;lastName&quot;: &quot;${randomString}&quot;,&#xd;
    &quot;partnerId&quot;: &quot;${partnerId}&quot;,&#xd;
    &quot;uniqueId&quot;: &quot;${randomAlphaNumericString}&quot;,&#xd;
    &quot;vitalityCoverageEffectiveDate&quot;: &quot;${dateToday}&quot;&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/vitality-mangoconsumer-enrolment-service-1/1.0/svc/2/enrollMangoConsumer</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${wso2AccessToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: Vitality ID present" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1203236063">errorMessage</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">6</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract entityNo" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">mangoId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.enrollMangoConsumerResponse.vitalityId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="WSO2 Integration" enabled="false"/>
        <hashTree>
          <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${wso2Base}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </ConfigTestElement>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname=" POST WSO2 Access Token" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="grant_type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">client_credentials</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">grant_type</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/token</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Basic ${wso2Token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extracting WSO2 AccessToken" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">wso2AccessToken</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">wso2AccessToken_NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname=" GET Tiles" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/mango/1.0/mango_tiles/${mangoId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${wso2AccessToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract: wheel id" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">wheelId</stringProp>
              <stringProp name="RegexExtractor.regex">wheel_data/(.+)..</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="353846044">FIRST_TIME</stringProp>
                <stringProp name="1247626615">PHYSICAL_ACTIVITY</stringProp>
                <stringProp name="-1796047851">LIFESTYLE</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">34</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname=" POST Insert Vitality Event" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:vit=&quot;http://schemas.discovery.co.za/vitality&quot;&gt;&#xd;
	&lt;soapenv:Header/&gt;&#xd;
		&lt;soapenv:Body&gt;&#xd;
			&lt;vit:AwardVitalityEventRequestMessage schemaVersion=&quot;1.0&quot;&gt; &#xd;
			&lt;vit:AwardVitalityEventRequest correlationNumber=&quot;1&quot;&gt; &#xd;
			&lt;vit:MemberNumber&gt;${mangoId}&lt;/vit:MemberNumber&gt; &#xd;
			&lt;vit:EventType&gt;PW1C&lt;/vit:EventType&gt; &#xd;
			&lt;vit:EventDate&gt;${dateToday}&lt;/vit:EventDate&gt; &#xd;
			&lt;vit:PartnerEntityNumber&gt;${mangoEmployerId}&lt;/vit:PartnerEntityNumber&gt; &#xd;
			&lt;/vit:AwardVitalityEventRequest&gt; &#xd;
			&lt;vit:AwardVitalityEventRequest correlationNumber=&quot;2&quot;&gt; &#xd;
			&lt;vit:MemberNumber&gt;${mangoId}&lt;/vit:MemberNumber&gt; &#xd;
			&lt;vit:EventType&gt;VWC1&lt;/vit:EventType&gt; &#xd;
			&lt;vit:EventDate&gt;${dateToday}&lt;/vit:EventDate&gt; &#xd;
			&lt;vit:PartnerEntityNumber&gt;${mangoEmployerId}&lt;/vit:PartnerEntityNumber&gt; &#xd;
			&lt;/vit:AwardVitalityEventRequest&gt; &#xd;
			&lt;/vit:AwardVitalityEventRequestMessage&gt;&#xd;
		&lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/vitalityEvent/1.0/*</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${wso2AccessToken}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/xml</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-59358374">The event inserted successfully</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname=" POST Insert Vitality Event" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:vit=&quot;http://schemas.discovery.co.za/vitality&quot;&gt;&#xd;
	&lt;soapenv:Header/&gt;&#xd;
		&lt;soapenv:Body&gt;&#xd;
			&lt;vit:AwardVitalityEventRequestMessage schemaVersion=&quot;1.0&quot;&gt; &#xd;
			&lt;vit:AwardVitalityEventRequest correlationNumber=&quot;1&quot;&gt; &#xd;
			&lt;vit:MemberNumber&gt;${mangoId}&lt;/vit:MemberNumber&gt; &#xd;
			&lt;vit:EventType&gt;PW1C&lt;/vit:EventType&gt; &#xd;
			&lt;vit:EventDate&gt;${dateToday}&lt;/vit:EventDate&gt; &#xd;
			&lt;vit:PartnerEntityNumber&gt;${mangoEmployerId}&lt;/vit:PartnerEntityNumber&gt; &#xd;
			&lt;/vit:AwardVitalityEventRequest&gt; &#xd;
			&lt;/vit:AwardVitalityEventRequestMessage&gt;&#xd;
		&lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/vitalityEvent/1.0/*</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${wso2AccessToken}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/xml</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-59358374">The event inserted successfully</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="VOL" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1514078571000</longProp>
        <longProp name="ThreadGroup.end_time">1514078571000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">300</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="true">
          <stringProp name="ConstantTimer.delay">200</stringProp>
          <stringProp name="RandomTimer.range">200</stringProp>
        </GaussianRandomTimer>
        <hashTree/>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Users: VOL" enabled="false">
          <collectionProp name="UserParameters.names">
            <stringProp name="112388430">volId</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="-125503879">
              <stringProp name="625215732">${volID_1}</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="VOL: Mobile Services" enabled="false"/>
        <hashTree>
          <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Auth Token" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="entity_no" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${volId}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">entity_no</stringProp>
                  </elementProp>
                  <elementProp name="encrypted_entity_no" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${volIdEncrypted}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">encrypted_entity_no</stringProp>
                  </elementProp>
                  <elementProp name="_p" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">IOS</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">_p</stringProp>
                  </elementProp>
                  <elementProp name="_v" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${mob.app.version}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">_v</stringProp>
                  </elementProp>
                  <elementProp name="_doc_browser_context" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">_doc_browser_context</stringProp>
                  </elementProp>
                  <elementProp name="_c" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">VOL</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">_c</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${msBase}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${msPath}/auth/simulate_auth</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Encrypted Entity" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import java.security.MessageDigest;

//Entity Encription for Apollo
MessageDigest digest = MessageDigest.getInstance(&quot;MD5&quot;);
byte[] bytes = digest.digest((&quot;${volId}&quot; + &quot;${msSalt}&quot;).getBytes());
vars.put(&quot;volIdEncrypted&quot;,javax.xml.bind.DatatypeConverter.printHexBinary(bytes).toLowerCase());</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Active Rewards Token" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">ar_Token</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.session.token</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="LLT Assertion" enabled="false">
                <stringProp name="JSON_PATH">$.session.timeout</stringProp>
                <stringProp name="EXPECTED_VALUE">20</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">false</boolProp>
              </JSONPathAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="VOL: Mobile Services" enabled="true"/>
          <hashTree>
            <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${msBase}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </ConfigTestElement>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Vitality-Client</stringProp>
                  <stringProp name="Header.value">VOL</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                  <stringProp name="Header.value">15772967-8764-4D05-A714-9097196EBED0</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Vitality-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-us</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                  <stringProp name="Header.value">${dateTimeToday}TGMT-05:00</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Vitality-Token</stringProp>
                  <stringProp name="Header.value">${ar_Token}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Vitality-App-Version</stringProp>
                  <stringProp name="Header.value">10</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Vitality-Mobile-Platform-Version</stringProp>
                  <stringProp name="Header.value">13.1.3</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                  <stringProp name="Header.value">IOS</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">charset</stringProp>
                  <stringProp name="Header.value">UTF-8</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Vitality%20One/2 CFNetwork/1120 Darwin/19.2.0; </stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="VOL: accept T&amp;C" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">vitalitymobileservices/registration/accept_terms_and_conditions</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert Product" enabled="true">
                <stringProp name="JSON_PATH">$.output.product</stringProp>
                <stringProp name="EXPECTED_VALUE">VITALITY_ONE</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">false</boolProp>
              </JSONPathAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="VOL: Activities" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">vitalitymobileservices/activity/all</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert Errors" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-2070259289">status&quot;:1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="VOL: Dashboard Cards" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/vitalitymobileservices/dashboard/cards</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert Errors" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-2070259289">status&quot;:1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="VOL: Ui Events" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/vitalitymobileservices/uievents/all</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert Errors" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-2070259289">status&quot;:1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="VOL: Wheel Status" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/vitalitymobileservices/active_rewards/wheel_status</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert Status" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-338934370">status&quot;:&quot;AWARDED&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">spin_id</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.output.expiring_spin.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="VOL: Wheel Data" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="spin_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">12410267</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">spin_id</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/vitalitymobileservices/active_rewards/wheel_data</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract card_count" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">card_count</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.output.card_count</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert Status" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1573">16</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">card_count</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="VOL: Zuul" enabled="false"/>
        <hashTree>
          <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">zuul-noauth.qa.tvgose.discsrv.co.za</stringProp>
            <stringProp name="HTTPSampler.port">80</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </ConfigTestElement>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, application/*+json</stringProp>
              </elementProp>
              <elementProp name="Content-Length" elementType="Header">
                <stringProp name="Header.name">Content-Length</stringProp>
                <stringProp name="Header.value">0</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="VOL: Zuul_AR_Wheel Status" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">reward/38/v1/reward/wheel/status/${volId}/0</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="VOL: Zuul_AR Progress Trackers" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">goal-progress/38/api/v1/progressTrackers/actual/memberId/${volId}/type/weekly</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="VOL: Zuul_AR Reward Tracker History" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">reward/38/v1/reward/reward_tracker_history/${volId}/offset/0/limit/100</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="VOL: Zuul_AR Reward Eligibility" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="tenantId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">38</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">tenantId</stringProp>
                </elementProp>
                <elementProp name="memberId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${volId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">memberId</stringProp>
                </elementProp>
                <elementProp name="employerId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${volEmployer}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">employerId</stringProp>
                </elementProp>
                <elementProp name="productIdentifier" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">ActiveRewards</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">productIdentifier</stringProp>
                </elementProp>
                <elementProp name="eligibilityType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">ActiveRewards</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">eligibilityType</stringProp>
                </elementProp>
                <elementProp name="effectiveDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${dateToday}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">effectiveDate</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">vitality-orchestration-service/api/ActiveRewards/1.0/Eligibility</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="VOL: CORE" enabled="false"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="VOL: CORE Coins Balance" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">vgtvsa</stringProp>
            <stringProp name="HTTPSampler.port">7001</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">coin-manager/balance/${volId}/1</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1190093475">errorCode&quot;:0</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="VOL: VAP" enabled="false"/>
        <hashTree>
          <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">vgtweblogic04.discsrv.co.za</stringProp>
            <stringProp name="HTTPSampler.port">7002</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </ConfigTestElement>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, application/*+json</stringProp>
              </elementProp>
              <elementProp name="Content-Length" elementType="Header">
                <stringProp name="Header.name">Content-Length</stringProp>
                <stringProp name="Header.value">0</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="VOL: VAP WLG" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="mobile" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">mobile</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">vap/rest/vitality_one_goals/lifestyle/${volId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-363659817">WEEKLY_LIFESTYLE</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="VOL: VAP WLG_Progress" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="mobile" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">mobile</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">vap/rest/vitality_one_goals/lifestyle/progress/${volId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="VOL: VAP Incentive Plan" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="mobile" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">mobile</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">vap/rest/incentiveplan/${volId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="VOL: VAP Promotions" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">vap/rest/nfe/mobile/promotions/user/${volId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="VOL: VAP More Activities" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="mobile" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">mobile</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">vap/rest/vitality_one_goals/more_activities/${volId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1549003990">&quot;goals&quot; : [ ]</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">5</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="VOL: VAP Client Logo" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="mobile" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">mobile</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">vap/rest/clientlogo/${volId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="VOL: VAP Points Statement" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">vap/rest/points_statement/${volId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="VOL: Coins" enabled="true"/>
        <hashTree>
          <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${core.base}</stringProp>
            <stringProp name="HTTPSampler.port">${core.port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </ConfigTestElement>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="VOL: award Coins" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;amount&quot;: 1350,&#xd;
    &quot;date&quot;: &quot;${dateToday}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">coin-manager/award-coins/1440225801/1</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1190093475">errorCode&quot;:0</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="VOL: Coins Balance" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port">7001</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">coin-manager/balance/1440225801/1</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1190093475">errorCode&quot;:0</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="VOL: REGISTRATION" enabled="false"/>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV: test data" enabled="true">
            <stringProp name="TestPlan.comments">User&apos;s Creds</stringProp>
            <stringProp name="filename">/Users/DNesterov/apache-jmeter-4.0/CSV/VOL_BETA.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">volId,volFirstName,volLastName,volDOB,volEmployeeNo,volUserName</stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">false</boolProp>
            <boolProp name="stopThread">true</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${povBase}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </ConfigTestElement>
          <hashTree/>
          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
            <collectionProp name="CookieManager.cookies"/>
            <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          </CookieManager>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</stringProp>
              </elementProp>
              <elementProp name="Content-Length" elementType="Header">
                <stringProp name="Header.name">Content-Length</stringProp>
                <stringProp name="Header.value">151</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">vitalityone</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REG: Login Page" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">vitality/login</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REG: STEP ONE - user details" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="first_name" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${volFirstName}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">first_name</stringProp>
                </elementProp>
                <elementProp name="last_name" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${volLastName}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">last_name</stringProp>
                </elementProp>
                <elementProp name="date_of_birth" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${volDOB}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">date_of_birth</stringProp>
                </elementProp>
                <elementProp name="email" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">email</stringProp>
                </elementProp>
                <elementProp name="wizard" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">register</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">wizard</stringProp>
                </elementProp>
                <elementProp name="not_jh_user" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">not_jh_user</stringProp>
                </elementProp>
                <elementProp name="not_manulife_user" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">not_manulife_user</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">vitality/login/register_form_first_step</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re">https://integrationtest.powerofvitality.com/vitality/login/register</stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REG: STEP TWO - user&apos;s employer details" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="not_jh_user" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">not_jh_user</stringProp>
                </elementProp>
                <elementProp name="not_manulife_user" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">not_manulife_user</stringProp>
                </elementProp>
                <elementProp name="emp_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${volEmployeeNo}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">emp_id</stringProp>
                </elementProp>
                <elementProp name="screen" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">emp_id</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">screen</stringProp>
                </elementProp>
                <elementProp name="first_name" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${volFirstName}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">first_name</stringProp>
                </elementProp>
                <elementProp name="last_name" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${volLastName}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">last_name</stringProp>
                </elementProp>
                <elementProp name="date_of_birth" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${volDOB}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">date_of_birth</stringProp>
                </elementProp>
                <elementProp name="email" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">email</stringProp>
                </elementProp>
                <elementProp name="selected_employer_no" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${volEmployer}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">selected_employer_no</stringProp>
                </elementProp>
                <elementProp name="wizard" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">register</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">wizard</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">vitality/login/register_form_second_step</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REG: STEP THREE - username and password" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="username" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${volUserName}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">username</stringProp>
                </elementProp>
                <elementProp name="password" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">P@ssw0rd</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">password</stringProp>
                </elementProp>
                <elementProp name="confirm_password" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">P@ssw0rd</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">confirm_password</stringProp>
                </elementProp>
                <elementProp name="email" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">email</stringProp>
                </elementProp>
                <elementProp name="first_name" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${volFirstName}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">first_name</stringProp>
                </elementProp>
                <elementProp name="last_name" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${volLastName}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">last_name</stringProp>
                </elementProp>
                <elementProp name="date_of_birth" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${volDOB}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">date_of_birth</stringProp>
                </elementProp>
                <elementProp name="wizard" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">register</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">wizard</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">vitality/login/register_form_third_step</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="REG: STEP FOUR - security questions" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="question0" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">question0</stringProp>
                </elementProp>
                <elementProp name="answer0" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">test</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">answer0</stringProp>
                </elementProp>
                <elementProp name="question1" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">question1</stringProp>
                </elementProp>
                <elementProp name="answer1" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">test</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">answer1</stringProp>
                </elementProp>
                <elementProp name="question2" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">4</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">question2</stringProp>
                </elementProp>
                <elementProp name="answer2" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">test</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">answer2</stringProp>
                </elementProp>
                <elementProp name="wizard" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">register</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">wizard</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">vitality/login/register_form_fourth_step</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Auth Token" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="entity_no" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${volId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">entity_no</stringProp>
                </elementProp>
                <elementProp name="encrypted_entity_no" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${volIdEncrypted}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">encrypted_entity_no</stringProp>
                </elementProp>
                <elementProp name="_p" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">IOS</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">_p</stringProp>
                </elementProp>
                <elementProp name="_v" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">8.4</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">_v</stringProp>
                </elementProp>
                <elementProp name="_doc_browser_context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">_doc_browser_context</stringProp>
                </elementProp>
                <elementProp name="_c" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">VOL</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">_c</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${msBase}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${msPath}/auth/simulate_auth</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Encrypted Entity" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import java.security.MessageDigest;

//Entity Encription for Apollo
MessageDigest digest = MessageDigest.getInstance(&quot;MD5&quot;);
byte[] bytes = digest.digest((&quot;${volId}&quot; + &quot;${msSalt}&quot;).getBytes());
vars.put(&quot;volIdEncrypted&quot;,javax.xml.bind.DatatypeConverter.printHexBinary(bytes).toLowerCase());</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Active Rewards Token" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">ar_Token</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.session.token</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="VOL: accept T&amp;C" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${msBase}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">vitalitymobileservices/registration/accept_terms_and_conditions</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Vitality-Client" elementType="Header">
                  <stringProp name="Header.name">Vitality-Client</stringProp>
                  <stringProp name="Header.value">VOL</stringProp>
                </elementProp>
                <elementProp name="Vitality-Token" elementType="Header">
                  <stringProp name="Header.name">Vitality-Token</stringProp>
                  <stringProp name="Header.value">${ar_Token}</stringProp>
                </elementProp>
                <elementProp name="Vitality-App-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-App-Version</stringProp>
                  <stringProp name="Header.value">7</stringProp>
                </elementProp>
                <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                  <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                  <stringProp name="Header.value">IOS</stringProp>
                </elementProp>
                <elementProp name="Vitality-Language" elementType="Header">
                  <stringProp name="Header.name">Vitality-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Vitality-Device-Id" elementType="Header">
                  <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                  <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                </elementProp>
                <elementProp name="Vitality-Local-Time" elementType="Header">
                  <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                  <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                </elementProp>
                <elementProp name="Vitality-API-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-API-Version</stringProp>
                  <stringProp name="Header.value">10</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Vitality-Mobile-Platform-Version</stringProp>
                  <stringProp name="Header.value">13.1.3</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert Product" enabled="true">
              <stringProp name="JSON_PATH">$.output.product</stringProp>
              <stringProp name="EXPECTED_VALUE">VITALITY_ONE</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST AR_Activate" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="programType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">ActiveRewards</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">programType</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Vitality-Client" elementType="Header">
                  <stringProp name="Header.name">Vitality-Client</stringProp>
                  <stringProp name="Header.value">VOL</stringProp>
                </elementProp>
                <elementProp name="Vitality-Token" elementType="Header">
                  <stringProp name="Header.name">Vitality-Token</stringProp>
                  <stringProp name="Header.value">${ar_Token}</stringProp>
                </elementProp>
                <elementProp name="Vitality-App-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-App-Version</stringProp>
                  <stringProp name="Header.value">7</stringProp>
                </elementProp>
                <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                  <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                  <stringProp name="Header.value">IOS</stringProp>
                </elementProp>
                <elementProp name="Vitality-Language" elementType="Header">
                  <stringProp name="Header.name">Vitality-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Vitality-Device-Id" elementType="Header">
                  <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                  <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                </elementProp>
                <elementProp name="Vitality-Local-Time" elementType="Header">
                  <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                  <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                </elementProp>
                <elementProp name="Vitality-API-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-API-Version</stringProp>
                  <stringProp name="Header.value">9</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="VRZN" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">2</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">300</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${wso2Base}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout">30000</stringProp>
          <stringProp name="HTTPSampler.response_timeout">300000</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="495167538">vitalityId_Vrzn</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="1204838565">
              <stringProp name="-1370155517">1421960301</stringProp>
            </collectionProp>
            <collectionProp name="1089510607">
              <stringProp name="-1370956769">1421954676</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="VRZN: Fuctional Testing" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST WSO2 Access Token" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="grant_type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">client_credentials</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">grant_type</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/token</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Basic ${wso2Token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extracting WSO2 AccessToken" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">wso2AccessToken</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="RTE: VRZN" enabled="false"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST RTE VRZN Token: Genarate" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;issuedDate&quot;: &quot;${dateToday}&quot;,&#xd;
  &quot;entityNo&quot;: null,&#xd;
  &quot;expiryDate&quot;: &quot;${dateTomorrow}&quot;,&#xd;
  &quot;verifiedDate&quot;: null,&#xd;
  &quot;partnerId&quot;: &quot;${vrznPartnerId}&quot;,&#xd;
  &quot;generatedBy&quot;: &quot;PERF-TEST&quot;,&#xd;
  &quot;tokenType&quot;: &quot;Token&quot;,&#xd;
  &quot;tokenValue&quot;: &quot;${randomAlphaNumericString}&quot;,&#xd;
  &quot;status&quot;: &quot;P&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${zuulRteNode01}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">vitality-whitelabel-domain-service-1/svc/${tenantWhiteLable}/token.json</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.proxyHost">${zuulProxy}</stringProp>
              <stringProp name="HTTPSampler.proxyPort">${proxyPort}</stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract RTE Token: VRZN" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">vrznRteToken</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.tokenValue</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert: vrznRteToken" enabled="true">
                <stringProp name="JSON_PATH">$.tokenValue</stringProp>
                <stringProp name="EXPECTED_VALUE">${vrznRteToken}</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">false</boolProp>
              </JSONPathAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST RTE VRZN Token: Validate" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;validateTokenRequest&quot;: {&#xd;
    &quot;partnerId&quot;: &quot;${vrznPartnerId}&quot;,&#xd;
    &quot;tokenId&quot;: &quot;${vrznRteToken}&quot;&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/whitelabel-rte/1.0/svc/${tenantWhiteLable}/validateToken</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${wso2AccessToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: Token is valid" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1616563228">validateTokenResponse</stringProp>
                  <stringProp name="-374023120">tokenAttributes</stringProp>
                  <stringProp name="-2031077811">isTokenValid</stringProp>
                  <stringProp name="3569038">true</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RTE: VRZN" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
 &quot;enrollMemberRequest&quot;: {&#xd;
   &quot;coverageEffectiveDate&quot;: &quot;${dateToday}&quot;,&#xd;
   &quot;dateOfBirth&quot;: &quot;${__RandomDate(yyyy-MM-dd,1930-01-01,2001-12-31,,)}&quot;,&#xd;
   &quot;firstName&quot;: &quot;${randomString}&quot;,&#xd;
   &quot;gender&quot;: &quot;${__chooseRandom(M,F,U,randomProduct)}&quot;,&#xd;
   &quot;lastName&quot;: &quot;${randomString}&quot;,&#xd;
   &quot;partnerId&quot;: &quot;${vrznPartnerId}&quot;,&#xd;
   &quot;uniqueId&quot;: &quot;${vrznRteToken}&quot;,&#xd;
   &quot;zipCode&quot;: &quot;60605&quot;&#xd;
 }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/whitelabel-rte/1.0/svc/${tenantWhiteLable}/enrollMember</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${wso2AccessToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: Vitality ID present" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1203236063">errorMessage</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">6</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract entityNo" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">vitalityId_Vrzn</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.enrollMemberResponse.vitalityId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="White Lable API: VRZN" enabled="true"/>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${wso2AccessToken}</stringProp>
                </elementProp>
                <elementProp name="x-vsl-timestamp" elementType="Header">
                  <stringProp name="Header.name">x-vsl-timestamp</stringProp>
                  <stringProp name="Header.value">${timeStamp}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST AR Activate" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;tenantId&quot;: &quot;${tenantVrzn}&quot;,&#xd;
	&quot;mode&quot;: &quot;Activate&quot;,&#xd;
	&quot;programme&quot;: {&#xd;
		&quot;entityNumber&quot;: ${vitalityId_Vrzn},&#xd;
		&quot;programType&quot;: &quot;ActiveRewards&quot;,&#xd;
		&quot;effectivePeriods&quot;: [&#xd;
			{&#xd;
				&quot;effectiveFrom&quot;: &quot;${dateToday}&quot;,&#xd;
				&quot;effectiveTo&quot;: &quot;9999-12-30&quot;&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/ActiveRewards/1.0/Activation</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
                <stringProp name="JSON_PATH">$.payload.content.reason</stringProp>
                <stringProp name="EXPECTED_VALUE">Programme Activated and Goal Generated</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">false</boolProp>
              </JSONPathAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET AR Progress Tracker" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="offset" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">offset</stringProp>
                  </elementProp>
                  <elementProp name="limit" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">2147483647</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">limit</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/goal-progress-api/1.0/${tenantVrzn}/api/v1/progressTrackers/memberId/${vitalityId_Vrzn}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">goalId;goalType;rewardConfiguration;createdDate;goalStart;goalEnd;goalMonitoring</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.trackers[0].id;$.trackers[0].goalType;$.trackers[0].rewards[0].name;$.trackers[0].createdDate;$.trackers[0].startEffectiveDate;$.trackers[0].endEffectiveDate;$.trackers[0].endMonitorDate</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND;NOT_FOUND;NOT_FOUND;NOT_FOUND;NOT_FOUND;NOT_FOUND;NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: Goal Type" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-791707519">weekly</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">goalType</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: Goal ID" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="3392903">null</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">5</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">goalId</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: Reward Configuration" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1927814711">Verizon weekly reward configuration</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">rewardConfiguration</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: Created Date" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1074049343">${dateToday}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">createdDate</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: Goal Start Date" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1858950920">${weeklyGoalStartDate}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">goalStart</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: Goal End Date" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1619343071">${weeklyGoalEndDate}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">goalEnd</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: Goal Monitoring Period" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1170877721">${monitoring_6}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">goalMonitoring</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="VRZN: Performance Testing" enabled="false"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST RTE VRZN Token: Genarate" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;issuedDate&quot;: &quot;${dateToday}&quot;,&#xd;
  &quot;entityNo&quot;: null,&#xd;
  &quot;expiryDate&quot;: &quot;${dateTomorrow}&quot;,&#xd;
  &quot;verifiedDate&quot;: null,&#xd;
  &quot;partnerId&quot;: &quot;${vrznPartnerId}&quot;,&#xd;
  &quot;generatedBy&quot;: &quot;PERF-TEST&quot;,&#xd;
  &quot;tokenType&quot;: &quot;Token&quot;,&#xd;
  &quot;tokenValue&quot;: &quot;${randomAlphaNumericString}&quot;,&#xd;
  &quot;status&quot;: &quot;P&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${zuulRteNode01}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">vitality-whitelabel-domain-service-1/svc/${tenantWhiteLable}/token.json</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.proxyHost">vgpwebsproxy01</stringProp>
            <stringProp name="HTTPSampler.proxyPort">8080</stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract RTE Token: VRZN" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">vrznRteToken</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.tokenValue</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert: vrznRteToken" enabled="true">
              <stringProp name="JSON_PATH">$.tokenValue</stringProp>
              <stringProp name="EXPECTED_VALUE">${vrznRteToken}</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST RTE VRZN Token: Validate" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;validateTokenRequest&quot;: {&#xd;
    &quot;partnerId&quot;: &quot;${vrznPartnerId}&quot;,&#xd;
    &quot;tokenId&quot;: &quot;${vrznRteToken}&quot;&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/whitelabel-rte/1.0/svc/${tenantWhiteLable}/validateToken</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${wso2AccessToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: Token is valid" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1616563228">validateTokenResponse</stringProp>
                <stringProp name="-374023120">tokenAttributes</stringProp>
                <stringProp name="-2031077811">isTokenValid</stringProp>
                <stringProp name="3569038">true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RTE: VRZN" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
 &quot;enrollMemberRequest&quot;: {&#xd;
   &quot;coverageEffectiveDate&quot;: &quot;${dateToday}&quot;,&#xd;
   &quot;dateOfBirth&quot;: &quot;${__RandomDate(yyyy-MM-dd,1930-01-01,2001-12-31,,)}&quot;,&#xd;
   &quot;firstName&quot;: &quot;${randomString}&quot;,&#xd;
   &quot;gender&quot;: &quot;${__chooseRandom(M,F,U,randomProduct)}&quot;,&#xd;
   &quot;lastName&quot;: &quot;${randomString}&quot;,&#xd;
   &quot;partnerId&quot;: &quot;${vrznPartnerId}&quot;,&#xd;
   &quot;uniqueId&quot;: &quot;${vrznRteToken}&quot;,&#xd;
   &quot;zipCode&quot;: &quot;60605&quot;&#xd;
 }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/whitelabel-rte/1.0/svc/${tenantWhiteLable}/enrollMember</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${wso2AccessToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: Vitality ID present" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1203236063">errorMessage</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">6</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract entityNo" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">vrznId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.enrollMemberResponse.vitalityId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="CRUNCH" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">200</stringProp>
        <stringProp name="ThreadGroup.ramp_time">200</stringProp>
        <longProp name="ThreadGroup.start_time">1514078571000</longProp>
        <longProp name="ThreadGroup.end_time">1514078571000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">600</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Users: Crunch" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="-2004981848">crunchId</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="-1444093903">
              <stringProp name="715743532">${crunchId_1}</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">true</boolProp>
        </UserParameters>
        <hashTree/>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Encrypting Entity" enabled="true">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">import java.security.MessageDigest;

MessageDigest digest = MessageDigest.getInstance(&quot;MD5&quot;);
byte[] bytes = digest.digest((&quot;${crunchId}&quot; + &quot;${msSalt}&quot;).getBytes());
vars.put(&quot;crunchIdEncrypted&quot;,javax.xml.bind.DatatypeConverter.printHexBinary(bytes).toLowerCase());</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Auth Token" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="entity_no" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${crunchId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">entity_no</stringProp>
              </elementProp>
              <elementProp name="encrypted_entity_no" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${crunchIdEncrypted}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">encrypted_entity_no</stringProp>
              </elementProp>
              <elementProp name="_p" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">IOS</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_p</stringProp>
              </elementProp>
              <elementProp name="_v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${mob.app.version}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_v</stringProp>
              </elementProp>
              <elementProp name="_doc_browser_context" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_doc_browser_context</stringProp>
              </elementProp>
              <elementProp name="_c" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">CNH</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_c</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${msBase}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${msPath}/auth/simulate_auth</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Auth Token" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">authToken</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.session.token</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="Sample.scope">all</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Health Data Upload" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;header&quot;: {&#xd;
		&quot;uploadDate&quot;: &quot;${dateToday}T16:18:34-06:00&quot;,&#xd;
		&quot;sessionId&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}&quot;,&#xd;
		&quot;user&quot;: {&#xd;
			&quot;entityNo&quot;: &quot;${crunchId}&quot;,&#xd;
			&quot;partnerUserId&quot;: &quot;&quot;&#xd;
		},&#xd;
		&quot;partnerSystem&quot;: &quot;Apple&quot;,&#xd;
		&quot;rawUploadData&quot;: &quot;&quot;,&#xd;
		&quot;processingType&quot;: &quot;BATCH&quot;,&#xd;
		&quot;tenantId&quot;: &quot;${tenantCrunch}&quot;,&#xd;
		&quot;verified&quot;: &quot;true&quot;,&#xd;
		&quot;uploadCount&quot;: 2&#xd;
	},&#xd;
	&quot;device&quot;: {&#xd;
		&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
		&quot;model&quot;: &quot;iOS 13.0&quot;,&#xd;
		&quot;deviceId&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}&quot;&#xd;
	},&#xd;
	&quot;readings&quot;: [&#xd;
		{&#xd;
			&quot;startTime&quot;: &quot;${dateToday}T00:00:00-06:00&quot;,&#xd;
			&quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00-06:00&quot;,&#xd;
			&quot;readingType&quot;: &quot;WEIGHT&quot;,&#xd;
			&quot;dataCategory&quot;: &quot;BIOMETRIC&quot;,&#xd;
			&quot;integrity&quot;: &quot;UNVERIFIED&quot;,&#xd;
			&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
			&quot;model&quot;: &quot;iOS 13.0&quot;,&#xd;
			&quot;partnerReadingId&quot;: &quot;${dateToday}${randomAlphaNumericString}&quot;,&#xd;
			&quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
			&quot;healthData&quot;: {&#xd;
				&quot;weight&quot;: {&#xd;
					&quot;unitOfMeasurement&quot;: &quot;KILOGRAMS&quot;,&#xd;
					&quot;value&quot;: 77.359237&#xd;
				}&#xd;
			}&#xd;
		},&#xd;
		{&#xd;
			&quot;startTime&quot;: &quot;${dateToday}T00:00:00-06:00&quot;,&#xd;
			&quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00-06:00&quot;,&#xd;
			&quot;readingType&quot;: &quot;WALKING&quot;,&#xd;
			&quot;dataCategory&quot;: &quot;ROUTINE&quot;,&#xd;
			&quot;integrity&quot;: &quot;VERIFIED&quot;,&#xd;
			&quot;workout&quot;: {&#xd;
				&quot;energyExpenditure&quot;: {&#xd;
					&quot;unitOfMeasurement&quot;: &quot;KILOCALORIES&quot;,&#xd;
					&quot;value&quot;: 600.0940000000206&#xd;
				}&#xd;
			},&#xd;
			&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
			&quot;model&quot;: &quot;iOS 13.0&quot;,&#xd;
			&quot;partnerReadingId&quot;: &quot;${dateToday}${randomAlphaNumericString}&quot;,&#xd;
			&quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
			&quot;duration&quot;: 86400&#xd;
		}&#xd;
	]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${msBase}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">vitalitymobileservices/health_data/upload</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Vitality-Token" elementType="Header">
                <stringProp name="Header.name">Vitality-Token</stringProp>
                <stringProp name="Header.value">${authToken}</stringProp>
              </elementProp>
              <elementProp name="Vitality-App-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-App-Version</stringProp>
                <stringProp name="Header.value">7</stringProp>
              </elementProp>
              <elementProp name="Vitality-Language" elementType="Header">
                <stringProp name="Header.name">Vitality-Language</stringProp>
                <stringProp name="Header.value">en</stringProp>
              </elementProp>
              <elementProp name="Vitality-Device-Id" elementType="Header">
                <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                <stringProp name="Header.value">swagger-3f802407-77b4-407c-a758-842af5830c2b</stringProp>
              </elementProp>
              <elementProp name="Vitality-Local-Time" elementType="Header">
                <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                <stringProp name="Header.value">${dateToday}T10:59:11.2TCDT-05:00</stringProp>
              </elementProp>
              <elementProp name="Vitality-API-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-API-Version</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                <stringProp name="Header.value">IOS</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Vitality-Client</stringProp>
                <stringProp name="Header.value">VOL</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="VDP: Verify That Data was recieved" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST OLD GDL Token" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="tenantId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${tenantCrunch}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">tenantId</stringProp>
                </elementProp>
                <elementProp name="grantType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">clientCredentials</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">grantType</stringProp>
                </elementProp>
                <elementProp name="clientId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">78600</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">clientId</stringProp>
                </elementProp>
                <elementProp name="reference" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${crunchId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">reference</stringProp>
                </elementProp>
                <elementProp name="clientSecret" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">c2Vuem9tYWxpbmdh</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">clientSecret</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${vslBase}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">serviceapi/TokenManager/Token</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-vsl-timestamp</stringProp>
                  <stringProp name="Header.value">${timeStamp}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="x-vsl-version" elementType="Header">
                  <stringProp name="Header.name">x-vsl-version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="x-vsl-sourcetype" elementType="Header">
                  <stringProp name="Header.name">x-vsl-sourcetype</stringProp>
                  <stringProp name="Header.value">GDL</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, application/*+json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">104</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="apiAccessToken" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">gdlToken</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.payload.content.authDetails.accessToken</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract userEntity" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">as_document</stringProp>
              <stringProp name="RegexExtractor.refname">userEntity</stringProp>
              <stringProp name="RegexExtractor.regex">&amp;reference=(.*?)</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Veirfy Data recieved by VDP: ROUTINE" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="entityNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${crunchId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">entityNo</stringProp>
                </elementProp>
                <elementProp name="dataCategories" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">ROUTINE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">dataCategories</stringProp>
                </elementProp>
                <elementProp name="startDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${dateToday}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">startDate</stringProp>
                </elementProp>
                <elementProp name="endDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${dateToday}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">endDate</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${vslBase}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">deviceapi/Device/HistoryTracker</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="x-vsl-sourcetype" elementType="Header">
                  <stringProp name="Header.name">x-vsl-sourcetype</stringProp>
                  <stringProp name="Header.value">GDL</stringProp>
                </elementProp>
                <elementProp name="x-vsl-timestamp" elementType="Header">
                  <stringProp name="Header.name">x-vsl-timestamp</stringProp>
                  <stringProp name="Header.value">${timeStamp}</stringProp>
                </elementProp>
                <elementProp name="x-vsl-version" elementType="Header">
                  <stringProp name="Header.name">x-vsl-version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">x-vsl-token</stringProp>
                  <stringProp name="Header.value">${gdlToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">dataCategory</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.payload.content.historyTracker.dataCategory</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-45891473">successfully retrieved</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Veirfy Data recieved by VDP: BIOMETRIC" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="entityNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${crunchId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">entityNo</stringProp>
                </elementProp>
                <elementProp name="dataCategories" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">BIOMETRIC</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">dataCategories</stringProp>
                </elementProp>
                <elementProp name="startDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${dateToday}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">startDate</stringProp>
                </elementProp>
                <elementProp name="endDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${dateToday}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">endDate</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${vslBase}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">deviceapi/Device/HistoryTracker</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="x-vsl-sourcetype" elementType="Header">
                  <stringProp name="Header.name">x-vsl-sourcetype</stringProp>
                  <stringProp name="Header.value">GDL</stringProp>
                </elementProp>
                <elementProp name="x-vsl-timestamp" elementType="Header">
                  <stringProp name="Header.name">x-vsl-timestamp</stringProp>
                  <stringProp name="Header.value">${timeStamp}</stringProp>
                </elementProp>
                <elementProp name="x-vsl-version" elementType="Header">
                  <stringProp name="Header.name">x-vsl-version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">x-vsl-token</stringProp>
                  <stringProp name="Header.value">${gdlToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">dataCategory</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.payload.content.historyTracker.dataCategory</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-45891473">successfully retrieved</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Send CAL and Weight to TIBCO" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${msBase}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">tibcoservices/sendTransportBridgeMessageToTVGService</stringProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout">30000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">300000</stringProp>
          </ConfigTestElement>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip,deflate</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/xml;charset=UTF-8</stringProp>
              </elementProp>
              <elementProp name="SOAPAction" elementType="Header">
                <stringProp name="Header.name">SOAPAction</stringProp>
                <stringProp name="Header.value">&quot;/SendTransportBridgeMessageToTVGService/SendTransportBridgeMessageToTVGOp&quot;</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SOAP: Weight" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://schemas.vitalitytibcoservices.com/vts/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:genericTBMRequest&gt;&#xd;
         &lt;v1:messageType&gt;xml&lt;/v1:messageType&gt;&#xd;
         &lt;v1:destinationTopic&gt;${tibcoGDLQueue}&lt;/v1:destinationTopic&gt;&#xd;
		&lt;ns2:DeviceUpload  xmlns:ns2=&quot;http://schemas.discovery.co.za/vitality&quot;&gt;&#xd;
		&lt;ns2:header&gt;&#xd;
			&lt;ns2:user&gt;&#xd;
				&lt;entityNo&gt;${crunchId}&lt;/entityNo&gt;&#xd;
			&lt;/ns2:user&gt;&#xd;
			&lt;ns2:uploadDate&gt;${dateToday}T11:23:33.176Z&lt;/ns2:uploadDate&gt;&#xd;
			&lt;ns2:sessionId&gt;${randomAlphaNumericString}-${randomAlphaNumericString}&lt;/ns2:sessionId&gt;&#xd;
			&lt;ns2:gdlSessionId&gt;${randomNumericString}&lt;/ns2:gdlSessionId&gt;&#xd;
			&lt;ns2:partnerSystem&gt;Apple&lt;/ns2:partnerSystem&gt;&#xd;
			&lt;ns2:verified&gt;false&lt;/ns2:verified&gt;&#xd;
			&lt;ns2:uploadCount&gt;0&lt;/ns2:uploadCount&gt;&#xd;
			&lt;ns2:tenantId&gt;46&lt;/ns2:tenantId&gt;&#xd;
			&lt;ns2:processingType&gt;REALTIME&lt;/ns2:processingType&gt;&#xd;
			&lt;ns2:rawUploadData&gt;NOT REQUIRED&lt;/ns2:rawUploadData&gt;&#xd;
		&lt;/ns2:header&gt;&#xd;
&#xd;
		&lt;ns2:device&gt;&#xd;
			&lt;manufacturer&gt;Apple&lt;/manufacturer&gt;&#xd;
			&lt;model&gt;iOS 13.0&lt;/model&gt;&#xd;
		&lt;/ns2:device&gt;&#xd;
&#xd;
		&lt;ns2:readings&gt;&#xd;
			&lt;startTime&gt;${dateToday}T00:00:00.000+03:00&lt;/startTime&gt;&#xd;
			&lt;endTime&gt;${dateTomorrow}T00:00:00.000+03:00&lt;/endTime&gt;&#xd;
			&lt;duration&gt;86400&lt;/duration&gt;&#xd;
			&lt;partnerSystemSource&gt;Apple Health&lt;/partnerSystemSource&gt;&#xd;
&#xd;
			&lt;readingId&gt;${randomNumericString}&lt;/readingId&gt;&#xd;
			&lt;partnerReadingId&gt;${randomAlphaNumericString}-${randomAlphaNumericString}&lt;/partnerReadingId&gt;&#xd;
			&lt;readingType&gt;UNKNOWN&lt;/readingType&gt;&#xd;
			&lt;dataCategory&gt;BIOMETRIC&lt;/dataCategory&gt;&#xd;
			&lt;integrity&gt;UNVERIFIED&lt;/integrity&gt;&#xd;
			&lt;isDuplicate&gt;0&lt;/isDuplicate&gt;&#xd;
			&lt;isValid&gt;1&lt;/isValid&gt;&#xd;
			&lt;isActive&gt;1&lt;/isActive&gt;&#xd;
			&lt;aggregationId&gt;${randomNumericString}&lt;/aggregationId&gt;&#xd;
			&lt;workout&gt;&#xd;
				&lt;partnerActivityType&gt;WEIGHT&lt;/partnerActivityType&gt;&#xd;
				&lt;heartRate/&gt;&#xd;
			&lt;/workout&gt;&#xd;
			&lt;healthData&gt;&#xd;
				&lt;weight&gt;&#xd;
				&lt;value&gt;78&lt;/value&gt;&#xd;
				&lt;unitOfMeasurement&gt;KILOGRAMS&lt;/unitOfMeasurement&gt;&#xd;
				&lt;/weight&gt;&#xd;
			&lt;heartRate/&gt;&lt;/healthData&gt;&#xd;
		&lt;/ns2:readings&gt;&#xd;
		&lt;/ns2:DeviceUpload&gt;&#xd;
      &lt;/v1:genericTBMRequest&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-202516509">Success</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SOAP: Calories" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://schemas.vitalitytibcoservices.com/vts/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:genericTBMRequest&gt;&#xd;
         &lt;v1:messageType&gt;xml&lt;/v1:messageType&gt;&#xd;
         &lt;v1:destinationTopic&gt;${tibcoGDLQueue}&lt;/v1:destinationTopic&gt;&#xd;
		&lt;ns2:DeviceUpload  xmlns:ns2=&quot;http://schemas.discovery.co.za/vitality&quot;&gt;&#xd;
		&lt;ns2:header&gt;&#xd;
			&lt;ns2:user&gt;&#xd;
				&lt;entityNo&gt;${crunchId}&lt;/entityNo&gt;&#xd;
			&lt;/ns2:user&gt;&#xd;
			&lt;ns2:uploadDate&gt;${dateToday}T11:23:33.176Z&lt;/ns2:uploadDate&gt;&#xd;
			&lt;ns2:sessionId&gt;${randomAlphaNumericString}-${randomAlphaNumericString}&lt;/ns2:sessionId&gt;&#xd;
			&lt;ns2:gdlSessionId&gt;${randomNumericString}&lt;/ns2:gdlSessionId&gt;&#xd;
			&lt;ns2:partnerSystem&gt;Apple&lt;/ns2:partnerSystem&gt;&#xd;
			&lt;ns2:verified&gt;true&lt;/ns2:verified&gt;&#xd;
			&lt;ns2:uploadCount&gt;0&lt;/ns2:uploadCount&gt;&#xd;
			&lt;ns2:tenantId&gt;46&lt;/ns2:tenantId&gt;&#xd;
			&lt;ns2:processingType&gt;BATCH&lt;/ns2:processingType&gt;&#xd;
			&lt;ns2:rawUploadData&gt;NOT REQUIRED&lt;/ns2:rawUploadData&gt;&#xd;
		&lt;/ns2:header&gt;&#xd;
&#xd;
		&lt;ns2:device&gt;&#xd;
			&lt;manufacturer&gt;Apple&lt;/manufacturer&gt;&#xd;
			&lt;model&gt;iOS 13.0&lt;/model&gt;&#xd;
		&lt;/ns2:device&gt;&#xd;
&#xd;
		&lt;ns2:readings&gt;&#xd;
			&lt;startTime&gt;${dateToday}T00:00:00.000+03:00&lt;/startTime&gt;&#xd;
			&lt;endTime&gt;${dateTomorrow}T00:00:00.000+03:00&lt;/endTime&gt;&#xd;
			&lt;duration&gt;86400&lt;/duration&gt;&#xd;
			&lt;readingId&gt;${randomNumericString}&lt;/readingId&gt;&#xd;
			&lt;partnerReadingId&gt;${randomAlphaNumericString}-${randomAlphaNumericString}&lt;/partnerReadingId&gt;&#xd;
			&lt;readingType&gt;WALKING&lt;/readingType&gt;&#xd;
			&lt;dataCategory&gt;ROUTINE&lt;/dataCategory&gt;&#xd;
			&lt;integrity&gt;VERIFIED&lt;/integrity&gt;&#xd;
			&lt;isDuplicate&gt;0&lt;/isDuplicate&gt;&#xd;
			&lt;isValid&gt;1&lt;/isValid&gt;&#xd;
			&lt;isActive&gt;1&lt;/isActive&gt;&#xd;
			&lt;aggregationId&gt;${randomNumericString}&lt;/aggregationId&gt;&#xd;
		&lt;workout&gt;&#xd;
			&lt;partnerActivityType&gt;WALKING&lt;/partnerActivityType&gt;&#xd;
			&lt;energyExpenditure&gt;&#xd;
				&lt;value&gt;2928.8&lt;/value&gt;&#xd;
				&lt;unitOfMeasurement&gt;KILOJOULES&lt;/unitOfMeasurement&gt;&#xd;
			&lt;/energyExpenditure&gt;&lt;heartRate/&gt;&#xd;
		&lt;/workout&gt;&#xd;
		&lt;/ns2:readings&gt;&#xd;
		&lt;/ns2:DeviceUpload&gt;&#xd;
      &lt;/v1:genericTBMRequest&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-202516509">Success</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="John Hancock" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">300</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${wso2Base}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout">30000</stringProp>
          <stringProp name="HTTPSampler.response_timeout">300000</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST WSO2 Access Token" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="grant_type" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">client_credentials</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">grant_type</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api/token</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Basic ${wso2Token}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extracting WSO2 AccessToken" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">wso2AccessToken</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="Sample.scope">all</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RTE: JH" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;enrollJohnHancockMemberRequest&quot;: {&#xd;
		&quot;biometricIndicator&quot;: &quot;Y&quot;,&#xd;
		&quot;branchCode&quot;: &quot;PERM1&quot;,&#xd;
		&quot;coverageEffectiveDate&quot;: &quot;2019-01-01&quot;,&#xd;
		&quot;dateOfBirth&quot;: &quot;1979-09-17&quot;,&#xd;
		&quot;emailAddress&quot;: &quot;${randomString}@gmail.com&quot;,&#xd;
		&quot;employeeId&quot;: &quot;HER${randomNumericString}&quot;,&#xd;
		&quot;firstName&quot;: &quot;${randomString}&quot;,&#xd;
		&quot;gender&quot;: &quot;F&quot;,&#xd;
		&quot;jointLifeInd&quot;: &quot;Y&quot;,&#xd;
		&quot;lastName&quot;: &quot;${randomString}&quot;,&#xd;
		&quot;partnerId&quot;: &quot;JHDUMMY&quot;,&#xd;
		&quot;uniqueId&quot;: &quot;${randomString}&quot;,&#xd;
		&quot;upsoldIndicator&quot;: &quot;N&quot;&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api/vitality-johnhancock-enrolment-service-1/1.0/svc/2/enrollJohnHancockMember</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${wso2AccessToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: No Errors" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1203236063">errorMessage</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extractor jhId" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">jhvitalityId;jhuniqueId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.enrollJohnHancockMemberResponse.vitalityId;$.enrollJohnHancockMemberResponse.uniqueId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND;NOT_FOUND</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: Entity is present" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1956472523">${jhvitalityId}</stringProp>
              <stringProp name="20515964">${jhuniqueId}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="TIBCO: Local" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">10</stringProp>
        <stringProp name="ThreadGroup.ramp_time">10</stringProp>
        <longProp name="ThreadGroup.start_time">1514078571000</longProp>
        <longProp name="ThreadGroup.end_time">1514078571000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">300</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="AR: Local Tibco" enabled="true"/>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Users: Apollo" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="1165624797">vitalityId</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="1966936419">
                <stringProp name="-1226073238">${apolloID_1}</stringProp>
              </collectionProp>
              <collectionProp name="1966932972">
                <stringProp name="-1226073207">${apolloID_2}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">true</boolProp>
          </UserParameters>
          <hashTree/>
          <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${tibcoBase}</stringProp>
            <stringProp name="HTTPSampler.port">${tibcoPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </ConfigTestElement>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Activate: FIBYOD" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
&quot;tenantId&quot;: &quot;27&quot;,&#xd;
&quot;mode&quot;: &quot;Activate&quot;,&#xd;
&quot;programme&quot;: {&#xd;
&quot;entityNumber&quot;: 1439334986, &#xd;
&quot;programType&quot;: &quot;FIBYOD&quot;,&#xd;
&quot;effectivePeriods&quot;: [&#xd;
{&#xd;
&quot;effectiveFrom&quot;: &quot;2019-03-12&quot;,&#xd;
&quot;effectiveTo&quot;: &quot;9999-12-30&quot;&#xd;
}&#xd;
]&#xd;
}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">arapi/ActiveRewards/Activation</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-vsl-timestamp</stringProp>
                  <stringProp name="Header.value">${timeStamp}</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Programme Activated Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1044234867">Programme Activated</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Activate: FIEYW" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
&quot;tenantId&quot;: &quot;27&quot;,&#xd;
&quot;mode&quot;: &quot;Activate&quot;,&#xd;
&quot;programme&quot;: {&#xd;
&quot;entityNumber&quot;: ${vitalityId}, &#xd;
&quot;programType&quot;: &quot;FIEYW&quot;,&#xd;
&quot;effectivePeriods&quot;: [&#xd;
{&#xd;
&quot;effectiveFrom&quot;: &quot;${dateToday}&quot;,&#xd;
&quot;effectiveTo&quot;: &quot;${dateTomorrow}&quot;&#xd;
}&#xd;
]&#xd;
}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">arapi/ActiveRewards/Activation</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-vsl-timestamp</stringProp>
                  <stringProp name="Header.value">${timeStamp}</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Programme Activated Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1044234867">Programme Activated</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Activate: FIBYOD" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
&quot;tenantId&quot;: &quot;27&quot;,&#xd;
&quot;mode&quot;: &quot;Activate&quot;,&#xd;
&quot;programme&quot;: {&#xd;
&quot;entityNumber&quot;: ${vitalityId}, &#xd;
&quot;programType&quot;: &quot;FIBYOD&quot;,&#xd;
&quot;effectivePeriods&quot;: [&#xd;
{&#xd;
&quot;effectiveFrom&quot;: &quot;${dateToday}&quot;,&#xd;
&quot;effectiveTo&quot;: &quot;${dateTomorrow}&quot;&#xd;
}&#xd;
]&#xd;
}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">arapi/ActiveRewards/Activation</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-vsl-timestamp</stringProp>
                  <stringProp name="Header.value">${timeStamp}</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Programme Activated Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1044234867">Programme Activated</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Activate: SIBYOD" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
&quot;tenantId&quot;: &quot;27&quot;,&#xd;
&quot;mode&quot;: &quot;Activate&quot;,&#xd;
&quot;programme&quot;: {&#xd;
&quot;entityNumber&quot;: ${vitalityId}, &#xd;
&quot;programType&quot;: &quot;SIBYOD&quot;,&#xd;
&quot;effectivePeriods&quot;: [&#xd;
{&#xd;
&quot;effectiveFrom&quot;: &quot;${dateToday}&quot;,&#xd;
&quot;effectiveTo&quot;: &quot;${dateTomorrow}&quot;&#xd;
}&#xd;
]&#xd;
}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">arapi/ActiveRewards/Activation</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-vsl-timestamp</stringProp>
                  <stringProp name="Header.value">${timeStamp}</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Programme Activated Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1044234867">Programme Activated</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET AW Eligibility" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="tenantId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">27</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">tenantId</stringProp>
                </elementProp>
                <elementProp name="memberId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${vitalityId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">memberId</stringProp>
                </elementProp>
                <elementProp name="eligibilityType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">WatchPurchase</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">eligibilityType</stringProp>
                </elementProp>
                <elementProp name="productIdentifier" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">AppleWatch</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">productIdentifier</stringProp>
                </elementProp>
                <elementProp name="effectiveDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${dateToday}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">effectiveDate</stringProp>
                </elementProp>
                <elementProp name="employerId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${employerIdFull}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">employerId</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">arapi/ActiveRewards/Eligibility</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-vsl-timestamp</stringProp>
                  <stringProp name="Header.value">${timeStamp}</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="253938965">Query WatchPurchase Eligibility Successful</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET AR Eligibility" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="tenantId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">27</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">tenantId</stringProp>
                </elementProp>
                <elementProp name="memberId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${vitalityId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">memberId</stringProp>
                </elementProp>
                <elementProp name="employerId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${employerIdFull}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">employerId</stringProp>
                </elementProp>
                <elementProp name="productIdentifier" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">FIEYW</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">productIdentifier</stringProp>
                </elementProp>
                <elementProp name="eligibilityType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">ActiveRewards</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">eligibilityType</stringProp>
                </elementProp>
                <elementProp name="effectiveDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${dateToday}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">effectiveDate</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">arapi/ActiveRewards/Eligibility</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-vsl-timestamp</stringProp>
                  <stringProp name="Header.value">${timeStamp}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="861054727">Query ActiveRewards Eligibility Successful</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Purchase" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="tenantId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">27</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">tenantId</stringProp>
                </elementProp>
                <elementProp name="memberId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${vitalityId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">memberId</stringProp>
                </elementProp>
                <elementProp name="mode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">Purchaser</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">mode</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">arapi/ActiveRewards/Purchase</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-vsl-timestamp</stringProp>
                  <stringProp name="Header.value">${timeStamp}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1183280647">View Purchase Retrieve Successfully</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Repayment History" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="tenantId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">27</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">tenantId</stringProp>
                </elementProp>
                <elementProp name="memberId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${vitalityId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">memberId</stringProp>
                </elementProp>
                <elementProp name="purchaseType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">AppleWatch</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">purchaseType</stringProp>
                </elementProp>
                <elementProp name="effectiveFrom" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${dateToday}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">effectiveFrom</stringProp>
                </elementProp>
                <elementProp name="effectiveTo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${dateTomorrow}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">effectiveTo</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">arapi/ActiveRewards/RepaymentHistory</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-vsl-timestamp</stringProp>
                  <stringProp name="Header.value">${timeStamp}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1867169789">success</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract: Purchase Id" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">purchaseId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.payload.content.purchase[0].purchaseId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract: OrderReference" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">OrderReference</stringProp>
              <stringProp name="RegexExtractor.regex">(\d*),&quot;purchaseReferenceType&quot;:&quot;OrderReference&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Watch Dispatch" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;purchaseReference&quot;: &quot;${OrderReference}&quot;,&#xd;
	&quot;purchaseReferenceType&quot;: &quot;OrderReference&quot;,&#xd;
	&quot;distributorReferenceNumber&quot;: &quot;${purchaseId}&quot;,&#xd;
	&quot;courier&quot;: &quot;DHL&quot;,&#xd;
	&quot;orderTrackingNumber&quot;: &quot;KN1234&quot;,&#xd;
	&quot;dateOfDispatch&quot;: &quot;${dateToday}T19:00:01Z&quot;,&#xd;
	&quot;tenantId&quot;: &quot;27&quot;,&#xd;
	&quot;purchaseId&quot;: &quot;${purchaseId}&quot;,&#xd;
	&quot;supplierId&quot;: &quot;${awSupplierId}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">arapi/ActiveRewards/WatchDispatch</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-vsl-timestamp</stringProp>
                  <stringProp name="Header.value">${timeStamp}</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Watch Dispatch Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2132625647">Watch Dispatch successful</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Watch Catalogue" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="memberId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${vitalityId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">memberId</stringProp>
                </elementProp>
                <elementProp name="tenantId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">27</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">tenantId</stringProp>
                </elementProp>
                <elementProp name="productIdentifier" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">AppleWatch</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">productIdentifier</stringProp>
                </elementProp>
                <elementProp name="effectiveDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${__time(yyyy-MM-dd,)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">effectiveDate</stringProp>
                </elementProp>
                <elementProp name="employerId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${employerIdFull}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">employerId</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">arapi/ActiveRewards/WatchCatalogue</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-vsl-timestamp</stringProp>
                  <stringProp name="Header.value">${timeStamp}</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-78471895">Successfully Retrieved Watch Catalogues and Pricing</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Discount Tiers" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="tenantId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">27</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">tenantId</stringProp>
                </elementProp>
                <elementProp name="productModelIdentifier" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">Series3GPS,42mm</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">productModelIdentifier</stringProp>
                </elementProp>
                <elementProp name="effectiveDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${__time(yyyy-MM-dd,)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">effectiveDate</stringProp>
                </elementProp>
                <elementProp name="employerId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${employerIdFull}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">employerId</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">arapi/ActiveRewards/DiscountTiers</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-vsl-timestamp</stringProp>
                  <stringProp name="Header.value">${timeStamp}</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1355352835">Successfully Retrieved Discount Tiers</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Order Now" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="employerId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${employerIdFull}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">employerId</stringProp>
                </elementProp>
                <elementProp name="tenantId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">27</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">tenantId</stringProp>
                </elementProp>
                <elementProp name="effectiveFrom" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">2018-01-01</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">effectiveFrom</stringProp>
                </elementProp>
                <elementProp name="effectiveTo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">9999-12-31</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">effectiveTo</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">arapi/ActiveRewards/OrderNow</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-vsl-timestamp</stringProp>
                  <stringProp name="Header.value">${timeStamp}</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1948390975">successfully retrieved vitality information</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Latest Remaining Balance" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="purchaseId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${purchaseId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">purchaseId</stringProp>
                </elementProp>
                <elementProp name="tenantId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">27</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">tenantId</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">arapi/ActiveRewards/LatestRemainingBalance</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-vsl-timestamp</stringProp>
                  <stringProp name="Header.value">${timeStamp}</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1891684817">latest remaining balance returned successfully</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Pair Watch" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;tenantId&quot;: 27,&#xd;
	&quot;programType&quot;: &quot;AWTCH&quot;,&#xd;
	&quot;purchaseDeviceId&quot;: &quot;${purchaseId}&quot;,&#xd;
	&quot;entityNumber&quot;: &quot;${vitalityId}&quot;,&#xd;
	&quot;pairedDate&quot;: &quot;&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">arapi/ActiveRewards/PairWatch</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-vsl-timestamp</stringProp>
                  <stringProp name="Header.value">${timeStamp}</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="success Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1867169789">success</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Purchase" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;mode&quot;: &quot;Settle&quot;,&#xd;
	&quot;tenantId&quot;: 27,&#xd;
	&quot;purchaseId&quot;: &quot;541531&quot;,&#xd;
	&quot;effectiveDate&quot;: &quot;${dateToday}&quot;,&#xd;
	&quot;settlementAmount&quot;: &quot;880.9&quot;,&#xd;
	&quot;paymentMethodId&quot;: &quot;pm_CreditCard_1419907819d5cc2eb7-d28b-4c0b-9231-286a0d214265&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">arapi/ActiveRewards/Purchase</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-vsl-timestamp</stringProp>
                  <stringProp name="Header.value">${timeStamp}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1183280647">View Purchase Retrieve Successfully</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Capture Purchase" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;tenantId&quot;: 27,&#xd;
	&quot;supplierId&quot;: &quot;${supplierId}&quot;,&#xd;
	&quot;memberInfo&quot;: {&#xd;
		&quot;memberId&quot;: ${vitalityId},&#xd;
		&quot;transactionDate&quot;: &quot;${dateToday} 23:21:49.817&quot;,&#xd;
		&quot;employerId&quot;: ${employerIdFull},&#xd;
		&quot;branchId&quot;: 0&#xd;
	},&#xd;
	&quot;purchase&quot;: {&#xd;
		&quot;purchaseDetails&quot;: {&#xd;
			&quot;taxAmount&quot;: &quot;USD 35.72&quot;,&#xd;
			&quot;totalCostAfterTax&quot;: &quot;USD 434.72&quot;,&#xd;
			&quot;carrierSubsidy&quot;: &quot;USD 0.0&quot;,&#xd;
			&quot;subsidyAmount&quot;: &quot;USD 0.0&quot;,&#xd;
			&quot;items&quot;: [&#xd;
				{&#xd;
					&quot;description&quot;: &quot;Apple Watch Series 5 GPS, 40mm Space Gray Aluminum Case with Black Sport Band - S/M &amp;amp;amp; M/L&quot;,&#xd;
					&quot;purchaseItemReference&quot;: &quot;${randomNumericString}&quot;,&#xd;
					&quot;quantity&quot;: 1,&#xd;
					&quot;purchaseItemReferenceType&quot;: &quot;SKUNumber&quot;,&#xd;
					&quot;productPrice&quot;: &quot;USD 434.72&quot;&#xd;
				}&#xd;
			],&#xd;
			&quot;subsidyType&quot;: &quot;EmployerSubsidy&quot;,&#xd;
			&quot;purchaseReferenceType&quot;: &quot;OrderReference&quot;,&#xd;
			&quot;activationFee&quot;: &quot;USD 7.0&quot;,&#xd;
			&quot;productIdentifier&quot;: &quot;AppleWatch&quot;,&#xd;
			&quot;totalCostBeforeTax&quot;: &quot;USD 399.0&quot;,&#xd;
			&quot;financedAmount&quot;: &quot;USD 192.0&quot;,&#xd;
			&quot;upgradeCost&quot;: &quot;USD 200.0&quot;,&#xd;
			&quot;installmentPeriod&quot;: {&#xd;
				&quot;duration&quot;: 24,&#xd;
				&quot;paymentMethod&quot;: &quot;CreditCard&quot;,&#xd;
				&quot;dayOfInstallment&quot;: 0,&#xd;
				&quot;maxMonthlyAmount&quot;: &quot;USD 8.0&quot;,&#xd;
				&quot;durationType&quot;: &quot;MONTH&quot;&#xd;
			},&#xd;
			&quot;purchaseReference&quot;: &quot;${randomNumericString}&quot;,&#xd;
			&quot;reference&quot;: [&#xd;
				{&#xd;
					&quot;purchaseReference&quot;: &quot;${vitalityId}6c4d039f-9ebf-4aaf-a9d2-${randomNumericString}&quot;,&#xd;
					&quot;purchaseReferenceType&quot;: &quot;BillingPartnerReference&quot;&#xd;
				}&#xd;
			],&#xd;
			&quot;discountLevels&quot;: [&#xd;
				{&#xd;
					&quot;type&quot;: &quot;DiscountLevel4&quot;,&#xd;
					&quot;value&quot;: &quot;USD 2.0&quot;&#xd;
				},&#xd;
				{&#xd;
					&quot;type&quot;: &quot;DiscountLevel3&quot;,&#xd;
					&quot;value&quot;: &quot;USD 2.0&quot;&#xd;
				},&#xd;
				{&#xd;
					&quot;type&quot;: &quot;DiscountLevel2&quot;,&#xd;
					&quot;value&quot;: &quot;USD 2.0&quot;&#xd;
				},&#xd;
				{&#xd;
					&quot;type&quot;: &quot;DiscountLevel1&quot;,&#xd;
					&quot;value&quot;: &quot;USD 2.0&quot;&#xd;
				}&#xd;
			],&#xd;
			&quot;actionHistory&quot;: {&#xd;
				&quot;eventDateTime&quot;: &quot;${dateToday}T22:26:17.851Z&quot;,&#xd;
				&quot;actionType&quot;: &quot;PurchaseInitiated&quot;&#xd;
			},&#xd;
			&quot;contactDetail&quot;: {&#xd;
				&quot;addresses&quot;: [&#xd;
					{&#xd;
						&quot;addressLine1&quot;: &quot;1941 Montgomery Dr&quot;,&#xd;
						&quot;addressLine2&quot;: &quot;&quot;,&#xd;
						&quot;city&quot;: &quot;Manhattan&quot;,&#xd;
						&quot;countryCode&quot;: &quot;US&quot;,&#xd;
						&quot;postalCode&quot;: &quot;66502&quot;,&#xd;
						&quot;state&quot;: &quot;KS&quot;&#xd;
					}&#xd;
				],&#xd;
				&quot;emails&quot;: [&#xd;
					{&#xd;
						&quot;emailAddress&quot;: &quot;jordan.gardenhire@focus.org&quot;&#xd;
					}&#xd;
				],&#xd;
				&quot;phoneNumbers&quot;: [&#xd;
					{&#xd;
						&quot;phoneNumber&quot;: &quot;214.223.2561&quot;&#xd;
					}&#xd;
				]&#xd;
			}&#xd;
		}&#xd;
	},&#xd;
	&quot;memberId&quot;: ${vitalityId}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">arapi/ActiveRewards/CapturePurchase</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-vsl-timestamp</stringProp>
                  <stringProp name="Header.value">${timeStamp}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1183280647">View Purchase Retrieve Successfully</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Mobile Services" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">10</stringProp>
        <stringProp name="ThreadGroup.ramp_time">10</stringProp>
        <longProp name="ThreadGroup.start_time">1514078571000</longProp>
        <longProp name="ThreadGroup.end_time">1514078571000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">300</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Users: Apollo" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="1165624797">vitalityId</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="1966936419">
              <stringProp name="-1226073238">${apolloID_1}</stringProp>
            </collectionProp>
            <collectionProp name="1966932972">
              <stringProp name="-1226073207">${apolloID_2}</stringProp>
            </collectionProp>
            <collectionProp name="1966905438">
              <stringProp name="-1226073176">${apolloID_3}</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${msBase}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </ConfigTestElement>
        <hashTree/>
        <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="Getting AET Token" enabled="false">
          <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
          <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
          <stringProp name="SystemSampler.command">/bin/bash</stringProp>
          <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="Argument">
                <stringProp name="Argument.name"></stringProp>
                <stringProp name="Argument.value">prod_curl_EYW.sh</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="SystemSampler.directory">/Users/DNesterov/Documents/Apollo/AetnaLoginCurl</stringProp>
        </SystemSampler>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Aetna Token" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">aetToken</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;vitality_token&quot;:&quot;(.+?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings"/>
            <stringProp name="Assertion.custom_message">OK</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST apollo_authenticate" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="_doc_browser_context" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_doc_browser_context</stringProp>
              </elementProp>
              <elementProp name="_p" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">IOS</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_p</stringProp>
              </elementProp>
              <elementProp name="_v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${mob.app.version}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_v</stringProp>
              </elementProp>
              <elementProp name="_c" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Aetna</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_c</stringProp>
              </elementProp>
              <elementProp name="_t" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${__time(yyyy-MM-dd,)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_t</stringProp>
              </elementProp>
              <elementProp name="aetna_token" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${aetToken}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">aetna_token</stringProp>
              </elementProp>
              <elementProp name="vitalityID" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${vitalityId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">vitalityID</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${msPath}/auth/apollo_authenticate</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Active Rewards Token" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">ar_Token</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.session.token</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Auth Token" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="entity_no" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${vitalityId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">entity_no</stringProp>
              </elementProp>
              <elementProp name="encrypted_entity_no" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${vitality_IdEncrypted}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">encrypted_entity_no</stringProp>
              </elementProp>
              <elementProp name="_p" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">IOS</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_p</stringProp>
              </elementProp>
              <elementProp name="_v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${mob.app.version}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_v</stringProp>
              </elementProp>
              <elementProp name="_c" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Aetna</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_c</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port">${msPort}</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${msPath}/auth/simulate_auth</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Active Rewards Token" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">ar_Token</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.session.token</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="Sample.scope">all</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Encrypted Entity" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import java.security.MessageDigest;

//Entity Encription for Apollo
MessageDigest digest = MessageDigest.getInstance(&quot;MD5&quot;);
byte[] bytes = digest.digest((&quot;${vitalityId}&quot; + &quot;${msSalt}&quot;).getBytes());
vars.put(&quot;vitality_IdEncrypted&quot;,javax.xml.bind.DatatypeConverter.printHexBinary(bytes).toLowerCase());</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Token Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="110541305">token</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET CG goals" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="_doc_browser_context" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_doc_browser_context</stringProp>
              </elementProp>
              <elementProp name="_p" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">IOS</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_p</stringProp>
              </elementProp>
              <elementProp name="_v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">8.4</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_v</stringProp>
              </elementProp>
              <elementProp name="_t" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${__time(yyyy-MM-dd,)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_t</stringProp>
              </elementProp>
              <elementProp name="token" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${ar_Token}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">token</stringProp>
              </elementProp>
              <elementProp name="limit" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">15</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">limit</stringProp>
              </elementProp>
              <elementProp name="offset" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">offset</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port">${msPort}</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${msPath}/campaign_goals/goals</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract campaignGoalId" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">cgoalId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.output.goalsArray.goals[0].goalId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET CG goal" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="_doc_browser_context" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_doc_browser_context</stringProp>
              </elementProp>
              <elementProp name="_p" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">IOS</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_p</stringProp>
              </elementProp>
              <elementProp name="_v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">8.4</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_v</stringProp>
              </elementProp>
              <elementProp name="_t" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${__time(yyyy-MM-dd,)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_t</stringProp>
              </elementProp>
              <elementProp name="token" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${ar_Token}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">token</stringProp>
              </elementProp>
              <elementProp name="goalId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${cgoalId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">goalId</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port">${msPort}</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${msPath}/campaign_goals/goal</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET AR Current goals" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="_doc_browser_context" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_doc_browser_context</stringProp>
              </elementProp>
              <elementProp name="_p" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">IOS</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_p</stringProp>
              </elementProp>
              <elementProp name="_v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">8.4</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_v</stringProp>
              </elementProp>
              <elementProp name="_t" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${__time(yyyy-MM-dd,)}T14:30:38.382TGMT-0500</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_t</stringProp>
              </elementProp>
              <elementProp name="token" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${ar_Token}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">token</stringProp>
              </elementProp>
              <elementProp name="since" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">since</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port">${msPort}</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${msPath}/active_rewards/current_goals</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET AR Goals" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="_doc_browser_context" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_doc_browser_context</stringProp>
              </elementProp>
              <elementProp name="_p" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">IOS</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_p</stringProp>
              </elementProp>
              <elementProp name="_v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${mob.app.version}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_v</stringProp>
              </elementProp>
              <elementProp name="_t" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${__time(yyyy-MM-dd,)}T14:30:38.382TGMT-0500</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_t</stringProp>
              </elementProp>
              <elementProp name="token" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${ar_Token}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">token</stringProp>
              </elementProp>
              <elementProp name="goalType" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">weekly</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">goalType</stringProp>
              </elementProp>
              <elementProp name="limit" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">10</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">limit</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port">${msPort}</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${msPath}/active_rewards/goals</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extractor activeRewrdsGoalId" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">arGoalId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.output.goals[0].id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET AR Goal" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="_doc_browser_context" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_doc_browser_context</stringProp>
              </elementProp>
              <elementProp name="_p" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">IOS</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_p</stringProp>
              </elementProp>
              <elementProp name="_v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${mob.app.version}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_v</stringProp>
              </elementProp>
              <elementProp name="_t" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${__time(yyyy-MM-dd,)}T14:30:38.382TGMT-0500</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_t</stringProp>
              </elementProp>
              <elementProp name="token" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${ar_Token}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">token</stringProp>
              </elementProp>
              <elementProp name="goalId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${arGoalId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">goalId</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port">${msPort}</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${msPath}/active_rewards/goal</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Dashboard Widgets" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="_doc_browser_context" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_doc_browser_context</stringProp>
              </elementProp>
              <elementProp name="_p" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">IOS</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_p</stringProp>
              </elementProp>
              <elementProp name="_v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">8.4</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_v</stringProp>
              </elementProp>
              <elementProp name="_t" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${__time(yyyy-MM-dd,)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_t</stringProp>
              </elementProp>
              <elementProp name="token" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${ar_Token}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">token</stringProp>
              </elementProp>
              <elementProp name="_api_v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">3</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_api_v</stringProp>
              </elementProp>
              <elementProp name="filter" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">VITALITY_BUCKS</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">filter</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port">${msPort}</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${msPath}/dashboard/home_widgets</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Purcahse" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="_doc_browser_context" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_doc_browser_context</stringProp>
              </elementProp>
              <elementProp name="_p" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">IOS</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_p</stringProp>
              </elementProp>
              <elementProp name="_v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${mob.app.version}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_v</stringProp>
              </elementProp>
              <elementProp name="_t" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${__time(yyyy-MM-dd,)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_t</stringProp>
              </elementProp>
              <elementProp name="token" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${ar_Token}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">token</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port">${msPort}</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${msPath}/apple_watch/purchase</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Repayment History" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="_doc_browser_context" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_doc_browser_context</stringProp>
              </elementProp>
              <elementProp name="_p" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">IOS</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_p</stringProp>
              </elementProp>
              <elementProp name="_v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${mob.app.version}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_v</stringProp>
              </elementProp>
              <elementProp name="_t" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${__time(yyyy-MM-dd,)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_t</stringProp>
              </elementProp>
              <elementProp name="token" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${ar_Token}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">token</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port">${msPort}</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${msPath}/apple_watch/repayment_history</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Eligibility" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="_doc_browser_context" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_doc_browser_context</stringProp>
              </elementProp>
              <elementProp name="_p" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">IOS</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_p</stringProp>
              </elementProp>
              <elementProp name="_v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">8.4</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_v</stringProp>
              </elementProp>
              <elementProp name="_t" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${__time(yyyy-MM-dd,)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_t</stringProp>
              </elementProp>
              <elementProp name="token" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${ar_Token}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">token</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port">${msPort}</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${msPath}/active_rewards/eligibility</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Events history" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="_doc_browser_context" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_doc_browser_context</stringProp>
              </elementProp>
              <elementProp name="_p" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">IOS</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_p</stringProp>
              </elementProp>
              <elementProp name="_v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${mob.app.version}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_v</stringProp>
              </elementProp>
              <elementProp name="_t" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${__time(yyyy-MM-dd,)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_t</stringProp>
              </elementProp>
              <elementProp name="token" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${ar_Token}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">token</stringProp>
              </elementProp>
              <elementProp name="offset" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">offset</stringProp>
              </elementProp>
              <elementProp name="limit" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">100</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">limit</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port">${msPort}</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${msPath}/events/history</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Health Data Upload Token" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="scope" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">HEALTH_DATA_UPLOAD</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">scope</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${msPath}/auth/token</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
              </elementProp>
              <elementProp name="Vitality-Client" elementType="Header">
                <stringProp name="Header.name">Vitality-Client</stringProp>
                <stringProp name="Header.value">Aetna</stringProp>
              </elementProp>
              <elementProp name="Vitality-Token" elementType="Header">
                <stringProp name="Header.name">Vitality-Token</stringProp>
                <stringProp name="Header.value">${ar_Token}</stringProp>
              </elementProp>
              <elementProp name="Vitality-App-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-App-Version</stringProp>
                <stringProp name="Header.value">7</stringProp>
              </elementProp>
              <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                <stringProp name="Header.value">IOS</stringProp>
              </elementProp>
              <elementProp name="Vitality-Language" elementType="Header">
                <stringProp name="Header.name">Vitality-Language</stringProp>
                <stringProp name="Header.value">en</stringProp>
              </elementProp>
              <elementProp name="Vitality-Device-Id" elementType="Header">
                <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
              </elementProp>
              <elementProp name="Vitality-Local-Time" elementType="Header">
                <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
              </elementProp>
              <elementProp name="Vitality-API-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-API-Version</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Health Data Token" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">HDU_Token</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.session.token</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Health Data Upload: Tenant 27" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
 &quot;device&quot;: {&#xd;
   &quot;deviceId&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}&quot;,&#xd;
   &quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
   &quot;model&quot;: &quot;iOS 10.0.1&quot;&#xd;
 },&#xd;
	 &quot;header&quot;: {&#xd;
	   &quot;partnerSystem&quot;: &quot;Apple&quot;,&#xd;
	   &quot;processingType&quot;: &quot;BATCH&quot;,&#xd;
	   &quot;rawUploadData&quot;: &quot;&quot;,&#xd;
	   &quot;sessionId&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}&quot;,&#xd;
	   &quot;tenantId&quot;: &quot;27&quot;,&#xd;
	   &quot;uploadCount&quot;: 3,&#xd;
	   &quot;uploadDate&quot;: &quot;${dateToday}T00:00:00+03:00&quot;,&#xd;
	   &quot;user&quot;: {&#xd;
	     &quot;entityNo&quot;: &quot;${vitalityId}&quot;,&#xd;
	     &quot;partnerUserId&quot;: &quot;&quot;&#xd;
	  },&#xd;
	   &quot;verified&quot;: &quot;true&quot;&#xd;
	  },&#xd;
		 &quot;readings&quot;: [&#xd;
		   {&#xd;
		     &quot;dataCategory&quot;: &quot;BIOMETRIC&quot;,&#xd;
		     &quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00+03:00&quot;,&#xd;
		     &quot;healthData&quot;: {&#xd;
		     &quot;weight&quot;: {&#xd;
		     &quot;unitOfMeasurement&quot;: &quot;KILOGRAMS&quot;,&#xd;
		     &quot;value&quot;: 90.450&#xd;
		       }&#xd;
     },&#xd;
     &quot;integrity&quot;: &quot;UNVERIFIED&quot;,&#xd;
     &quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
     &quot;model&quot;: &quot;iOS 10.0.1&quot;,&#xd;
     &quot;partnerReadingId&quot;: &quot;${dateToday}${randomAlphaNumericString}&quot;,&#xd;
     &quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
     &quot;readingType&quot;: &quot;WEIGHT&quot;,&#xd;
     &quot;startTime&quot;: &quot;${dateToday}T00:00:00+03:00&quot;&#xd;
   },&#xd;
   {&#xd;
     &quot;dataCategory&quot;: &quot;ROUTINE&quot;,&#xd;
     &quot;duration&quot;: 86400,&#xd;
     &quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00+03:00&quot;,&#xd;
     &quot;integrity&quot;: &quot;VERIFIED&quot;,&#xd;
     &quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
     &quot;model&quot;: &quot;iOS 10.0.1&quot;,&#xd;
     &quot;partnerReadingId&quot;: &quot;${dateToday}${randomAlphaNumericString}&quot;,&#xd;
     &quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
     &quot;readingType&quot;: &quot;WALKING&quot;,&#xd;
     &quot;startTime&quot;: &quot;${dateToday}T00:00:00+03:00&quot;,&#xd;
     &quot;workout&quot;: {&#xd;
       &quot;energyExpenditure&quot;: {&#xd;
         &quot;unitOfMeasurement&quot;: &quot;KILOCALORIES&quot;,&#xd;
         &quot;value&quot;: 1000&#xd;
       }&#xd;
     }&#xd;
   }&#xd;
   &#xd;
 ]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port">${msPort}</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${msPath}/health_data/upload</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Vitality-Token" elementType="Header">
                <stringProp name="Header.name">Vitality-Token</stringProp>
                <stringProp name="Header.value">${HDU_Token}</stringProp>
              </elementProp>
              <elementProp name="Vitality-App-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-App-Version</stringProp>
                <stringProp name="Header.value">7</stringProp>
              </elementProp>
              <elementProp name="Vitality-Language" elementType="Header">
                <stringProp name="Header.name">Vitality-Language</stringProp>
                <stringProp name="Header.value">en</stringProp>
              </elementProp>
              <elementProp name="Vitality-Device-Id" elementType="Header">
                <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                <stringProp name="Header.value">swagger-3f802407-77b4-407c-a758-842af5830c2b</stringProp>
              </elementProp>
              <elementProp name="Vitality-Local-Time" elementType="Header">
                <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                <stringProp name="Header.value">${__time(yyyy-MM-dd,)}</stringProp>
              </elementProp>
              <elementProp name="Vitality-API-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-API-Version</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                <stringProp name="Header.value">IOS</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1867169789">success</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Health Data Upload: Tenant 32" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
 &quot;device&quot;: {&#xd;
   &quot;deviceId&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}&quot;,&#xd;
   &quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
   &quot;model&quot;: &quot;iOS 10.0.1&quot;&#xd;
 },&#xd;
	 &quot;header&quot;: {&#xd;
	   &quot;partnerSystem&quot;: &quot;Apple&quot;,&#xd;
	   &quot;processingType&quot;: &quot;BATCH&quot;,&#xd;
	   &quot;rawUploadData&quot;: &quot;&quot;,&#xd;
	   &quot;sessionId&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}&quot;,&#xd;
	   &quot;tenantId&quot;: 32,&#xd;
	   &quot;uploadCount&quot;: 3,&#xd;
	   &quot;uploadDate&quot;: &quot;${dateToday}T00:00:00+03:00&quot;,&#xd;
	   &quot;user&quot;: {&#xd;
	     &quot;entityNo&quot;: &quot;${vitalityId}&quot;,&#xd;
	     &quot;partnerUserId&quot;: &quot;&quot;&#xd;
	  },&#xd;
	   &quot;verified&quot;: &quot;true&quot;&#xd;
	  },&#xd;
		 &quot;readings&quot;: [&#xd;
		   {&#xd;
		     &quot;dataCategory&quot;: &quot;BIOMETRIC&quot;,&#xd;
		     &quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00+03:00&quot;,&#xd;
		     &quot;healthData&quot;: {&#xd;
		     &quot;weight&quot;: {&#xd;
		     &quot;unitOfMeasurement&quot;: &quot;KILOGRAMS&quot;,&#xd;
		     &quot;value&quot;: 90.450&#xd;
		       }&#xd;
     },&#xd;
     &quot;integrity&quot;: &quot;UNVERIFIED&quot;,&#xd;
     &quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
     &quot;model&quot;: &quot;iOS 10.0.1&quot;,&#xd;
     &quot;partnerReadingId&quot;: &quot;${dateToday}${randomAlphaNumericString}&quot;,&#xd;
     &quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
     &quot;readingType&quot;: &quot;WEIGHT&quot;,&#xd;
     &quot;startTime&quot;: &quot;${dateToday}T00:00:00+03:00&quot;&#xd;
   },&#xd;
   {&#xd;
     &quot;dataCategory&quot;: &quot;ROUTINE&quot;,&#xd;
     &quot;duration&quot;: 86400,&#xd;
     &quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00+03:00&quot;,&#xd;
     &quot;integrity&quot;: &quot;VERIFIED&quot;,&#xd;
     &quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
     &quot;model&quot;: &quot;iOS 10.0.1&quot;,&#xd;
     &quot;partnerReadingId&quot;: &quot;${dateToday}${randomAlphaNumericString}&quot;,&#xd;
     &quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
     &quot;readingType&quot;: &quot;WALKING&quot;,&#xd;
     &quot;startTime&quot;: &quot;${dateToday}T00:00:00+03:00&quot;,&#xd;
     &quot;workout&quot;: {&#xd;
       &quot;energyExpenditure&quot;: {&#xd;
         &quot;unitOfMeasurement&quot;: &quot;KILOCALORIES&quot;,&#xd;
         &quot;value&quot;: 2000&#xd;
       }&#xd;
     }&#xd;
   }&#xd;
   &#xd;
 ]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port">${msPort}</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${msPath}/health_data/upload</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Vitality-Token" elementType="Header">
                <stringProp name="Header.name">Vitality-Token</stringProp>
                <stringProp name="Header.value">${HDU_Token}</stringProp>
              </elementProp>
              <elementProp name="Vitality-App-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-App-Version</stringProp>
                <stringProp name="Header.value">7</stringProp>
              </elementProp>
              <elementProp name="Vitality-Language" elementType="Header">
                <stringProp name="Header.name">Vitality-Language</stringProp>
                <stringProp name="Header.value">en</stringProp>
              </elementProp>
              <elementProp name="Vitality-Device-Id" elementType="Header">
                <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                <stringProp name="Header.value">swagger-3f802407-77b4-407c-a758-842af5830c2b</stringProp>
              </elementProp>
              <elementProp name="Vitality-Local-Time" elementType="Header">
                <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                <stringProp name="Header.value">${__time(yyyy-MM-dd,)}</stringProp>
              </elementProp>
              <elementProp name="Vitality-API-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-API-Version</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                <stringProp name="Header.value">IOS</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1867169789">success</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Activate (FI EYW)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="_doc_browser_context" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_doc_browser_context</stringProp>
              </elementProp>
              <elementProp name="_p" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">IOS</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_p</stringProp>
              </elementProp>
              <elementProp name="_v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${mob.app.version}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_v</stringProp>
              </elementProp>
              <elementProp name="_t" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${__time(yyyy-MM-dd,)}T14:30:38.382TGMT-0500</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_t</stringProp>
              </elementProp>
              <elementProp name="token" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${ar_Token}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">token</stringProp>
              </elementProp>
              <elementProp name="since" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">since</stringProp>
              </elementProp>
              <elementProp name="programType" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">FIEYW</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">programType</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port">${msPort}</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${msPath}/active_rewards/activate</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1303979599">ACTIVATED</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Activate (FI BYOD)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="_doc_browser_context" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_doc_browser_context</stringProp>
              </elementProp>
              <elementProp name="_p" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">IOS</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_p</stringProp>
              </elementProp>
              <elementProp name="_v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${mob.app.version}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_v</stringProp>
              </elementProp>
              <elementProp name="_t" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${__time(yyyy-MM-dd,)}T14:30:38.382TGMT-0500</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_t</stringProp>
              </elementProp>
              <elementProp name="token" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${ar_Token}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">token</stringProp>
              </elementProp>
              <elementProp name="since" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">since</stringProp>
              </elementProp>
              <elementProp name="programType" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">FIBYOD</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">programType</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port">${msPort}</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${msPath}/active_rewards/activate</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1303979599">ACTIVATED</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Activate (SI BYOD)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="_doc_browser_context" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_doc_browser_context</stringProp>
              </elementProp>
              <elementProp name="_p" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">IOS</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_p</stringProp>
              </elementProp>
              <elementProp name="_v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${mob.app.version}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_v</stringProp>
              </elementProp>
              <elementProp name="_t" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${__time(yyyy-MM-dd,)}T14:30:38.382TGMT-0500</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_t</stringProp>
              </elementProp>
              <elementProp name="token" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${ar_Token}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">token</stringProp>
              </elementProp>
              <elementProp name="since" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">since</stringProp>
              </elementProp>
              <elementProp name="programType" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">SIBYOD</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">programType</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port">${msPort}</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${msPath}/active_rewards/activate</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1303979599">ACTIVATED</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Token" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="_doc_browser_context" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_doc_browser_context</stringProp>
              </elementProp>
              <elementProp name="_p" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">IOS</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_p</stringProp>
              </elementProp>
              <elementProp name="_v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${mob.app.version}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_v</stringProp>
              </elementProp>
              <elementProp name="_t" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${__time(yyyy-MM-dd,)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_t</stringProp>
              </elementProp>
              <elementProp name="token" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${ar_Token}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">token</stringProp>
              </elementProp>
              <elementProp name="_c" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Aetna</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_c</stringProp>
              </elementProp>
              <elementProp name="scope" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">HEALTH_DATA_UPLOAD</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">scope</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port">${msPort}</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${msPath}/auth/token</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Health Data Token Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">healthToken</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.session.token</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SSO to /Apple_Watch" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: SSO URL to AppleWAtch" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_doc_browser_context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">_doc_browser_context</stringProp>
                </elementProp>
                <elementProp name="_p" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">IOS</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">_p</stringProp>
                </elementProp>
                <elementProp name="_v" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${mob.app.version}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">_v</stringProp>
                </elementProp>
                <elementProp name="_t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${__time(yyyy-MM-dd,)}T14:30:38.382TGMT-0500</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">_t</stringProp>
                </elementProp>
                <elementProp name="token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${ar_Token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">token</stringProp>
                </elementProp>
                <elementProp name="target" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">/apollo/apple_watch</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">target</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port">${msPort}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${msPath}/sso/redesign</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ssoLink" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">awSSO</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;output&quot; : &quot;https://${ssoBase}/(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">0</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
              <stringProp name="Scope.variable">ssoAW</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SSO: AppleWatch" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ssoBase}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${awSSO}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
              <collectionProp name="CookieManager.cookies"/>
              <boolProp name="CookieManager.clearEachIteration">true</boolProp>
            </CookieManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code: 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SSO to /Mall" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: SSO URL to Mall" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_doc_browser_context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">_doc_browser_context</stringProp>
                </elementProp>
                <elementProp name="_p" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">IOS</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">_p</stringProp>
                </elementProp>
                <elementProp name="_v" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${mob.app.version}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">_v</stringProp>
                </elementProp>
                <elementProp name="_t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${__time(yyyy-MM-dd,)}T14:30:38.382TGMT-0500</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">_t</stringProp>
                </elementProp>
                <elementProp name="token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${ar_Token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">token</stringProp>
                </elementProp>
                <elementProp name="target" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">/apollo/mall</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">target</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port">${msPort}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${msPath}/sso/redesign</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ssoLink" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">mallSSO</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;output&quot; : &quot;https://${ssoBase}/(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">0</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
              <stringProp name="Scope.variable">ssoAW</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SSO: Mall" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ssoBase}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${mallSSO}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
              <collectionProp name="CookieManager.cookies"/>
              <boolProp name="CookieManager.clearEachIteration">true</boolProp>
            </CookieManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code: 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2038980848">Whole Foods Market</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SSO to /Contact_us" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: SSO URL to Contact_us" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_doc_browser_context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">_doc_browser_context</stringProp>
                </elementProp>
                <elementProp name="_p" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">IOS</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">_p</stringProp>
                </elementProp>
                <elementProp name="_v" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${mob.app.version}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">_v</stringProp>
                </elementProp>
                <elementProp name="_t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${__time(yyyy-MM-dd,)}T14:30:38.382TGMT-0500</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">_t</stringProp>
                </elementProp>
                <elementProp name="token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${ar_Token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">token</stringProp>
                </elementProp>
                <elementProp name="target" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">/vitality_content/contact_us</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">target</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port">${msPort}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${msPath}/sso/redesign</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ssoLink" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">ContactUsSSO</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;output&quot; : &quot;https://${ssoBase}/(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">0</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
              <stringProp name="Scope.variable">ssoAW</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SSO: Contact_us" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ssoBase}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${ContactUsSSO}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
              <collectionProp name="CookieManager.cookies"/>
              <boolProp name="CookieManager.clearEachIteration">true</boolProp>
            </CookieManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code: 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SSO to /Feedback" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: SSO URL to Feedback" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_doc_browser_context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">_doc_browser_context</stringProp>
                </elementProp>
                <elementProp name="_p" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">IOS</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">_p</stringProp>
                </elementProp>
                <elementProp name="_v" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${mob.app.version}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">_v</stringProp>
                </elementProp>
                <elementProp name="_t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${__time(yyyy-MM-dd,)}T14:30:38.382TGMT-0500</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">_t</stringProp>
                </elementProp>
                <elementProp name="token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${ar_Token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">token</stringProp>
                </elementProp>
                <elementProp name="target" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">/apollo/feedback</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">target</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port">${msPort}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${msPath}/sso/redesign</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ssoLink" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">feedbackSSO</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;output&quot; : &quot;https://${ssoBase}/(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">0</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
              <stringProp name="Scope.variable">ssoAW</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SSO: Feedback" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ssoBase}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${feedbackSSO}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
              <collectionProp name="CookieManager.cookies"/>
              <boolProp name="CookieManager.clearEachIteration">true</boolProp>
            </CookieManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code: 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SSO to /History" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: SSO URL to History" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="_doc_browser_context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">_doc_browser_context</stringProp>
                </elementProp>
                <elementProp name="_p" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">IOS</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">_p</stringProp>
                </elementProp>
                <elementProp name="_v" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${mob.app.version}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">_v</stringProp>
                </elementProp>
                <elementProp name="_t" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${__time(yyyy-MM-dd,)}T14:30:38.382TGMT-0500</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">_t</stringProp>
                </elementProp>
                <elementProp name="token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${ar_Token}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">token</stringProp>
                </elementProp>
                <elementProp name="target" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">/apollo/history</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">target</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port">${msPort}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${msPath}/sso/redesign</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ssoLink" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">historySSO</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;output&quot; : &quot;https://${ssoBase}/(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">0</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
              <stringProp name="Scope.variable">ssoAW</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SSO: History" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ssoBase}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${historySSO}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
              <collectionProp name="CookieManager.cookies"/>
              <boolProp name="CookieManager.clearEachIteration">true</boolProp>
            </CookieManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code: 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="VSL: vitalityservicing.com" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1514078571000</longProp>
        <longProp name="ThreadGroup.end_time">1514078571000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">300</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Users: Apollo" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="1165624797">vitalityId</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="1966936419">
              <stringProp name="-1226073238">${apolloID_1}</stringProp>
            </collectionProp>
            <collectionProp name="1966932972">
              <stringProp name="-1226073207">${apolloID_2}</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">true</boolProp>
        </UserParameters>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${vslBase}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </ConfigTestElement>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Token: Generate Bearer Token" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="grant_type" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">client_credentials</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">grant_type</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api/token</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Basic ${vslBasicToken}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="bearerToken" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">bearerToken</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="Sample.scope">all</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1985802113">Bearer</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="VSL AR Controlers" enabled="true"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">x-vsl-timestamp</stringProp>
                <stringProp name="Header.value">${timeStamp}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${bearerToken}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Active Rewards Controller" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Activate_FIEYW" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;tenantId&quot;: &quot;27&quot;,&#xd;
&quot;mode&quot;: &quot;Activate&quot;,&#xd;
&quot;programme&quot;: {&#xd;
&quot;entityNumber&quot;: ${vitalityId}, &#xd;
&quot;programType&quot;: &quot;FIEYW&quot;,&#xd;
&quot;effectivePeriods&quot;: [&#xd;
{&#xd;
&quot;effectiveFrom&quot;: &quot;${dateToday}&quot;,&#xd;
&quot;effectiveTo&quot;: &quot;${dateTomorrow}&quot;&#xd;
}&#xd;
]&#xd;
}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${activeRewardsPath}/Activation</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Programme Activated Assertion " enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1044234867">Programme Activated</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Activate_FIBYOD" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;tenantId&quot;: &quot;27&quot;,&#xd;
&quot;mode&quot;: &quot;Activate&quot;,&#xd;
&quot;programme&quot;: {&#xd;
&quot;entityNumber&quot;: ${vitalityId}, &#xd;
&quot;programType&quot;: &quot;FIBYOD&quot;,&#xd;
&quot;effectivePeriods&quot;: [&#xd;
{&#xd;
&quot;effectiveFrom&quot;: &quot;${dateToday}&quot;,&#xd;
&quot;effectiveTo&quot;: &quot;${dateTomorrow}&quot;&#xd;
}&#xd;
]&#xd;
}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${activeRewardsPath}/Activation</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Programme Activated Assertion " enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1044234867">Programme Activated</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Activate_SIBYOD" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;tenantId&quot;: &quot;27&quot;,&#xd;
&quot;mode&quot;: &quot;Activate&quot;,&#xd;
&quot;programme&quot;: {&#xd;
&quot;entityNumber&quot;: ${vitalityId}, &#xd;
&quot;programType&quot;: &quot;SIBYOD&quot;,&#xd;
&quot;effectivePeriods&quot;: [&#xd;
{&#xd;
&quot;effectiveFrom&quot;: &quot;${dateToday}&quot;,&#xd;
&quot;effectiveTo&quot;: &quot;${dateTomorrow}&quot;&#xd;
}&#xd;
]&#xd;
}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${activeRewardsPath}/Activation</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Programme Activated Assertion " enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1044234867">Programme Activated</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET AR_Eligibility" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="memberId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${vitalityId}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">memberId</stringProp>
                  </elementProp>
                  <elementProp name="tenantId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">27</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">tenantId</stringProp>
                  </elementProp>
                  <elementProp name="productIdentifier" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">ActiveRewards</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">productIdentifier</stringProp>
                  </elementProp>
                  <elementProp name="effectiveDate" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${__time(yyyy-MM-dd,)}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">effectiveDate</stringProp>
                  </elementProp>
                  <elementProp name="eligibilityType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">ActiveRewards</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">eligibilityType</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${activeRewardsPath}/Eligibility</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Eligibility Successful Assertion " enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-2084676275">Eligibility Successful</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET AW_Eligibility" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="memberId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${vitalityId}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">memberId</stringProp>
                  </elementProp>
                  <elementProp name="tenantId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">27</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">tenantId</stringProp>
                  </elementProp>
                  <elementProp name="productIdentifier" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">AppleWatch</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">productIdentifier</stringProp>
                  </elementProp>
                  <elementProp name="effectiveDate" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${__time(yyyy-MM-dd,)}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">effectiveDate</stringProp>
                  </elementProp>
                  <elementProp name="eligibilityType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">WatchPurchase</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">eligibilityType</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${activeRewardsPath}/Eligibility</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Eligibility Successful Assertion " enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-2084676275">Eligibility Successful</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Purchase" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="mode" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">Purchaser</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">mode</stringProp>
                  </elementProp>
                  <elementProp name="memberId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${vitalityId}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">memberId</stringProp>
                  </elementProp>
                  <elementProp name="tenantId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">27</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">tenantId</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${activeRewardsPath}/Purchase</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="GET Purchase ID" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">purchaseID</stringProp>
                <stringProp name="RegexExtractor.regex">\&quot;purchaseId&quot;:(\w+)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Currency Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="66470">CAD</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">6</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Purchase Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1183280647">View Purchase Retrieve Successfully</stringProp>
                  <stringProp name="-1824545663">&quot;agreedInstallmentAmount&quot;:&quot;USD 11.00&quot;</stringProp>
                  <stringProp name="1850889110">&quot;installmentDayOfPeriod&quot;:12</stringProp>
                  <stringProp name="850605392">&quot;numberOfInstallmentts&quot;:24</stringProp>
                  <stringProp name="1819301357">&quot;amount&quot;:&quot;USD 2.75&quot;,&quot;amountType&quot;:&quot;DiscountLevel4&quot;</stringProp>
                  <stringProp name="1819301326">&quot;amount&quot;:&quot;USD 2.75&quot;,&quot;amountType&quot;:&quot;DiscountLevel3&quot;</stringProp>
                  <stringProp name="1819301295">&quot;amount&quot;:&quot;USD 2.75&quot;,&quot;amountType&quot;:&quot;DiscountLevel2&quot;</stringProp>
                  <stringProp name="1819301264">&quot;amount&quot;:&quot;USD 2.75&quot;,&quot;amountType&quot;:&quot;DiscountLevel1&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Repayment History" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="memberId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${vitalityId}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">memberId</stringProp>
                  </elementProp>
                  <elementProp name="tenantId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">27</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">tenantId</stringProp>
                  </elementProp>
                  <elementProp name="productIdentifier" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">AppleWatch</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">productIdentifier</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${activeRewardsPath}/RepaymentHistory</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Currency Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="66470">CAD</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">6</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Payment history Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1416424722">Payment history returned successfully</stringProp>
                  <stringProp name="-1421797203">dayOfPeriod&quot;:12</stringProp>
                  <stringProp name="-30009487">&quot;numberOfInstallments&quot;:24,&quot;unit&quot;:&quot;MONTH&quot;,&quot;agreedInstallmentAmount&quot;:&quot;USD 11.00&quot;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Pair Watch" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;tenantId&quot;: 27,&#xd;
	&quot;programType&quot;: &quot;AWTCH&quot;,&#xd;
	&quot;purchaseDeviceId&quot;: &quot;${purchaseID}&quot;,&#xd;
	&quot;entityNumber&quot;: &quot;${vitalityId}&quot;,&#xd;
	&quot;pairedDate&quot;: &quot;&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${activeRewardsPath}/PairWatch</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-333329842">already has active goal of current type: &apos;weekly&apos;</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Discount Tiers" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="tenantId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">27</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">tenantId</stringProp>
                  </elementProp>
                  <elementProp name="productModelIdentifier" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">Series3GPS,42mm</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">productModelIdentifier</stringProp>
                  </elementProp>
                  <elementProp name="effectiveDate" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${__time(yyyy-MM-dd,)}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">effectiveDate</stringProp>
                  </elementProp>
                  <elementProp name="employerId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${employerIdFull}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">employerId</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${activeRewardsPath}/DiscountTiers</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1355352835">Successfully Retrieved Discount Tiers</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Watch Catalogue" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="memberId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${vitalityId}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">memberId</stringProp>
                  </elementProp>
                  <elementProp name="tenantId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">27</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">tenantId</stringProp>
                  </elementProp>
                  <elementProp name="productIdentifier" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">AppleWatch</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">productIdentifier</stringProp>
                  </elementProp>
                  <elementProp name="effectiveDate" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${__time(yyyy-MM-dd,)}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">effectiveDate</stringProp>
                  </elementProp>
                  <elementProp name="employerId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${employerIdFull}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">employerId</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${activeRewardsPath}/WatchCatalogue</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-78471895">Successfully Retrieved Watch Catalogues and Pricing</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Watch Dispatch" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;purchaseReference&quot;: &quot;${OrderReference}&quot;,&#xd;
	&quot;purchaseReferenceType&quot;: &quot;OrderReference&quot;,&#xd;
	&quot;distributorReferenceNumber&quot;: &quot;123&quot;,&#xd;
	&quot;courier&quot;: &quot;DHL&quot;,&#xd;
	&quot;orderTrackingNumber&quot;: &quot;KN1234&quot;,&#xd;
	&quot;dateOfDispatch&quot;: &quot;${dateToday}T19:00:01Z&quot;,&#xd;
	&quot;tenantId&quot;: &quot;27&quot;,&#xd;
	&quot;purchaseId&quot;: &quot;123&quot;,&#xd;
	&quot;supplierId&quot;: &quot;${awSupplierId}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${activeRewardsPath}/WatchDispatch</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1867169789">success</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Latest Remaining Balance" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="purchaseId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${purchaseID}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">purchaseId</stringProp>
                  </elementProp>
                  <elementProp name="tenantId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">27</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">tenantId</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${activeRewardsPath}/LatestRemainingBalance</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="91288803">balance retrieved successfully</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Progress Tracker Controller" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET progressTrackers/actual/memberId/{entity}/type/weekly" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/${vslGoalProgressPath}/${vslVersion}/27/api/v1/progressTrackers/actual/memberId/${vitalityId}/type/${goalType}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET progressTrackers/memberId/{entity}/type/weekly/offset/xxx/limit/xxx" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/${vslGoalProgressPath}/${vslVersion}/27/api/v1/progressTrackers/memberId/${vitalityId}/type/${goalType}/offset/0/limit/100</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Goal Configuration Controller" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Goal Configuration_AWATCH" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="memberId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${vitalityId}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">memberId</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/${vslGoalConfigurationPath}/${vslVersion}/27/v1/goal_configuration/type/weekly</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Goal Configuration_BWATCH" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="memberId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${vitalityId}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">memberId</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/${vslGoalConfigurationPath}/${vslVersion}/27/v1/goal_configuration/type/weekly</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Goal Configuration_CWATCH" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="memberId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${vitalityId}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">memberId</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/${vslGoalConfigurationPath}/${vslVersion}/27/v1/goal_configuration/type/weekly</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Reward Configuration Controller" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET EYW reward_configuration/reward/configuration/fulfillments" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="identifier" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${vslEmployerIdentifierEYW}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">identifier</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/${vslRewardConfigurationPath}/${vslVersion}/27/v1/reward_configuration/reward/configuration/fulfillments</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="VAP/VRS" enabled="false"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET VRS Capability Flags" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="member_entity_no" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${vitalityId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">member_entity_no</stringProp>
                </elementProp>
                <elementProp name="mnemonic" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">APWT,ACRS</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">mnemonic</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${povBase}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${vrsWebServPath}/globalmobile/capability/list</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response message" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2003427">ACRS</stringProp>
                <stringProp name="2016076">APWT</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET VAP Eligibility" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${vapBase}</stringProp>
            <stringProp name="HTTPSampler.port">${vapPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">vap/rest/apple_watch_threshold/eligibility/${vitalityId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-856238407">&quot;status&quot; : 1</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="POST OLD VDP: TENANT 27" enabled="false"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST OLD GDL Token" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="tenantId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">27</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">tenantId</stringProp>
                </elementProp>
                <elementProp name="grantType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">clientCredentials</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">grantType</stringProp>
                </elementProp>
                <elementProp name="clientId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">78600</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">clientId</stringProp>
                </elementProp>
                <elementProp name="reference" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${vitalityId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">reference</stringProp>
                </elementProp>
                <elementProp name="clientSecret" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">c2Vuem9tYWxpbmdh</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">clientSecret</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">serviceapi/TokenManager/Token</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-vsl-timestamp</stringProp>
                  <stringProp name="Header.value">${timeStamp}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="x-vsl-version" elementType="Header">
                  <stringProp name="Header.name">x-vsl-version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="x-vsl-sourcetype" elementType="Header">
                  <stringProp name="Header.name">x-vsl-sourcetype</stringProp>
                  <stringProp name="Header.value">GDL</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, application/*+json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">104</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="apiAccessToken" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">gdlToken</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.payload.content.authDetails.accessToken</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST OLD VDP: TENANT 27" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
 &quot;device&quot;: {&#xd;
   &quot;deviceId&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}&quot;,&#xd;
   &quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
   &quot;model&quot;: &quot;iOS 10.0.1&quot;&#xd;
 },&#xd;
	 &quot;header&quot;: {&#xd;
	   &quot;partnerSystem&quot;: &quot;Apple&quot;,&#xd;
	   &quot;processingType&quot;: &quot;BATCH&quot;,&#xd;
	   &quot;rawUploadData&quot;: &quot;&quot;,&#xd;
	   &quot;sessionId&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}&quot;,&#xd;
	   &quot;tenantId&quot;: &quot;27&quot;,&#xd;
	   &quot;uploadCount&quot;: 3,&#xd;
	   &quot;uploadDate&quot;: &quot;${dateToday}T00:00:00+03:00&quot;,&#xd;
	   &quot;user&quot;: {&#xd;
	     &quot;entityNo&quot;: &quot;${vitalityId}&quot;,&#xd;
	     &quot;partnerUserId&quot;: &quot;&quot;&#xd;
	  },&#xd;
	   &quot;verified&quot;: &quot;true&quot;&#xd;
	  },&#xd;
		 &quot;readings&quot;: [&#xd;
		   {&#xd;
		     &quot;dataCategory&quot;: &quot;BIOMETRIC&quot;,&#xd;
		     &quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00+03:00&quot;,&#xd;
		     &quot;healthData&quot;: {&#xd;
		     &quot;weight&quot;: {&#xd;
		     &quot;unitOfMeasurement&quot;: &quot;KILOGRAMS&quot;,&#xd;
		     &quot;value&quot;: 90.450&#xd;
		       }&#xd;
     },&#xd;
     &quot;integrity&quot;: &quot;UNVERIFIED&quot;,&#xd;
     &quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
     &quot;model&quot;: &quot;iOS 10.0.1&quot;,&#xd;
     &quot;partnerReadingId&quot;: &quot;${dateToday}${randomAlphaNumericString}&quot;,&#xd;
     &quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
     &quot;readingType&quot;: &quot;WEIGHT&quot;,&#xd;
     &quot;startTime&quot;: &quot;${dateToday}T00:00:00+03:00&quot;&#xd;
   },&#xd;
   {&#xd;
     &quot;dataCategory&quot;: &quot;ROUTINE&quot;,&#xd;
     &quot;duration&quot;: 86400,&#xd;
     &quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00+03:00&quot;,&#xd;
     &quot;integrity&quot;: &quot;VERIFIED&quot;,&#xd;
     &quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
     &quot;model&quot;: &quot;iOS 10.0.1&quot;,&#xd;
     &quot;partnerReadingId&quot;: &quot;${dateToday}${randomAlphaNumericString}&quot;,&#xd;
     &quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
     &quot;readingType&quot;: &quot;WALKING&quot;,&#xd;
     &quot;startTime&quot;: &quot;${dateToday}T00:00:00+03:00&quot;,&#xd;
     &quot;workout&quot;: {&#xd;
       &quot;energyExpenditure&quot;: {&#xd;
         &quot;unitOfMeasurement&quot;: &quot;KILOCALORIES&quot;,&#xd;
         &quot;value&quot;: 1000&#xd;
       }&#xd;
     }&#xd;
   }&#xd;
   &#xd;
 ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">deviceapi/Device/GenericGDLUpload</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-vsl-timestamp</stringProp>
                  <stringProp name="Header.value">${timeStamp}</stringProp>
                </elementProp>
                <elementProp name="x-vsl-version" elementType="Header">
                  <stringProp name="Header.name">x-vsl-version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="x-vsl-sourcetype" elementType="Header">
                  <stringProp name="Header.name">x-vsl-sourcetype</stringProp>
                  <stringProp name="Header.value">GDL</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-vsl-token</stringProp>
                  <stringProp name="Header.value">${gdlToken}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">743</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="POST OLD VDP: TENANT 32" enabled="false"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST OLD GDL Token" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="tenantId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">32</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">tenantId</stringProp>
                </elementProp>
                <elementProp name="grantType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">clientCredentials</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">grantType</stringProp>
                </elementProp>
                <elementProp name="clientId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">78600</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">clientId</stringProp>
                </elementProp>
                <elementProp name="reference" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${sapphireId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">reference</stringProp>
                </elementProp>
                <elementProp name="clientSecret" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">c2Vuem9tYWxpbmdh</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">clientSecret</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">serviceapi/TokenManager/Token</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-vsl-timestamp</stringProp>
                  <stringProp name="Header.value">${timeStamp}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="x-vsl-version" elementType="Header">
                  <stringProp name="Header.name">x-vsl-version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="x-vsl-sourcetype" elementType="Header">
                  <stringProp name="Header.name">x-vsl-sourcetype</stringProp>
                  <stringProp name="Header.value">GDL</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, application/*+json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">104</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="apiAccessToken" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">gdlToken</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.payload.content.authDetails.accessToken</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST OLD VDP: Upload" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
 &quot;device&quot;: {&#xd;
   &quot;deviceId&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}&quot;,&#xd;
   &quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
   &quot;model&quot;: &quot;iOS 10.0.1&quot;&#xd;
 },&#xd;
	 &quot;header&quot;: {&#xd;
	   &quot;partnerSystem&quot;: &quot;Apple&quot;,&#xd;
	   &quot;processingType&quot;: &quot;BATCH&quot;,&#xd;
	   &quot;rawUploadData&quot;: &quot;&quot;,&#xd;
	   &quot;sessionId&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}&quot;,&#xd;
	   &quot;tenantId&quot;: 32,&#xd;
	   &quot;uploadCount&quot;: 3,&#xd;
	   &quot;uploadDate&quot;: &quot;${dateToday}T00:00:00+03:00&quot;,&#xd;
	   &quot;user&quot;: {&#xd;
	     &quot;entityNo&quot;: ${sapphireId},&#xd;
	     &quot;partnerUserId&quot;: &quot;&quot;&#xd;
	  },&#xd;
	   &quot;verified&quot;: &quot;true&quot;&#xd;
	  },&#xd;
		 &quot;readings&quot;: [&#xd;
		   {&#xd;
		     &quot;dataCategory&quot;: &quot;BIOMETRIC&quot;,&#xd;
		     &quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00+03:00&quot;,&#xd;
		     &quot;healthData&quot;: {&#xd;
		     &quot;weight&quot;: {&#xd;
		     &quot;unitOfMeasurement&quot;: &quot;KILOGRAMS&quot;,&#xd;
		     &quot;value&quot;: 90.450&#xd;
		       }&#xd;
     },&#xd;
     &quot;integrity&quot;: &quot;UNVERIFIED&quot;,&#xd;
     &quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
     &quot;model&quot;: &quot;iOS 10.0.1&quot;,&#xd;
     &quot;partnerReadingId&quot;: &quot;${dateToday}${randomAlphaNumericString}&quot;,&#xd;
     &quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
     &quot;readingType&quot;: &quot;WEIGHT&quot;,&#xd;
     &quot;startTime&quot;: &quot;${dateToday}T00:00:00+03:00&quot;&#xd;
   },&#xd;
   {&#xd;
     &quot;dataCategory&quot;: &quot;ROUTINE&quot;,&#xd;
     &quot;duration&quot;: 86400,&#xd;
     &quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00+03:00&quot;,&#xd;
     &quot;integrity&quot;: &quot;VERIFIED&quot;,&#xd;
     &quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
     &quot;model&quot;: &quot;iOS 10.0.1&quot;,&#xd;
     &quot;partnerReadingId&quot;: &quot;${dateToday}${randomAlphaNumericString}&quot;,&#xd;
     &quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
     &quot;readingType&quot;: &quot;WALKING&quot;,&#xd;
     &quot;startTime&quot;: &quot;${dateToday}T00:00:00+03:00&quot;,&#xd;
     &quot;workout&quot;: {&#xd;
       &quot;energyExpenditure&quot;: {&#xd;
         &quot;unitOfMeasurement&quot;: &quot;KILOCALORIES&quot;,&#xd;
         &quot;value&quot;: 1000&#xd;
       }&#xd;
     }&#xd;
   }&#xd;
   &#xd;
 ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">deviceapi/Device/GenericGDLUpload</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-vsl-timestamp</stringProp>
                  <stringProp name="Header.value">${timeStamp}</stringProp>
                </elementProp>
                <elementProp name="x-vsl-version" elementType="Header">
                  <stringProp name="Header.name">x-vsl-version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="x-vsl-sourcetype" elementType="Header">
                  <stringProp name="Header.name">x-vsl-sourcetype</stringProp>
                  <stringProp name="Header.value">GDL</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-vsl-token</stringProp>
                  <stringProp name="Header.value">${gdlToken}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">743</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="VDP: Verify That Data was recieved" enabled="false"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST OLD GDL Token" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="tenantId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">32</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">tenantId</stringProp>
                </elementProp>
                <elementProp name="grantType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">clientCredentials</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">grantType</stringProp>
                </elementProp>
                <elementProp name="clientId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">78600</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">clientId</stringProp>
                </elementProp>
                <elementProp name="reference" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${sapphireId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">reference</stringProp>
                </elementProp>
                <elementProp name="clientSecret" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">c2Vuem9tYWxpbmdh</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">clientSecret</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${vslBase}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">serviceapi/TokenManager/Token</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-vsl-timestamp</stringProp>
                  <stringProp name="Header.value">${timeStamp}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="x-vsl-version" elementType="Header">
                  <stringProp name="Header.name">x-vsl-version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="x-vsl-sourcetype" elementType="Header">
                  <stringProp name="Header.name">x-vsl-sourcetype</stringProp>
                  <stringProp name="Header.value">GDL</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, application/*+json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">104</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="apiAccessToken" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">gdlToken</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.payload.content.authDetails.accessToken</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract userEntity" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">as_document</stringProp>
              <stringProp name="RegexExtractor.refname">userEntity</stringProp>
              <stringProp name="RegexExtractor.regex">&amp;reference=(.*?)</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Veirfy Data recieved by VDP" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="entityNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${sapphireId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">entityNo</stringProp>
                </elementProp>
                <elementProp name="dataCategories" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">Routine</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">dataCategories</stringProp>
                </elementProp>
                <elementProp name="startDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${dateToday}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">startDate</stringProp>
                </elementProp>
                <elementProp name="endDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${dateTomorrow}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">endDate</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${vslBase}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">deviceapi/Device/HistoryTracker</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="x-vsl-sourcetype" elementType="Header">
                  <stringProp name="Header.name">x-vsl-sourcetype</stringProp>
                  <stringProp name="Header.value">GDL</stringProp>
                </elementProp>
                <elementProp name="x-vsl-timestamp" elementType="Header">
                  <stringProp name="Header.name">x-vsl-timestamp</stringProp>
                  <stringProp name="Header.value">${timeStamp}</stringProp>
                </elementProp>
                <elementProp name="x-vsl-version" elementType="Header">
                  <stringProp name="Header.name">x-vsl-version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">x-vsl-token</stringProp>
                  <stringProp name="Header.value">${gdlToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">dataCategory</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.payload.content.historyTracker.dataCategory</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="VDP: Data submission" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1514078571000</longProp>
        <longProp name="ThreadGroup.end_time">1514078571000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">5</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Users" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="1150977610">apolloId</stringProp>
            <stringProp name="-2004981848">crunchId</stringProp>
            <stringProp name="966683005">sapphireId</stringProp>
            <stringProp name="-4384075">elevateId</stringProp>
            <stringProp name="-1083146414">manulifeId</stringProp>
            <stringProp name="-810951658">vol.id</stringProp>
            <stringProp name="730969305">vrzn.id</stringProp>
            <stringProp name="-1388748103">biw.id</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="-305211526">
              <stringProp name="-1226073207">${apolloID_2}</stringProp>
              <stringProp name="714790220">${crunchID_1}</stringProp>
              <stringProp name="1374910774">${sapphireID_2}</stringProp>
              <stringProp name="-211925331">${elevateID_1}</stringProp>
              <stringProp name="751703842">${manulifeID_1}</stringProp>
              <stringProp name="1463145549">${vol.id.1}</stringProp>
              <stringProp name="-807254088">${vrzn.id.1}</stringProp>
              <stringProp name="-1736792374">${biw.id.1}</stringProp>
            </collectionProp>
            <collectionProp name="-1634563228">
              <stringProp name="-1226073238">${apolloID_1}</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1463145580">${vol.id.2}</stringProp>
              <stringProp name="-807254057">${vrzn.id.2}</stringProp>
              <stringProp name="-1736792343">${biw.id.2}</stringProp>
            </collectionProp>
            <collectionProp name="-480078245">
              <stringProp name="-1226073176">${apolloID_3}</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
            </collectionProp>
            <collectionProp name="711944114">
              <stringProp name="-1226073145">${apolloID_4}</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
            </collectionProp>
            <collectionProp name="-1863341183">
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="VDP" enabled="false"/>
        <hashTree>
          <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${vdp.base.url}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </ConfigTestElement>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="VDP V1: All Tenants" enabled="false"/>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="VDP Generic GDL: Tenant 2" enabled="false">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="VDP Generic GDL Token: Tenant 2" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="tenantId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">2</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">tenantId</stringProp>
                    </elementProp>
                    <elementProp name="grantType" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">clientCredentials</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">grantType</stringProp>
                    </elementProp>
                    <elementProp name="clientId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">78600</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">clientId</stringProp>
                    </elementProp>
                    <elementProp name="reference" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${elevateId}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">reference</stringProp>
                    </elementProp>
                    <elementProp name="clientSecret" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">c2Vuem9tYWxpbmdh</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">clientSecret</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">serviceapi/TokenManager/Token</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-vsl-timestamp</stringProp>
                      <stringProp name="Header.value">${timeStamp}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="x-vsl-version" elementType="Header">
                      <stringProp name="Header.name">x-vsl-version</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="x-vsl-sourcetype" elementType="Header">
                      <stringProp name="Header.name">x-vsl-sourcetype</stringProp>
                      <stringProp name="Header.value">GDL</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, application/*+json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Length</stringProp>
                      <stringProp name="Header.value">104</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="apiAccessToken" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">gdlToken</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.payload.content.authDetails.accessToken</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="VDP Generic GDL Upload: Tenant 2" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;header&quot;: {&#xd;
		&quot;uploadDate&quot;: &quot;${dateToday}T00:00:00+03:00&quot;,&#xd;
		&quot;sessionId&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}&quot;,&#xd;
		&quot;user&quot;: {&#xd;
			&quot;entityNo&quot;: &quot;${elevateId}&quot;,&#xd;
			&quot;email&quot;: &quot;${randomString}@vitalitygroup.com&quot;,&#xd;
			&quot;partnerUserId&quot;: &quot;&quot;&#xd;
		},&#xd;
		&quot;partnerSystem&quot;: &quot;Apple&quot;,&#xd;
		&quot;rawUploadData&quot;: &quot;&quot;,&#xd;
		&quot;processingType&quot;: &quot;BATCH&quot;,&#xd;
		&quot;tenantId&quot;: &quot;2&quot;,&#xd;
		&quot;verified&quot;: &quot;true&quot;,&#xd;
		&quot;uploadCount&quot;: 1&#xd;
	},&#xd;
	&quot;device&quot;: {&#xd;
		&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
		&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
		&quot;deviceId&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}&quot;&#xd;
	},&#xd;
	&quot;readings&quot;: [&#xd;
		{&#xd;
			&quot;startTime&quot;: &quot;${dateToday}T00:00:00-05:00&quot;,&#xd;
			&quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00-05:00&quot;,&#xd;
			&quot;readingType&quot;: &quot;WALKING&quot;,&#xd;
			&quot;dataCategory&quot;: &quot;ROUTINE&quot;,&#xd;
			&quot;integrity&quot;: &quot;VERIFIED&quot;,&#xd;
			&quot;workout&quot;: {&#xd;
				&quot;energyExpenditure&quot;: {&#xd;
					&quot;unitOfMeasurement&quot;: &quot;KILOCALORIES&quot;,&#xd;
					&quot;value&quot;: 1200&#xd;
				}&#xd;
			},&#xd;
			&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
			&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
			&quot;partnerReadingId&quot;: &quot;${dateToday}${randomAlphaNumericString}&quot;,&#xd;
			&quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
			&quot;duration&quot;: 86400&#xd;
		},&#xd;
		{&#xd;
			&quot;startTime&quot;: &quot;${dateToday}T00:00:00-05:00&quot;,&#xd;
			&quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00-05:00&quot;,&#xd;
			&quot;readingType&quot;: &quot;WEIGHT&quot;,&#xd;
			&quot;dataCategory&quot;: &quot;BIOMETRIC&quot;,&#xd;
			&quot;integrity&quot;: &quot;UNVERIFIED&quot;,&#xd;
			&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
			&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
			&quot;partnerReadingId&quot;: &quot;${dateToday}${randomAlphaNumericString}&quot;,&#xd;
			&quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
			&quot;healthData&quot;: {&#xd;
				&quot;weight&quot;: {&#xd;
					&quot;unitOfMeasurement&quot;: &quot;KILOGRAMS&quot;,&#xd;
					&quot;value&quot;: 60.980000000000665&#xd;
				}&#xd;
			}&#xd;
		}&#xd;
	]&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">deviceapi/Device/GenericGDLUpload</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-vsl-timestamp</stringProp>
                      <stringProp name="Header.value">${timeStamp}</stringProp>
                    </elementProp>
                    <elementProp name="x-vsl-version" elementType="Header">
                      <stringProp name="Header.name">x-vsl-version</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="x-vsl-sourcetype" elementType="Header">
                      <stringProp name="Header.name">x-vsl-sourcetype</stringProp>
                      <stringProp name="Header.value">GDL</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-vsl-token</stringProp>
                      <stringProp name="Header.value">${gdlToken}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Length</stringProp>
                      <stringProp name="Header.value">743</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1880474659">Successfully Uploaded Health Data to GDL</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.scope">all</stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="VDP Generic GDL: Tenant 27" enabled="false">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="VDP Generic GDL Token: Tenant 27" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="tenantId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">27</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">tenantId</stringProp>
                    </elementProp>
                    <elementProp name="grantType" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">clientCredentials</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">grantType</stringProp>
                    </elementProp>
                    <elementProp name="clientId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">78600</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">clientId</stringProp>
                    </elementProp>
                    <elementProp name="reference" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${vitalityId}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">reference</stringProp>
                    </elementProp>
                    <elementProp name="clientSecret" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">c2Vuem9tYWxpbmdh</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">clientSecret</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">serviceapi/TokenManager/Token</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-vsl-timestamp</stringProp>
                      <stringProp name="Header.value">${timeStamp}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="x-vsl-version" elementType="Header">
                      <stringProp name="Header.name">x-vsl-version</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="x-vsl-sourcetype" elementType="Header">
                      <stringProp name="Header.name">x-vsl-sourcetype</stringProp>
                      <stringProp name="Header.value">GDL</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, application/*+json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Length</stringProp>
                      <stringProp name="Header.value">104</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="apiAccessToken" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">gdlToken</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.payload.content.authDetails.accessToken</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="VDP Generic GDL Upload: Tenant 27" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;header&quot;: {&#xd;
		&quot;uploadDate&quot;: &quot;${dateToday}T00:00:00+03:00&quot;,&#xd;
		&quot;sessionId&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}&quot;,&#xd;
		&quot;user&quot;: {&#xd;
			&quot;entityNo&quot;: &quot;${vitalityId}&quot;,&#xd;
			&quot;email&quot;: &quot;${randomString}@vitalitygroup.com&quot;,&#xd;
			&quot;partnerUserId&quot;: &quot;&quot;&#xd;
		},&#xd;
		&quot;partnerSystem&quot;: &quot;Apple&quot;,&#xd;
		&quot;rawUploadData&quot;: &quot;&quot;,&#xd;
		&quot;processingType&quot;: &quot;BATCH&quot;,&#xd;
		&quot;tenantId&quot;: &quot;27&quot;,&#xd;
		&quot;verified&quot;: &quot;true&quot;,&#xd;
		&quot;uploadCount&quot;: 1&#xd;
	},&#xd;
	&quot;device&quot;: {&#xd;
		&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
		&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
		&quot;deviceId&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}&quot;&#xd;
	},&#xd;
	&quot;readings&quot;: [&#xd;
		{&#xd;
			&quot;startTime&quot;: &quot;${dateToday}T00:00:00-05:00&quot;,&#xd;
			&quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00-05:00&quot;,&#xd;
			&quot;readingType&quot;: &quot;WALKING&quot;,&#xd;
			&quot;dataCategory&quot;: &quot;ROUTINE&quot;,&#xd;
			&quot;integrity&quot;: &quot;VERIFIED&quot;,&#xd;
			&quot;workout&quot;: {&#xd;
				&quot;energyExpenditure&quot;: {&#xd;
					&quot;unitOfMeasurement&quot;: &quot;KILOCALORIES&quot;,&#xd;
					&quot;value&quot;: 1200&#xd;
				}&#xd;
			},&#xd;
			&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
			&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
			&quot;partnerReadingId&quot;: &quot;${dateToday}${randomAlphaNumericString}&quot;,&#xd;
			&quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
			&quot;duration&quot;: 86400&#xd;
		},&#xd;
		{&#xd;
			&quot;startTime&quot;: &quot;${dateToday}T00:00:00-05:00&quot;,&#xd;
			&quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00-05:00&quot;,&#xd;
			&quot;readingType&quot;: &quot;WEIGHT&quot;,&#xd;
			&quot;dataCategory&quot;: &quot;BIOMETRIC&quot;,&#xd;
			&quot;integrity&quot;: &quot;UNVERIFIED&quot;,&#xd;
			&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
			&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
			&quot;partnerReadingId&quot;: &quot;${dateToday}${randomAlphaNumericString}&quot;,&#xd;
			&quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
			&quot;healthData&quot;: {&#xd;
				&quot;weight&quot;: {&#xd;
					&quot;unitOfMeasurement&quot;: &quot;KILOGRAMS&quot;,&#xd;
					&quot;value&quot;: 60.980000000000665&#xd;
				}&#xd;
			}&#xd;
		}&#xd;
	]&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">deviceapi/Device/GenericGDLUpload</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-vsl-timestamp</stringProp>
                      <stringProp name="Header.value">${timeStamp}</stringProp>
                    </elementProp>
                    <elementProp name="x-vsl-version" elementType="Header">
                      <stringProp name="Header.name">x-vsl-version</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="x-vsl-sourcetype" elementType="Header">
                      <stringProp name="Header.name">x-vsl-sourcetype</stringProp>
                      <stringProp name="Header.value">GDL</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-vsl-token</stringProp>
                      <stringProp name="Header.value">${gdlToken}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Length</stringProp>
                      <stringProp name="Header.value">743</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1880474659">Successfully Uploaded Health Data to GDL</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.scope">all</stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="VDP Generic GDL: Tenant 32" enabled="false">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="VDP Generic GDL Token: Tenant 32" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="tenantId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">32</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">tenantId</stringProp>
                    </elementProp>
                    <elementProp name="grantType" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">clientCredentials</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">grantType</stringProp>
                    </elementProp>
                    <elementProp name="clientId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">78600</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">clientId</stringProp>
                    </elementProp>
                    <elementProp name="reference" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${sapphireId}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">reference</stringProp>
                    </elementProp>
                    <elementProp name="clientSecret" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">c2Vuem9tYWxpbmdh</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">clientSecret</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">serviceapi/TokenManager/Token</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-vsl-timestamp</stringProp>
                      <stringProp name="Header.value">${timeStamp}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="x-vsl-version" elementType="Header">
                      <stringProp name="Header.name">x-vsl-version</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="x-vsl-sourcetype" elementType="Header">
                      <stringProp name="Header.name">x-vsl-sourcetype</stringProp>
                      <stringProp name="Header.value">GDL</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, application/*+json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Length</stringProp>
                      <stringProp name="Header.value">104</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="apiAccessToken" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">gdlToken</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.payload.content.authDetails.accessToken</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="VDP Generic GDL Upload: Tenant 32" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;header&quot;: {&#xd;
		&quot;uploadDate&quot;: &quot;${dateToday}T00:00:00+03:00&quot;,&#xd;
		&quot;sessionId&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}&quot;,&#xd;
		&quot;user&quot;: {&#xd;
			&quot;entityNo&quot;: &quot;${sapphireId}&quot;,&#xd;
			&quot;email&quot;: &quot;${randomString}@vitalitygroup.com&quot;,&#xd;
			&quot;partnerUserId&quot;: &quot;&quot;&#xd;
		},&#xd;
		&quot;partnerSystem&quot;: &quot;Apple&quot;,&#xd;
		&quot;rawUploadData&quot;: &quot;&quot;,&#xd;
		&quot;processingType&quot;: &quot;BATCH&quot;,&#xd;
		&quot;tenantId&quot;: &quot;32&quot;,&#xd;
		&quot;verified&quot;: &quot;true&quot;,&#xd;
		&quot;uploadCount&quot;: 1&#xd;
	},&#xd;
	&quot;device&quot;: {&#xd;
		&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
		&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
		&quot;deviceId&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}&quot;&#xd;
	},&#xd;
	&quot;readings&quot;: [&#xd;
		{&#xd;
			&quot;startTime&quot;: &quot;${dateToday}T00:00:00-05:00&quot;,&#xd;
			&quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00-05:00&quot;,&#xd;
			&quot;readingType&quot;: &quot;WALKING&quot;,&#xd;
			&quot;dataCategory&quot;: &quot;ROUTINE&quot;,&#xd;
			&quot;integrity&quot;: &quot;VERIFIED&quot;,&#xd;
			&quot;workout&quot;: {&#xd;
				&quot;energyExpenditure&quot;: {&#xd;
					&quot;unitOfMeasurement&quot;: &quot;KILOCALORIES&quot;,&#xd;
					&quot;value&quot;: 1200&#xd;
				}&#xd;
			},&#xd;
			&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
			&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
			&quot;partnerReadingId&quot;: &quot;${dateToday}${randomAlphaNumericString}&quot;,&#xd;
			&quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
			&quot;duration&quot;: 86400&#xd;
		},&#xd;
		{&#xd;
			&quot;startTime&quot;: &quot;${dateToday}T00:00:00-05:00&quot;,&#xd;
			&quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00-05:00&quot;,&#xd;
			&quot;readingType&quot;: &quot;WEIGHT&quot;,&#xd;
			&quot;dataCategory&quot;: &quot;BIOMETRIC&quot;,&#xd;
			&quot;integrity&quot;: &quot;UNVERIFIED&quot;,&#xd;
			&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
			&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
			&quot;partnerReadingId&quot;: &quot;${dateToday}${randomAlphaNumericString}&quot;,&#xd;
			&quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
			&quot;healthData&quot;: {&#xd;
				&quot;weight&quot;: {&#xd;
					&quot;unitOfMeasurement&quot;: &quot;KILOGRAMS&quot;,&#xd;
					&quot;value&quot;: 60.980000000000665&#xd;
				}&#xd;
			}&#xd;
		}&#xd;
	]&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">deviceapi/Device/GenericGDLUpload</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-vsl-timestamp</stringProp>
                      <stringProp name="Header.value">${timeStamp}</stringProp>
                    </elementProp>
                    <elementProp name="x-vsl-version" elementType="Header">
                      <stringProp name="Header.name">x-vsl-version</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="x-vsl-sourcetype" elementType="Header">
                      <stringProp name="Header.name">x-vsl-sourcetype</stringProp>
                      <stringProp name="Header.value">GDL</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-vsl-token</stringProp>
                      <stringProp name="Header.value">${gdlToken}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Length</stringProp>
                      <stringProp name="Header.value">743</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1880474659">Successfully Uploaded Health Data to GDL</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.scope">all</stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="VDP Generic GDL: Tenant 103" enabled="false">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="VDP Generic GDL Token: Tenant 103" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="tenantId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">103</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">tenantId</stringProp>
                    </elementProp>
                    <elementProp name="grantType" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">clientCredentials</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">grantType</stringProp>
                    </elementProp>
                    <elementProp name="clientId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">78600</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">clientId</stringProp>
                    </elementProp>
                    <elementProp name="reference" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${manulifeId}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">reference</stringProp>
                    </elementProp>
                    <elementProp name="clientSecret" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">c2Vuem9tYWxpbmdh</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">clientSecret</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">serviceapi/TokenManager/Token</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-vsl-timestamp</stringProp>
                      <stringProp name="Header.value">${timeStamp}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="x-vsl-version" elementType="Header">
                      <stringProp name="Header.name">x-vsl-version</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="x-vsl-sourcetype" elementType="Header">
                      <stringProp name="Header.name">x-vsl-sourcetype</stringProp>
                      <stringProp name="Header.value">GDL</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, application/*+json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Length</stringProp>
                      <stringProp name="Header.value">104</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="apiAccessToken" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">gdlToken</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.payload.content.authDetails.accessToken</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="VDP Generic GDL Upload: Tenant 103" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;header&quot;: {&#xd;
		&quot;uploadDate&quot;: &quot;${dateToday}T00:00:00+03:00&quot;,&#xd;
		&quot;sessionId&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}&quot;,&#xd;
		&quot;user&quot;: {&#xd;
			&quot;entityNo&quot;: &quot;${manulifeId}&quot;,&#xd;
			&quot;email&quot;: &quot;${randomString}@vitalitygroup.com&quot;,&#xd;
			&quot;partnerUserId&quot;: &quot;&quot;&#xd;
		},&#xd;
		&quot;partnerSystem&quot;: &quot;Apple&quot;,&#xd;
		&quot;rawUploadData&quot;: &quot;&quot;,&#xd;
		&quot;processingType&quot;: &quot;BATCH&quot;,&#xd;
		&quot;tenantId&quot;: &quot;103&quot;,&#xd;
		&quot;verified&quot;: &quot;true&quot;,&#xd;
		&quot;uploadCount&quot;: 1&#xd;
	},&#xd;
	&quot;device&quot;: {&#xd;
		&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
		&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
		&quot;deviceId&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}&quot;&#xd;
	},&#xd;
	&quot;readings&quot;: [&#xd;
		{&#xd;
			&quot;startTime&quot;: &quot;${dateToday}T00:00:00-05:00&quot;,&#xd;
			&quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00-05:00&quot;,&#xd;
			&quot;readingType&quot;: &quot;WALKING&quot;,&#xd;
			&quot;dataCategory&quot;: &quot;ROUTINE&quot;,&#xd;
			&quot;integrity&quot;: &quot;VERIFIED&quot;,&#xd;
			&quot;workout&quot;: {&#xd;
				&quot;energyExpenditure&quot;: {&#xd;
					&quot;unitOfMeasurement&quot;: &quot;KILOCALORIES&quot;,&#xd;
					&quot;value&quot;: 1200&#xd;
				}&#xd;
			},&#xd;
			&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
			&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
			&quot;partnerReadingId&quot;: &quot;${dateToday}${randomAlphaNumericString}&quot;,&#xd;
			&quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
			&quot;duration&quot;: 86400&#xd;
		},&#xd;
		{&#xd;
			&quot;startTime&quot;: &quot;${dateToday}T00:00:00-05:00&quot;,&#xd;
			&quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00-05:00&quot;,&#xd;
			&quot;readingType&quot;: &quot;WEIGHT&quot;,&#xd;
			&quot;dataCategory&quot;: &quot;BIOMETRIC&quot;,&#xd;
			&quot;integrity&quot;: &quot;UNVERIFIED&quot;,&#xd;
			&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
			&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
			&quot;partnerReadingId&quot;: &quot;${dateToday}${randomAlphaNumericString}&quot;,&#xd;
			&quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
			&quot;healthData&quot;: {&#xd;
				&quot;weight&quot;: {&#xd;
					&quot;unitOfMeasurement&quot;: &quot;KILOGRAMS&quot;,&#xd;
					&quot;value&quot;: 60.980000000000665&#xd;
				}&#xd;
			}&#xd;
		}&#xd;
	]&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">deviceapi/Device/GenericGDLUpload</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-vsl-timestamp</stringProp>
                      <stringProp name="Header.value">${timeStamp}</stringProp>
                    </elementProp>
                    <elementProp name="x-vsl-version" elementType="Header">
                      <stringProp name="Header.name">x-vsl-version</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="x-vsl-sourcetype" elementType="Header">
                      <stringProp name="Header.name">x-vsl-sourcetype</stringProp>
                      <stringProp name="Header.value">GDL</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-vsl-token</stringProp>
                      <stringProp name="Header.value">${gdlToken}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Length</stringProp>
                      <stringProp name="Header.value">743</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1880474659">Successfully Uploaded Health Data to GDL</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.scope">all</stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="VDP Generic GDL: Tenant 46" enabled="false">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="VDP Generic GDL Token: Tenant 46" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="tenantId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">46</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">tenantId</stringProp>
                    </elementProp>
                    <elementProp name="grantType" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">clientCredentials</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">grantType</stringProp>
                    </elementProp>
                    <elementProp name="clientId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">78600</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">clientId</stringProp>
                    </elementProp>
                    <elementProp name="reference" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${crunchId}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">reference</stringProp>
                    </elementProp>
                    <elementProp name="clientSecret" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">c2Vuem9tYWxpbmdh</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">clientSecret</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">serviceapi/TokenManager/Token</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-vsl-timestamp</stringProp>
                      <stringProp name="Header.value">${timeStamp}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="x-vsl-version" elementType="Header">
                      <stringProp name="Header.name">x-vsl-version</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="x-vsl-sourcetype" elementType="Header">
                      <stringProp name="Header.name">x-vsl-sourcetype</stringProp>
                      <stringProp name="Header.value">GDL</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, application/*+json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Length</stringProp>
                      <stringProp name="Header.value">104</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="apiAccessToken" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">gdlToken</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.payload.content.authDetails.accessToken</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="VDP Generic GDL Upload: Tenant 46" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;header&quot;: {&#xd;
		&quot;uploadDate&quot;: &quot;${dateToday}T00:00:00+03:00&quot;,&#xd;
		&quot;sessionId&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}&quot;,&#xd;
		&quot;user&quot;: {&#xd;
			&quot;entityNo&quot;: &quot;${crunchId}&quot;,&#xd;
			&quot;email&quot;: &quot;${randomString}@vitalitygroup.com&quot;,&#xd;
			&quot;partnerUserId&quot;: &quot;&quot;&#xd;
		},&#xd;
		&quot;partnerSystem&quot;: &quot;Apple&quot;,&#xd;
		&quot;rawUploadData&quot;: &quot;&quot;,&#xd;
		&quot;processingType&quot;: &quot;BATCH&quot;,&#xd;
		&quot;tenantId&quot;: &quot;46&quot;,&#xd;
		&quot;verified&quot;: &quot;true&quot;,&#xd;
		&quot;uploadCount&quot;: 1&#xd;
	},&#xd;
	&quot;device&quot;: {&#xd;
		&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
		&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
		&quot;deviceId&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}&quot;&#xd;
	},&#xd;
	&quot;readings&quot;: [&#xd;
		{&#xd;
			&quot;startTime&quot;: &quot;${dateToday}T00:00:00-05:00&quot;,&#xd;
			&quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00-05:00&quot;,&#xd;
			&quot;readingType&quot;: &quot;WALKING&quot;,&#xd;
			&quot;dataCategory&quot;: &quot;ROUTINE&quot;,&#xd;
			&quot;integrity&quot;: &quot;VERIFIED&quot;,&#xd;
			&quot;workout&quot;: {&#xd;
				&quot;energyExpenditure&quot;: {&#xd;
					&quot;unitOfMeasurement&quot;: &quot;KILOCALORIES&quot;,&#xd;
					&quot;value&quot;: 1200&#xd;
				}&#xd;
			},&#xd;
			&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
			&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
			&quot;partnerReadingId&quot;: &quot;${dateToday}${randomAlphaNumericString}&quot;,&#xd;
			&quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
			&quot;duration&quot;: 86400&#xd;
		},&#xd;
		{&#xd;
			&quot;startTime&quot;: &quot;${dateToday}T00:00:00-05:00&quot;,&#xd;
			&quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00-05:00&quot;,&#xd;
			&quot;readingType&quot;: &quot;WEIGHT&quot;,&#xd;
			&quot;dataCategory&quot;: &quot;BIOMETRIC&quot;,&#xd;
			&quot;integrity&quot;: &quot;UNVERIFIED&quot;,&#xd;
			&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
			&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
			&quot;partnerReadingId&quot;: &quot;${dateToday}${randomAlphaNumericString}&quot;,&#xd;
			&quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
			&quot;healthData&quot;: {&#xd;
				&quot;weight&quot;: {&#xd;
					&quot;unitOfMeasurement&quot;: &quot;KILOGRAMS&quot;,&#xd;
					&quot;value&quot;: 60.980000000000665&#xd;
				}&#xd;
			}&#xd;
		}&#xd;
	]&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">deviceapi/Device/GenericGDLUpload</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-vsl-timestamp</stringProp>
                      <stringProp name="Header.value">${timeStamp}</stringProp>
                    </elementProp>
                    <elementProp name="x-vsl-version" elementType="Header">
                      <stringProp name="Header.name">x-vsl-version</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="x-vsl-sourcetype" elementType="Header">
                      <stringProp name="Header.name">x-vsl-sourcetype</stringProp>
                      <stringProp name="Header.value">GDL</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">x-vsl-token</stringProp>
                      <stringProp name="Header.value">${gdlToken}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Length</stringProp>
                      <stringProp name="Header.value">743</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1880474659">Successfully Uploaded Health Data to GDL</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.scope">all</stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="VDP V2: All Tenants" enabled="true"/>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="VDP V2: Tenant 2" enabled="true">
              <boolProp name="TransactionController.parent">true</boolProp>
              <boolProp name="TransactionController.includeTimers">false</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="VDP V2 Token: Tenant 2" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="grant_type" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">client_credentials</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">grant_type</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${vdp.token.path.v2}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Basic ${vdp.client.token.v2.2}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, application/*+json;</stringProp>
                    </elementProp>
                    <elementProp name="Cache-Control" elementType="Header">
                      <stringProp name="Header.name">Cache-Control</stringProp>
                      <stringProp name="Header.value">no-cache;</stringProp>
                    </elementProp>
                    <elementProp name="Content-Length" elementType="Header">
                      <stringProp name="Header.name">Content-Length</stringProp>
                      <stringProp name="Header.value">29;</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract gdl.token" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">gdl.token</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="VDP V2 Upload: Tenant 2" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;header&quot;: {&#xd;
		&quot;uploadDate&quot;: &quot;${dateToday}T00:00:00+03:00&quot;,&#xd;
		&quot;sessionId&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}&quot;,&#xd;
		&quot;user&quot;: {&#xd;
			&quot;entityNo&quot;: &quot;${elevateId}&quot;,&#xd;
			&quot;email&quot;: &quot;${randomString}@vitalitygroup.com&quot;,&#xd;
			&quot;partnerUserId&quot;: &quot;&quot;&#xd;
		},&#xd;
		&quot;partnerSystem&quot;: &quot;Apple&quot;,&#xd;
		&quot;rawUploadData&quot;: &quot;&quot;,&#xd;
		&quot;processingType&quot;: &quot;BATCH&quot;,&#xd;
		&quot;tenantId&quot;: &quot;2&quot;,&#xd;
		&quot;verified&quot;: &quot;true&quot;,&#xd;
		&quot;uploadCount&quot;: 1&#xd;
	},&#xd;
	&quot;device&quot;: {&#xd;
		&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
		&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
		&quot;deviceId&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}&quot;&#xd;
	},&#xd;
	&quot;readings&quot;: [&#xd;
		{&#xd;
			&quot;startTime&quot;: &quot;${dateToday}T00:00:00-05:00&quot;,&#xd;
			&quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00-05:00&quot;,&#xd;
			&quot;readingType&quot;: &quot;WALKING&quot;,&#xd;
			&quot;dataCategory&quot;: &quot;ROUTINE&quot;,&#xd;
			&quot;integrity&quot;: &quot;VERIFIED&quot;,&#xd;
			&quot;workout&quot;: {&#xd;
				&quot;energyExpenditure&quot;: {&#xd;
					&quot;unitOfMeasurement&quot;: &quot;KILOCALORIES&quot;,&#xd;
					&quot;value&quot;: 1200&#xd;
				}&#xd;
			},&#xd;
			&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
			&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
			&quot;partnerReadingId&quot;: &quot;${dateToday}${randomAlphaNumericString}&quot;,&#xd;
			&quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
			&quot;duration&quot;: 86400&#xd;
		},&#xd;
		{&#xd;
			&quot;startTime&quot;: &quot;${dateToday}T00:00:00-05:00&quot;,&#xd;
			&quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00-05:00&quot;,&#xd;
			&quot;readingType&quot;: &quot;WEIGHT&quot;,&#xd;
			&quot;dataCategory&quot;: &quot;BIOMETRIC&quot;,&#xd;
			&quot;integrity&quot;: &quot;UNVERIFIED&quot;,&#xd;
			&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
			&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
			&quot;partnerReadingId&quot;: &quot;${dateToday}${randomAlphaNumericString}&quot;,&#xd;
			&quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
			&quot;healthData&quot;: {&#xd;
				&quot;weight&quot;: {&#xd;
					&quot;unitOfMeasurement&quot;: &quot;KILOGRAMS&quot;,&#xd;
					&quot;value&quot;: 60.4&#xd;
				}&#xd;
			}&#xd;
		}&#xd;
	]&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${gdl.path.v2}/2</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${gdl.token}</stringProp>
                    </elementProp>
                    <elementProp name="X-Source_VDP" elementType="Header">
                      <stringProp name="Header.name">X-Source_VDP</stringProp>
                      <stringProp name="Header.value">${vdp.source.type.v2}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Length" elementType="Header">
                      <stringProp name="Header.name">Content-Length</stringProp>
                      <stringProp name="Header.value">1088</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1880474659">Successfully Uploaded Health Data to GDL</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.scope">all</stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="VDP V2: Tenant 27" enabled="true">
              <boolProp name="TransactionController.parent">true</boolProp>
              <boolProp name="TransactionController.includeTimers">false</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="VDP V2 Token: Tenant 27" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="grant_type" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">client_credentials</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">grant_type</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${vdp.token.path.v2}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Basic ${vdp.client.token.v2.27}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, application/*+json;</stringProp>
                    </elementProp>
                    <elementProp name="Cache-Control" elementType="Header">
                      <stringProp name="Header.name">Cache-Control</stringProp>
                      <stringProp name="Header.value">no-cache;</stringProp>
                    </elementProp>
                    <elementProp name="Content-Length" elementType="Header">
                      <stringProp name="Header.name">Content-Length</stringProp>
                      <stringProp name="Header.value">29;</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract gdl.token" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">gdl.token</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="VDP V2 Upload: Tenant 27" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;header&quot;: {&#xd;
		&quot;uploadDate&quot;: &quot;${dateToday}T00:00:00+03:00&quot;,&#xd;
		&quot;sessionId&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}&quot;,&#xd;
		&quot;user&quot;: {&#xd;
			&quot;entityNo&quot;: &quot;${apolloId}&quot;,&#xd;
			&quot;email&quot;: &quot;${randomString}@vitalitygroup.com&quot;,&#xd;
			&quot;partnerUserId&quot;: &quot;&quot;&#xd;
		},&#xd;
		&quot;partnerSystem&quot;: &quot;Apple&quot;,&#xd;
		&quot;rawUploadData&quot;: &quot;&quot;,&#xd;
		&quot;processingType&quot;: &quot;BATCH&quot;,&#xd;
		&quot;tenantId&quot;: &quot;27&quot;,&#xd;
		&quot;verified&quot;: &quot;true&quot;,&#xd;
		&quot;uploadCount&quot;: 1&#xd;
	},&#xd;
	&quot;device&quot;: {&#xd;
		&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
		&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
		&quot;deviceId&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}&quot;&#xd;
	},&#xd;
	&quot;readings&quot;: [&#xd;
		{&#xd;
			&quot;startTime&quot;: &quot;${dateToday}T00:00:00-05:00&quot;,&#xd;
			&quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00-05:00&quot;,&#xd;
			&quot;readingType&quot;: &quot;WALKING&quot;,&#xd;
			&quot;dataCategory&quot;: &quot;ROUTINE&quot;,&#xd;
			&quot;integrity&quot;: &quot;VERIFIED&quot;,&#xd;
			&quot;workout&quot;: {&#xd;
				&quot;energyExpenditure&quot;: {&#xd;
					&quot;unitOfMeasurement&quot;: &quot;KILOCALORIES&quot;,&#xd;
					&quot;value&quot;: 1200&#xd;
				}&#xd;
			},&#xd;
			&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
			&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
			&quot;partnerReadingId&quot;: &quot;${dateToday}${randomAlphaNumericString}&quot;,&#xd;
			&quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
			&quot;duration&quot;: 86400&#xd;
		},&#xd;
		{&#xd;
			&quot;startTime&quot;: &quot;${dateToday}T00:00:00-05:00&quot;,&#xd;
			&quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00-05:00&quot;,&#xd;
			&quot;readingType&quot;: &quot;WEIGHT&quot;,&#xd;
			&quot;dataCategory&quot;: &quot;BIOMETRIC&quot;,&#xd;
			&quot;integrity&quot;: &quot;UNVERIFIED&quot;,&#xd;
			&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
			&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
			&quot;partnerReadingId&quot;: &quot;${dateToday}${randomAlphaNumericString}&quot;,&#xd;
			&quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
			&quot;healthData&quot;: {&#xd;
				&quot;weight&quot;: {&#xd;
					&quot;unitOfMeasurement&quot;: &quot;KILOGRAMS&quot;,&#xd;
					&quot;value&quot;: 0&#xd;
				}&#xd;
			}&#xd;
		}&#xd;
	]&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${gdl.path.v2}/27</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${gdl.token}</stringProp>
                    </elementProp>
                    <elementProp name="X-Source_VDP" elementType="Header">
                      <stringProp name="Header.name">X-Source_VDP</stringProp>
                      <stringProp name="Header.value">${vdp.source.type.v2}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Length" elementType="Header">
                      <stringProp name="Header.name">Content-Length</stringProp>
                      <stringProp name="Header.value">1088</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1880474659">Successfully Uploaded Health Data to GDL</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.scope">all</stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="VDP V2: Tenant 32" enabled="true">
              <boolProp name="TransactionController.parent">true</boolProp>
              <boolProp name="TransactionController.includeTimers">false</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="VDP-API Token: Tenant 32" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="grant_type" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">client_credentials</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">grant_type</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${vdp.token.path.v2}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Basic ${vdp.client.token.v2.32}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, application/*+json;</stringProp>
                    </elementProp>
                    <elementProp name="Cache-Control" elementType="Header">
                      <stringProp name="Header.name">Cache-Control</stringProp>
                      <stringProp name="Header.value">no-cache;</stringProp>
                    </elementProp>
                    <elementProp name="Content-Length" elementType="Header">
                      <stringProp name="Header.name">Content-Length</stringProp>
                      <stringProp name="Header.value">29;</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract gdl.token" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">gdl.token</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="VDP-API Upload: Tenant 32" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;header&quot;: {&#xd;
		&quot;uploadDate&quot;: &quot;${dateToday}T00:00:00+03:00&quot;,&#xd;
		&quot;sessionId&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}&quot;,&#xd;
		&quot;user&quot;: {&#xd;
			&quot;entityNo&quot;: &quot;${sapphireId}&quot;,&#xd;
			&quot;email&quot;: &quot;${randomString}@vitalitygroup.com&quot;,&#xd;
			&quot;partnerUserId&quot;: &quot;&quot;&#xd;
		},&#xd;
		&quot;partnerSystem&quot;: &quot;Apple&quot;,&#xd;
		&quot;rawUploadData&quot;: &quot;&quot;,&#xd;
		&quot;processingType&quot;: &quot;BATCH&quot;,&#xd;
		&quot;tenantId&quot;: &quot;32&quot;,&#xd;
		&quot;verified&quot;: &quot;true&quot;,&#xd;
		&quot;uploadCount&quot;: 1&#xd;
	},&#xd;
	&quot;device&quot;: {&#xd;
		&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
		&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
		&quot;deviceId&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}&quot;&#xd;
	},&#xd;
	&quot;readings&quot;: [&#xd;
		{&#xd;
			&quot;startTime&quot;: &quot;${dateToday}T00:00:00-05:00&quot;,&#xd;
			&quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00-05:00&quot;,&#xd;
			&quot;readingType&quot;: &quot;WALKING&quot;,&#xd;
			&quot;dataCategory&quot;: &quot;ROUTINE&quot;,&#xd;
			&quot;integrity&quot;: &quot;VERIFIED&quot;,&#xd;
			&quot;workout&quot;: {&#xd;
				&quot;energyExpenditure&quot;: {&#xd;
					&quot;unitOfMeasurement&quot;: &quot;KILOCALORIES&quot;,&#xd;
					&quot;value&quot;: 1200&#xd;
				}&#xd;
			},&#xd;
			&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
			&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
			&quot;partnerReadingId&quot;: &quot;${dateToday}${randomAlphaNumericString}&quot;,&#xd;
			&quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
			&quot;duration&quot;: 86400&#xd;
		},&#xd;
		{&#xd;
			&quot;startTime&quot;: &quot;${dateToday}T00:00:00-05:00&quot;,&#xd;
			&quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00-05:00&quot;,&#xd;
			&quot;readingType&quot;: &quot;WEIGHT&quot;,&#xd;
			&quot;dataCategory&quot;: &quot;BIOMETRIC&quot;,&#xd;
			&quot;integrity&quot;: &quot;UNVERIFIED&quot;,&#xd;
			&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
			&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
			&quot;partnerReadingId&quot;: &quot;${dateToday}${randomAlphaNumericString}&quot;,&#xd;
			&quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
			&quot;healthData&quot;: {&#xd;
				&quot;weight&quot;: {&#xd;
					&quot;unitOfMeasurement&quot;: &quot;KILOGRAMS&quot;,&#xd;
					&quot;value&quot;: 60.980000000000665&#xd;
				}&#xd;
			}&#xd;
		}&#xd;
	]&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${gdl.path.v2}/32</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${gdl.token}</stringProp>
                    </elementProp>
                    <elementProp name="X-Source_VDP" elementType="Header">
                      <stringProp name="Header.name">X-Source_VDP</stringProp>
                      <stringProp name="Header.value">${vdp.source.type.v2}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Length" elementType="Header">
                      <stringProp name="Header.name">Content-Length</stringProp>
                      <stringProp name="Header.value">1088</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1880474659">Successfully Uploaded Health Data to GDL</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.scope">all</stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="VDP V2: Tenant 37" enabled="true">
              <boolProp name="TransactionController.parent">true</boolProp>
              <boolProp name="TransactionController.includeTimers">false</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="VDP-API Token: Tenant 37" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="grant_type" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">client_credentials</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">grant_type</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${vdp.token.path.v2}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Basic ${vdp.client.token.v2.37}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, application/*+json;</stringProp>
                    </elementProp>
                    <elementProp name="Cache-Control" elementType="Header">
                      <stringProp name="Header.name">Cache-Control</stringProp>
                      <stringProp name="Header.value">no-cache;</stringProp>
                    </elementProp>
                    <elementProp name="Content-Length" elementType="Header">
                      <stringProp name="Header.name">Content-Length</stringProp>
                      <stringProp name="Header.value">29;</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract gdl.token" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">gdl.token</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="VDP-API Upload: Tenant 37" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;header&quot;: {&#xd;
		&quot;uploadDate&quot;: &quot;${dateToday}T00:00:00+03:00&quot;,&#xd;
		&quot;sessionId&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}&quot;,&#xd;
		&quot;user&quot;: {&#xd;
			&quot;entityNo&quot;: &quot;${vrzn.id}&quot;,&#xd;
			&quot;email&quot;: &quot;${randomString}@vitalitygroup.com&quot;,&#xd;
			&quot;partnerUserId&quot;: &quot;&quot;&#xd;
		},&#xd;
		&quot;partnerSystem&quot;: &quot;Apple&quot;,&#xd;
		&quot;rawUploadData&quot;: &quot;&quot;,&#xd;
		&quot;processingType&quot;: &quot;BATCH&quot;,&#xd;
		&quot;tenantId&quot;: &quot;37&quot;,&#xd;
		&quot;verified&quot;: &quot;true&quot;,&#xd;
		&quot;uploadCount&quot;: 1&#xd;
	},&#xd;
	&quot;device&quot;: {&#xd;
		&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
		&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
		&quot;deviceId&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}&quot;&#xd;
	},&#xd;
	&quot;readings&quot;: [&#xd;
		{&#xd;
			&quot;startTime&quot;: &quot;${dateToday}T00:00:00-05:00&quot;,&#xd;
			&quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00-05:00&quot;,&#xd;
			&quot;readingType&quot;: &quot;WALKING&quot;,&#xd;
			&quot;dataCategory&quot;: &quot;ROUTINE&quot;,&#xd;
			&quot;integrity&quot;: &quot;VERIFIED&quot;,&#xd;
			&quot;workout&quot;: {&#xd;
				&quot;energyExpenditure&quot;: {&#xd;
					&quot;unitOfMeasurement&quot;: &quot;KILOCALORIES&quot;,&#xd;
					&quot;value&quot;: 1200&#xd;
				}&#xd;
			},&#xd;
			&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
			&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
			&quot;partnerReadingId&quot;: &quot;${dateToday}${randomAlphaNumericString}&quot;,&#xd;
			&quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
			&quot;duration&quot;: 86400&#xd;
		},&#xd;
		{&#xd;
			&quot;startTime&quot;: &quot;${dateToday}T00:00:00-05:00&quot;,&#xd;
			&quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00-05:00&quot;,&#xd;
			&quot;readingType&quot;: &quot;WEIGHT&quot;,&#xd;
			&quot;dataCategory&quot;: &quot;BIOMETRIC&quot;,&#xd;
			&quot;integrity&quot;: &quot;UNVERIFIED&quot;,&#xd;
			&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
			&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
			&quot;partnerReadingId&quot;: &quot;${dateToday}${randomAlphaNumericString}&quot;,&#xd;
			&quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
			&quot;healthData&quot;: {&#xd;
				&quot;weight&quot;: {&#xd;
					&quot;unitOfMeasurement&quot;: &quot;KILOGRAMS&quot;,&#xd;
					&quot;value&quot;: 60.980000000000665&#xd;
				}&#xd;
			}&#xd;
		}&#xd;
	]&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${gdl.path.v2}/37</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${gdl.token}</stringProp>
                    </elementProp>
                    <elementProp name="X-Source_VDP" elementType="Header">
                      <stringProp name="Header.name">X-Source_VDP</stringProp>
                      <stringProp name="Header.value">${vdp.source.type.v2}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Length" elementType="Header">
                      <stringProp name="Header.name">Content-Length</stringProp>
                      <stringProp name="Header.value">1088</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1880474659">Successfully Uploaded Health Data to GDL</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.scope">all</stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="VDP V2: Tenant 38 iOS" enabled="true">
              <boolProp name="TransactionController.parent">true</boolProp>
              <boolProp name="TransactionController.includeTimers">false</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="VDP-API Token: Tenant 38" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="grant_type" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">client_credentials</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">grant_type</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${vdp.token.path.v2}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Basic ${vdp.client.token.v2.38}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, application/*+json;</stringProp>
                    </elementProp>
                    <elementProp name="Cache-Control" elementType="Header">
                      <stringProp name="Header.name">Cache-Control</stringProp>
                      <stringProp name="Header.value">no-cache;</stringProp>
                    </elementProp>
                    <elementProp name="Content-Length" elementType="Header">
                      <stringProp name="Header.name">Content-Length</stringProp>
                      <stringProp name="Header.value">29;</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract gdl.token" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">gdl.token</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="VDP-API Upload: Tenant 38" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;header&quot;: {&#xd;
		&quot;uploadDate&quot;: &quot;${sys.date.time}-06:00&quot;,&#xd;
		&quot;sessionId&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}&quot;,&#xd;
		&quot;user&quot;: {&#xd;
			&quot;entityNo&quot;: &quot;${vol.id.1}&quot;,&#xd;
			&quot;partnerUserId&quot;: &quot;&quot;&#xd;
		},&#xd;
		&quot;partnerSystem&quot;: &quot;Apple&quot;,&#xd;
		&quot;rawUploadData&quot;: &quot;&quot;,&#xd;
		&quot;processingType&quot;: &quot;BATCH&quot;,&#xd;
		&quot;tenantId&quot;: &quot;38&quot;,&#xd;
		&quot;verified&quot;: &quot;true&quot;,&#xd;
		&quot;uploadCount&quot;: 12&#xd;
	},&#xd;
	&quot;device&quot;: {&#xd;
		&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
		&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
		&quot;deviceId&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}&quot;&#xd;
	},&#xd;
	&quot;readings&quot;: [&#xd;
		{&#xd;
			&quot;startTime&quot;: &quot;${dateToday}T00:00:00+03:00&quot;,&#xd;
			&quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00+03:00&quot;,&#xd;
			&quot;readingType&quot;: &quot;WALKING&quot;,&#xd;
			&quot;dataCategory&quot;: &quot;ROUTINE&quot;,&#xd;
			&quot;integrity&quot;: &quot;VERIFIED&quot;,&#xd;
			&quot;workout&quot;: {&#xd;
				&quot;energyExpenditure&quot;: {&#xd;
					&quot;unitOfMeasurement&quot;: &quot;KILOCALORIES&quot;,&#xd;
					&quot;value&quot;: ${randomNumericFour}&#xd;
				}&#xd;
			},&#xd;
			&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
			&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
			&quot;partnerReadingId&quot;: &quot;${randomNumericFour}${randomAlphaNumericString}&quot;,&#xd;
			&quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
			&quot;duration&quot;: 86400,&#xd;
			&quot;readingMetaData&quot;: [&#xd;
				{&#xd;
					&quot;name&quot;: &quot;SourceApplication&quot;,&#xd;
					&quot;value&quot;: &quot;Apple&quot;&#xd;
				}&#xd;
			]&#xd;
		},&#xd;
		{&#xd;
			&quot;startTime&quot;: &quot;${dateToday}T00:00:00+03:00&quot;,&#xd;
			&quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00+03:00&quot;,&#xd;
			&quot;readingType&quot;: &quot;WEIGHT&quot;,&#xd;
			&quot;dataCategory&quot;: &quot;BIOMETRIC&quot;,&#xd;
			&quot;integrity&quot;: &quot;UNVERIFIED&quot;,&#xd;
			&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
			&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
			&quot;partnerReadingId&quot;: &quot;${randomNumericFour}${randomAlphaNumericString}&quot;,&#xd;
			&quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
			&quot;healthData&quot;: {&#xd;
				&quot;weight&quot;: {&#xd;
					&quot;unitOfMeasurement&quot;: &quot;KILOGRAMS&quot;,&#xd;
					&quot;value&quot;: 69&#xd;
				}&#xd;
			},&#xd;
			&quot;readingMetaData&quot;: [&#xd;
				{&#xd;
					&quot;name&quot;: &quot;SourceApplication&quot;,&#xd;
					&quot;value&quot;: &quot;Apple&quot;&#xd;
				}&#xd;
			]&#xd;
		},&#xd;
		{&#xd;
			&quot;startTime&quot;: &quot;${dateToday}T00:00:00+03:00&quot;,&#xd;
			&quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00+03:00&quot;,&#xd;
			&quot;readingType&quot;: &quot;WEIGHT&quot;,&#xd;
			&quot;dataCategory&quot;: &quot;BIOMETRIC&quot;,&#xd;
			&quot;integrity&quot;: &quot;UNVERIFIED&quot;,&#xd;
			&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
			&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
			&quot;partnerReadingId&quot;: &quot;${randomNumericFour}${randomAlphaNumericString}aa00&quot;,&#xd;
			&quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
			&quot;healthData&quot;: {&#xd;
				&quot;weight&quot;: {&#xd;
					&quot;unitOfMeasurement&quot;: &quot;KILOGRAMS&quot;,&#xd;
					&quot;value&quot;: 70&#xd;
				}&#xd;
			},&#xd;
			&quot;readingMetaData&quot;: [&#xd;
				{&#xd;
					&quot;name&quot;: &quot;SourceApplication&quot;,&#xd;
					&quot;value&quot;: &quot;Shapa&quot;&#xd;
				}&#xd;
			]&#xd;
		},&#xd;
		{&#xd;
			&quot;startTime&quot;: &quot;${dateToday}T00:00:00+03:00&quot;,&#xd;
			&quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00+03:00&quot;,&#xd;
			&quot;readingType&quot;: &quot;WEIGHT&quot;,&#xd;
			&quot;dataCategory&quot;: &quot;BIOMETRIC&quot;,&#xd;
			&quot;integrity&quot;: &quot;UNVERIFIED&quot;,&#xd;
			&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
			&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
			&quot;partnerReadingId&quot;: &quot;${randomNumericFour}${randomAlphaNumericString}909&quot;,&#xd;
			&quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
			&quot;healthData&quot;: {&#xd;
				&quot;weight&quot;: {&#xd;
					&quot;unitOfMeasurement&quot;: &quot;KILOGRAMS&quot;,&#xd;
					&quot;value&quot;: 71&#xd;
				}&#xd;
			},&#xd;
			&quot;readingMetaData&quot;: [&#xd;
				{&#xd;
					&quot;name&quot;: &quot;SourceApplication&quot;,&#xd;
					&quot;value&quot;: &quot;Fitbit&quot;&#xd;
				}&#xd;
			]&#xd;
		},&#xd;
		{&#xd;
			&quot;startTime&quot;: &quot;${dateToday}T00:00:00+03:00&quot;,&#xd;
			&quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00+03:00&quot;,&#xd;
			&quot;readingType&quot;: &quot;WEIGHT&quot;,&#xd;
			&quot;dataCategory&quot;: &quot;BIOMETRIC&quot;,&#xd;
			&quot;integrity&quot;: &quot;UNVERIFIED&quot;,&#xd;
			&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
			&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
			&quot;partnerReadingId&quot;: &quot;${randomNumericFour}${randomAlphaNumericString}76e&quot;,&#xd;
			&quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
			&quot;healthData&quot;: {&#xd;
				&quot;weight&quot;: {&#xd;
					&quot;unitOfMeasurement&quot;: &quot;KILOGRAMS&quot;,&#xd;
					&quot;value&quot;: 72&#xd;
				}&#xd;
			},&#xd;
			&quot;readingMetaData&quot;: [&#xd;
				{&#xd;
					&quot;name&quot;: &quot;SourceApplication&quot;,&#xd;
					&quot;value&quot;: &quot;Withings&quot;&#xd;
				}&#xd;
			]&#xd;
		},&#xd;
		{&#xd;
			&quot;startTime&quot;: &quot;${dateToday}T00:00:00+03:00&quot;,&#xd;
			&quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00+03:00&quot;,&#xd;
			&quot;readingType&quot;: &quot;WALKING&quot;,&#xd;
			&quot;dataCategory&quot;: &quot;ROUTINE&quot;,&#xd;
			&quot;integrity&quot;: &quot;VERIFIED&quot;,&#xd;
			&quot;workout&quot;: {&#xd;
				&quot;totalSteps&quot;: ${randomNumericFour}&#xd;
			},&#xd;
			&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
			&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
			&quot;partnerReadingId&quot;: &quot;${randomNumericFour}${randomAlphaNumericString}a50&quot;,&#xd;
			&quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
			&quot;duration&quot;: 86400,&#xd;
			&quot;readingMetaData&quot;: [&#xd;
				{&#xd;
					&quot;name&quot;: &quot;SourceApplication&quot;,&#xd;
					&quot;value&quot;: &quot;Apple&quot;&#xd;
				}&#xd;
			]&#xd;
		},&#xd;
		{&#xd;
			&quot;startTime&quot;: &quot;${dateToday}T00:00:00+03:00&quot;,&#xd;
			&quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00+03:00&quot;,&#xd;
			&quot;readingType&quot;: &quot;MEDITATION&quot;,&#xd;
			&quot;dataCategory&quot;: &quot;MENTAL_WELLBEING&quot;,&#xd;
			&quot;integrity&quot;: &quot;VERIFIED&quot;,&#xd;
			&quot;workout&quot;: {},&#xd;
			&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
			&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
			&quot;partnerReadingId&quot;: &quot;${randomNumericFour}${randomAlphaNumericString}504&quot;,&#xd;
			&quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
			&quot;activeDuration&quot;: 600,&#xd;
			&quot;readingMetaData&quot;: [&#xd;
				{&#xd;
					&quot;name&quot;: &quot;SourceApplication&quot;,&#xd;
					&quot;value&quot;: &quot;Headspace&quot;&#xd;
				}&#xd;
			]&#xd;
		},&#xd;
		{&#xd;
			&quot;startTime&quot;: &quot;${dateToday}T00:00:00+03:00&quot;,&#xd;
			&quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00+03:00&quot;,&#xd;
			&quot;readingType&quot;: &quot;MEDITATION&quot;,&#xd;
			&quot;dataCategory&quot;: &quot;MENTAL_WELLBEING&quot;,&#xd;
			&quot;integrity&quot;: &quot;VERIFIED&quot;,&#xd;
			&quot;workout&quot;: {},&#xd;
			&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
			&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
			&quot;partnerReadingId&quot;: &quot;${randomNumericFour}${randomAlphaNumericString}07a&quot;,&#xd;
			&quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
			&quot;activeDuration&quot;: 900,&#xd;
			&quot;readingMetaData&quot;: [&#xd;
				{&#xd;
					&quot;name&quot;: &quot;SourceApplication&quot;,&#xd;
					&quot;value&quot;: &quot;Calm&quot;&#xd;
				}&#xd;
			]&#xd;
		},&#xd;
		{&#xd;
			&quot;startTime&quot;: &quot;${dateToday}T00:00:00+03:00&quot;,&#xd;
			&quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00+03:00&quot;,&#xd;
			&quot;readingType&quot;: &quot;MEDITATION&quot;,&#xd;
			&quot;dataCategory&quot;: &quot;MENTAL_WELLBEING&quot;,&#xd;
			&quot;integrity&quot;: &quot;VERIFIED&quot;,&#xd;
			&quot;workout&quot;: {},&#xd;
			&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
			&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
			&quot;partnerReadingId&quot;: &quot;${randomNumericFour}${randomAlphaNumericString}522&quot;,&#xd;
			&quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
			&quot;activeDuration&quot;: ${randomNumericFour},&#xd;
			&quot;readingMetaData&quot;: [&#xd;
				{&#xd;
					&quot;name&quot;: &quot;SourceApplication&quot;,&#xd;
					&quot;value&quot;: &quot;Breathe&quot;&#xd;
				}&#xd;
			]&#xd;
		},&#xd;
		{&#xd;
			&quot;startTime&quot;: &quot;${dateToday}T00:00:00+03:00&quot;,&#xd;
			&quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00+03:00&quot;,&#xd;
			&quot;readingType&quot;: &quot;SLEEP&quot;,&#xd;
			&quot;dataCategory&quot;: &quot;SLEEP&quot;,&#xd;
			&quot;integrity&quot;: &quot;VERIFIED&quot;,&#xd;
			&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
			&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
			&quot;partnerReadingId&quot;: &quot;${randomNumericFour}${randomAlphaNumericString}af3&quot;,&#xd;
			&quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
			&quot;healthData&quot;: {&#xd;
				&quot;sleep&quot;: {&#xd;
					&quot;hoursSlept&quot;: 5&#xd;
				}&#xd;
			},&#xd;
			&quot;readingMetaData&quot;: [&#xd;
				{&#xd;
					&quot;name&quot;: &quot;SourceApplication&quot;,&#xd;
					&quot;value&quot;: &quot;Apple&quot;&#xd;
				}&#xd;
			]&#xd;
		},&#xd;
		{&#xd;
			&quot;startTime&quot;: &quot;${dateToday}T00:00:00+03:00&quot;,&#xd;
			&quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00+03:00&quot;,&#xd;
			&quot;readingType&quot;: &quot;SLEEP&quot;,&#xd;
			&quot;dataCategory&quot;: &quot;SLEEP&quot;,&#xd;
			&quot;integrity&quot;: &quot;VERIFIED&quot;,&#xd;
			&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
			&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
			&quot;partnerReadingId&quot;: &quot;${randomNumericFour}${randomAlphaNumericString}2cb&quot;,&#xd;
			&quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
			&quot;healthData&quot;: {&#xd;
				&quot;sleep&quot;: {&#xd;
					&quot;hoursSlept&quot;: 8,&#xd;
					&quot;sleepEfficiency&quot;: 6.5,&#xd;
					&quot;rem&quot;: 5.5,&#xd;
					&quot;light&quot;: 6.5,&#xd;
					&quot;deep&quot;: 2.5&#xd;
				}&#xd;
			},&#xd;
			&quot;readingMetaData&quot;: [&#xd;
				{&#xd;
					&quot;name&quot;: &quot;SourceApplication&quot;,&#xd;
					&quot;value&quot;: &quot;Sleep Cycle&quot;&#xd;
				}&#xd;
			]&#xd;
		},&#xd;
		{&#xd;
			&quot;startTime&quot;: &quot;${dateToday}T00:00:00+03:00&quot;,&#xd;
			&quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00+03:00&quot;,&#xd;
			&quot;readingType&quot;: &quot;SLEEP&quot;,&#xd;
			&quot;dataCategory&quot;: &quot;SLEEP&quot;,&#xd;
			&quot;integrity&quot;: &quot;VERIFIED&quot;,&#xd;
			&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
			&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
			&quot;partnerReadingId&quot;: &quot;${randomNumericFour}${randomAlphaNumericString}064&quot;,&#xd;
			&quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
			&quot;healthData&quot;: {&#xd;
				&quot;sleep&quot;: {&#xd;
					&quot;hoursSlept&quot;: 7&#xd;
				}&#xd;
			},&#xd;
			&quot;readingMetaData&quot;: [&#xd;
				{&#xd;
					&quot;name&quot;: &quot;SourceApplication&quot;,&#xd;
					&quot;value&quot;: &quot;Pzizz&quot;&#xd;
				}&#xd;
			]&#xd;
		}&#xd;
	]&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${gdl.path.v2}/38</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${gdl.token}</stringProp>
                    </elementProp>
                    <elementProp name="X-Source_VDP" elementType="Header">
                      <stringProp name="Header.name">X-Source_VDP</stringProp>
                      <stringProp name="Header.value">${vdp.source.type.v2}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Length" elementType="Header">
                      <stringProp name="Header.name">Content-Length</stringProp>
                      <stringProp name="Header.value">1088</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1880474659">Successfully Uploaded Health Data to GDL</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.scope">all</stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="VDP V2: Tenant 45 iOS" enabled="true">
              <boolProp name="TransactionController.parent">true</boolProp>
              <boolProp name="TransactionController.includeTimers">false</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="VDP V2 Token: Tenant 45" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="grant_type" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">client_credentials</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">grant_type</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${vdp.token.path.v2}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Basic ${vdp.client.token.v2.45}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, application/*+json;</stringProp>
                    </elementProp>
                    <elementProp name="Cache-Control" elementType="Header">
                      <stringProp name="Header.name">Cache-Control</stringProp>
                      <stringProp name="Header.value">no-cache;</stringProp>
                    </elementProp>
                    <elementProp name="Content-Length" elementType="Header">
                      <stringProp name="Header.name">Content-Length</stringProp>
                      <stringProp name="Header.value">29;</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract gdl.token" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">gdl.token</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="VDP V2 Upload: Tenant 45" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;header&quot;: {&#xd;
		&quot;uploadDate&quot;: &quot;${sys.date.time}-06:00&quot;,&#xd;
		&quot;sessionId&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}&quot;,&#xd;
		&quot;user&quot;: {&#xd;
			&quot;entityNo&quot;: &quot;${biw.id.1}&quot;,&#xd;
			&quot;partnerUserId&quot;: &quot;&quot;&#xd;
		},&#xd;
		&quot;partnerSystem&quot;: &quot;Apple&quot;,&#xd;
		&quot;rawUploadData&quot;: &quot;&quot;,&#xd;
		&quot;processingType&quot;: &quot;BATCH&quot;,&#xd;
		&quot;tenantId&quot;: &quot;45&quot;,&#xd;
		&quot;verified&quot;: &quot;true&quot;,&#xd;
		&quot;uploadCount&quot;: 12&#xd;
	},&#xd;
	&quot;device&quot;: {&#xd;
		&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
		&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
		&quot;deviceId&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}&quot;&#xd;
	},&#xd;
	&quot;readings&quot;: [&#xd;
		{&#xd;
			&quot;startTime&quot;: &quot;${dateToday}T00:00:00+03:00&quot;,&#xd;
			&quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00+03:00&quot;,&#xd;
			&quot;readingType&quot;: &quot;WALKING&quot;,&#xd;
			&quot;dataCategory&quot;: &quot;ROUTINE&quot;,&#xd;
			&quot;integrity&quot;: &quot;VERIFIED&quot;,&#xd;
			&quot;workout&quot;: {&#xd;
				&quot;energyExpenditure&quot;: {&#xd;
					&quot;unitOfMeasurement&quot;: &quot;KILOCALORIES&quot;,&#xd;
					&quot;value&quot;: ${randomNumericFour}&#xd;
				}&#xd;
			},&#xd;
			&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
			&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
			&quot;partnerReadingId&quot;: &quot;${randomNumericFour}${randomAlphaNumericString}&quot;,&#xd;
			&quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
			&quot;duration&quot;: 86400,&#xd;
			&quot;readingMetaData&quot;: [&#xd;
				{&#xd;
					&quot;name&quot;: &quot;SourceApplication&quot;,&#xd;
					&quot;value&quot;: &quot;Apple&quot;&#xd;
				}&#xd;
			]&#xd;
		},&#xd;
		{&#xd;
			&quot;startTime&quot;: &quot;${dateToday}T00:00:00+03:00&quot;,&#xd;
			&quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00+03:00&quot;,&#xd;
			&quot;readingType&quot;: &quot;WEIGHT&quot;,&#xd;
			&quot;dataCategory&quot;: &quot;BIOMETRIC&quot;,&#xd;
			&quot;integrity&quot;: &quot;UNVERIFIED&quot;,&#xd;
			&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
			&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
			&quot;partnerReadingId&quot;: &quot;${randomNumericFour}${randomAlphaNumericString}&quot;,&#xd;
			&quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
			&quot;healthData&quot;: {&#xd;
				&quot;weight&quot;: {&#xd;
					&quot;unitOfMeasurement&quot;: &quot;KILOGRAMS&quot;,&#xd;
					&quot;value&quot;: 69&#xd;
				}&#xd;
			},&#xd;
			&quot;readingMetaData&quot;: [&#xd;
				{&#xd;
					&quot;name&quot;: &quot;SourceApplication&quot;,&#xd;
					&quot;value&quot;: &quot;Apple&quot;&#xd;
				}&#xd;
			]&#xd;
		},&#xd;
		{&#xd;
			&quot;startTime&quot;: &quot;${dateToday}T00:00:00+03:00&quot;,&#xd;
			&quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00+03:00&quot;,&#xd;
			&quot;readingType&quot;: &quot;WEIGHT&quot;,&#xd;
			&quot;dataCategory&quot;: &quot;BIOMETRIC&quot;,&#xd;
			&quot;integrity&quot;: &quot;UNVERIFIED&quot;,&#xd;
			&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
			&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
			&quot;partnerReadingId&quot;: &quot;${randomNumericFour}${randomAlphaNumericString}aa00&quot;,&#xd;
			&quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
			&quot;healthData&quot;: {&#xd;
				&quot;weight&quot;: {&#xd;
					&quot;unitOfMeasurement&quot;: &quot;KILOGRAMS&quot;,&#xd;
					&quot;value&quot;: 70&#xd;
				}&#xd;
			},&#xd;
			&quot;readingMetaData&quot;: [&#xd;
				{&#xd;
					&quot;name&quot;: &quot;SourceApplication&quot;,&#xd;
					&quot;value&quot;: &quot;Shapa&quot;&#xd;
				}&#xd;
			]&#xd;
		},&#xd;
		{&#xd;
			&quot;startTime&quot;: &quot;${dateToday}T00:00:00+03:00&quot;,&#xd;
			&quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00+03:00&quot;,&#xd;
			&quot;readingType&quot;: &quot;WEIGHT&quot;,&#xd;
			&quot;dataCategory&quot;: &quot;BIOMETRIC&quot;,&#xd;
			&quot;integrity&quot;: &quot;UNVERIFIED&quot;,&#xd;
			&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
			&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
			&quot;partnerReadingId&quot;: &quot;${randomNumericFour}${randomAlphaNumericString}909&quot;,&#xd;
			&quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
			&quot;healthData&quot;: {&#xd;
				&quot;weight&quot;: {&#xd;
					&quot;unitOfMeasurement&quot;: &quot;KILOGRAMS&quot;,&#xd;
					&quot;value&quot;: 71&#xd;
				}&#xd;
			},&#xd;
			&quot;readingMetaData&quot;: [&#xd;
				{&#xd;
					&quot;name&quot;: &quot;SourceApplication&quot;,&#xd;
					&quot;value&quot;: &quot;Fitbit&quot;&#xd;
				}&#xd;
			]&#xd;
		},&#xd;
		{&#xd;
			&quot;startTime&quot;: &quot;${dateToday}T00:00:00+03:00&quot;,&#xd;
			&quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00+03:00&quot;,&#xd;
			&quot;readingType&quot;: &quot;WEIGHT&quot;,&#xd;
			&quot;dataCategory&quot;: &quot;BIOMETRIC&quot;,&#xd;
			&quot;integrity&quot;: &quot;UNVERIFIED&quot;,&#xd;
			&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
			&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
			&quot;partnerReadingId&quot;: &quot;${randomNumericFour}${randomAlphaNumericString}76e&quot;,&#xd;
			&quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
			&quot;healthData&quot;: {&#xd;
				&quot;weight&quot;: {&#xd;
					&quot;unitOfMeasurement&quot;: &quot;KILOGRAMS&quot;,&#xd;
					&quot;value&quot;: 72&#xd;
				}&#xd;
			},&#xd;
			&quot;readingMetaData&quot;: [&#xd;
				{&#xd;
					&quot;name&quot;: &quot;SourceApplication&quot;,&#xd;
					&quot;value&quot;: &quot;Withings&quot;&#xd;
				}&#xd;
			]&#xd;
		},&#xd;
		{&#xd;
			&quot;startTime&quot;: &quot;${dateToday}T00:00:00+03:00&quot;,&#xd;
			&quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00+03:00&quot;,&#xd;
			&quot;readingType&quot;: &quot;WALKING&quot;,&#xd;
			&quot;dataCategory&quot;: &quot;ROUTINE&quot;,&#xd;
			&quot;integrity&quot;: &quot;VERIFIED&quot;,&#xd;
			&quot;workout&quot;: {&#xd;
				&quot;totalSteps&quot;: ${randomNumericFour}&#xd;
			},&#xd;
			&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
			&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
			&quot;partnerReadingId&quot;: &quot;${randomNumericFour}${randomAlphaNumericString}a50&quot;,&#xd;
			&quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
			&quot;duration&quot;: 86400,&#xd;
			&quot;readingMetaData&quot;: [&#xd;
				{&#xd;
					&quot;name&quot;: &quot;SourceApplication&quot;,&#xd;
					&quot;value&quot;: &quot;Apple&quot;&#xd;
				}&#xd;
			]&#xd;
		},&#xd;
		{&#xd;
			&quot;startTime&quot;: &quot;${dateToday}T00:00:00+03:00&quot;,&#xd;
			&quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00+03:00&quot;,&#xd;
			&quot;readingType&quot;: &quot;MEDITATION&quot;,&#xd;
			&quot;dataCategory&quot;: &quot;MENTAL_WELLBEING&quot;,&#xd;
			&quot;integrity&quot;: &quot;VERIFIED&quot;,&#xd;
			&quot;workout&quot;: {},&#xd;
			&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
			&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
			&quot;partnerReadingId&quot;: &quot;${randomNumericFour}${randomAlphaNumericString}504&quot;,&#xd;
			&quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
			&quot;activeDuration&quot;: 600,&#xd;
			&quot;readingMetaData&quot;: [&#xd;
				{&#xd;
					&quot;name&quot;: &quot;SourceApplication&quot;,&#xd;
					&quot;value&quot;: &quot;Headspace&quot;&#xd;
				}&#xd;
			]&#xd;
		},&#xd;
		{&#xd;
			&quot;startTime&quot;: &quot;${dateToday}T00:00:00+03:00&quot;,&#xd;
			&quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00+03:00&quot;,&#xd;
			&quot;readingType&quot;: &quot;MEDITATION&quot;,&#xd;
			&quot;dataCategory&quot;: &quot;MENTAL_WELLBEING&quot;,&#xd;
			&quot;integrity&quot;: &quot;VERIFIED&quot;,&#xd;
			&quot;workout&quot;: {},&#xd;
			&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
			&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
			&quot;partnerReadingId&quot;: &quot;${randomNumericFour}${randomAlphaNumericString}07a&quot;,&#xd;
			&quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
			&quot;activeDuration&quot;: 900,&#xd;
			&quot;readingMetaData&quot;: [&#xd;
				{&#xd;
					&quot;name&quot;: &quot;SourceApplication&quot;,&#xd;
					&quot;value&quot;: &quot;Calm&quot;&#xd;
				}&#xd;
			]&#xd;
		},&#xd;
		{&#xd;
			&quot;startTime&quot;: &quot;${dateToday}T00:00:00+03:00&quot;,&#xd;
			&quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00+03:00&quot;,&#xd;
			&quot;readingType&quot;: &quot;MEDITATION&quot;,&#xd;
			&quot;dataCategory&quot;: &quot;MENTAL_WELLBEING&quot;,&#xd;
			&quot;integrity&quot;: &quot;VERIFIED&quot;,&#xd;
			&quot;workout&quot;: {},&#xd;
			&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
			&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
			&quot;partnerReadingId&quot;: &quot;${randomNumericFour}${randomAlphaNumericString}522&quot;,&#xd;
			&quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
			&quot;activeDuration&quot;: ${randomNumericFour},&#xd;
			&quot;readingMetaData&quot;: [&#xd;
				{&#xd;
					&quot;name&quot;: &quot;SourceApplication&quot;,&#xd;
					&quot;value&quot;: &quot;Breathe&quot;&#xd;
				}&#xd;
			]&#xd;
		},&#xd;
		{&#xd;
			&quot;startTime&quot;: &quot;${dateToday}T00:00:00+03:00&quot;,&#xd;
			&quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00+03:00&quot;,&#xd;
			&quot;readingType&quot;: &quot;SLEEP&quot;,&#xd;
			&quot;dataCategory&quot;: &quot;SLEEP&quot;,&#xd;
			&quot;integrity&quot;: &quot;VERIFIED&quot;,&#xd;
			&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
			&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
			&quot;partnerReadingId&quot;: &quot;${randomNumericFour}${randomAlphaNumericString}af3&quot;,&#xd;
			&quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
			&quot;healthData&quot;: {&#xd;
				&quot;sleep&quot;: {&#xd;
					&quot;hoursSlept&quot;: 5&#xd;
				}&#xd;
			},&#xd;
			&quot;readingMetaData&quot;: [&#xd;
				{&#xd;
					&quot;name&quot;: &quot;SourceApplication&quot;,&#xd;
					&quot;value&quot;: &quot;Apple&quot;&#xd;
				}&#xd;
			]&#xd;
		},&#xd;
		{&#xd;
			&quot;startTime&quot;: &quot;${dateToday}T00:00:00+03:00&quot;,&#xd;
			&quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00+03:00&quot;,&#xd;
			&quot;readingType&quot;: &quot;SLEEP&quot;,&#xd;
			&quot;dataCategory&quot;: &quot;SLEEP&quot;,&#xd;
			&quot;integrity&quot;: &quot;VERIFIED&quot;,&#xd;
			&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
			&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
			&quot;partnerReadingId&quot;: &quot;${randomNumericFour}${randomAlphaNumericString}2cb&quot;,&#xd;
			&quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
			&quot;healthData&quot;: {&#xd;
				&quot;sleep&quot;: {&#xd;
					&quot;hoursSlept&quot;: 8,&#xd;
					&quot;sleepEfficiency&quot;: 6.5,&#xd;
					&quot;rem&quot;: 5.5,&#xd;
					&quot;light&quot;: 6.5,&#xd;
					&quot;deep&quot;: 2.5&#xd;
				}&#xd;
			},&#xd;
			&quot;readingMetaData&quot;: [&#xd;
				{&#xd;
					&quot;name&quot;: &quot;SourceApplication&quot;,&#xd;
					&quot;value&quot;: &quot;Sleep Cycle&quot;&#xd;
				}&#xd;
			]&#xd;
		},&#xd;
		{&#xd;
			&quot;startTime&quot;: &quot;${dateToday}T00:00:00+03:00&quot;,&#xd;
			&quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00+03:00&quot;,&#xd;
			&quot;readingType&quot;: &quot;SLEEP&quot;,&#xd;
			&quot;dataCategory&quot;: &quot;SLEEP&quot;,&#xd;
			&quot;integrity&quot;: &quot;VERIFIED&quot;,&#xd;
			&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
			&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
			&quot;partnerReadingId&quot;: &quot;${randomNumericFour}${randomAlphaNumericString}064&quot;,&#xd;
			&quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
			&quot;healthData&quot;: {&#xd;
				&quot;sleep&quot;: {&#xd;
					&quot;hoursSlept&quot;: 7&#xd;
				}&#xd;
			},&#xd;
			&quot;readingMetaData&quot;: [&#xd;
				{&#xd;
					&quot;name&quot;: &quot;SourceApplication&quot;,&#xd;
					&quot;value&quot;: &quot;Pzizz&quot;&#xd;
				}&#xd;
			]&#xd;
		}&#xd;
	]&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${gdl.path.v2}/45</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${gdl.token}</stringProp>
                    </elementProp>
                    <elementProp name="X-Source_VDP" elementType="Header">
                      <stringProp name="Header.name">X-Source_VDP</stringProp>
                      <stringProp name="Header.value">${vdp.source.type.v2}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Length" elementType="Header">
                      <stringProp name="Header.name">Content-Length</stringProp>
                      <stringProp name="Header.value">1088</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1880474659">Successfully Uploaded Health Data to GDL</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.scope">all</stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="VDP V2: Tenant 46" enabled="true">
              <boolProp name="TransactionController.parent">true</boolProp>
              <boolProp name="TransactionController.includeTimers">false</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="VDP V2 Token: Tenant 46" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="grant_type" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">client_credentials</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">grant_type</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${vdp.token.path.v2}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Basic ${vdp.client.token.v2.46}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, application/*+json;</stringProp>
                    </elementProp>
                    <elementProp name="Cache-Control" elementType="Header">
                      <stringProp name="Header.name">Cache-Control</stringProp>
                      <stringProp name="Header.value">no-cache;</stringProp>
                    </elementProp>
                    <elementProp name="Content-Length" elementType="Header">
                      <stringProp name="Header.name">Content-Length</stringProp>
                      <stringProp name="Header.value">29;</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract gdl.token" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">gdl.token</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="VDP V2 Upload: Tenant 46" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;header&quot;: {&#xd;
		&quot;uploadDate&quot;: &quot;${dateToday}T00:00:00+03:00&quot;,&#xd;
		&quot;sessionId&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}&quot;,&#xd;
		&quot;user&quot;: {&#xd;
			&quot;entityNo&quot;: &quot;${crunchId}&quot;,&#xd;
			&quot;email&quot;: &quot;${randomString}@vitalitygroup.com&quot;,&#xd;
			&quot;partnerUserId&quot;: &quot;&quot;&#xd;
		},&#xd;
		&quot;partnerSystem&quot;: &quot;Apple&quot;,&#xd;
		&quot;rawUploadData&quot;: &quot;&quot;,&#xd;
		&quot;processingType&quot;: &quot;BATCH&quot;,&#xd;
		&quot;tenantId&quot;: &quot;46&quot;,&#xd;
		&quot;verified&quot;: &quot;true&quot;,&#xd;
		&quot;uploadCount&quot;: 1&#xd;
	},&#xd;
	&quot;device&quot;: {&#xd;
		&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
		&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
		&quot;deviceId&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}&quot;&#xd;
	},&#xd;
	&quot;readings&quot;: [&#xd;
		{&#xd;
			&quot;startTime&quot;: &quot;${dateToday}T00:00:00-05:00&quot;,&#xd;
			&quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00-05:00&quot;,&#xd;
			&quot;readingType&quot;: &quot;WALKING&quot;,&#xd;
			&quot;dataCategory&quot;: &quot;ROUTINE&quot;,&#xd;
			&quot;integrity&quot;: &quot;VERIFIED&quot;,&#xd;
			&quot;workout&quot;: {&#xd;
				&quot;energyExpenditure&quot;: {&#xd;
					&quot;unitOfMeasurement&quot;: &quot;KILOCALORIES&quot;,&#xd;
					&quot;value&quot;: 1200&#xd;
				}&#xd;
			},&#xd;
			&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
			&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
			&quot;partnerReadingId&quot;: &quot;${dateToday}${randomAlphaNumericString}&quot;,&#xd;
			&quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
			&quot;duration&quot;: 86400&#xd;
		},&#xd;
		{&#xd;
			&quot;startTime&quot;: &quot;${dateToday}T00:00:00-05:00&quot;,&#xd;
			&quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00-05:00&quot;,&#xd;
			&quot;readingType&quot;: &quot;WEIGHT&quot;,&#xd;
			&quot;dataCategory&quot;: &quot;BIOMETRIC&quot;,&#xd;
			&quot;integrity&quot;: &quot;UNVERIFIED&quot;,&#xd;
			&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
			&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
			&quot;partnerReadingId&quot;: &quot;${dateToday}${randomAlphaNumericString}&quot;,&#xd;
			&quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
			&quot;healthData&quot;: {&#xd;
				&quot;weight&quot;: {&#xd;
					&quot;unitOfMeasurement&quot;: &quot;KILOGRAMS&quot;,&#xd;
					&quot;value&quot;: 60.5&#xd;
				}&#xd;
			}&#xd;
		}&#xd;
	]&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${gdl.path.v2}/46</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${gdl.token}</stringProp>
                    </elementProp>
                    <elementProp name="X-Source_VDP" elementType="Header">
                      <stringProp name="Header.name">X-Source_VDP</stringProp>
                      <stringProp name="Header.value">${vdp.source.type.v2}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Length" elementType="Header">
                      <stringProp name="Header.name">Content-Length</stringProp>
                      <stringProp name="Header.value">1088</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1880474659">Successfully Uploaded Health Data to GDL</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.scope">all</stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="VDP V2: Tenant 103" enabled="true">
              <boolProp name="TransactionController.parent">true</boolProp>
              <boolProp name="TransactionController.includeTimers">false</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="VDP V2 Token: Tenant 103" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="grant_type" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">client_credentials</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">grant_type</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${vdp.token.path.v2}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Basic ${vdp.client.token.v2.103}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json, application/*+json;</stringProp>
                    </elementProp>
                    <elementProp name="Cache-Control" elementType="Header">
                      <stringProp name="Header.name">Cache-Control</stringProp>
                      <stringProp name="Header.value">no-cache;</stringProp>
                    </elementProp>
                    <elementProp name="Content-Length" elementType="Header">
                      <stringProp name="Header.name">Content-Length</stringProp>
                      <stringProp name="Header.value">29;</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract gdl.token" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">gdl.token</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="VDP V2 Upload: Tenant 103" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;header&quot;: {&#xd;
		&quot;uploadDate&quot;: &quot;${dateToday}T00:00:00+03:00&quot;,&#xd;
		&quot;sessionId&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}&quot;,&#xd;
		&quot;user&quot;: {&#xd;
			&quot;entityNo&quot;: &quot;${manulifeId}&quot;,&#xd;
			&quot;email&quot;: &quot;${randomString}@vitalitygroup.com&quot;,&#xd;
			&quot;partnerUserId&quot;: &quot;&quot;&#xd;
		},&#xd;
		&quot;partnerSystem&quot;: &quot;Apple&quot;,&#xd;
		&quot;rawUploadData&quot;: &quot;&quot;,&#xd;
		&quot;processingType&quot;: &quot;BATCH&quot;,&#xd;
		&quot;tenantId&quot;: &quot;103&quot;,&#xd;
		&quot;verified&quot;: &quot;true&quot;,&#xd;
		&quot;uploadCount&quot;: 1&#xd;
	},&#xd;
	&quot;device&quot;: {&#xd;
		&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
		&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
		&quot;deviceId&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}&quot;&#xd;
	},&#xd;
	&quot;readings&quot;: [&#xd;
		{&#xd;
			&quot;startTime&quot;: &quot;${dateToday}T00:00:00-05:00&quot;,&#xd;
			&quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00-05:00&quot;,&#xd;
			&quot;readingType&quot;: &quot;WALKING&quot;,&#xd;
			&quot;dataCategory&quot;: &quot;ROUTINE&quot;,&#xd;
			&quot;integrity&quot;: &quot;VERIFIED&quot;,&#xd;
			&quot;workout&quot;: {&#xd;
				&quot;energyExpenditure&quot;: {&#xd;
					&quot;unitOfMeasurement&quot;: &quot;KILOCALORIES&quot;,&#xd;
					&quot;value&quot;: 1200&#xd;
				}&#xd;
			},&#xd;
			&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
			&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
			&quot;partnerReadingId&quot;: &quot;${dateToday}${randomAlphaNumericString}&quot;,&#xd;
			&quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
			&quot;duration&quot;: 86400&#xd;
		},&#xd;
		{&#xd;
			&quot;startTime&quot;: &quot;${dateToday}T00:00:00-05:00&quot;,&#xd;
			&quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00-05:00&quot;,&#xd;
			&quot;readingType&quot;: &quot;WEIGHT&quot;,&#xd;
			&quot;dataCategory&quot;: &quot;BIOMETRIC&quot;,&#xd;
			&quot;integrity&quot;: &quot;UNVERIFIED&quot;,&#xd;
			&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
			&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
			&quot;partnerReadingId&quot;: &quot;${dateToday}${randomAlphaNumericString}&quot;,&#xd;
			&quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
			&quot;healthData&quot;: {&#xd;
				&quot;weight&quot;: {&#xd;
					&quot;unitOfMeasurement&quot;: &quot;KILOGRAMS&quot;,&#xd;
					&quot;value&quot;: 60.980000000000665&#xd;
				}&#xd;
			}&#xd;
		}&#xd;
	]&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${gdl.path.v2}/103</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${gdl.token}</stringProp>
                    </elementProp>
                    <elementProp name="X-Source_VDP" elementType="Header">
                      <stringProp name="Header.name">X-Source_VDP</stringProp>
                      <stringProp name="Header.value">${vdp.source.type.v2}</stringProp>
                    </elementProp>
                    <elementProp name="Content-Length" elementType="Header">
                      <stringProp name="Header.name">Content-Length</stringProp>
                      <stringProp name="Header.value">1088</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1880474659">Successfully Uploaded Health Data to GDL</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.scope">all</stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Mobile Services" enabled="true"/>
        <hashTree>
          <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${msBase}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">vitalitymobileservices/health_data/upload</stringProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </ConfigTestElement>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Health_Data/Upload: Tenant 2" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Auth Token" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="entity_no" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${elevateId}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">entity_no</stringProp>
                  </elementProp>
                  <elementProp name="encrypted_entity_no" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${elevateIdEncrypted}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">encrypted_entity_no</stringProp>
                  </elementProp>
                  <elementProp name="_p" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">IOS</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">_p</stringProp>
                  </elementProp>
                  <elementProp name="_v" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${mob.app.version}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">_v</stringProp>
                  </elementProp>
                  <elementProp name="_doc_browser_context" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">_doc_browser_context</stringProp>
                  </elementProp>
                  <elementProp name="_c" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">_c</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${msPath}/auth/simulate_auth</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Active Rewards Token" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">ar_Token</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.session.token</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="LLT Assertion" enabled="false">
                <stringProp name="JSON_PATH">$.session.timeout</stringProp>
                <stringProp name="EXPECTED_VALUE">2280</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">false</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Encrypting Entity" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import java.security.MessageDigest;

MessageDigest digest = MessageDigest.getInstance(&quot;MD5&quot;);
byte[] bytes = digest.digest((&quot;${elevateId}&quot; + &quot;${msSalt}&quot;).getBytes());
vars.put(&quot;elevateIdEncrypted&quot;,javax.xml.bind.DatatypeConverter.printHexBinary(bytes).toLowerCase());</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Health_Data/Upload: Tenant 2" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;header&quot;: {&#xd;
		&quot;uploadDate&quot;: &quot;${dateToday}T00:00:00+03:00&quot;,&#xd;
		&quot;sessionId&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}&quot;,&#xd;
		&quot;user&quot;: {&#xd;
			&quot;entityNo&quot;: &quot;${elevateId}&quot;,&#xd;
			&quot;email&quot;: &quot;${randomString}@vitalitygroup.com&quot;,&#xd;
			&quot;partnerUserId&quot;: &quot;&quot;&#xd;
		},&#xd;
		&quot;partnerSystem&quot;: &quot;Apple&quot;,&#xd;
		&quot;rawUploadData&quot;: &quot;&quot;,&#xd;
		&quot;processingType&quot;: &quot;BATCH&quot;,&#xd;
		&quot;tenantId&quot;: &quot;2&quot;,&#xd;
		&quot;verified&quot;: &quot;true&quot;,&#xd;
		&quot;uploadCount&quot;: 1&#xd;
	},&#xd;
	&quot;device&quot;: {&#xd;
		&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
		&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
		&quot;deviceId&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}&quot;&#xd;
	},&#xd;
	&quot;readings&quot;: [&#xd;
		{&#xd;
			&quot;startTime&quot;: &quot;${dateToday}T00:00:00-05:00&quot;,&#xd;
			&quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00-05:00&quot;,&#xd;
			&quot;readingType&quot;: &quot;WALKING&quot;,&#xd;
			&quot;dataCategory&quot;: &quot;ROUTINE&quot;,&#xd;
			&quot;integrity&quot;: &quot;VERIFIED&quot;,&#xd;
			&quot;workout&quot;: {&#xd;
				&quot;energyExpenditure&quot;: {&#xd;
					&quot;unitOfMeasurement&quot;: &quot;KILOCALORIES&quot;,&#xd;
					&quot;value&quot;: ${randomNumericFour}&#xd;
				}&#xd;
			},&#xd;
			&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
			&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
			&quot;partnerReadingId&quot;: &quot;${dateToday}${randomAlphaNumericString}&quot;,&#xd;
			&quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
			&quot;duration&quot;: 86400&#xd;
		},&#xd;
		{&#xd;
			&quot;startTime&quot;: &quot;${dateToday}T00:00:00-05:00&quot;,&#xd;
			&quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00-05:00&quot;,&#xd;
			&quot;readingType&quot;: &quot;WEIGHT&quot;,&#xd;
			&quot;dataCategory&quot;: &quot;BIOMETRIC&quot;,&#xd;
			&quot;integrity&quot;: &quot;UNVERIFIED&quot;,&#xd;
			&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
			&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
			&quot;partnerReadingId&quot;: &quot;${dateToday}${randomAlphaNumericString}&quot;,&#xd;
			&quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
			&quot;healthData&quot;: {&#xd;
				&quot;weight&quot;: {&#xd;
					&quot;unitOfMeasurement&quot;: &quot;KILOGRAMS&quot;,&#xd;
					&quot;value&quot;: ${randomNumericTwo}&#xd;
				}&#xd;
			}&#xd;
		}&#xd;
	]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1880474659">Successfully Uploaded Health Data to GDL</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Token" elementType="Header">
                    <stringProp name="Header.name">Vitality-Token</stringProp>
                    <stringProp name="Header.value">${ar_Token}</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-App-Version" elementType="Header">
                    <stringProp name="Header.name">Vitality-App-Version</stringProp>
                    <stringProp name="Header.value">${mob.app.version}</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Language" elementType="Header">
                    <stringProp name="Header.name">Vitality-Language</stringProp>
                    <stringProp name="Header.value">en</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Device-Id" elementType="Header">
                    <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                    <stringProp name="Header.value">swagger-3f802407-77b4-407c-a758-842af5830c2b</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Local-Time" elementType="Header">
                    <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                    <stringProp name="Header.value">${__time(yyyy-MM-dd,)}</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-API-Version" elementType="Header">
                    <stringProp name="Header.name">Vitality-API-Version</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                    <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                    <stringProp name="Header.value">IOS</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Health_Data/Upload: Tenant 27" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Auth Token" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="entity_no" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${apolloId}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">entity_no</stringProp>
                  </elementProp>
                  <elementProp name="encrypted_entity_no" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${apolloIdEncrypted}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">encrypted_entity_no</stringProp>
                  </elementProp>
                  <elementProp name="_p" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">IOS</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">_p</stringProp>
                  </elementProp>
                  <elementProp name="_v" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${mob.app.version}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">_v</stringProp>
                  </elementProp>
                  <elementProp name="_doc_browser_context" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">_doc_browser_context</stringProp>
                  </elementProp>
                  <elementProp name="_c" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">Aetna</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">_c</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${msPath}/auth/simulate_auth</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Active Rewards Token" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">ar_Token</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.session.token</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="LLT Assertion" enabled="false">
                <stringProp name="JSON_PATH">$.session.timeout</stringProp>
                <stringProp name="EXPECTED_VALUE">2280</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">false</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Encrypting Entity" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import java.security.MessageDigest;

MessageDigest digest = MessageDigest.getInstance(&quot;MD5&quot;);
byte[] bytes = digest.digest((&quot;${apolloId}&quot; + &quot;${msSalt}&quot;).getBytes());
vars.put(&quot;apolloIdEncrypted&quot;,javax.xml.bind.DatatypeConverter.printHexBinary(bytes).toLowerCase());</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Health_Data/Upload: Tenant 27" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;header&quot;: {&#xd;
		&quot;uploadDate&quot;: &quot;${dateToday}T00:00:00+03:00&quot;,&#xd;
		&quot;sessionId&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}&quot;,&#xd;
		&quot;user&quot;: {&#xd;
			&quot;entityNo&quot;: &quot;${apolloId}&quot;,&#xd;
			&quot;email&quot;: &quot;${randomString}@vitalitygroup.com&quot;,&#xd;
			&quot;partnerUserId&quot;: &quot;&quot;&#xd;
		},&#xd;
		&quot;partnerSystem&quot;: &quot;Apple&quot;,&#xd;
		&quot;rawUploadData&quot;: &quot;&quot;,&#xd;
		&quot;processingType&quot;: &quot;BATCH&quot;,&#xd;
		&quot;tenantId&quot;: &quot;27&quot;,&#xd;
		&quot;verified&quot;: &quot;true&quot;,&#xd;
		&quot;uploadCount&quot;: 1&#xd;
	},&#xd;
	&quot;device&quot;: {&#xd;
		&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
		&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
		&quot;deviceId&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}&quot;&#xd;
	},&#xd;
	&quot;readings&quot;: [&#xd;
		{&#xd;
			&quot;startTime&quot;: &quot;${dateToday}T00:00:00-05:00&quot;,&#xd;
			&quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00-05:00&quot;,&#xd;
			&quot;readingType&quot;: &quot;WALKING&quot;,&#xd;
			&quot;dataCategory&quot;: &quot;ROUTINE&quot;,&#xd;
			&quot;integrity&quot;: &quot;VERIFIED&quot;,&#xd;
			&quot;workout&quot;: {&#xd;
				&quot;energyExpenditure&quot;: {&#xd;
					&quot;unitOfMeasurement&quot;: &quot;KILOCALORIES&quot;,&#xd;
					&quot;value&quot;: ${randomNumericFour}&#xd;
				}&#xd;
			},&#xd;
			&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
			&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
			&quot;partnerReadingId&quot;: &quot;${dateToday}${randomAlphaNumericString}&quot;,&#xd;
			&quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
			&quot;duration&quot;: 86400&#xd;
		},&#xd;
		{&#xd;
			&quot;startTime&quot;: &quot;${dateToday}T00:00:00-05:00&quot;,&#xd;
			&quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00-05:00&quot;,&#xd;
			&quot;readingType&quot;: &quot;WEIGHT&quot;,&#xd;
			&quot;dataCategory&quot;: &quot;BIOMETRIC&quot;,&#xd;
			&quot;integrity&quot;: &quot;UNVERIFIED&quot;,&#xd;
			&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
			&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
			&quot;partnerReadingId&quot;: &quot;${dateToday}${randomAlphaNumericString}&quot;,&#xd;
			&quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
			&quot;healthData&quot;: {&#xd;
				&quot;weight&quot;: {&#xd;
					&quot;unitOfMeasurement&quot;: &quot;KILOGRAMS&quot;,&#xd;
					&quot;value&quot;: ${randomNumericTwo}&#xd;
				}&#xd;
			}&#xd;
		}&#xd;
	]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Token" elementType="Header">
                    <stringProp name="Header.name">Vitality-Token</stringProp>
                    <stringProp name="Header.value">${ar_Token}</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-App-Version" elementType="Header">
                    <stringProp name="Header.name">Vitality-App-Version</stringProp>
                    <stringProp name="Header.value">${mob.app.version}</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Language" elementType="Header">
                    <stringProp name="Header.name">Vitality-Language</stringProp>
                    <stringProp name="Header.value">en</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Device-Id" elementType="Header">
                    <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                    <stringProp name="Header.value">swagger-3f802407-77b4-407c-a758-842af5830c2b</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Local-Time" elementType="Header">
                    <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                    <stringProp name="Header.value">${__time(yyyy-MM-dd,)}</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-API-Version" elementType="Header">
                    <stringProp name="Header.name">Vitality-API-Version</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                    <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                    <stringProp name="Header.value">IOS</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Vitality-Client</stringProp>
                    <stringProp name="Header.value">Aetna</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1880474659">Successfully Uploaded Health Data to GDL</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Health_Data/Upload: Tenant 32" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Auth Token" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="entity_no" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${sapphireId}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">entity_no</stringProp>
                  </elementProp>
                  <elementProp name="encrypted_entity_no" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${sapphireIdEncrypted}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">encrypted_entity_no</stringProp>
                  </elementProp>
                  <elementProp name="_p" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">IOS</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">_p</stringProp>
                  </elementProp>
                  <elementProp name="_v" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">10</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">_v</stringProp>
                  </elementProp>
                  <elementProp name="_doc_browser_context" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">_doc_browser_context</stringProp>
                  </elementProp>
                  <elementProp name="_c" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">BESTBUY</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">_c</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${msPath}/auth/simulate_auth</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Active Rewards Token" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">ar_Token</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.session.token</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="LLT Assertion" enabled="false">
                <stringProp name="JSON_PATH">$.session.timeout</stringProp>
                <stringProp name="EXPECTED_VALUE">2280</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">false</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Encrypting Entity" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import java.security.MessageDigest;

MessageDigest digest = MessageDigest.getInstance(&quot;MD5&quot;);
byte[] bytes = digest.digest((&quot;${sapphireId}&quot; + &quot;${msSalt}&quot;).getBytes());
vars.put(&quot;sapphireIdEncrypted&quot;,javax.xml.bind.DatatypeConverter.printHexBinary(bytes).toLowerCase());</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Health_Data/Upload: Tenant 32" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;header&quot;: {&#xd;
		&quot;uploadDate&quot;: &quot;${dateToday}T00:00:00+03:00&quot;,&#xd;
		&quot;sessionId&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}&quot;,&#xd;
		&quot;user&quot;: {&#xd;
			&quot;entityNo&quot;: &quot;${sapphireId}&quot;,&#xd;
			&quot;email&quot;: &quot;${randomString}@vitalitygroup.com&quot;,&#xd;
			&quot;partnerUserId&quot;: &quot;&quot;&#xd;
		},&#xd;
		&quot;partnerSystem&quot;: &quot;Apple&quot;,&#xd;
		&quot;rawUploadData&quot;: &quot;&quot;,&#xd;
		&quot;processingType&quot;: &quot;BATCH&quot;,&#xd;
		&quot;tenantId&quot;: &quot;32&quot;,&#xd;
		&quot;verified&quot;: &quot;true&quot;,&#xd;
		&quot;uploadCount&quot;: 1&#xd;
	},&#xd;
	&quot;device&quot;: {&#xd;
		&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
		&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
		&quot;deviceId&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}&quot;&#xd;
	},&#xd;
	&quot;readings&quot;: [&#xd;
		{&#xd;
			&quot;startTime&quot;: &quot;${dateToday}T00:00:00-05:00&quot;,&#xd;
			&quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00-05:00&quot;,&#xd;
			&quot;readingType&quot;: &quot;WALKING&quot;,&#xd;
			&quot;dataCategory&quot;: &quot;ROUTINE&quot;,&#xd;
			&quot;integrity&quot;: &quot;VERIFIED&quot;,&#xd;
			&quot;workout&quot;: {&#xd;
				&quot;energyExpenditure&quot;: {&#xd;
					&quot;unitOfMeasurement&quot;: &quot;KILOCALORIES&quot;,&#xd;
					&quot;value&quot;: ${randomNumericFour}&#xd;
				}&#xd;
			},&#xd;
			&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
			&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
			&quot;partnerReadingId&quot;: &quot;${dateToday}${randomAlphaNumericString}&quot;,&#xd;
			&quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
			&quot;duration&quot;: 86400&#xd;
		},&#xd;
		{&#xd;
			&quot;startTime&quot;: &quot;${dateToday}T00:00:00-05:00&quot;,&#xd;
			&quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00-05:00&quot;,&#xd;
			&quot;readingType&quot;: &quot;WEIGHT&quot;,&#xd;
			&quot;dataCategory&quot;: &quot;BIOMETRIC&quot;,&#xd;
			&quot;integrity&quot;: &quot;UNVERIFIED&quot;,&#xd;
			&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
			&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
			&quot;partnerReadingId&quot;: &quot;${dateToday}${randomAlphaNumericString}&quot;,&#xd;
			&quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
			&quot;healthData&quot;: {&#xd;
				&quot;weight&quot;: {&#xd;
					&quot;unitOfMeasurement&quot;: &quot;KILOGRAMS&quot;,&#xd;
					&quot;value&quot;: ${randomNumericTwo}&#xd;
				}&#xd;
			}&#xd;
		}&#xd;
	]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Token" elementType="Header">
                    <stringProp name="Header.name">Vitality-Token</stringProp>
                    <stringProp name="Header.value">${ar_Token}</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-App-Version" elementType="Header">
                    <stringProp name="Header.name">Vitality-App-Version</stringProp>
                    <stringProp name="Header.value">${mob.app.version}</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Language" elementType="Header">
                    <stringProp name="Header.name">Vitality-Language</stringProp>
                    <stringProp name="Header.value">en</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Device-Id" elementType="Header">
                    <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                    <stringProp name="Header.value">swagger-3f802407-77b4-407c-a758-842af5830c2b</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Local-Time" elementType="Header">
                    <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                    <stringProp name="Header.value">${__time(yyyy-MM-dd,)}</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-API-Version" elementType="Header">
                    <stringProp name="Header.name">Vitality-API-Version</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                    <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                    <stringProp name="Header.value">IOS</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Vitality-Client</stringProp>
                    <stringProp name="Header.value">BESTBUY</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1880474659">Successfully Uploaded Health Data to GDL</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Health_Data/Submit: Tenant 38 iOS" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Auth Token" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="entity_no" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${vol.id.1}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">entity_no</stringProp>
                  </elementProp>
                  <elementProp name="encrypted_entity_no" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${vol.id.1.encrypted}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">encrypted_entity_no</stringProp>
                  </elementProp>
                  <elementProp name="_p" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">IOS</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">_p</stringProp>
                  </elementProp>
                  <elementProp name="_v" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${mob.app.version}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">_v</stringProp>
                  </elementProp>
                  <elementProp name="_doc_browser_context" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">_doc_browser_context</stringProp>
                  </elementProp>
                  <elementProp name="_c" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">VOL</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">_c</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${msPath}/auth/simulate_auth</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Active Rewards Token" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">ar_Token</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.session.token</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="LLT Assertion" enabled="false">
                <stringProp name="JSON_PATH">$.session.timeout</stringProp>
                <stringProp name="EXPECTED_VALUE">2280</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">false</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Encrypting Entity" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import java.security.MessageDigest;

MessageDigest digest = MessageDigest.getInstance(&quot;MD5&quot;);
byte[] bytes = digest.digest((&quot;${vol.id.1}&quot; + &quot;${msSalt}&quot;).getBytes());
vars.put(&quot;vol.id.1.encrypted&quot;,javax.xml.bind.DatatypeConverter.printHexBinary(bytes).toLowerCase());</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Health_Data/submit: Tenant 38" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;device&quot;: {&#xd;
		&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
		&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
		&quot;deviceId&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}&quot;&#xd;
	},&#xd;
	&quot;healthData&quot;: {&#xd;
		&quot;byDay&quot;: [&#xd;
			{&#xd;
				&quot;date&quot;: &quot;${dateToday}T00:00:00+03:00&quot;,&#xd;
				&quot;items&quot;: [&#xd;
					{&#xd;
						&quot;type&quot;: &quot;STEPS&quot;,&#xd;
						&quot;value&quot;: ${randomNumericFour},&#xd;
						&quot;provider&quot;: &quot;com.apple.health&quot;,&#xd;
						&quot;unit&quot;: &quot;COUNT&quot;&#xd;
					},&#xd;
					{&#xd;
						&quot;type&quot;: &quot;ACTIVE_ENERGY&quot;,&#xd;
						&quot;value&quot;: ${randomNumericFour},&#xd;
						&quot;provider&quot;: &quot;com.apple.health&quot;,&#xd;
						&quot;unit&quot;: &quot;KILOCALORIES&quot;&#xd;
					},&#xd;
					{&#xd;
						&quot;type&quot;: &quot;MEDITATION&quot;,&#xd;
						&quot;value&quot;: ${randomNumericTwo},&#xd;
						&quot;provider&quot;: &quot;com.getsomeheadspace.headspace&quot;,&#xd;
						&quot;unit&quot;: &quot;MINUTES&quot;&#xd;
					},&#xd;
					{&#xd;
						&quot;type&quot;: &quot;MEDITATION&quot;,&#xd;
						&quot;value&quot;: ${randomNumericTwo},&#xd;
						&quot;provider&quot;: &quot;com.calm.calmapp&quot;,&#xd;
						&quot;unit&quot;: &quot;MINUTES&quot;&#xd;
					},&#xd;
					{&#xd;
						&quot;type&quot;: &quot;MEDITATION&quot;,&#xd;
						&quot;value&quot;: ${randomNumericTwo},&#xd;
						&quot;provider&quot;: &quot;com.apple.health&quot;,&#xd;
						&quot;unit&quot;: &quot;MINUTES&quot;&#xd;
					},&#xd;
					{&#xd;
						&quot;type&quot;: &quot;SLEEP_TOTAL&quot;,&#xd;
						&quot;provider&quot;: &quot;com.apple.health&quot;,&#xd;
						&quot;value&quot;: ${randomNumericTwo},&#xd;
						&quot;unit&quot;: &quot;HOURS&quot;&#xd;
					},&#xd;
					{&#xd;
						&quot;type&quot;: &quot;SLEEP_TOTAL&quot;,&#xd;
						&quot;provider&quot;: &quot;com.pzizztechnology.pzizz&quot;,&#xd;
						&quot;value&quot;: ${randomNumericTwo},&#xd;
						&quot;unit&quot;: &quot;HOURS&quot;&#xd;
					},&#xd;
					{&#xd;
						&quot;type&quot;: &quot;SLEEP_TOTAL&quot;,&#xd;
						&quot;provider&quot;: &quot;com.lexwarelabs.goodmorning&quot;,&#xd;
						&quot;value&quot;: ${randomNumericTwo},&#xd;
						&quot;unit&quot;: &quot;HOURS&quot;&#xd;
					},&#xd;
					{&#xd;
						&quot;type&quot;: &quot;SLEEP_EFFICIENCY&quot;,&#xd;
						&quot;provider&quot;: &quot;com.lexwarelabs.goodmorning&quot;,&#xd;
						&quot;value&quot;: ${randomNumericTwo},&#xd;
						&quot;unit&quot;: &quot;HOURS&quot;&#xd;
					},&#xd;
					{&#xd;
						&quot;type&quot;: &quot;SLEEP_REM&quot;,&#xd;
						&quot;provider&quot;: &quot;com.lexwarelabs.goodmorning&quot;,&#xd;
						&quot;value&quot;: ${randomNumericTwo},&#xd;
						&quot;unit&quot;: &quot;HOURS&quot;&#xd;
					},&#xd;
					{&#xd;
						&quot;type&quot;: &quot;SLEEP_LIGHT&quot;,&#xd;
						&quot;provider&quot;: &quot;com.lexwarelabs.goodmorning&quot;,&#xd;
						&quot;value&quot;: ${randomNumericTwo},&#xd;
						&quot;unit&quot;: &quot;HOURS&quot;&#xd;
					},&#xd;
					{&#xd;
						&quot;type&quot;: &quot;SLEEP_DEEP&quot;,&#xd;
						&quot;provider&quot;: &quot;com.lexwarelabs.goodmorning&quot;,&#xd;
						&quot;value&quot;: ${randomNumericTwo},&#xd;
						&quot;unit&quot;: &quot;HOURS&quot;&#xd;
					},&#xd;
					{&#xd;
						&quot;type&quot;: &quot;WEIGHT&quot;,&#xd;
						&quot;provider&quot;: &quot;com.apple.health&quot;,&#xd;
						&quot;value&quot;: ${randomNumericTwo},&#xd;
						&quot;unit&quot;: &quot;KILOGRAMS&quot;&#xd;
					},&#xd;
					{&#xd;
						&quot;type&quot;: &quot;WEIGHT&quot;,&#xd;
						&quot;provider&quot;: &quot;com.shapa.hike&quot;,&#xd;
						&quot;value&quot;: ${randomNumericTwo},&#xd;
						&quot;unit&quot;: &quot;KILOGRAMS&quot;&#xd;
					},&#xd;
					{&#xd;
						&quot;type&quot;: &quot;WEIGHT&quot;,&#xd;
						&quot;provider&quot;: &quot;com.fitbit.FitbitMobile&quot;,&#xd;
						&quot;value&quot;: ${randomNumericTwo},&#xd;
						&quot;unit&quot;: &quot;KILOGRAMS&quot;&#xd;
					},&#xd;
					{&#xd;
						&quot;type&quot;: &quot;WEIGHT&quot;,&#xd;
						&quot;provider&quot;: &quot;com.withings.wiScaleNG&quot;,&#xd;
						&quot;value&quot;: ${randomNumericTwo},&#xd;
						&quot;unit&quot;: &quot;KILOGRAMS&quot;&#xd;
					}&#xd;
				]&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">vitalitymobileservices/health_data/submit</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Token" elementType="Header">
                    <stringProp name="Header.name">Vitality-Token</stringProp>
                    <stringProp name="Header.value">${ar_Token}</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-App-Version" elementType="Header">
                    <stringProp name="Header.name">Vitality-App-Version</stringProp>
                    <stringProp name="Header.value">${mob.app.version}</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Language" elementType="Header">
                    <stringProp name="Header.name">Vitality-Language</stringProp>
                    <stringProp name="Header.value">en</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Device-Id" elementType="Header">
                    <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                    <stringProp name="Header.value">swagger-3f802407-77b4-407c-a758-842af5830c2b</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Local-Time" elementType="Header">
                    <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                    <stringProp name="Header.value">${__time(yyyy-MM-dd,)}</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-API-Version" elementType="Header">
                    <stringProp name="Header.name">Vitality-API-Version</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                    <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                    <stringProp name="Header.value">IOS</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Vitality-Client</stringProp>
                    <stringProp name="Header.value">VOL</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Health_Data/Submit: Tenant 38 Android" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Auth Token" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="entity_no" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${vol.id.2}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">entity_no</stringProp>
                  </elementProp>
                  <elementProp name="encrypted_entity_no" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${vol.id.2.encrypted}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">encrypted_entity_no</stringProp>
                  </elementProp>
                  <elementProp name="_p" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">IOS</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">_p</stringProp>
                  </elementProp>
                  <elementProp name="_v" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">10</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">_v</stringProp>
                  </elementProp>
                  <elementProp name="_doc_browser_context" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">_doc_browser_context</stringProp>
                  </elementProp>
                  <elementProp name="_c" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">VOL</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">_c</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${msPath}/auth/simulate_auth</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Active Rewards Token" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">ar_Token</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.session.token</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="LLT Assertion" enabled="false">
                <stringProp name="JSON_PATH">$.session.timeout</stringProp>
                <stringProp name="EXPECTED_VALUE">2280</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">false</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Encrypting Entity" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import java.security.MessageDigest;

MessageDigest digest = MessageDigest.getInstance(&quot;MD5&quot;);
byte[] bytes = digest.digest((&quot;${vol.id.2}&quot; + &quot;${msSalt}&quot;).getBytes());
vars.put(&quot;vol.id.2.encrypted&quot;,javax.xml.bind.DatatypeConverter.printHexBinary(bytes).toLowerCase());</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Health_Data/submit: Tenant 38" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;healthDataProviderAccount&quot;: {&#xd;
		&quot;id&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}&quot;&#xd;
	},&#xd;
	&quot;device&quot;: {&#xd;
		&quot;manufacturer&quot;: &quot;Motorola&quot;,&#xd;
		&quot;model&quot;: &quot;Moto1&quot;,&#xd;
		&quot;deviceId&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}&quot;&#xd;
	},&#xd;
	&quot;healthData&quot;: {&#xd;
		&quot;byDay&quot;: [&#xd;
			{&#xd;
				&quot;date&quot;: &quot;${dateToday}T00:00:00+03:00&quot;,&#xd;
				&quot;items&quot;: [&#xd;
					{&#xd;
						&quot;type&quot;: &quot;STEPS&quot;,&#xd;
						&quot;value&quot;: ${randomNumericFour},&#xd;
						&quot;provider&quot;: &quot;com.google.android.gms&quot;,&#xd;
						&quot;unit&quot;: &quot;COUNT&quot;&#xd;
					},&#xd;
					{&#xd;
						&quot;type&quot;: &quot;ACTIVE_ENERGY&quot;,&#xd;
						&quot;value&quot;: ${randomNumericFour},&#xd;
						&quot;provider&quot;: &quot;com.google.android.gms&quot;,&#xd;
						&quot;unit&quot;: &quot;KILOCALORIES&quot;&#xd;
					},&#xd;
					{&#xd;
						&quot;type&quot;: &quot;MEDITATION&quot;,&#xd;
						&quot;value&quot;: ${randomNumericTwo},&#xd;
						&quot;provider&quot;: &quot;com.getsomeheadspace.android&quot;,&#xd;
						&quot;unit&quot;: &quot;MINUTES&quot;&#xd;
					},&#xd;
					{&#xd;
						&quot;type&quot;: &quot;MEDITATION&quot;,&#xd;
						&quot;value&quot;: ${randomNumericTwo},&#xd;
						&quot;provider&quot;: &quot;com.calm.android&quot;,&#xd;
						&quot;unit&quot;: &quot;MINUTES&quot;&#xd;
					},&#xd;
					{&#xd;
						&quot;type&quot;: &quot;SLEEP_TOTAL&quot;,&#xd;
						&quot;provider&quot;: &quot;com.google.android.gms&quot;,&#xd;
						&quot;value&quot;: ${randomNumericTwo},&#xd;
						&quot;unit&quot;: &quot;HOURS&quot;&#xd;
					},&#xd;
					{&#xd;
						&quot;type&quot;: &quot;SLEEP_TOTAL&quot;,&#xd;
						&quot;provider&quot;: &quot;com.pzizz.android&quot;,&#xd;
						&quot;value&quot;: ${randomNumericTwo},&#xd;
						&quot;unit&quot;: &quot;HOURS&quot;&#xd;
					},&#xd;
					{&#xd;
						&quot;type&quot;: &quot;SLEEP_TOTAL&quot;,&#xd;
						&quot;provider&quot;: &quot;com.northcube.sleepcycle&quot;,&#xd;
						&quot;value&quot;: ${randomNumericTwo},&#xd;
						&quot;unit&quot;: &quot;HOURS&quot;&#xd;
					},&#xd;
					{&#xd;
						&quot;type&quot;: &quot;SLEEP_EFFICIENCY&quot;,&#xd;
						&quot;provider&quot;: &quot;com.pzizz.android&quot;,&#xd;
						&quot;value&quot;: ${randomNumericTwo},&#xd;
						&quot;unit&quot;: &quot;HOURS&quot;&#xd;
					},&#xd;
					{&#xd;
						&quot;type&quot;: &quot;SLEEP_REM&quot;,&#xd;
						&quot;provider&quot;: &quot;com.pzizz.android&quot;,&#xd;
						&quot;value&quot;: ${randomNumericTwo},&#xd;
						&quot;unit&quot;: &quot;HOURS&quot;&#xd;
					},&#xd;
					{&#xd;
						&quot;type&quot;: &quot;SLEEP_LIGHT&quot;,&#xd;
						&quot;provider&quot;: &quot;com.pzizz.android&quot;,&#xd;
						&quot;value&quot;: ${randomNumericTwo},&#xd;
						&quot;unit&quot;: &quot;HOURS&quot;&#xd;
					},&#xd;
					{&#xd;
						&quot;type&quot;: &quot;SLEEP_DEEP&quot;,&#xd;
						&quot;provider&quot;: &quot;com.pzizz.android&quot;,&#xd;
						&quot;value&quot;: ${randomNumericTwo},&#xd;
						&quot;unit&quot;: &quot;HOURS&quot;&#xd;
					},&#xd;
					{&#xd;
						&quot;type&quot;: &quot;WEIGHT&quot;,&#xd;
						&quot;provider&quot;: &quot;com.google.android.gms&quot;,&#xd;
						&quot;value&quot;: ${randomNumericTwo},&#xd;
						&quot;unit&quot;: &quot;KILOGRAMS&quot;&#xd;
					},&#xd;
					{&#xd;
						&quot;type&quot;: &quot;WEIGHT&quot;,&#xd;
						&quot;provider&quot;: &quot;com.fitbit.FitbitMobile&quot;,&#xd;
						&quot;value&quot;: ${randomNumericTwo},&#xd;
						&quot;unit&quot;: &quot;KILOGRAMS&quot;&#xd;
					},&#xd;
					{&#xd;
						&quot;type&quot;: &quot;WEIGHT&quot;,&#xd;
						&quot;provider&quot;: &quot;com.withings.wiscale2&quot;,&#xd;
						&quot;value&quot;: ${randomNumericTwo},&#xd;
						&quot;unit&quot;: &quot;KILOGRAMS&quot;&#xd;
					}&#xd;
				]&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">vitalitymobileservices/health_data/submit</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Token" elementType="Header">
                    <stringProp name="Header.name">Vitality-Token</stringProp>
                    <stringProp name="Header.value">${ar_Token}</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-App-Version" elementType="Header">
                    <stringProp name="Header.name">Vitality-App-Version</stringProp>
                    <stringProp name="Header.value">${mob.app.version}</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Device-Id" elementType="Header">
                    <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                    <stringProp name="Header.value">swagger-3f802407-77b4-407c-a758-842af5830c2b</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Local-Time" elementType="Header">
                    <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                    <stringProp name="Header.value">${__time(yyyy-MM-dd,)}</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-API-Version" elementType="Header">
                    <stringProp name="Header.name">Vitality-API-Version</stringProp>
                    <stringProp name="Header.value">1.0</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                    <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                    <stringProp name="Header.value">ANDROID</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Vitality-Client</stringProp>
                    <stringProp name="Header.value">VOL</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Health_Data/Submit: Tenant 45 iOS" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Auth Token" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="entity_no" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${biw.id.1}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">entity_no</stringProp>
                  </elementProp>
                  <elementProp name="encrypted_entity_no" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${biw.id.1.encrypted}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">encrypted_entity_no</stringProp>
                  </elementProp>
                  <elementProp name="_p" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">IOS</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">_p</stringProp>
                  </elementProp>
                  <elementProp name="_v" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${mob.app.version}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">_v</stringProp>
                  </elementProp>
                  <elementProp name="_doc_browser_context" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">_doc_browser_context</stringProp>
                  </elementProp>
                  <elementProp name="_c" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">VOL</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">_c</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${msPath}/auth/simulate_auth</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Active Rewards Token" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">ar_Token</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.session.token</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Encrypting Entity" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import java.security.MessageDigest;

MessageDigest digest = MessageDigest.getInstance(&quot;MD5&quot;);
byte[] bytes = digest.digest((&quot;${biw.id.1}&quot; + &quot;${msSalt}&quot;).getBytes());
vars.put(&quot;biw.id.1.encrypted&quot;,javax.xml.bind.DatatypeConverter.printHexBinary(bytes).toLowerCase());</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Health_Data/submit: Tenant 45" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;device&quot;: {&#xd;
		&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
		&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
		&quot;deviceId&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}&quot;&#xd;
	},&#xd;
	&quot;healthData&quot;: {&#xd;
		&quot;byDay&quot;: [&#xd;
			{&#xd;
				&quot;date&quot;: &quot;${dateToday}T00:00:00+03:00&quot;,&#xd;
				&quot;items&quot;: [&#xd;
					{&#xd;
						&quot;type&quot;: &quot;STEPS&quot;,&#xd;
						&quot;value&quot;: ${randomNumericFour},&#xd;
						&quot;provider&quot;: &quot;com.apple.health&quot;,&#xd;
						&quot;unit&quot;: &quot;COUNT&quot;&#xd;
					},&#xd;
					{&#xd;
						&quot;type&quot;: &quot;ACTIVE_ENERGY&quot;,&#xd;
						&quot;value&quot;: ${randomNumericFour},&#xd;
						&quot;provider&quot;: &quot;com.apple.health&quot;,&#xd;
						&quot;unit&quot;: &quot;KILOCALORIES&quot;&#xd;
					},&#xd;
					{&#xd;
						&quot;type&quot;: &quot;MEDITATION&quot;,&#xd;
						&quot;value&quot;: ${randomNumericTwo},&#xd;
						&quot;provider&quot;: &quot;com.getsomeheadspace.headspace&quot;,&#xd;
						&quot;unit&quot;: &quot;MINUTES&quot;&#xd;
					},&#xd;
					{&#xd;
						&quot;type&quot;: &quot;MEDITATION&quot;,&#xd;
						&quot;value&quot;: ${randomNumericTwo},&#xd;
						&quot;provider&quot;: &quot;com.calm.calmapp&quot;,&#xd;
						&quot;unit&quot;: &quot;MINUTES&quot;&#xd;
					},&#xd;
					{&#xd;
						&quot;type&quot;: &quot;MEDITATION&quot;,&#xd;
						&quot;value&quot;: ${randomNumericTwo},&#xd;
						&quot;provider&quot;: &quot;com.apple.health&quot;,&#xd;
						&quot;unit&quot;: &quot;MINUTES&quot;&#xd;
					},&#xd;
					{&#xd;
						&quot;type&quot;: &quot;SLEEP_TOTAL&quot;,&#xd;
						&quot;provider&quot;: &quot;com.apple.health&quot;,&#xd;
						&quot;value&quot;: ${randomNumericTwo},&#xd;
						&quot;unit&quot;: &quot;HOURS&quot;&#xd;
					},&#xd;
					{&#xd;
						&quot;type&quot;: &quot;SLEEP_TOTAL&quot;,&#xd;
						&quot;provider&quot;: &quot;com.pzizztechnology.pzizz&quot;,&#xd;
						&quot;value&quot;: ${randomNumericTwo},&#xd;
						&quot;unit&quot;: &quot;HOURS&quot;&#xd;
					},&#xd;
					{&#xd;
						&quot;type&quot;: &quot;SLEEP_TOTAL&quot;,&#xd;
						&quot;provider&quot;: &quot;com.lexwarelabs.goodmorning&quot;,&#xd;
						&quot;value&quot;: ${randomNumericTwo},&#xd;
						&quot;unit&quot;: &quot;HOURS&quot;&#xd;
					},&#xd;
					{&#xd;
						&quot;type&quot;: &quot;SLEEP_EFFICIENCY&quot;,&#xd;
						&quot;provider&quot;: &quot;com.lexwarelabs.goodmorning&quot;,&#xd;
						&quot;value&quot;: ${randomNumericTwo},&#xd;
						&quot;unit&quot;: &quot;HOURS&quot;&#xd;
					},&#xd;
					{&#xd;
						&quot;type&quot;: &quot;SLEEP_REM&quot;,&#xd;
						&quot;provider&quot;: &quot;com.lexwarelabs.goodmorning&quot;,&#xd;
						&quot;value&quot;: ${randomNumericTwo},&#xd;
						&quot;unit&quot;: &quot;HOURS&quot;&#xd;
					},&#xd;
					{&#xd;
						&quot;type&quot;: &quot;SLEEP_LIGHT&quot;,&#xd;
						&quot;provider&quot;: &quot;com.lexwarelabs.goodmorning&quot;,&#xd;
						&quot;value&quot;: ${randomNumericTwo},&#xd;
						&quot;unit&quot;: &quot;HOURS&quot;&#xd;
					},&#xd;
					{&#xd;
						&quot;type&quot;: &quot;SLEEP_DEEP&quot;,&#xd;
						&quot;provider&quot;: &quot;com.lexwarelabs.goodmorning&quot;,&#xd;
						&quot;value&quot;: ${randomNumericTwo},&#xd;
						&quot;unit&quot;: &quot;HOURS&quot;&#xd;
					},&#xd;
					{&#xd;
						&quot;type&quot;: &quot;WEIGHT&quot;,&#xd;
						&quot;provider&quot;: &quot;com.apple.health&quot;,&#xd;
						&quot;value&quot;: ${randomNumericTwo},&#xd;
						&quot;unit&quot;: &quot;KILOGRAMS&quot;&#xd;
					},&#xd;
					{&#xd;
						&quot;type&quot;: &quot;WEIGHT&quot;,&#xd;
						&quot;provider&quot;: &quot;com.shapa.hike&quot;,&#xd;
						&quot;value&quot;: ${randomNumericTwo},&#xd;
						&quot;unit&quot;: &quot;KILOGRAMS&quot;&#xd;
					},&#xd;
					{&#xd;
						&quot;type&quot;: &quot;WEIGHT&quot;,&#xd;
						&quot;provider&quot;: &quot;com.fitbit.FitbitMobile&quot;,&#xd;
						&quot;value&quot;: ${randomNumericTwo},&#xd;
						&quot;unit&quot;: &quot;KILOGRAMS&quot;&#xd;
					},&#xd;
					{&#xd;
						&quot;type&quot;: &quot;WEIGHT&quot;,&#xd;
						&quot;provider&quot;: &quot;com.withings.wiScaleNG&quot;,&#xd;
						&quot;value&quot;: ${randomNumericTwo},&#xd;
						&quot;unit&quot;: &quot;KILOGRAMS&quot;&#xd;
					}&#xd;
				]&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">vitalitymobileservices/health_data/submit</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Token" elementType="Header">
                    <stringProp name="Header.name">Vitality-Token</stringProp>
                    <stringProp name="Header.value">${ar_Token}</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-App-Version" elementType="Header">
                    <stringProp name="Header.name">Vitality-App-Version</stringProp>
                    <stringProp name="Header.value">${mob.app.version}</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Language" elementType="Header">
                    <stringProp name="Header.name">Vitality-Language</stringProp>
                    <stringProp name="Header.value">en</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Device-Id" elementType="Header">
                    <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                    <stringProp name="Header.value">swagger-3f802407-77b4-407c-a758-842af5830c2b</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Local-Time" elementType="Header">
                    <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                    <stringProp name="Header.value">${__time(yyyy-MM-dd,)}</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-API-Version" elementType="Header">
                    <stringProp name="Header.name">Vitality-API-Version</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                    <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                    <stringProp name="Header.value">IOS</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Vitality-Client</stringProp>
                    <stringProp name="Header.value">VOL</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Health_Data/Submit: Tenant 45 Android" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Auth Token" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="entity_no" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${biw.id.2}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">entity_no</stringProp>
                  </elementProp>
                  <elementProp name="encrypted_entity_no" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${biw.id.2.encrypted}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">encrypted_entity_no</stringProp>
                  </elementProp>
                  <elementProp name="_p" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">ANDROID</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">_p</stringProp>
                  </elementProp>
                  <elementProp name="_v" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${mob.app.version}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">_v</stringProp>
                  </elementProp>
                  <elementProp name="_doc_browser_context" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">_doc_browser_context</stringProp>
                  </elementProp>
                  <elementProp name="_c" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">VOL</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">_c</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${msPath}/auth/simulate_auth</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Active Rewards Token" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">ar_Token</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.session.token</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="LLT Assertion" enabled="false">
                <stringProp name="JSON_PATH">$.session.timeout</stringProp>
                <stringProp name="EXPECTED_VALUE">2280</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">false</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Encrypting Entity" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import java.security.MessageDigest;

MessageDigest digest = MessageDigest.getInstance(&quot;MD5&quot;);
byte[] bytes = digest.digest((&quot;${biw.id.2}&quot; + &quot;${msSalt}&quot;).getBytes());
vars.put(&quot;biw.id.2.encrypted&quot;,javax.xml.bind.DatatypeConverter.printHexBinary(bytes).toLowerCase());</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Health_Data/submit: Tenant 45" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;healthDataProviderAccount&quot;: {&#xd;
		&quot;id&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}&quot;&#xd;
	},&#xd;
	&quot;device&quot;: {&#xd;
		&quot;manufacturer&quot;: &quot;Motorola&quot;,&#xd;
		&quot;model&quot;: &quot;Moto1&quot;,&#xd;
		&quot;deviceId&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}&quot;&#xd;
	},&#xd;
	&quot;healthData&quot;: {&#xd;
		&quot;byDay&quot;: [&#xd;
			{&#xd;
				&quot;date&quot;: &quot;${dateToday}T00:00:00+03:00&quot;,&#xd;
				&quot;items&quot;: [&#xd;
					{&#xd;
						&quot;type&quot;: &quot;STEPS&quot;,&#xd;
						&quot;value&quot;: ${randomNumericFour},&#xd;
						&quot;provider&quot;: &quot;com.google.android.gms&quot;,&#xd;
						&quot;unit&quot;: &quot;COUNT&quot;&#xd;
					},&#xd;
					{&#xd;
						&quot;type&quot;: &quot;ACTIVE_ENERGY&quot;,&#xd;
						&quot;value&quot;: ${randomNumericFour},&#xd;
						&quot;provider&quot;: &quot;com.google.android.gms&quot;,&#xd;
						&quot;unit&quot;: &quot;KILOCALORIES&quot;&#xd;
					},&#xd;
					{&#xd;
						&quot;type&quot;: &quot;MEDITATION&quot;,&#xd;
						&quot;value&quot;: ${randomNumericTwo},&#xd;
						&quot;provider&quot;: &quot;com.getsomeheadspace.android&quot;,&#xd;
						&quot;unit&quot;: &quot;MINUTES&quot;&#xd;
					},&#xd;
					{&#xd;
						&quot;type&quot;: &quot;MEDITATION&quot;,&#xd;
						&quot;value&quot;: ${randomNumericTwo},&#xd;
						&quot;provider&quot;: &quot;com.calm.android&quot;,&#xd;
						&quot;unit&quot;: &quot;MINUTES&quot;&#xd;
					},&#xd;
					{&#xd;
						&quot;type&quot;: &quot;SLEEP_TOTAL&quot;,&#xd;
						&quot;provider&quot;: &quot;com.google.android.gms&quot;,&#xd;
						&quot;value&quot;: ${randomNumericTwo},&#xd;
						&quot;unit&quot;: &quot;HOURS&quot;&#xd;
					},&#xd;
					{&#xd;
						&quot;type&quot;: &quot;SLEEP_TOTAL&quot;,&#xd;
						&quot;provider&quot;: &quot;com.pzizz.android&quot;,&#xd;
						&quot;value&quot;: ${randomNumericTwo},&#xd;
						&quot;unit&quot;: &quot;HOURS&quot;&#xd;
					},&#xd;
					{&#xd;
						&quot;type&quot;: &quot;SLEEP_TOTAL&quot;,&#xd;
						&quot;provider&quot;: &quot;com.northcube.sleepcycle&quot;,&#xd;
						&quot;value&quot;: ${randomNumericTwo},&#xd;
						&quot;unit&quot;: &quot;HOURS&quot;&#xd;
					},&#xd;
					{&#xd;
						&quot;type&quot;: &quot;SLEEP_EFFICIENCY&quot;,&#xd;
						&quot;provider&quot;: &quot;com.pzizz.android&quot;,&#xd;
						&quot;value&quot;: ${randomNumericTwo},&#xd;
						&quot;unit&quot;: &quot;HOURS&quot;&#xd;
					},&#xd;
					{&#xd;
						&quot;type&quot;: &quot;SLEEP_REM&quot;,&#xd;
						&quot;provider&quot;: &quot;com.pzizz.android&quot;,&#xd;
						&quot;value&quot;: ${randomNumericTwo},&#xd;
						&quot;unit&quot;: &quot;HOURS&quot;&#xd;
					},&#xd;
					{&#xd;
						&quot;type&quot;: &quot;SLEEP_LIGHT&quot;,&#xd;
						&quot;provider&quot;: &quot;com.pzizz.android&quot;,&#xd;
						&quot;value&quot;: ${randomNumericTwo},&#xd;
						&quot;unit&quot;: &quot;HOURS&quot;&#xd;
					},&#xd;
					{&#xd;
						&quot;type&quot;: &quot;SLEEP_DEEP&quot;,&#xd;
						&quot;provider&quot;: &quot;com.pzizz.android&quot;,&#xd;
						&quot;value&quot;: ${randomNumericTwo},&#xd;
						&quot;unit&quot;: &quot;HOURS&quot;&#xd;
					},&#xd;
					{&#xd;
						&quot;type&quot;: &quot;WEIGHT&quot;,&#xd;
						&quot;provider&quot;: &quot;com.google.android.gms&quot;,&#xd;
						&quot;value&quot;: ${randomNumericTwo},&#xd;
						&quot;unit&quot;: &quot;KILOGRAMS&quot;&#xd;
					},&#xd;
					{&#xd;
						&quot;type&quot;: &quot;WEIGHT&quot;,&#xd;
						&quot;provider&quot;: &quot;com.fitbit.FitbitMobile&quot;,&#xd;
						&quot;value&quot;: ${randomNumericTwo},&#xd;
						&quot;unit&quot;: &quot;KILOGRAMS&quot;&#xd;
					},&#xd;
					{&#xd;
						&quot;type&quot;: &quot;WEIGHT&quot;,&#xd;
						&quot;provider&quot;: &quot;com.withings.wiscale2&quot;,&#xd;
						&quot;value&quot;: ${randomNumericTwo},&#xd;
						&quot;unit&quot;: &quot;KILOGRAMS&quot;&#xd;
					}&#xd;
				]&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">vitalitymobileservices/health_data/submit</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Token" elementType="Header">
                    <stringProp name="Header.name">Vitality-Token</stringProp>
                    <stringProp name="Header.value">${ar_Token}</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-App-Version" elementType="Header">
                    <stringProp name="Header.name">Vitality-App-Version</stringProp>
                    <stringProp name="Header.value">${mob.app.version}</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Language" elementType="Header">
                    <stringProp name="Header.name">Vitality-Language</stringProp>
                    <stringProp name="Header.value">en</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Device-Id" elementType="Header">
                    <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                    <stringProp name="Header.value">swagger-3f802407-77b4-407c-a758-842af5830c2b</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Local-Time" elementType="Header">
                    <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                    <stringProp name="Header.value">${__time(yyyy-MM-dd,)}</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-API-Version" elementType="Header">
                    <stringProp name="Header.name">Vitality-API-Version</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                    <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                    <stringProp name="Header.value">ANDROID</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Vitality-Client</stringProp>
                    <stringProp name="Header.value">VOL</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Health_Data/Upload: Tenant 46" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Auth Token" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="entity_no" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${crunchId}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">entity_no</stringProp>
                  </elementProp>
                  <elementProp name="encrypted_entity_no" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${crunchIdEncrypted}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">encrypted_entity_no</stringProp>
                  </elementProp>
                  <elementProp name="_p" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">IOS</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">_p</stringProp>
                  </elementProp>
                  <elementProp name="_v" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">10</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">_v</stringProp>
                  </elementProp>
                  <elementProp name="_doc_browser_context" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">_doc_browser_context</stringProp>
                  </elementProp>
                  <elementProp name="_c" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">CNH</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">_c</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${msPath}/auth/simulate_auth</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Active Rewards Token" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">ar_Token</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.session.token</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="LLT Assertion" enabled="false">
                <stringProp name="JSON_PATH">$.session.timeout</stringProp>
                <stringProp name="EXPECTED_VALUE">2280</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">false</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Encrypting Entity" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import java.security.MessageDigest;

MessageDigest digest = MessageDigest.getInstance(&quot;MD5&quot;);
byte[] bytes = digest.digest((&quot;${crunchId}&quot; + &quot;${msSalt}&quot;).getBytes());
vars.put(&quot;crunchIdEncrypted&quot;,javax.xml.bind.DatatypeConverter.printHexBinary(bytes).toLowerCase());</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Health_Data/Upload: Tenant 46" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;header&quot;: {&#xd;
		&quot;uploadDate&quot;: &quot;${dateToday}T00:00:00+03:00&quot;,&#xd;
		&quot;sessionId&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}&quot;,&#xd;
		&quot;user&quot;: {&#xd;
			&quot;entityNo&quot;: &quot;${crunchId}&quot;,&#xd;
			&quot;email&quot;: &quot;${randomString}@vitalitygroup.com&quot;,&#xd;
			&quot;partnerUserId&quot;: &quot;&quot;&#xd;
		},&#xd;
		&quot;partnerSystem&quot;: &quot;Apple&quot;,&#xd;
		&quot;rawUploadData&quot;: &quot;&quot;,&#xd;
		&quot;processingType&quot;: &quot;BATCH&quot;,&#xd;
		&quot;tenantId&quot;: &quot;46&quot;,&#xd;
		&quot;verified&quot;: &quot;true&quot;,&#xd;
		&quot;uploadCount&quot;: 1&#xd;
	},&#xd;
	&quot;device&quot;: {&#xd;
		&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
		&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
		&quot;deviceId&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}&quot;&#xd;
	},&#xd;
	&quot;readings&quot;: [&#xd;
		{&#xd;
			&quot;startTime&quot;: &quot;${dateToday}T00:00:00-05:00&quot;,&#xd;
			&quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00-05:00&quot;,&#xd;
			&quot;readingType&quot;: &quot;WALKING&quot;,&#xd;
			&quot;dataCategory&quot;: &quot;ROUTINE&quot;,&#xd;
			&quot;integrity&quot;: &quot;VERIFIED&quot;,&#xd;
			&quot;workout&quot;: {&#xd;
				&quot;energyExpenditure&quot;: {&#xd;
					&quot;unitOfMeasurement&quot;: &quot;KILOCALORIES&quot;,&#xd;
					&quot;value&quot;: ${randomNumericFour}&#xd;
				}&#xd;
			},&#xd;
			&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
			&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
			&quot;partnerReadingId&quot;: &quot;${dateToday}${randomAlphaNumericString}&quot;,&#xd;
			&quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
			&quot;duration&quot;: 86400&#xd;
		},&#xd;
		{&#xd;
			&quot;startTime&quot;: &quot;${dateToday}T00:00:00-05:00&quot;,&#xd;
			&quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00-05:00&quot;,&#xd;
			&quot;readingType&quot;: &quot;WEIGHT&quot;,&#xd;
			&quot;dataCategory&quot;: &quot;BIOMETRIC&quot;,&#xd;
			&quot;integrity&quot;: &quot;UNVERIFIED&quot;,&#xd;
			&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
			&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
			&quot;partnerReadingId&quot;: &quot;${dateToday}${randomAlphaNumericString}&quot;,&#xd;
			&quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
			&quot;healthData&quot;: {&#xd;
				&quot;weight&quot;: {&#xd;
					&quot;unitOfMeasurement&quot;: &quot;KILOGRAMS&quot;,&#xd;
					&quot;value&quot;: ${randomNumericFour}&#xd;
				}&#xd;
			}&#xd;
		}&#xd;
	]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Token" elementType="Header">
                    <stringProp name="Header.name">Vitality-Token</stringProp>
                    <stringProp name="Header.value">${ar_Token}</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-App-Version" elementType="Header">
                    <stringProp name="Header.name">Vitality-App-Version</stringProp>
                    <stringProp name="Header.value">${mob.app.version}</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Language" elementType="Header">
                    <stringProp name="Header.name">Vitality-Language</stringProp>
                    <stringProp name="Header.value">en</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Device-Id" elementType="Header">
                    <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                    <stringProp name="Header.value">swagger-3f802407-77b4-407c-a758-842af5830c2b</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Local-Time" elementType="Header">
                    <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                    <stringProp name="Header.value">${__time(yyyy-MM-dd,)}</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-API-Version" elementType="Header">
                    <stringProp name="Header.name">Vitality-API-Version</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                    <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                    <stringProp name="Header.value">IOS</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Vitality-Client</stringProp>
                    <stringProp name="Header.value">CNH</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1880474659">Successfully Uploaded Health Data to GDL</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Health_Data/Upload: Tenant 103" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Auth Token" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="entity_no" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${manulifeId}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">entity_no</stringProp>
                  </elementProp>
                  <elementProp name="encrypted_entity_no" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${manulifeIdEncrypted}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">encrypted_entity_no</stringProp>
                  </elementProp>
                  <elementProp name="_p" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">IOS</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">_p</stringProp>
                  </elementProp>
                  <elementProp name="_v" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${mob.app.version}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">_v</stringProp>
                  </elementProp>
                  <elementProp name="_doc_browser_context" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">_doc_browser_context</stringProp>
                  </elementProp>
                  <elementProp name="_c" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">MLI</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">_c</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${msPath}/auth/simulate_auth</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Active Rewards Token" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">ar_Token</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.session.token</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="LLT Assertion" enabled="false">
                <stringProp name="JSON_PATH">$.session.timeout</stringProp>
                <stringProp name="EXPECTED_VALUE">2280</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">false</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Encrypting Entity" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import java.security.MessageDigest;

MessageDigest digest = MessageDigest.getInstance(&quot;MD5&quot;);
byte[] bytes = digest.digest((&quot;${manulifeId}&quot; + &quot;${msSalt}&quot;).getBytes());
vars.put(&quot;manulifeIdEncrypted&quot;,javax.xml.bind.DatatypeConverter.printHexBinary(bytes).toLowerCase());</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Health_Data/Upload: Tenant 103" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;header&quot;: {&#xd;
		&quot;uploadDate&quot;: &quot;${dateToday}T00:00:00+03:00&quot;,&#xd;
		&quot;sessionId&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}&quot;,&#xd;
		&quot;user&quot;: {&#xd;
			&quot;entityNo&quot;: &quot;${manulifeId}&quot;,&#xd;
			&quot;email&quot;: &quot;${randomString}@vitalitygroup.com&quot;,&#xd;
			&quot;partnerUserId&quot;: &quot;&quot;&#xd;
		},&#xd;
		&quot;partnerSystem&quot;: &quot;Apple&quot;,&#xd;
		&quot;rawUploadData&quot;: &quot;&quot;,&#xd;
		&quot;processingType&quot;: &quot;BATCH&quot;,&#xd;
		&quot;tenantId&quot;: &quot;103&quot;,&#xd;
		&quot;verified&quot;: &quot;true&quot;,&#xd;
		&quot;uploadCount&quot;: 1&#xd;
	},&#xd;
	&quot;device&quot;: {&#xd;
		&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
		&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
		&quot;deviceId&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}&quot;&#xd;
	},&#xd;
	&quot;readings&quot;: [&#xd;
		{&#xd;
			&quot;startTime&quot;: &quot;${dateToday}T00:00:00-05:00&quot;,&#xd;
			&quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00-05:00&quot;,&#xd;
			&quot;readingType&quot;: &quot;WALKING&quot;,&#xd;
			&quot;dataCategory&quot;: &quot;ROUTINE&quot;,&#xd;
			&quot;integrity&quot;: &quot;VERIFIED&quot;,&#xd;
			&quot;workout&quot;: {&#xd;
				&quot;energyExpenditure&quot;: {&#xd;
					&quot;unitOfMeasurement&quot;: &quot;KILOCALORIES&quot;,&#xd;
					&quot;value&quot;: ${randomNumericFour}&#xd;
				}&#xd;
			},&#xd;
			&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
			&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
			&quot;partnerReadingId&quot;: &quot;${dateToday}${randomAlphaNumericString}&quot;,&#xd;
			&quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
			&quot;duration&quot;: 86400&#xd;
		},&#xd;
		{&#xd;
			&quot;startTime&quot;: &quot;${dateToday}T00:00:00-05:00&quot;,&#xd;
			&quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00-05:00&quot;,&#xd;
			&quot;readingType&quot;: &quot;WEIGHT&quot;,&#xd;
			&quot;dataCategory&quot;: &quot;BIOMETRIC&quot;,&#xd;
			&quot;integrity&quot;: &quot;UNVERIFIED&quot;,&#xd;
			&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
			&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
			&quot;partnerReadingId&quot;: &quot;${dateToday}${randomAlphaNumericString}&quot;,&#xd;
			&quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
			&quot;healthData&quot;: {&#xd;
				&quot;weight&quot;: {&#xd;
					&quot;unitOfMeasurement&quot;: &quot;KILOGRAMS&quot;,&#xd;
					&quot;value&quot;: ${randomNumericFour}&#xd;
				}&#xd;
			}&#xd;
		}&#xd;
	]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Token" elementType="Header">
                    <stringProp name="Header.name">Vitality-Token</stringProp>
                    <stringProp name="Header.value">${ar_Token}</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-App-Version" elementType="Header">
                    <stringProp name="Header.name">Vitality-App-Version</stringProp>
                    <stringProp name="Header.value">${mob.app.version}</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Language" elementType="Header">
                    <stringProp name="Header.name">Vitality-Language</stringProp>
                    <stringProp name="Header.value">en</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Device-Id" elementType="Header">
                    <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                    <stringProp name="Header.value">swagger-3f802407-77b4-407c-a758-842af5830c2b</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Local-Time" elementType="Header">
                    <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                    <stringProp name="Header.value">${__time(yyyy-MM-dd,)}</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-API-Version" elementType="Header">
                    <stringProp name="Header.name">Vitality-API-Version</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                    <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                    <stringProp name="Header.value">IOS</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Vitality-Client</stringProp>
                    <stringProp name="Header.value">MLI</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1880474659">Successfully Uploaded Health Data to GDL</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SOAP: Send Data to Active Register " enabled="false"/>
        <hashTree>
          <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${msBase}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">tibcoservices/sendTransportBridgeMessageToTVGService</stringProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout">30000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">300000</stringProp>
          </ConfigTestElement>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip,deflate</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/xml;charset=UTF-8</stringProp>
              </elementProp>
              <elementProp name="SOAPAction" elementType="Header">
                <stringProp name="Header.name">SOAPAction</stringProp>
                <stringProp name="Header.value">&quot;/SendTransportBridgeMessageToTVGService/SendTransportBridgeMessageToTVGOp&quot;</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="SOAP Send Calories: Tenant 38" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SOAP: Weight" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://schemas.vitalitytibcoservices.com/vts/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:genericTBMRequest&gt;&#xd;
         &lt;v1:messageType&gt;xml&lt;/v1:messageType&gt;&#xd;
         &lt;v1:destinationTopic&gt;${tibcoGDLQueue}&lt;/v1:destinationTopic&gt;&#xd;
		&lt;ns2:DeviceUpload  xmlns:ns2=&quot;http://schemas.discovery.co.za/vitality&quot;&gt;&#xd;
		&lt;ns2:header&gt;&#xd;
			&lt;ns2:user&gt;&#xd;
				&lt;entityNo&gt;${volId}&lt;/entityNo&gt;&#xd;
			&lt;/ns2:user&gt;&#xd;
			&lt;ns2:uploadDate&gt;${dateToday}T11:23:33.176Z&lt;/ns2:uploadDate&gt;&#xd;
			&lt;ns2:sessionId&gt;${randomAlphaNumericString}-${randomAlphaNumericString}&lt;/ns2:sessionId&gt;&#xd;
			&lt;ns2:gdlSessionId&gt;${randomNumericString}&lt;/ns2:gdlSessionId&gt;&#xd;
			&lt;ns2:partnerSystem&gt;Apple&lt;/ns2:partnerSystem&gt;&#xd;
			&lt;ns2:verified&gt;false&lt;/ns2:verified&gt;&#xd;
			&lt;ns2:uploadCount&gt;0&lt;/ns2:uploadCount&gt;&#xd;
			&lt;ns2:tenantId&gt;38&lt;/ns2:tenantId&gt;&#xd;
			&lt;ns2:processingType&gt;REALTIME&lt;/ns2:processingType&gt;&#xd;
			&lt;ns2:rawUploadData&gt;NOT REQUIRED&lt;/ns2:rawUploadData&gt;&#xd;
		&lt;/ns2:header&gt;&#xd;
&#xd;
		&lt;ns2:device&gt;&#xd;
			&lt;manufacturer&gt;Apple&lt;/manufacturer&gt;&#xd;
			&lt;model&gt;iOS 13.0&lt;/model&gt;&#xd;
		&lt;/ns2:device&gt;&#xd;
&#xd;
		&lt;ns2:readings&gt;&#xd;
			&lt;startTime&gt;${dateToday}T00:00:00.000+03:00&lt;/startTime&gt;&#xd;
			&lt;endTime&gt;${dateTomorrow}T00:00:00.000+03:00&lt;/endTime&gt;&#xd;
			&lt;duration&gt;86400&lt;/duration&gt;&#xd;
			&lt;partnerSystemSource&gt;Apple Health&lt;/partnerSystemSource&gt;&#xd;
&#xd;
			&lt;readingId&gt;${randomNumericString}&lt;/readingId&gt;&#xd;
			&lt;partnerReadingId&gt;${randomAlphaNumericString}-${randomAlphaNumericString}&lt;/partnerReadingId&gt;&#xd;
			&lt;readingType&gt;UNKNOWN&lt;/readingType&gt;&#xd;
			&lt;dataCategory&gt;BIOMETRIC&lt;/dataCategory&gt;&#xd;
			&lt;integrity&gt;UNVERIFIED&lt;/integrity&gt;&#xd;
			&lt;isDuplicate&gt;0&lt;/isDuplicate&gt;&#xd;
			&lt;isValid&gt;1&lt;/isValid&gt;&#xd;
			&lt;isActive&gt;1&lt;/isActive&gt;&#xd;
			&lt;aggregationId&gt;${randomNumericString}&lt;/aggregationId&gt;&#xd;
			&lt;workout&gt;&#xd;
				&lt;partnerActivityType&gt;WEIGHT&lt;/partnerActivityType&gt;&#xd;
				&lt;heartRate/&gt;&#xd;
			&lt;/workout&gt;&#xd;
			&lt;healthData&gt;&#xd;
				&lt;weight&gt;&#xd;
				&lt;value&gt;40&lt;/value&gt;&#xd;
				&lt;unitOfMeasurement&gt;KILOGRAMS&lt;/unitOfMeasurement&gt;&#xd;
				&lt;/weight&gt;&#xd;
			&lt;heartRate/&gt;&lt;/healthData&gt;&#xd;
		&lt;/ns2:readings&gt;&#xd;
		&lt;/ns2:DeviceUpload&gt;&#xd;
      &lt;/v1:genericTBMRequest&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SOAP: Calories" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://schemas.vitalitytibcoservices.com/vts/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:genericTBMRequest&gt;&#xd;
         &lt;v1:messageType&gt;xml&lt;/v1:messageType&gt;&#xd;
         &lt;v1:destinationTopic&gt;${tibcoGDLQueue}&lt;/v1:destinationTopic&gt;&#xd;
		&lt;ns2:DeviceUpload  xmlns:ns2=&quot;http://schemas.discovery.co.za/vitality&quot;&gt;&#xd;
		&lt;ns2:header&gt;&#xd;
			&lt;ns2:user&gt;&#xd;
				&lt;entityNo&gt;${volId}&lt;/entityNo&gt;&#xd;
			&lt;/ns2:user&gt;&#xd;
			&lt;ns2:uploadDate&gt;${dateToday}T11:23:33.176Z&lt;/ns2:uploadDate&gt;&#xd;
			&lt;ns2:sessionId&gt;${randomAlphaNumericString}-${randomAlphaNumericString}&lt;/ns2:sessionId&gt;&#xd;
			&lt;ns2:gdlSessionId&gt;${randomNumericString}&lt;/ns2:gdlSessionId&gt;&#xd;
			&lt;ns2:partnerSystem&gt;Apple&lt;/ns2:partnerSystem&gt;&#xd;
			&lt;ns2:verified&gt;true&lt;/ns2:verified&gt;&#xd;
			&lt;ns2:uploadCount&gt;0&lt;/ns2:uploadCount&gt;&#xd;
			&lt;ns2:tenantId&gt;38&lt;/ns2:tenantId&gt;&#xd;
			&lt;ns2:processingType&gt;BATCH&lt;/ns2:processingType&gt;&#xd;
			&lt;ns2:rawUploadData&gt;NOT REQUIRED&lt;/ns2:rawUploadData&gt;&#xd;
		&lt;/ns2:header&gt;&#xd;
&#xd;
		&lt;ns2:device&gt;&#xd;
			&lt;manufacturer&gt;Apple&lt;/manufacturer&gt;&#xd;
			&lt;model&gt;iOS 13.0&lt;/model&gt;&#xd;
		&lt;/ns2:device&gt;&#xd;
&#xd;
		&lt;ns2:readings&gt;&#xd;
			&lt;startTime&gt;${dateToday}T00:00:00.000+03:00&lt;/startTime&gt;&#xd;
			&lt;endTime&gt;${dateTomorrow}T00:00:00.000+03:00&lt;/endTime&gt;&#xd;
			&lt;duration&gt;86400&lt;/duration&gt;&#xd;
			&lt;readingId&gt;${randomNumericString}&lt;/readingId&gt;&#xd;
			&lt;partnerReadingId&gt;${randomAlphaNumericString}-${randomAlphaNumericString}&lt;/partnerReadingId&gt;&#xd;
			&lt;readingType&gt;WALKING&lt;/readingType&gt;&#xd;
			&lt;dataCategory&gt;ROUTINE&lt;/dataCategory&gt;&#xd;
			&lt;integrity&gt;VERIFIED&lt;/integrity&gt;&#xd;
			&lt;isDuplicate&gt;0&lt;/isDuplicate&gt;&#xd;
			&lt;isValid&gt;1&lt;/isValid&gt;&#xd;
			&lt;isActive&gt;1&lt;/isActive&gt;&#xd;
			&lt;aggregationId&gt;${randomNumericString}&lt;/aggregationId&gt;&#xd;
		&lt;workout&gt;&#xd;
			&lt;partnerActivityType&gt;WALKING&lt;/partnerActivityType&gt;&#xd;
			&lt;energyExpenditure&gt;&#xd;
				&lt;value&gt;400&lt;/value&gt;&#xd;
				&lt;unitOfMeasurement&gt;KILOJOULES&lt;/unitOfMeasurement&gt;&#xd;
			&lt;/energyExpenditure&gt;&lt;heartRate/&gt;&#xd;
		&lt;/workout&gt;&#xd;
		&lt;/ns2:readings&gt;&#xd;
		&lt;/ns2:DeviceUpload&gt;&#xd;
      &lt;/v1:genericTBMRequest&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SOAP: Steps" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://schemas.vitalitytibcoservices.com/vts/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:genericTBMRequest&gt;&#xd;
         &lt;v1:messageType&gt;xml&lt;/v1:messageType&gt;&#xd;
         &lt;v1:destinationTopic&gt;${tibcoGDLQueue}&lt;/v1:destinationTopic&gt;&#xd;
		&lt;ns2:DeviceUpload  xmlns:ns2=&quot;http://schemas.discovery.co.za/vitality&quot;&gt;&#xd;
		&lt;ns2:header&gt;&#xd;
			&lt;ns2:user&gt;&#xd;
				&lt;entityNo&gt;${volId}&lt;/entityNo&gt;&#xd;
			&lt;/ns2:user&gt;&#xd;
			&lt;ns2:uploadDate&gt;${dateToday}T11:23:33.176Z&lt;/ns2:uploadDate&gt;&#xd;
			&lt;ns2:sessionId&gt;${randomAlphaNumericString}-${randomAlphaNumericString}&lt;/ns2:sessionId&gt;&#xd;
			&lt;ns2:gdlSessionId&gt;${randomNumericString}&lt;/ns2:gdlSessionId&gt;&#xd;
			&lt;ns2:partnerSystem&gt;Apple&lt;/ns2:partnerSystem&gt;&#xd;
			&lt;ns2:verified&gt;true&lt;/ns2:verified&gt;&#xd;
			&lt;ns2:uploadCount&gt;0&lt;/ns2:uploadCount&gt;&#xd;
			&lt;ns2:tenantId&gt;38&lt;/ns2:tenantId&gt;&#xd;
			&lt;ns2:processingType&gt;REALTIME&lt;/ns2:processingType&gt;&#xd;
			&lt;ns2:rawUploadData&gt;NOT REQUIRED&lt;/ns2:rawUploadData&gt;&#xd;
		&lt;/ns2:header&gt;&#xd;
		&#xd;
		&lt;ns2:device&gt;&#xd;
			&lt;manufacturer&gt;Apple&lt;/manufacturer&gt;&#xd;
			&lt;model&gt;iOS 13.0&lt;/model&gt;&#xd;
		&lt;/ns2:device&gt;&#xd;
		&#xd;
		&lt;ns2:readings&gt;&#xd;
			&lt;startTime&gt;${dateToday}T00:00:00.000+03:00&lt;/startTime&gt;&#xd;
			&lt;endTime&gt;${dateTomorrow}T00:00:00.000+03:00&lt;/endTime&gt;&#xd;
			&lt;duration&gt;86400&lt;/duration&gt;&#xd;
			&lt;manufacturer&gt;Apple&lt;/manufacturer&gt;&#xd;
			&lt;model&gt;iOS 13.0&lt;/model&gt;&#xd;
			&lt;readingId&gt;${randomNumericString}&lt;/readingId&gt;&#xd;
			&lt;partnerReadingId&gt;${randomAlphaNumericString}-${randomAlphaNumericString}&lt;/partnerReadingId&gt;&#xd;
			&lt;readingType&gt;WALKING&lt;/readingType&gt;&#xd;
			&lt;dataCategory&gt;ROUTINE&lt;/dataCategory&gt;&#xd;
			&lt;integrity&gt;VERIFIED&lt;/integrity&gt;&#xd;
			&lt;isDuplicate&gt;0&lt;/isDuplicate&gt;&#xd;
			&lt;isValid&gt;1&lt;/isValid&gt;&#xd;
			&lt;aggregationId&gt;${randomNumericString}&lt;/aggregationId&gt;&#xd;
				&lt;healthData&gt;&#xd;
				&lt;heartRate/&gt;&#xd;
				&lt;/healthData&gt;&#xd;
				&lt;workout&gt;&#xd;
					&lt;totalSteps&gt;20000&lt;/totalSteps&gt;&#xd;
				&lt;partnerActivityType&gt;WALKING&lt;/partnerActivityType&gt;&#xd;
				&lt;heartRate/&gt;&#xd;
				&lt;/workout&gt;&#xd;
		&lt;/ns2:readings&gt;&#xd;
		&lt;/ns2:DeviceUpload&gt;&#xd;
      &lt;/v1:genericTBMRequest&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-202516509">Success</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="SOAP Send Calories: Tenant 2" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SOAP: Weight" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://schemas.vitalitytibcoservices.com/vts/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:genericTBMRequest&gt;&#xd;
         &lt;v1:messageType&gt;xml&lt;/v1:messageType&gt;&#xd;
         &lt;v1:destinationTopic&gt;${tibcoGDLQueue}&lt;/v1:destinationTopic&gt;&#xd;
		&lt;ns2:DeviceUpload  xmlns:ns2=&quot;http://schemas.discovery.co.za/vitality&quot;&gt;&#xd;
		&lt;ns2:header&gt;&#xd;
			&lt;ns2:user&gt;&#xd;
				&lt;entityNo&gt;1409713243&lt;/entityNo&gt;&#xd;
			&lt;/ns2:user&gt;&#xd;
			&lt;ns2:uploadDate&gt;${dateToday}T11:23:33.176Z&lt;/ns2:uploadDate&gt;&#xd;
			&lt;ns2:sessionId&gt;${randomAlphaNumericString}-${randomAlphaNumericString}&lt;/ns2:sessionId&gt;&#xd;
			&lt;ns2:gdlSessionId&gt;${randomNumericString}&lt;/ns2:gdlSessionId&gt;&#xd;
			&lt;ns2:partnerSystem&gt;Apple&lt;/ns2:partnerSystem&gt;&#xd;
			&lt;ns2:verified&gt;false&lt;/ns2:verified&gt;&#xd;
			&lt;ns2:uploadCount&gt;0&lt;/ns2:uploadCount&gt;&#xd;
			&lt;ns2:tenantId&gt;2&lt;/ns2:tenantId&gt;&#xd;
			&lt;ns2:processingType&gt;REALTIME&lt;/ns2:processingType&gt;&#xd;
			&lt;ns2:rawUploadData&gt;NOT REQUIRED&lt;/ns2:rawUploadData&gt;&#xd;
		&lt;/ns2:header&gt;&#xd;
&#xd;
		&lt;ns2:device&gt;&#xd;
			&lt;manufacturer&gt;Apple&lt;/manufacturer&gt;&#xd;
			&lt;model&gt;iOS 13.0&lt;/model&gt;&#xd;
		&lt;/ns2:device&gt;&#xd;
&#xd;
		&lt;ns2:readings&gt;&#xd;
			&lt;startTime&gt;${dateToday}T00:00:00.000+03:00&lt;/startTime&gt;&#xd;
			&lt;endTime&gt;${dateTomorrow}T00:00:00.000+03:00&lt;/endTime&gt;&#xd;
			&lt;duration&gt;86400&lt;/duration&gt;&#xd;
			&lt;partnerSystemSource&gt;Apple Health&lt;/partnerSystemSource&gt;&#xd;
&#xd;
			&lt;readingId&gt;${randomNumericString}&lt;/readingId&gt;&#xd;
			&lt;partnerReadingId&gt;${randomAlphaNumericString}-${randomAlphaNumericString}&lt;/partnerReadingId&gt;&#xd;
			&lt;readingType&gt;UNKNOWN&lt;/readingType&gt;&#xd;
			&lt;dataCategory&gt;BIOMETRIC&lt;/dataCategory&gt;&#xd;
			&lt;integrity&gt;UNVERIFIED&lt;/integrity&gt;&#xd;
			&lt;isDuplicate&gt;0&lt;/isDuplicate&gt;&#xd;
			&lt;isValid&gt;1&lt;/isValid&gt;&#xd;
			&lt;isActive&gt;1&lt;/isActive&gt;&#xd;
			&lt;aggregationId&gt;${randomNumericString}&lt;/aggregationId&gt;&#xd;
			&lt;workout&gt;&#xd;
				&lt;partnerActivityType&gt;WEIGHT&lt;/partnerActivityType&gt;&#xd;
				&lt;heartRate/&gt;&#xd;
			&lt;/workout&gt;&#xd;
			&lt;healthData&gt;&#xd;
				&lt;weight&gt;&#xd;
				&lt;value&gt;2147483647&lt;/value&gt;&#xd;
				&lt;unitOfMeasurement&gt;KILOGRAMS&lt;/unitOfMeasurement&gt;&#xd;
				&lt;/weight&gt;&#xd;
			&lt;heartRate/&gt;&lt;/healthData&gt;&#xd;
		&lt;/ns2:readings&gt;&#xd;
		&lt;/ns2:DeviceUpload&gt;&#xd;
      &lt;/v1:genericTBMRequest&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SOAP: Calories" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://schemas.vitalitytibcoservices.com/vts/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:genericTBMRequest&gt;&#xd;
         &lt;v1:messageType&gt;xml&lt;/v1:messageType&gt;&#xd;
         &lt;v1:destinationTopic&gt;${tibcoGDLQueue}&lt;/v1:destinationTopic&gt;&#xd;
		&lt;ns2:DeviceUpload  xmlns:ns2=&quot;http://schemas.discovery.co.za/vitality&quot;&gt;&#xd;
		&lt;ns2:header&gt;&#xd;
			&lt;ns2:user&gt;&#xd;
				&lt;entityNo&gt;1409713243&lt;/entityNo&gt;&#xd;
			&lt;/ns2:user&gt;&#xd;
			&lt;ns2:uploadDate&gt;${dateToday}T11:23:33.176Z&lt;/ns2:uploadDate&gt;&#xd;
			&lt;ns2:sessionId&gt;${randomAlphaNumericString}-${randomAlphaNumericString}&lt;/ns2:sessionId&gt;&#xd;
			&lt;ns2:gdlSessionId&gt;${randomNumericString}&lt;/ns2:gdlSessionId&gt;&#xd;
			&lt;ns2:partnerSystem&gt;Apple&lt;/ns2:partnerSystem&gt;&#xd;
			&lt;ns2:verified&gt;true&lt;/ns2:verified&gt;&#xd;
			&lt;ns2:uploadCount&gt;0&lt;/ns2:uploadCount&gt;&#xd;
			&lt;ns2:tenantId&gt;2&lt;/ns2:tenantId&gt;&#xd;
			&lt;ns2:processingType&gt;BATCH&lt;/ns2:processingType&gt;&#xd;
			&lt;ns2:rawUploadData&gt;NOT REQUIRED&lt;/ns2:rawUploadData&gt;&#xd;
		&lt;/ns2:header&gt;&#xd;
&#xd;
		&lt;ns2:device&gt;&#xd;
			&lt;manufacturer&gt;Apple&lt;/manufacturer&gt;&#xd;
			&lt;model&gt;iOS 13.0&lt;/model&gt;&#xd;
		&lt;/ns2:device&gt;&#xd;
&#xd;
		&lt;ns2:readings&gt;&#xd;
			&lt;startTime&gt;${dateToday}T00:00:00.000+03:00&lt;/startTime&gt;&#xd;
			&lt;endTime&gt;${dateTomorrow}T00:00:00.000+03:00&lt;/endTime&gt;&#xd;
			&lt;duration&gt;86400&lt;/duration&gt;&#xd;
			&lt;readingId&gt;${randomNumericString}&lt;/readingId&gt;&#xd;
			&lt;partnerReadingId&gt;${randomAlphaNumericString}-${randomAlphaNumericString}&lt;/partnerReadingId&gt;&#xd;
			&lt;readingType&gt;WALKING&lt;/readingType&gt;&#xd;
			&lt;dataCategory&gt;ROUTINE&lt;/dataCategory&gt;&#xd;
			&lt;integrity&gt;VERIFIED&lt;/integrity&gt;&#xd;
			&lt;isDuplicate&gt;0&lt;/isDuplicate&gt;&#xd;
			&lt;isValid&gt;1&lt;/isValid&gt;&#xd;
			&lt;isActive&gt;1&lt;/isActive&gt;&#xd;
			&lt;aggregationId&gt;${randomNumericString}&lt;/aggregationId&gt;&#xd;
		&lt;workout&gt;&#xd;
			&lt;partnerActivityType&gt;WALKING&lt;/partnerActivityType&gt;&#xd;
			&lt;energyExpenditure&gt;&#xd;
				&lt;value&gt;2147483647&lt;/value&gt;&#xd;
				&lt;unitOfMeasurement&gt;KILOJOULES&lt;/unitOfMeasurement&gt;&#xd;
			&lt;/energyExpenditure&gt;&lt;heartRate/&gt;&#xd;
		&lt;/workout&gt;&#xd;
		&lt;/ns2:readings&gt;&#xd;
		&lt;/ns2:DeviceUpload&gt;&#xd;
      &lt;/v1:genericTBMRequest&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SOAP: Steps" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://schemas.vitalitytibcoservices.com/vts/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:genericTBMRequest&gt;&#xd;
         &lt;v1:messageType&gt;xml&lt;/v1:messageType&gt;&#xd;
         &lt;v1:destinationTopic&gt;${tibcoGDLQueue}&lt;/v1:destinationTopic&gt;&#xd;
		&lt;ns2:DeviceUpload  xmlns:ns2=&quot;http://schemas.discovery.co.za/vitality&quot;&gt;&#xd;
		&lt;ns2:header&gt;&#xd;
			&lt;ns2:user&gt;&#xd;
				&lt;entityNo&gt;1409713243&lt;/entityNo&gt;&#xd;
			&lt;/ns2:user&gt;&#xd;
			&lt;ns2:uploadDate&gt;${dateToday}T11:23:33.176Z&lt;/ns2:uploadDate&gt;&#xd;
			&lt;ns2:sessionId&gt;${randomAlphaNumericString}-${randomAlphaNumericString}&lt;/ns2:sessionId&gt;&#xd;
			&lt;ns2:gdlSessionId&gt;${randomNumericString}&lt;/ns2:gdlSessionId&gt;&#xd;
			&lt;ns2:partnerSystem&gt;Apple&lt;/ns2:partnerSystem&gt;&#xd;
			&lt;ns2:verified&gt;true&lt;/ns2:verified&gt;&#xd;
			&lt;ns2:uploadCount&gt;0&lt;/ns2:uploadCount&gt;&#xd;
			&lt;ns2:tenantId&gt;2&lt;/ns2:tenantId&gt;&#xd;
			&lt;ns2:processingType&gt;REALTIME&lt;/ns2:processingType&gt;&#xd;
			&lt;ns2:rawUploadData&gt;NOT REQUIRED&lt;/ns2:rawUploadData&gt;&#xd;
		&lt;/ns2:header&gt;&#xd;
		&#xd;
		&lt;ns2:device&gt;&#xd;
			&lt;manufacturer&gt;Apple&lt;/manufacturer&gt;&#xd;
			&lt;model&gt;iOS 13.0&lt;/model&gt;&#xd;
		&lt;/ns2:device&gt;&#xd;
		&#xd;
		&lt;ns2:readings&gt;&#xd;
			&lt;startTime&gt;${dateToday}T00:00:00.000+03:00&lt;/startTime&gt;&#xd;
			&lt;endTime&gt;${dateTomorrow}T00:00:00.000+03:00&lt;/endTime&gt;&#xd;
			&lt;duration&gt;86400&lt;/duration&gt;&#xd;
			&lt;manufacturer&gt;Apple&lt;/manufacturer&gt;&#xd;
			&lt;model&gt;iOS 13.0&lt;/model&gt;&#xd;
			&lt;readingId&gt;${randomNumericString}&lt;/readingId&gt;&#xd;
			&lt;partnerReadingId&gt;${randomAlphaNumericString}-${randomAlphaNumericString}&lt;/partnerReadingId&gt;&#xd;
			&lt;readingType&gt;WALKING&lt;/readingType&gt;&#xd;
			&lt;dataCategory&gt;ROUTINE&lt;/dataCategory&gt;&#xd;
			&lt;integrity&gt;VERIFIED&lt;/integrity&gt;&#xd;
			&lt;isDuplicate&gt;0&lt;/isDuplicate&gt;&#xd;
			&lt;isValid&gt;1&lt;/isValid&gt;&#xd;
			&lt;aggregationId&gt;${randomNumericString}&lt;/aggregationId&gt;&#xd;
				&lt;healthData&gt;&#xd;
				&lt;heartRate/&gt;&#xd;
				&lt;/healthData&gt;&#xd;
				&lt;workout&gt;&#xd;
					&lt;totalSteps&gt;2147483648&lt;/totalSteps&gt;&#xd;
				&lt;partnerActivityType&gt;WALKING&lt;/partnerActivityType&gt;&#xd;
				&lt;heartRate/&gt;&#xd;
				&lt;/workout&gt;&#xd;
		&lt;/ns2:readings&gt;&#xd;
		&lt;/ns2:DeviceUpload&gt;&#xd;
      &lt;/v1:genericTBMRequest&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-202516509">Success</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="VDP: Verify That Data was recieved" enabled="false"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST OLD GDL Token" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="reference" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1439901131</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">reference</stringProp>
                </elementProp>
                <elementProp name="tenantId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">38</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">tenantId</stringProp>
                </elementProp>
                <elementProp name="grantType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">clientCredentials</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">grantType</stringProp>
                </elementProp>
                <elementProp name="clientId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">78600</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">clientId</stringProp>
                </elementProp>
                <elementProp name="clientSecret" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">c2Vuem9tYWxpbmdh</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">clientSecret</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${vslBase}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">serviceapi/TokenManager/Token</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-vsl-timestamp</stringProp>
                  <stringProp name="Header.value">${timeStamp}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="x-vsl-version" elementType="Header">
                  <stringProp name="Header.name">x-vsl-version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="x-vsl-sourcetype" elementType="Header">
                  <stringProp name="Header.name">x-vsl-sourcetype</stringProp>
                  <stringProp name="Header.value">GDL</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, application/*+json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">104</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="apiAccessToken" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">gdlToken</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.payload.content.authDetails.accessToken</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract userEntity" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">as_document</stringProp>
              <stringProp name="RegexExtractor.refname">userEntity</stringProp>
              <stringProp name="RegexExtractor.regex">&amp;reference=(.*?)</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ReGex: tenant" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">request_headers</stringProp>
              <stringProp name="RegexExtractor.refname">userHF</stringProp>
              <stringProp name="RegexExtractor.regex">.*</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <stringProp name="Scope.variable"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Veirfy Data recieved by VDP: Routine" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="entityNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1439901131</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">entityNo</stringProp>
                </elementProp>
                <elementProp name="dataCategories" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">Routine</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">dataCategories</stringProp>
                </elementProp>
                <elementProp name="startDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">2019-12-10</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">startDate</stringProp>
                </elementProp>
                <elementProp name="endDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">2019-12-10</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">endDate</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${vslBase}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">deviceapi/Device/HistoryTracker</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="x-vsl-sourcetype" elementType="Header">
                  <stringProp name="Header.name">x-vsl-sourcetype</stringProp>
                  <stringProp name="Header.value">GDL</stringProp>
                </elementProp>
                <elementProp name="x-vsl-timestamp" elementType="Header">
                  <stringProp name="Header.name">x-vsl-timestamp</stringProp>
                  <stringProp name="Header.value">${timeStamp}</stringProp>
                </elementProp>
                <elementProp name="x-vsl-version" elementType="Header">
                  <stringProp name="Header.name">x-vsl-version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">x-vsl-token</stringProp>
                  <stringProp name="Header.value">${gdlToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">dataCategory</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.payload.content.historyTracker.dataCategory</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-45891473">successfully retrieved</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Veirfy Data recieved by VDP: Biometric" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="entityNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1439901131</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">entityNo</stringProp>
                </elementProp>
                <elementProp name="dataCategories" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">Biometric</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">dataCategories</stringProp>
                </elementProp>
                <elementProp name="startDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">2019-12-10</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">startDate</stringProp>
                </elementProp>
                <elementProp name="endDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">2019-12-10</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">endDate</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${vslBase}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">deviceapi/Device/HistoryTracker</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="x-vsl-sourcetype" elementType="Header">
                  <stringProp name="Header.name">x-vsl-sourcetype</stringProp>
                  <stringProp name="Header.value">GDL</stringProp>
                </elementProp>
                <elementProp name="x-vsl-timestamp" elementType="Header">
                  <stringProp name="Header.name">x-vsl-timestamp</stringProp>
                  <stringProp name="Header.value">${timeStamp}</stringProp>
                </elementProp>
                <elementProp name="x-vsl-version" elementType="Header">
                  <stringProp name="Header.name">x-vsl-version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">x-vsl-token</stringProp>
                  <stringProp name="Header.value">${gdlToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">dataCategory</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.payload.content.historyTracker.dataCategory</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-45891473">successfully retrieved</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Vindicia" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1514078571000</longProp>
        <longProp name="ThreadGroup.end_time">1514078571000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">600</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Vindicia Reporting" enabled="true"/>
        <hashTree>
          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
            <collectionProp name="CookieManager.cookies"/>
            <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          </CookieManager>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.9,ru;q=0.8,uk;q=0.7,de;q=0.6,la;q=0.5</stringProp>
              </elementProp>
              <elementProp name="Cache-Control" elementType="Header">
                <stringProp name="Header.name">Cache-Control</stringProp>
                <stringProp name="Header.value">max-age=0</stringProp>
              </elementProp>
              <elementProp name="Connection" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
              <elementProp name="Content-Length" elementType="Header">
                <stringProp name="Header.name">Content-Length</stringProp>
                <stringProp name="Header.value">155</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
              </elementProp>
              <elementProp name="Cookie" elementType="Header">
                <stringProp name="Header.name">Cookie</stringProp>
                <stringProp name="Header.value">__utmc=240660225; __utmz=240660225.1556032613.1.1.utmcsr=(direct)|utmccn=(direct)|utmcmd=(none); _ga=GA1.2.1345201611.1556032613; __utmv=240660225.|1=Merchant=Vitality%20Group=1; sid-cookie=0eTZyn5g33dEUC0E; __utma=240660225.1345201611.1556032613.1567445558.1568407251.79; csrf_nonce=d1396111cc844eaf118a2b531d6ac9be03a04dbe</stringProp>
              </elementProp>
              <elementProp name="Host" elementType="Header">
                <stringProp name="Header.name">Host</stringProp>
                <stringProp name="Header.value">secure.vindicia.com</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">https://secure.vindicia.com</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://secure.vindicia.com/login/secure/index.html</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Mode" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                <stringProp name="Header.value">navigate</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-Site" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                <stringProp name="Header.value">same-origin</stringProp>
              </elementProp>
              <elementProp name="Sec-Fetch-User" elementType="Header">
                <stringProp name="Header.name">Sec-Fetch-User</stringProp>
                <stringProp name="Header.value">?1</stringProp>
              </elementProp>
              <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.132 Safari/537.36</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Vindicia: Login" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="form-name" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">login</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">form-name</stringProp>
                </elementProp>
                <elementProp name="login-login" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">dnesterov@thevitalitygroup.com</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">login-login</stringProp>
                </elementProp>
                <elementProp name="login-password" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">UI4KFVYX</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">login-password</stringProp>
                </elementProp>
                <elementProp name="csrf_nonce" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">d1396111cc844eaf118a2b531d6ac9be03a04dbe</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">csrf_nonce</stringProp>
                </elementProp>
                <elementProp name="login-submit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">Login</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">login-submit</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">secure.vindicia.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">login/secure/index.html</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-574512894">Vindicia Internal Access</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Vindicia: Generate Download Report" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="report_name" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">027-outstanding-credits</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">report_name</stringProp>
                </elementProp>
                <elementProp name="sortColumn" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">sortColumn</stringProp>
                </elementProp>
                <elementProp name="merchant_entity_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">3507554553</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">merchant_entity_id</stringProp>
                </elementProp>
                <elementProp name="format" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">doHTML</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">format</stringProp>
                </elementProp>
                <elementProp name="search_merchant_customer_identifier" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">search_merchant_customer_identifier</stringProp>
                </elementProp>
                <elementProp name="alphabetic_code" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">alphabetic_code</stringProp>
                </elementProp>
                <elementProp name="hideColumn" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">CUSTOMER_IDENTIFIER,CUSTOMER_NAME,AUTOBILL_IDENTIFIER,GRANTED_ON,CREDIT_BALANCE,TYPE,GRANT_DATE,ORIG_AMOUNT,DESCRIPTION,REASON,AFFILIATE_ID,SUB_AFFILIATE_ID</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">hideColumn</stringProp>
                </elementProp>
                <elementProp name="action" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">csv</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">action</stringProp>
                </elementProp>
                <elementProp name="search_affiliate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1429100447</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">search_affiliate</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">secure.vindicia.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">login/secure/reports/cashbox/transaction/report.html</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import org.apache.commons.io.FileUtils;
FileUtils.writeByteArrayToFile(new File(&quot;/Users/DNesterov/apache-jmeter-4.0/OutstandingCredits_${dateToday}.csv&quot;),data);</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Vindicia" enabled="false"/>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV: test data" enabled="true">
            <stringProp name="TestPlan.comments">User&apos;s Creds</stringProp>
            <stringProp name="filename">/Users/DNesterov/apache-jmeter-4.0/CSV/Hot_Fix/Tenant_103_Revoke_Credit_2-11-2020.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">entity.id,autobil.id,amount</stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">false</boolProp>
            <boolProp name="stopThread">true</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Vindicia: Delay Bill to date" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:aut=&quot;http://soap.vindicia.com/v17_0/AutoBill&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;aut:delayBillingToDate&gt;&#xd;
         &lt;auth&gt;&#xd;
            &lt;version&gt;17.0&lt;/version&gt;&#xd;
            &lt;login&gt;${soapUsn}&lt;/login&gt;&#xd;
            &lt;password&gt;${soapPswd}&lt;/password&gt;&#xd;
         &lt;/auth&gt;&#xd;
         &lt;srd&gt;&lt;/srd&gt;&#xd;
         &lt;autobill&gt;&#xd;
            &lt;merchantAutoBillId&gt;${autobillId}&lt;/merchantAutoBillId&gt;&#xd;
         &lt;/autobill&gt;&#xd;
         &lt;newBillingDate&gt;${dateToday}T08:46:26-08:00&lt;/newBillingDate&gt;&#xd;
         &lt;movePermanently&gt;1&lt;/movePermanently&gt;&#xd;
      &lt;/aut:delayBillingToDate&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${soapVindiciaBase}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">soap.pl</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml; charset=utf-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1413964963">string&quot;&gt;OK&lt;/returnString</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Vindicia: Update Division ID" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:aut=&quot;http://soap.vindicia.com/v17_0/AutoBill&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;aut:update&gt;&#xd;
         &lt;auth&gt;&#xd;
            &lt;version&gt;17.0&lt;/version&gt;&#xd;
            &lt;login&gt;${soapUsn}&lt;/login&gt;&#xd;
            &lt;password&gt;${soapPswd}&lt;/password&gt;&#xd;
         &lt;/auth&gt;&#xd;
         &lt;srd&gt;&lt;/srd&gt;&#xd;
         &lt;autobill&gt;&#xd;
            &lt;merchantAutoBillId&gt;${autobillId}&lt;/merchantAutoBillId&gt;&#xd;
            &lt;nameValues&gt;&#xd;
            	&lt;name&gt;vin:Division&lt;/name&gt;&#xd;
               &lt;value&gt;372788&lt;/value&gt;&#xd;
               &lt;/nameValues&gt;&#xd;
         &lt;/autobill&gt;&#xd;
      &lt;/aut:update&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${soapVindiciaBase}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">soap.pl</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml; charset=utf-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1413964963">string&quot;&gt;OK&lt;/returnString</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Vindicia: Delay Bill to date" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:aut=&quot;http://soap.vindicia.com/v17_0/AutoBill&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;aut:delayBillingToDate&gt;&#xd;
         &lt;auth&gt;&#xd;
            &lt;version&gt;17.0&lt;/version&gt;&#xd;
            &lt;login&gt;${soapUsn}&lt;/login&gt;&#xd;
            &lt;password&gt;${soapPswd}&lt;/password&gt;&#xd;
         &lt;/auth&gt;&#xd;
         &lt;srd&gt;&lt;/srd&gt;&#xd;
         &lt;autobill&gt;&#xd;
            &lt;merchantAutoBillId&gt;${autobillId}&lt;/merchantAutoBillId&gt;&#xd;
         &lt;/autobill&gt;&#xd;
         &lt;newBillingDate&gt;${dateToday}T08:46:26-08:00&lt;/newBillingDate&gt;&#xd;
         &lt;movePermanently&gt;1&lt;/movePermanently&gt;&#xd;
      &lt;/aut:delayBillingToDate&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${soapVindiciaBase}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">soap.pl</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml; charset=utf-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1413964963">string&quot;&gt;OK&lt;/returnString</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Vindicia: grant Credits" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:aut=&quot;http://soap.vindicia.com/v16_0/AutoBill&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   	&lt;soapenv:Body&gt;&#xd;
     	&lt;ns0:grantCredit xmlns:ns0 = &quot;http://soap.vindicia.com/v16_0/AutoBill&quot;&gt;&#xd;
        &lt;auth&gt;&#xd;
           &lt;version&gt;16.0&lt;/version&gt;&#xd;
           &lt;login&gt;${soapUsn}&lt;/login&gt;&#xd;
           &lt;password&gt;${soapPswd}&lt;/password&gt;&#xd;
         &lt;/auth&gt;&#xd;
         &#xd;
         &lt;srd/&gt;&#xd;
         &#xd;
         &lt;autobill&gt;&#xd;
            &lt;merchantAutoBillId&gt;${autoBillId}&lt;/merchantAutoBillId&gt;&#xd;
         &lt;/autobill&gt;&#xd;
         &#xd;
         &lt;credit&gt;&#xd;
         		&lt;currencyAmounts&gt;&#xd;
         			&lt;currency&gt;USD&lt;/currency&gt;&#xd;
         			&lt;amount&gt;6&lt;/amount&gt;&#xd;
         		&lt;nameValues&gt;&#xd;
         			&lt;name&gt;InstructionId&lt;/name&gt;&#xd;
         			&lt;value&gt;2481720867&lt;/value&gt;&#xd;
         		&lt;/nameValues&gt;&#xd;
         		&lt;description&gt;VG Perf Test Grant Credit&lt;/description&gt;&#xd;
         			&lt;reason/&gt;&#xd;
         		&lt;/currencyAmounts&gt;&#xd;
         &lt;/credit&gt;&#xd;
    &lt;/ns0:grantCredit&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${soapVindiciaBase}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">soap.pl</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml; charset=utf-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1413964963">string&quot;&gt;OK&lt;/returnString</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Vindicia: grant Credits" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:aut=&quot;http://soap.vindicia.com/v16_0/AutoBill&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   	&lt;soapenv:Body&gt;&#xd;
     	&lt;ns0:grantCredit xmlns:ns0 = &quot;http://soap.vindicia.com/v16_0/AutoBill&quot;&gt;&#xd;
        &lt;auth&gt;&#xd;
           &lt;version&gt;16.0&lt;/version&gt;&#xd;
           &lt;login&gt;${soapUsn}&lt;/login&gt;&#xd;
           &lt;password&gt;${soapPswd}&lt;/password&gt;&#xd;
         &lt;/auth&gt;&#xd;
         &#xd;
         &lt;srd/&gt;&#xd;
         &#xd;
         &lt;autobill&gt;&#xd;
            &lt;merchantAutoBillId&gt;${autoBillId}&lt;/merchantAutoBillId&gt;&#xd;
         &lt;/autobill&gt;&#xd;
         &#xd;
         &lt;credit&gt;&#xd;
         		&lt;currencyAmounts&gt;&#xd;
         			&lt;currency&gt;USD&lt;/currency&gt;&#xd;
         			&lt;amount&gt;3.50&lt;/amount&gt;&#xd;
         		&lt;nameValues&gt;&#xd;
         			&lt;name&gt;InstructionId&lt;/name&gt;&#xd;
         			&lt;value&gt;24817208&lt;/value&gt;&#xd;
         		&lt;/nameValues&gt;&#xd;
         		&lt;description&gt;VG Perf Test&lt;/description&gt;&#xd;
         			&lt;reason/&gt;&#xd;
         		&lt;/currencyAmounts&gt;&#xd;
         &lt;/credit&gt;&#xd;
    &lt;/ns0:grantCredit&gt;&#xd;
    &lt;ns0:grantCredit xmlns:ns0 = &quot;http://soap.vindicia.com/v16_0/AutoBill&quot;&gt;&#xd;
        &lt;auth&gt;&#xd;
           &lt;version&gt;16.0&lt;/version&gt;&#xd;
           &lt;login&gt;${soapUsn}&lt;/login&gt;&#xd;
           &lt;password&gt;${soapPswd}&lt;/password&gt;&#xd;
         &lt;/auth&gt;&#xd;
         &#xd;
         &lt;srd/&gt;&#xd;
         &#xd;
         &lt;autobill&gt;&#xd;
            &lt;merchantAutoBillId&gt;${autoBillId}&lt;/merchantAutoBillId&gt;&#xd;
         &lt;/autobill&gt;&#xd;
         &#xd;
         &lt;credit&gt;&#xd;
         		&lt;currencyAmounts&gt;&#xd;
         			&lt;currency&gt;USD&lt;/currency&gt;&#xd;
         			&lt;amount&gt;4.00&lt;/amount&gt;&#xd;
         		&lt;nameValues&gt;&#xd;
         			&lt;name&gt;InstructionId&lt;/name&gt;&#xd;
         			&lt;value&gt;24817208&lt;/value&gt;&#xd;
         		&lt;/nameValues&gt;&#xd;
         		&lt;description&gt;VG Perf Test&lt;/description&gt;&#xd;
         			&lt;reason/&gt;&#xd;
         		&lt;/currencyAmounts&gt;&#xd;
         &lt;/credit&gt;&#xd;
    &lt;/ns0:grantCredit&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${soapVindiciaBase}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">soap.pl</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml; charset=utf-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1413964963">string&quot;&gt;OK&lt;/returnString</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Vindicia: revoke Credits_US" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:aut=&quot;http://soap.vindicia.com/v16_0/AutoBill&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   	&lt;soapenv:Body&gt;&#xd;
     	&lt;ns0:revokeCredit xmlns:ns0 = &quot;http://soap.vindicia.com/v16_0/AutoBill&quot;&gt;&#xd;
        &lt;auth&gt;&#xd;
           &lt;version&gt;16.0&lt;/version&gt;&#xd;
           &lt;login&gt;${soapUsn}&lt;/login&gt;&#xd;
           &lt;password&gt;${soapPswd}&lt;/password&gt;&#xd;
         &lt;/auth&gt;&#xd;
         &#xd;
         &lt;srd/&gt;&#xd;
         &#xd;
         &lt;autobill&gt;&#xd;
            &lt;merchantAutoBillId&gt;${autobil.id}&lt;/merchantAutoBillId&gt;&#xd;
         &lt;/autobill&gt;&#xd;
         &#xd;
         &lt;credit&gt;&#xd;
         		&lt;currencyAmounts&gt;&#xd;
         			&lt;currency&gt;USD&lt;/currency&gt;&#xd;
         			&lt;amount&gt;${amount}&lt;/amount&gt;&#xd;
     &#xd;
         		&lt;description&gt;REVOKED by Support Team&lt;/description&gt;&#xd;
         			&lt;reason/&gt;&#xd;
         		&lt;/currencyAmounts&gt;&#xd;
         &lt;/credit&gt;&#xd;
    &lt;/ns0:revokeCredit&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${soapVindiciaBase}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">soap.pl</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml; charset=utf-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1413964963">string&quot;&gt;OK&lt;/returnString</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Vindicia: revoke Credits_CA" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:aut=&quot;http://soap.vindicia.com/v16_0/AutoBill&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   	&lt;soapenv:Body&gt;&#xd;
     	&lt;ns0:revokeCredit xmlns:ns0 = &quot;http://soap.vindicia.com/v16_0/AutoBill&quot;&gt;&#xd;
        &lt;auth&gt;&#xd;
           &lt;version&gt;16.0&lt;/version&gt;&#xd;
           &lt;login&gt;${vindicia.soap.ca.login}&lt;/login&gt;&#xd;
           &lt;password&gt;${vindicia.soap.ca.password}&lt;/password&gt;&#xd;
         &lt;/auth&gt;&#xd;
         &#xd;
         &lt;srd/&gt;&#xd;
         &#xd;
         &lt;autobill&gt;&#xd;
            &lt;merchantAutoBillId&gt;${autobil.id}&lt;/merchantAutoBillId&gt;&#xd;
         &lt;/autobill&gt;&#xd;
         &#xd;
         &lt;credit&gt;&#xd;
         		&lt;currencyAmounts&gt;&#xd;
         			&lt;currency&gt;CAD&lt;/currency&gt;&#xd;
         			&lt;amount&gt;${amount}&lt;/amount&gt;&#xd;
     &#xd;
         		&lt;description&gt;REVOKED by Support Team&lt;/description&gt;&#xd;
         			&lt;reason/&gt;&#xd;
         		&lt;/currencyAmounts&gt;&#xd;
         &lt;/credit&gt;&#xd;
    &lt;/ns0:revokeCredit&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${soapVindiciaBase}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">soap.pl</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml; charset=utf-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1413964963">string&quot;&gt;OK&lt;/returnString</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="api.pov.com" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1514078571000</longProp>
        <longProp name="ThreadGroup.end_time">1514078571000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">6000</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Users" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="1150977610">apolloId</stringProp>
            <stringProp name="-2004981848">crunchId</stringProp>
            <stringProp name="966683005">sapphireId</stringProp>
            <stringProp name="-135932017">elevate.id</stringProp>
            <stringProp name="-1083146414">manulifeId</stringProp>
            <stringProp name="112388430">volId</stringProp>
            <stringProp name="730969305">vrzn.id</stringProp>
            <stringProp name="-1388748103">biw.id</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="-1295080641">
              <stringProp name="-1226073207">${apolloID_2}</stringProp>
              <stringProp name="714790220">${crunchID_1}</stringProp>
              <stringProp name="1374910774">${sapphireID_2}</stringProp>
              <stringProp name="1281576372">${elevate.id.1}</stringProp>
              <stringProp name="751703842">${manulifeID_1}</stringProp>
              <stringProp name="625215732">${volID_1}</stringProp>
              <stringProp name="-807254088">${vrzn.id.1}</stringProp>
              <stringProp name="-1736792374">${biw.id.1}</stringProp>
            </collectionProp>
            <collectionProp name="-624114182">
              <stringProp name="-1226073238">${apolloID_1}</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1281576403">${elevate.id.2}</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="625215763">${volID_2}</stringProp>
              <stringProp name="-807254057">${vrzn.id.2}</stringProp>
              <stringProp name="0"></stringProp>
            </collectionProp>
            <collectionProp name="1429581636">
              <stringProp name="-1226073176">${apolloID_3}</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1281576434">${elevate.id.3}</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
            </collectionProp>
            <collectionProp name="1567271888">
              <stringProp name="-1226073145">${apolloID_4}</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1281576465">${elevate.id.4}</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
            </collectionProp>
            <collectionProp name="-2062345516">
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="1281576496">${elevate.id.5}</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="0"></stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${wso2Base}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout">30000</stringProp>
          <stringProp name="HTTPSampler.response_timeout">300000</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Active Rewards" enabled="false"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST WSO2 Token" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="grant_type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">client_credentials</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">grant_type</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/token</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Basic ${wso2Token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract wso2.bearer.token" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">wso2.bearer.token</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: Watch Dispatch" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;purchaseReference&quot;: &quot;${purchaseReference}&quot;,&#xd;
	&quot;purchaseReferenceType&quot;: &quot;OrderReference&quot;,&#xd;
	&quot;distributorReferenceNumber&quot;: &quot;${purchaseId}&quot;,&#xd;
	&quot;courier&quot;: &quot;UPS&quot;,&#xd;
	&quot;orderTrackingNumber&quot;: &quot;1ZA828Y90334683642&quot;,&#xd;
	&quot;dateOfDispatch&quot;: &quot;${dateToday}T19:00:01Z&quot;,&#xd;
	&quot;tenantId&quot;: &quot;${tenant.id}&quot;,&#xd;
	&quot;purchaseId&quot;: &quot;${purchaseId}&quot;,&#xd;
	&quot;supplierId&quot;: &quot;${supplierId}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/ActiveRewards/1.0/WatchDispatch</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2132625647">Watch Dispatch successful</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Watch Catalogue" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="memberId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${elevate.id}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">memberId</stringProp>
                </elementProp>
                <elementProp name="tenantId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">tenantId</stringProp>
                </elementProp>
                <elementProp name="productIdentifier" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">AppleWatch</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">productIdentifier</stringProp>
                </elementProp>
                <elementProp name="effectiveDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${__time(yyyy-MM-dd,)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">effectiveDate</stringProp>
                </elementProp>
                <elementProp name="employerId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${elevate.employer.id}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">employerId</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/ActiveRewards/1.0/WatchCatalogue</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-vsl-timestamp</stringProp>
                  <stringProp name="Header.value">${timeStamp}</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${wso2.bearer.token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-78471895">Successfully Retrieved Watch Catalogues and Pricing</stringProp>
                <stringProp name="1279037576">ZeroEmployerSubsidy</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET: Repayment History" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="memberId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${apollo.id}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">memberId</stringProp>
                </elementProp>
                <elementProp name="tenantId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">27</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">tenantId</stringProp>
                </elementProp>
                <elementProp name="purchaseType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">AppleWatch</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">purchaseType</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/ActiveRewards/1.0/RepaymentHistory</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract: purchase ID" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">purchaseId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.payload.content.purchase[0].purchaseId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract: purchaseReference" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">purchaseReference</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.payload.content.purchase[0].purchaseInstallmentInfo.purchaseReference[0].purchaseReference</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ReGex: tenant" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">URL</stringProp>
              <stringProp name="RegexExtractor.refname">tenant.id</stringProp>
              <stringProp name="RegexExtractor.regex">tenantId=(.*)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Scope.variable"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Activate: FIEYW" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Apollo WSO2 Access Token" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="grant_type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">client_credentials</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">grant_type</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/token</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Basic ${wso2Token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extracting WSO2 AccessToken" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">wso2BearerToken</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RTE: Enrolling a new user" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&#xd;
 {&#xd;
  &quot;enrollmentRequestEncrypted&quot;: {&#xd;
    &quot;firstNameEncrypted&quot;: &quot;${encryptedFirstName}&quot;,&#xd;
    &quot;lastNameEncrypted&quot;: &quot;${encryptedLastName}&quot;,&#xd;
    &quot;dateOfBirthEncrypted&quot;: &quot;${encryptedDOB}&quot;,&#xd;
    &quot;insuredId&quot;: &quot;${randomString}&quot;,&#xd;
    &quot;gender&quot;: &quot;${__chooseRandom(M,F,U,randomProduct)}&quot;,&#xd;
    &quot;vitalityCoverageEffectiveDate&quot;: &quot;${__RandomDate(yyyy-MM-dd,2018-01-01,${__time(yyyy-MM-dd)},,)}&quot;,&#xd;
    &quot;productIndicator&quot;: &quot;FULL&quot;,&#xd;
    &quot;emailAddress&quot;: &quot;POC-${randomString}@rte-perf.com&quot;,&#xd;
    &quot;zipCode&quot;: &quot;&quot;,&#xd;
    &quot;customerServicePhone&quot;: &quot;${encryptedPhoneNumber}&quot;,&#xd;
    &quot;reportField1&quot;: &quot;123&quot;,&#xd;
    &quot;reportField2&quot;: &quot;20170701&quot;,&#xd;
    &quot;reportField3&quot;: &quot;ABC&quot;,&#xd;
    &quot;reportField4&quot;: &quot;DEF&quot;&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/${wso2RtePath}/svc/0/apolloEnrollmentEncrypted</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${wso2BearerToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Entity Number" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">apollo.id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.enrollmentResponseEncrypted.vitalityId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert: User has been created" enabled="true">
              <stringProp name="JSON_PATH">$.enrollmentResponseEncrypted.insuredId</stringProp>
              <stringProp name="EXPECTED_VALUE"></stringProp>
              <boolProp name="JSONVALIDATION">false</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: Vitality ID present" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1165624797">vitalityId</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="AES_Encryption" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.util.Base64;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.spec.SecretKeySpec;

//First Name
String text = &quot;${randomString}&quot;;         
String secret = &quot;Apollo11Apollo11&quot;;
SecretKeySpec aesKey = new SecretKeySpec(secret.getBytes(), &quot;AES&quot;);
Cipher cipher = Cipher.getInstance(&quot;AES&quot;);
cipher.init(Cipher.ENCRYPT_MODE, aesKey);
byte[] encrypted = cipher.doFinal(text.getBytes());
vars.put(&quot;encryptedFirstName&quot;,Base64.getEncoder().encodeToString(encrypted)); 

//Last Name
String text = &quot;Watch-dispatch&quot;;         
String secret = &quot;Apollo11Apollo11&quot;;
SecretKeySpec aesKey = new SecretKeySpec(secret.getBytes(), &quot;AES&quot;);
Cipher cipher = Cipher.getInstance(&quot;AES&quot;);
cipher.init(Cipher.ENCRYPT_MODE, aesKey);
byte[] encrypted = cipher.doFinal(text.getBytes());
vars.put(&quot;encryptedLastName&quot;,Base64.getEncoder().encodeToString(encrypted)); 

//DOB
String text = &quot;${__RandomDate(yyyy-MM-dd,1930-01-01,2001-12-31,,)}&quot;;         
String secret = &quot;Apollo11Apollo11&quot;;
SecretKeySpec aesKey = new SecretKeySpec(secret.getBytes(), &quot;AES&quot;);
Cipher cipher = Cipher.getInstance(&quot;AES&quot;);
cipher.init(Cipher.ENCRYPT_MODE, aesKey);
byte[] encrypted = cipher.doFinal(text.getBytes());
vars.put(&quot;encryptedDOB&quot;,Base64.getEncoder().encodeToString(encrypted)); 

//Phone Number
String text = &quot;312-224-${__Random(1000,9999,)}&quot;;         
String secret = &quot;Apollo11Apollo11&quot;;
SecretKeySpec aesKey = new SecretKeySpec(secret.getBytes(), &quot;AES&quot;);
Cipher cipher = Cipher.getInstance(&quot;AES&quot;);
cipher.init(Cipher.ENCRYPT_MODE, aesKey);
byte[] encrypted = cipher.doFinal(text.getBytes());
vars.put(&quot;encryptedPhoneNumber&quot;,Base64.getEncoder().encodeToString(encrypted)); </stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Capture Purchase" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;tenantId&quot;: 27,&#xd;
	&quot;supplierId&quot;: &quot;${supplierId}&quot;,&#xd;
	&quot;memberInfo&quot;: {&#xd;
		&quot;memberId&quot;: ${apollo.id},&#xd;
		&quot;transactionDate&quot;: &quot;${dateToday} 01:05:34.177&quot;,&#xd;
		&quot;employerId&quot;: ${employerIdFull},&#xd;
		&quot;branchId&quot;: 0&#xd;
	},&#xd;
	&quot;purchase&quot;: {&#xd;
		&quot;purchaseDetails&quot;: {&#xd;
			&quot;taxAmount&quot;: &quot;USD 20.39&quot;,&#xd;
			&quot;totalCostAfterTax&quot;: &quot;USD 219.39&quot;,&#xd;
			&quot;carrierSubsidy&quot;: &quot;USD 0.0&quot;,&#xd;
			&quot;subsidyAmount&quot;: &quot;USD 0.0&quot;,&#xd;
			&quot;items&quot;: [&#xd;
				{&#xd;
					&quot;description&quot;: &quot;Apple Watch Nike Series 3 GPS, 38mm Space Gray Aluminum Case with Anthracite/Black Nike Sport Band&quot;,&#xd;
					&quot;purchaseItemReference&quot;: &quot;${randomNumericString}&quot;,&#xd;
					&quot;quantity&quot;: 1,&#xd;
					&quot;purchaseItemReferenceType&quot;: &quot;SKUNumber&quot;,&#xd;
					&quot;productPrice&quot;: &quot;USD 219.39&quot;&#xd;
				}&#xd;
			],&#xd;
			&quot;subsidyType&quot;: &quot;EmployerSubsidy&quot;,&#xd;
			&quot;purchaseReferenceType&quot;: &quot;OrderReference&quot;,&#xd;
			&quot;activationFee&quot;: &quot;USD 7.0&quot;,&#xd;
			&quot;productIdentifier&quot;: &quot;AppleWatch&quot;,&#xd;
			&quot;totalCostBeforeTax&quot;: &quot;USD 199.0&quot;,&#xd;
			&quot;financedAmount&quot;: &quot;USD 192.0&quot;,&#xd;
			&quot;upgradeCost&quot;: &quot;USD 0.0&quot;,&#xd;
			&quot;installmentPeriod&quot;: {&#xd;
				&quot;duration&quot;: 24,&#xd;
				&quot;paymentMethod&quot;: &quot;CreditCard&quot;,&#xd;
				&quot;dayOfInstallment&quot;: 0,&#xd;
				&quot;maxMonthlyAmount&quot;: &quot;USD 8.0&quot;,&#xd;
				&quot;durationType&quot;: &quot;MONTH&quot;&#xd;
			},&#xd;
			&quot;purchaseReference&quot;: &quot;${randomNumericString}&quot;,&#xd;
			&quot;reference&quot;: [&#xd;
				{&#xd;
					&quot;purchaseReference&quot;: &quot;${randomNumericString}5b040aa6-bae1-484f-8ace-6b09a0e763de&quot;,&#xd;
					&quot;purchaseReferenceType&quot;: &quot;BillingPartnerReference&quot;&#xd;
				}&#xd;
			],&#xd;
			&quot;discountLevels&quot;: [&#xd;
				{&#xd;
					&quot;type&quot;: &quot;DiscountLevel4&quot;,&#xd;
					&quot;value&quot;: &quot;USD 2.0&quot;&#xd;
				},&#xd;
				{&#xd;
					&quot;type&quot;: &quot;DiscountLevel3&quot;,&#xd;
					&quot;value&quot;: &quot;USD 2.0&quot;&#xd;
				},&#xd;
				{&#xd;
					&quot;type&quot;: &quot;DiscountLevel2&quot;,&#xd;
					&quot;value&quot;: &quot;USD 2.0&quot;&#xd;
				},&#xd;
				{&#xd;
					&quot;type&quot;: &quot;DiscountLevel1&quot;,&#xd;
					&quot;value&quot;: &quot;USD 2.0&quot;&#xd;
				}&#xd;
			],&#xd;
			&quot;actionHistory&quot;: {&#xd;
				&quot;eventDateTime&quot;: &quot;${dateToday}T00:08:46.779Z&quot;,&#xd;
				&quot;actionType&quot;: &quot;PurchaseInitiated&quot;&#xd;
			},&#xd;
			&quot;contactDetail&quot;: {&#xd;
				&quot;addresses&quot;: [&#xd;
					{&#xd;
						&quot;addressLine1&quot;: &quot;4837 W 119th Pl&quot;,&#xd;
						&quot;addressLine2&quot;: &quot;&quot;,&#xd;
						&quot;city&quot;: &quot;Hawthorne&quot;,&#xd;
						&quot;countryCode&quot;: &quot;US&quot;,&#xd;
						&quot;postalCode&quot;: &quot;90250&quot;,&#xd;
						&quot;state&quot;: &quot;CA&quot;&#xd;
					}&#xd;
				],&#xd;
				&quot;emails&quot;: [&#xd;
					{&#xd;
						&quot;emailAddress&quot;: &quot;${randomString}0@gmail.com&quot;&#xd;
					}&#xd;
				],&#xd;
				&quot;phoneNumbers&quot;: [&#xd;
					{&#xd;
						&quot;phoneNumber&quot;: &quot;213.494.0442&quot;&#xd;
					}&#xd;
				]&#xd;
			}&#xd;
		}&#xd;
	},&#xd;
	&quot;memberId&quot;: ${apolloId}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${tibcoBase}</stringProp>
            <stringProp name="HTTPSampler.port">${tibcoPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">arapi/ActiveRewards/CapturePurchase</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-vsl-timestamp</stringProp>
                  <stringProp name="Header.value">${timeStamp}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-vsl-version	</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2004250716">Could not confirm purchase with B2S</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET: Repayment History" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="tenantId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">27</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">tenantId</stringProp>
                </elementProp>
                <elementProp name="memberId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${apollo.id}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">memberId</stringProp>
                </elementProp>
                <elementProp name="purchaseType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">AppleWatch</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">purchaseType</stringProp>
                </elementProp>
                <elementProp name="effectiveFrom" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${dateToday}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">effectiveFrom</stringProp>
                </elementProp>
                <elementProp name="effectiveTo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${dateTomorrow}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">effectiveTo</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${tibcoBase}</stringProp>
            <stringProp name="HTTPSampler.port">${tibcoPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">arapi/ActiveRewards/RepaymentHistory</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-vsl-timestamp</stringProp>
                  <stringProp name="Header.value">${timeStamp}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-vsl-version	</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1867169789">success</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract: purchase ID" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">purchaseId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.payload.content.purchase[0].purchaseId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract: purchaseReference" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">purchaseReference</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.payload.content.purchase[0].purchaseInstallmentInfo.purchaseReference[0].purchaseReference</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ReGex: tenant" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">URL</stringProp>
              <stringProp name="RegexExtractor.refname">tenantID</stringProp>
              <stringProp name="RegexExtractor.regex">tenantId=(.*?)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Scope.variable"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: Watch Dispatch" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;purchaseReference&quot;: &quot;${purchaseReference}&quot;,&#xd;
	&quot;purchaseReferenceType&quot;: &quot;OrderReference&quot;,&#xd;
	&quot;distributorReferenceNumber&quot;: &quot;${purchaseId}&quot;,&#xd;
	&quot;courier&quot;: &quot;UPS&quot;,&#xd;
	&quot;orderTrackingNumber&quot;: &quot;1ZA828Y90334683642&quot;,&#xd;
	&quot;dateOfDispatch&quot;: &quot;${dateToday}T19:00:01Z&quot;,&#xd;
	&quot;tenantId&quot;: &quot;${tenantApollo}&quot;,&#xd;
	&quot;purchaseId&quot;: &quot;${purchaseId}&quot;,&#xd;
	&quot;supplierId&quot;: &quot;${supplierId}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${tibcoBase}</stringProp>
            <stringProp name="HTTPSampler.port">${tibcoPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">arapi/ActiveRewards/WatchDispatch</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-vsl-timestamp</stringProp>
                  <stringProp name="Header.value">${timeStamp}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2132625647">Watch Dispatch successful</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Tools" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1514078571000</longProp>
        <longProp name="ThreadGroup.end_time">1514078571000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">900</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="false">
          <stringProp name="ConstantTimer.delay">300</stringProp>
          <stringProp name="RandomTimer.range">100.0</stringProp>
        </GaussianRandomTimer>
        <hashTree/>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="US DB" enabled="false">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery">select 1 from dual</stringProp>
          <stringProp name="connectionAge">10000</stringProp>
          <stringProp name="dataSource">DHDB</stringProp>
          <stringProp name="dbUrl">jdbc:oracle:thin:@${dbHost}.dhna.corp:${dbPort}:DHDB</stringProp>
          <stringProp name="driver">oracle.jdbc.OracleDriver</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">${dbPassword}</stringProp>
          <stringProp name="poolMax">20</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">${dbUserName}</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="AR DB" enabled="false">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery">select 1 from dual</stringProp>
          <stringProp name="connectionAge">10000</stringProp>
          <stringProp name="dataSource">AR_DB</stringProp>
          <stringProp name="dbUrl">jdbc:oracle:thin:@${arDbHost}.dhna.corp:${dbPort}:DHDB</stringProp>
          <stringProp name="driver">oracle.jdbc.OracleDriver</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">${dbPassword}</stringProp>
          <stringProp name="poolMax">20</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">${dbUserName}</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname=" POST VAP: Login" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="j_username" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">dnesterov</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">j_username</stringProp>
              </elementProp>
              <elementProp name="j_password" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Dimon4ik1012</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">j_password</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">vgtstg01.dhna.corp</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">vap/admin/j_spring_security_check</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Host" elementType="Header">
                <stringProp name="Header.name">Host</stringProp>
                <stringProp name="Header.value">vgtstg01.dhna.corp</stringProp>
              </elementProp>
              <elementProp name="Connection" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
              <elementProp name="Content-Length" elementType="Header">
                <stringProp name="Header.name">Content-Length</stringProp>
                <stringProp name="Header.value">764</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">http://vgtstg01.dhna.corp</stringProp>
              </elementProp>
              <elementProp name="X-Requested-With" elementType="Header">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.97 Safari/537.36</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">http://vgtstg01.dhna.corp/vap/admin/award_member_points/award_points</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.9,ru;q=0.8,uk;q=0.7,de;q=0.6,la;q=0.5</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname=" POST Points" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="memberEntityNo:" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">1421973932</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">memberEntityNo:</stringProp>
              </elementProp>
              <elementProp name="mnemonic:" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">BMID</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">mnemonic:</stringProp>
              </elementProp>
              <elementProp name="description:Partial biometric screening: BMI" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">description:Partial biometric screening: BMI</stringProp>
              </elementProp>
              <elementProp name="eventDate:2019-11-20 " elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">eventDate:2019-11-20 </stringProp>
              </elementProp>
              <elementProp name="memberEntityNo:1421973932" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">memberEntityNo:1421973932</stringProp>
              </elementProp>
              <elementProp name="mnemonic:BPS" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">mnemonic:BPS</stringProp>
              </elementProp>
              <elementProp name="description:Partial biometric screening: Blood pressure" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">description:Partial biometric screening: Blood pressure</stringProp>
              </elementProp>
              <elementProp name="eventDate:2019-11-21 " elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">eventDate:2019-11-21 </stringProp>
              </elementProp>
              <elementProp name="memberEntityNo:1421973932" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">memberEntityNo:1421973932</stringProp>
              </elementProp>
              <elementProp name="mnemonic:CS" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">mnemonic:CS</stringProp>
              </elementProp>
              <elementProp name="description:Partial biometric screening: Cholesterol" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">description:Partial biometric screening: Cholesterol</stringProp>
              </elementProp>
              <elementProp name="eventDate:2019-11-22 " elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">eventDate:2019-11-22 </stringProp>
              </elementProp>
              <elementProp name="memberEntityNo:1421973932" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">memberEntityNo:1421973932</stringProp>
              </elementProp>
              <elementProp name="mnemonic:FGS" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">mnemonic:FGS</stringProp>
              </elementProp>
              <elementProp name="description:Partial biometric screening: Blood glucose" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">description:Partial biometric screening: Blood glucose</stringProp>
              </elementProp>
              <elementProp name="eventDate:2019-11-23 " elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">eventDate:2019-11-23 </stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">vgtstg01.dhna.corp</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">vap/admin/award_member_points/award_points/submit</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract: eventPoints" enabled="false">
            <stringProp name="JSONPostProcessor.referenceNames">eventPoints</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.output.statistics.points_events.category[0].sub_category[0].det_category[0].points</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname=" VAP" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname=" AWARD EVENTS/POINTS" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname=" VC" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname=" POST VAP: Login" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="j_username" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">dnesterov</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">j_username</stringProp>
                    </elementProp>
                    <elementProp name="j_password" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">Dimon4ik1012</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">j_password</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">vgtstg01.dhna.corp</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">vap/admin/j_spring_security_check</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                    </elementProp>
                    <elementProp name="Host" elementType="Header">
                      <stringProp name="Header.name">Host</stringProp>
                      <stringProp name="Header.value">vgtstg01.dhna.corp</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname=" POST Points" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="events%5B0%5D%5BmemberEntityNo%5D" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">1421973932</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">events%5B0%5D%5BmemberEntityNo%5D</stringProp>
                    </elementProp>
                    <elementProp name="events%5B0%5D%5Bmnemonic%5D" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">BMID</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">events%5B0%5D%5Bmnemonic%5D</stringProp>
                    </elementProp>
                    <elementProp name="events%5B0%5D%5Bdescription%5D" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">Partial+biometric+screening%3A+BMI</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">events%5B0%5D%5Bdescription%5D</stringProp>
                    </elementProp>
                    <elementProp name="events%5B0%5D%5BeventDate%5D" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">2019-11-20+</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">events%5B0%5D%5BeventDate%5D</stringProp>
                    </elementProp>
                    <elementProp name="events%5B1%5D%5BmemberEntityNo%5D" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">1421973932</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">events%5B1%5D%5BmemberEntityNo%5D</stringProp>
                    </elementProp>
                    <elementProp name="events%5B1%5D%5Bmnemonic%5D" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">BPS</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">events%5B1%5D%5Bmnemonic%5D</stringProp>
                    </elementProp>
                    <elementProp name="events%5B1%5D%5Bdescription%5D" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">Partial+biometric+screening%3A+Blood+pressure</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">events%5B1%5D%5Bdescription%5D</stringProp>
                    </elementProp>
                    <elementProp name="events%5B1%5D%5BeventDate%5D" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">2019-11-21+</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">events%5B1%5D%5BeventDate%5D</stringProp>
                    </elementProp>
                    <elementProp name="events%5B2%5D%5BmemberEntityNo%5D" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">1421973932</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">events%5B2%5D%5BmemberEntityNo%5D</stringProp>
                    </elementProp>
                    <elementProp name="events%5B2%5D%5Bmnemonic%5D" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">CS</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">events%5B2%5D%5Bmnemonic%5D</stringProp>
                    </elementProp>
                    <elementProp name="events%5B2%5D%5Bdescription%5D" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">Partial+biometric+screening%3A+Cholesterol</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">events%5B2%5D%5Bdescription%5D</stringProp>
                    </elementProp>
                    <elementProp name="events%5B2%5D%5BeventDate%5D" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">2019-11-22+</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">events%5B2%5D%5BeventDate%5D</stringProp>
                    </elementProp>
                    <elementProp name="events%5B3%5D%5BmemberEntityNo%5D" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">1421973932</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">events%5B3%5D%5BmemberEntityNo%5D</stringProp>
                    </elementProp>
                    <elementProp name="events%5B3%5D%5Bmnemonic%5D" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">FGS</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">events%5B3%5D%5Bmnemonic%5D</stringProp>
                    </elementProp>
                    <elementProp name="events%5B3%5D%5Bdescription%5D" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">Partial+biometric+screening%3A+Blood+glucose</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">events%5B3%5D%5Bdescription%5D</stringProp>
                    </elementProp>
                    <elementProp name="events%5B3%5D%5BeventDate%5D" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">2019-11-23+</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">events%5B3%5D%5BeventDate%5D</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">vgtstg01.dhna.corp</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">vap/admin/award_member_points/award_points/submit</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract: eventPoints" enabled="false">
                  <stringProp name="JSONPostProcessor.referenceNames">eventPoints</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.output.statistics.points_events.category[0].sub_category[0].det_category[0].points</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Auth Token" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="entity_no" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${authVitalityId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">entity_no</stringProp>
              </elementProp>
              <elementProp name="encrypted_entity_no" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${auth_vitalityIdEncrypted}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">encrypted_entity_no</stringProp>
              </elementProp>
              <elementProp name="_p" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">IOS</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_p</stringProp>
              </elementProp>
              <elementProp name="_v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${mob.app.version}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_v</stringProp>
              </elementProp>
              <elementProp name="_doc_browser_context" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_doc_browser_context</stringProp>
              </elementProp>
              <elementProp name="_c" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">BESTBUY</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_c</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${msBase}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${msPath}/auth/simulate_auth</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Active Rewards Token" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">ar_Token</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.session.token</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import java.security.MessageDigest;

MessageDigest digest = MessageDigest.getInstance(&quot;MD5&quot;);
byte[] bytes = digest.digest((&quot;${authVitalityId}&quot; + &quot;${msSalt}&quot;).getBytes());
vars.put(&quot;auth_vitalityIdEncrypted&quot;,javax.xml.bind.DatatypeConverter.printHexBinary(bytes).toLowerCase());</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Apollo Consent" enabled="false"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Apollo Consent: Research" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
&quot;adpConsentUpdate&quot;:{&#xd;
&quot;consentStatus&quot;:true,&#xd;
&quot;vitalityMemberId&quot;:1430284933,&#xd;
&quot;consentType&quot;:&quot;research&quot;,&#xd;
&quot;type&quot;:&quot;enroll&quot;,&#xd;
&quot;transmitGUID&quot;:&quot;841ca64c­0b95­4b14­ae9f­bc1dd2ae0ce2&quot;,&#xd;
&quot;additionalProperties&quot;:null&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${zuulBase}</stringProp>
            <stringProp name="HTTPSampler.port">${zuulPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">tvg-message-bus-management-service-1//svc/27/processConsentNotification</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Apollo Consent: Program" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
&quot;adpConsentUpdate&quot;:{&#xd;
&quot;consentStatus&quot;:true,&#xd;
&quot;vitalityMemberId&quot;:1430284933,&#xd;
&quot;consentType&quot;:&quot;program&quot;,&#xd;
&quot;type&quot;:&quot;enroll&quot;,&#xd;
&quot;transmitGUID&quot;:&quot;841ca64c­0b95­4b14­ae9f­bc1dd2ae0ce2&quot;,&#xd;
&quot;additionalProperties&quot;:null&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${zuulBase}</stringProp>
            <stringProp name="HTTPSampler.port">${zuulPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">tvg-message-bus-management-service-1//svc/27/processConsentNotification</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="B2" enabled="false"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET B2 Order" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">b2s.vitalityactiverewards.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">apple-gr/service/orders/${orderReference}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
              <collectionProp name="CookieManager.cookies"/>
              <boolProp name="CookieManager.clearEachIteration">false</boolProp>
            </CookieManager>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9,ru;q=0.8,uk;q=0.7,de;q=0.6,la;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Basic dml0YWxpdHlfcHJkOlYjUSNwVFJ0Nnc=</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="Connection" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">keep-alive</stringProp>
                </elementProp>
                <elementProp name="Host" elementType="Header">
                  <stringProp name="Header.name">Host</stringProp>
                  <stringProp name="Header.value">b2s.vitalityactiverewards.com</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extracting Order ID" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">orderId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.orderID</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extracting Order Status" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">orderStatus</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.orderItems[0].status</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">FileWriter fstream = new FileWriter(&quot;/Users/DNesterov/Documents/AW_ORDERS_AND_STATUS.csv&quot;,true);
BufferedWriter out = new BufferedWriter(fstream);
out.write(vars.get(&quot;orderId&quot;));
out.append(vars.get(&quot;orderStatus&quot;));
out.write(System.getProperty(&quot;line.separator&quot;));
out.close();
fstream.close();</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.orderItems[0].status</stringProp>
              <stringProp name="EXPECTED_VALUE">Killed</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">true</boolProp>
              <boolProp name="INVERT">true</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">true</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>true</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="CORE" enabled="false"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="vol.id--" elementType="Argument">
                <stringProp name="Argument.name">vol.id--</stringProp>
                <stringProp name="Argument.value">1422633147</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <stringProp name="Argument.desc">TEST</stringProp>
              </elementProp>
              <elementProp name="vol.id" elementType="Argument">
                <stringProp name="Argument.name">vol.id</stringProp>
                <stringProp name="Argument.value">1440989125</stringProp>
                <stringProp name="Argument.desc">PROD</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${coreServer}</stringProp>
            <stringProp name="HTTPSampler.port">${corePort}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </ConfigTestElement>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Core: Insert an event from Josh" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:vit=&quot;http://schemas.discovery.co.za/vitality&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;vit:InsertEventsRequestMessage schemaVersion= &quot;1&quot;&gt;&#xd;
         &lt;vit:RequestingSystemNumber&gt;${vol.id}&lt;/vit:RequestingSystemNumber&gt;&#xd;
         &lt;!--1 to 30 repetitions:--&gt;&#xd;
         &lt;vit:InsertEventRequest correlationNumber=&quot;1&quot;&gt;&#xd;
            &lt;vit:RequestingUserNumber&gt;${vol.id}&lt;/vit:RequestingUserNumber&gt;&#xd;
            &lt;vit:MemberNumber&gt;${vol.id}&lt;/vit:MemberNumber&gt;&#xd;
            &lt;vit:EventType&gt;HRAC&lt;/vit:EventType&gt;&#xd;
            &lt;vit:EventDate&gt;${dateToday}&lt;/vit:EventDate&gt;&#xd;
            &lt;!--&lt;vit:EventScore&gt;&lt;/vit:EventScore&gt;--&gt;&#xd;
         &lt;/vit:InsertEventRequest&gt;&#xd;
      &lt;/vit:InsertEventsRequestMessage&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">EventManager/eventService/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml; charset=utf-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="0"></stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Core: Retrive Members Attributes from Josh" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:vit=&quot;http://schemas.discovery.co.za/vitality&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;vit:RetrieveEntityAttributesRequest schemaVersion=&quot;1.0&quot;&gt;&#xd;
         &lt;vit:EntityNumber&gt;${vol.id}&lt;/vit:EntityNumber&gt;&#xd;
         &lt;vit:TenantIdentifier&gt;VOL&lt;/vit:TenantIdentifier&gt;&#xd;
      &lt;/vit:RetrieveEntityAttributesRequest&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">vitality-entities-proxy/entities-proxy.wsdl</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml; charset=utf-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="0"></stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Core: Insert an event" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:vit=&quot;http://schemas.discovery.co.za/vitality&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;InsertEventsRequestMessage schemaVersion=&quot;1&quot; xmlns=&quot;http://schemas.discovery.co.za/vitality&quot; xmlns:msgns=&quot;http://xmlns.vitalitytibcoservices.com/Processes/EventManager/v1&quot; xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;&gt;&#xd;
         &lt;RequestingSystemNumber&gt;${vol.id}&lt;/RequestingSystemNumber&gt;&#xd;
         &lt;InsertEventRequest&gt;&#xd;
            &lt;RequestingUserNumber&gt;${vol.id}&lt;/RequestingUserNumber&gt;&#xd;
            &lt;MemberNumber&gt;${vol.id}&lt;/MemberNumber&gt;&#xd;
            &lt;EventType&gt;SWAW&lt;/EventType&gt;&#xd;
            &lt;EventDate&gt;${dateToday}&lt;/EventDate&gt;&#xd;
           &lt;AssociatedWorkflowProcess&gt;16561137&lt;/AssociatedWorkflowProcess&gt;&#xd;
            &lt;LineNumber&gt;16561137&lt;/LineNumber&gt;&#xd;
            &lt;PartnerEntityNumber&gt;1420821439&lt;/PartnerEntityNumber&gt;&#xd;
         &lt;/InsertEventRequest&gt;&#xd;
      &lt;/InsertEventsRequestMessage&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">EventManager/eventService/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml; charset=utf-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="0"></stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Core: Retrive Members Data" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:vit=&quot;http://schemas.discovery.co.za/vitality&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;vit:GetEntityPersonalInfoRequestMessage schemaVersion=&quot;1.0&quot;&gt;&#xd;
         &lt;vit:EntityNumber&gt;1421970995&lt;/vit:EntityNumber&gt;&#xd;
      &lt;/vit:GetEntityPersonalInfoRequestMessage&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">Enrolment/enrolment-service.wsdl</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml; charset=utf-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="0"></stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Core: Update Members Attributes - PMV" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:vit=&quot;http://schemas.discovery.co.za/vitality&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;vit:SaveEntityAttributeRequest schemaVersion=&quot;1.0&quot;&gt;&#xd;
         &lt;vit:EntityNumber&gt;1424087813&lt;/vit:EntityNumber&gt;&#xd;
         &lt;vit:Effectivity&gt;&#xd;
            &lt;vit:EffectiveFrom&gt;${dateToday}&lt;/vit:EffectiveFrom&gt;&#xd;
            &lt;vit:EffectiveTo&gt;${dateToday}&lt;/vit:EffectiveTo&gt;&#xd;
         &lt;/vit:Effectivity&gt;&#xd;
         &lt;vit:EntityAttribute&gt;&#xd;
            &lt;vit:AttributeCode&gt;PMV&lt;/vit:AttributeCode&gt;&#xd;
            &lt;vit:AttributeValue&gt;NO&lt;/vit:AttributeValue&gt;&#xd;
         &lt;/vit:EntityAttribute&gt;&#xd;
      &lt;/vit:SaveEntityAttributeRequest&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">vitality-entities-proxy/entities-proxy.wsdl</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml; charset=utf-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="0"></stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Core: Retrive Members Attributes" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:vit=&quot;http://schemas.discovery.co.za/vitality&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;vit:RetrieveEntityAttributesRequest schemaVersion=&quot;1.0&quot;&gt;&#xd;
         &lt;vit:EntityNumber&gt;${vol.id}&lt;/vit:EntityNumber&gt;&#xd;
         &lt;vit:TenantIdentifier&gt;TVG&lt;/vit:TenantIdentifier&gt;&#xd;
      &lt;/vit:RetrieveEntityAttributesRequest&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">vitality-entities-proxy/entities-proxy.wsdl</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml; charset=utf-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="0"></stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="VOL: award Coins" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:vit=&quot;http://schemas.discovery.co.za/vitality&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;vit:GetEntityPersonalInfoRequestMessage schemaVersion=&quot;1.0&quot;&gt;&#xd;
         &lt;vit:EntityNumber&gt;1421970995&lt;/vit:EntityNumber&gt;&#xd;
      &lt;/vit:GetEntityPersonalInfoRequestMessage&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">Enrolment/enrolment-service.wsdl</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml; charset=utf-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="0"></stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Core: Possible Components" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="entityNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1436198426</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">entityNo</stringProp>
                </elementProp>
                <elementProp name="recalcFromDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">0001%2F01%2F01+12%3A00</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">recalcFromDate</stringProp>
                </elementProp>
                <elementProp name="action" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">recalcEntityComponents</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">action</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${vitalitycoreusBase}</stringProp>
            <stringProp name="HTTPSampler.port">${corePort}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">possco/possible_compo_recalc_servlet/?action=recalcEntityComponents</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="0"></stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Core: Benefit Activation" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:vit=&quot;http://schemas.discovery.co.za/vitality&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;vit:BenefitMaintenanceRequestMessage schemaVersion=&quot;1.0&quot;&gt;&#xd;
         &lt;vit:EntityNumber&gt;1422022572&lt;/vit:EntityNumber&gt;&#xd;
         &lt;vit:BenefitComponentIdentifier&gt;AWTCH&lt;/vit:BenefitComponentIdentifier&gt;&#xd;
         &lt;vit:PartnerMembershipNumber&gt;1422022572&lt;/vit:PartnerMembershipNumber&gt;&#xd;
         &lt;vit:EffectiveFrom&gt;2019-11-25&lt;/vit:EffectiveFrom&gt;&#xd;
         &lt;vit:EffectiveTo&gt;2021-07-31&lt;/vit:EffectiveTo&gt;&#xd;
         &lt;vit:ActivityIdentifier&gt;0&lt;/vit:ActivityIdentifier&gt;&#xd;
         &lt;vit:ReasonCode&gt;43&lt;/vit:ReasonCode&gt;&#xd;
         &lt;vit:Instruction&gt;ACTIVATION&lt;/vit:Instruction&gt;&#xd;
      &lt;/vit:BenefitMaintenanceRequestMessage&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">EventManager/eventService/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml; charset=utf-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="0"></stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="VRS: Simulate User" enabled="false"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET B2 Order" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">b2s.vitalityactiverewards.com</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">apple-gr/service/orders/${orderReference}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
              <collectionProp name="CookieManager.cookies"/>
              <boolProp name="CookieManager.clearEachIteration">false</boolProp>
            </CookieManager>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.9,ru;q=0.8,uk;q=0.7,de;q=0.6,la;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Basic dml0YWxpdHlfcHJkOlYjUSNwVFJ0Nnc=</stringProp>
                </elementProp>
                <elementProp name="Cache-Control" elementType="Header">
                  <stringProp name="Header.name">Cache-Control</stringProp>
                  <stringProp name="Header.value">max-age=0</stringProp>
                </elementProp>
                <elementProp name="Connection" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">keep-alive</stringProp>
                </elementProp>
                <elementProp name="Host" elementType="Header">
                  <stringProp name="Header.name">Host</stringProp>
                  <stringProp name="Header.value">b2s.vitalityactiverewards.com</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extracting Order ID" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">orderId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.orderID</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extracting Order Status" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">orderStatus</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.orderItems[0].status</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">FileWriter fstream = new FileWriter(&quot;/Users/DNesterov/Documents/AW_ORDERS_AND_STATUS.csv&quot;,true);
BufferedWriter out = new BufferedWriter(fstream);
out.write(vars.get(&quot;orderId&quot;));
out.append(vars.get(&quot;orderStatus&quot;));
out.write(System.getProperty(&quot;line.separator&quot;));
out.close();
fstream.close();</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">new groovy.json.JsonSlurper().parse(prev.getResponseData()).orderID.each { entry -&gt;
    new File(&apos;/Users/DNesterov/apache-jmeter-4.0/bin/AW_Orders_Killed.csv&apos;) &lt;&lt;  entry.get(&apos;orderID&apos;) &lt;&lt; &apos;,&apos; &lt;&lt;  entry.get(&apos;status&apos;) &lt;&lt; System.getProperty(&apos;line.separator&apos;)
}</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.orderItems[0].status</stringProp>
              <stringProp name="EXPECTED_VALUE">Killed</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">true</boolProp>
              <boolProp name="INVERT">true</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">true</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>true</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Events submission to CORE Via VAP" enabled="false"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="WSO2 Integration" enabled="true"/>
          <hashTree>
            <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${wso2Base}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </ConfigTestElement>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname=" POST Mango WSO2 Access Token" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="grant_type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">client_credentials</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">grant_type</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/token</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Basic ${wso2Token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extracting WSO2 AccessToken" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">wso2AccessToken</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">wso2AccessToken_NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname=" POST Insert Vitality Event" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:vit=&quot;http://schemas.discovery.co.za/vitality&quot;&gt;&#xd;
	&lt;soapenv:Header/&gt;&#xd;
		&lt;soapenv:Body&gt;&#xd;
			&lt;vit:AwardVitalityEventRequestMessage schemaVersion=&quot;1.0&quot;&gt; &#xd;
			&lt;vit:AwardVitalityEventRequest correlationNumber=&quot;1&quot;&gt; &#xd;
			&lt;vit:MemberNumber&gt;${mangoId}&lt;/vit:MemberNumber&gt; &#xd;
			&lt;vit:EventType&gt;PW1C&lt;/vit:EventType&gt; &#xd;
			&lt;vit:EventDate&gt;${dateToday}&lt;/vit:EventDate&gt; &#xd;
			&lt;vit:PartnerEntityNumber&gt;${mangoEmployerId}&lt;/vit:PartnerEntityNumber&gt; &#xd;
			&lt;/vit:AwardVitalityEventRequest&gt; &#xd;
			&lt;vit:AwardVitalityEventRequest correlationNumber=&quot;2&quot;&gt; &#xd;
			&lt;vit:MemberNumber&gt;${mangoId}&lt;/vit:MemberNumber&gt; &#xd;
			&lt;vit:EventType&gt;VWC1&lt;/vit:EventType&gt; &#xd;
			&lt;vit:EventDate&gt;${dateToday}&lt;/vit:EventDate&gt; &#xd;
			&lt;vit:PartnerEntityNumber&gt;${mangoEmployerId}&lt;/vit:PartnerEntityNumber&gt; &#xd;
			&lt;/vit:AwardVitalityEventRequest&gt; &#xd;
			&lt;/vit:AwardVitalityEventRequestMessage&gt;&#xd;
		&lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/vitalityEvent/1.0/*</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${wso2AccessToken}</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">text/xml</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/xml</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-59358374">The event inserted successfully</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname=" Points Processed By Core" enabled="true">
            <boolProp name="TransactionController.parent">true</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Wait Until Processed" enabled="true">
              <stringProp name="WhileController.condition">${__groovy(vars.get(&quot;eventPoints&quot;) = &quot;0&quot;,)}</stringProp>
            </WhileController>
            <hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname=" VAP POINTS" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname=" POST VAP: Login" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="j_username" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">dnesterov</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">j_username</stringProp>
                      </elementProp>
                      <elementProp name="j_password" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">Dimon4ik1010</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">j_password</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">vgtstg01-qa</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">vap/admin/j_spring_security_check</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname=" GET VAP: User Policy" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="entity_no" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${mangoId}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">entity_no</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">vgtstg01-qa</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">vap/admin/view_points/get_policies</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">*/*</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract: Policy ID" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">policyId</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.output.policy</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname=" GET VAP: Points" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="policy_no" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${policyId}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">policy_no</stringProp>
                      </elementProp>
                      <elementProp name="adjustment" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">0</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">adjustment</stringProp>
                      </elementProp>
                      <elementProp name="entity_no" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${mangoId}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">entity_no</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">vgtstg01-qa</stringProp>
                  <stringProp name="HTTPSampler.port"></stringProp>
                  <stringProp name="HTTPSampler.protocol">http</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">vap/admin/view_points/get_status</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">*/*</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract: eventPoints" enabled="true">
                    <stringProp name="JSONPostProcessor.referenceNames">eventPoints</stringProp>
                    <stringProp name="JSONPostProcessor.jsonPathExprs">$.output.statistics.points_events.category[0].sub_category[0].det_category[0].points</stringProp>
                    <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                    <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
                  </JSONPostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                <stringProp name="IfController.condition">${__groovy(vars.get(&quot;eventPoints&quot;) != &quot;0&quot;,)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
                  <intProp name="ActionProcessor.action">3</intProp>
                  <intProp name="ActionProcessor.target">0</intProp>
                  <stringProp name="ActionProcessor.duration">0</stringProp>
                </TestAction>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="RTE: New User Creation" enabled="false"/>
        <hashTree>
          <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${wso2Base}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout">30000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">300000</stringProp>
          </ConfigTestElement>
          <hashTree/>
          <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST WSO2 Token" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="grant_type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">client_credentials</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">grant_type</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/token</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Basic ${wso2Token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="apiAccessToken" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">wso2AccessToken</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="RTE: APOLLO FI" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RTE: FI" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&#xd;
 {&#xd;
  &quot;enrollmentRequestEncrypted&quot;: {&#xd;
    &quot;firstNameEncrypted&quot;: &quot;${encryptedFirstName}&quot;,&#xd;
    &quot;lastNameEncrypted&quot;: &quot;${encryptedLastName}&quot;,&#xd;
    &quot;dateOfBirthEncrypted&quot;: &quot;${encryptedDOB}&quot;,&#xd;
    &quot;insuredId&quot;: &quot;${__RandomString(15,qwertyuiopasdfghjklzxcvbnmjkdqwercsafmsjhdce)}&quot;,&#xd;
    &quot;gender&quot;: &quot;M&quot;,&#xd;
    &quot;vitalityCoverageEffectiveDate&quot;: &quot;${__RandomDate(yyyy-MM-dd,2018-01-01,${__time(yyyy-MM-dd)},,)}&quot;,&#xd;
    &quot;productIndicator&quot;: &quot;FULL&quot;,&#xd;
    &quot;emailAddress&quot;: &quot;test01@gmail.com&quot;,&#xd;
    &quot;zipCode&quot;: &quot;&quot;,&#xd;
    &quot;customerServicePhone&quot;: &quot;${encryptedPhoneNumber}&quot;,&#xd;
    &quot;reportField1&quot;: &quot;123&quot;,&#xd;
    &quot;reportField2&quot;: &quot;20170701&quot;,&#xd;
    &quot;reportField3&quot;: &quot;ABC&quot;,&#xd;
    &quot;reportField4&quot;: &quot;DEF&quot;&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/${wso2RtePath}/svc/0/apolloEnrollmentEncrypted</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${wso2AccessToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Entity Number" enabled="false">
                <stringProp name="JSONPostProcessor.referenceNames">apolloId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.enrollmentResponseEncrypted.vitalityId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert: User has been created" enabled="false">
                <stringProp name="JSON_PATH">$.enrollmentResponseEncrypted.insuredId</stringProp>
                <stringProp name="EXPECTED_VALUE"></stringProp>
                <boolProp name="JSONVALIDATION">false</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: Vitality ID present" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1165624797">vitalityId</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import java.security.MessageDigest;

MessageDigest digest = MessageDigest.getInstance(&quot;MD5&quot;);
byte[] bytes = digest.digest((&quot;${apolloId}&quot; + &quot;${msSalt}&quot;).getBytes());
vars.put(&quot;apolloIdEncrypted&quot;,javax.xml.bind.DatatypeConverter.printHexBinary(bytes).toLowerCase());</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="AES_Encryption" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.util.Base64;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.spec.SecretKeySpec;

//First Name
String text = &quot;${__RandomString(15,qwertyuiopasdfghjklzxcvbnmjkdqwercsafmsjhdce)}&quot;;         
String secret = &quot;Apollo11Apollo11&quot;;
SecretKeySpec aesKey = new SecretKeySpec(secret.getBytes(), &quot;AES&quot;);
Cipher cipher = Cipher.getInstance(&quot;AES&quot;);
cipher.init(Cipher.ENCRYPT_MODE, aesKey);
byte[] encrypted = cipher.doFinal(text.getBytes());
vars.put(&quot;encryptedFirstName&quot;,Base64.getEncoder().encodeToString(encrypted)); 

//Last Name
String text = &quot;Apollo-${__RandomString(15,qwertyuiopasdfghjklzxcvbnmjkdqwercsafmsjhdce)}&quot;;         
String secret = &quot;Apollo11Apollo11&quot;;
SecretKeySpec aesKey = new SecretKeySpec(secret.getBytes(), &quot;AES&quot;);
Cipher cipher = Cipher.getInstance(&quot;AES&quot;);
cipher.init(Cipher.ENCRYPT_MODE, aesKey);
byte[] encrypted = cipher.doFinal(text.getBytes());
vars.put(&quot;encryptedLastName&quot;,Base64.getEncoder().encodeToString(encrypted)); 

//DOB
String text = &quot;${__RandomDate(yyyy-MM-dd,1930-01-01,2001-12-31,,)}&quot;;         
String secret = &quot;Apollo11Apollo11&quot;;
SecretKeySpec aesKey = new SecretKeySpec(secret.getBytes(), &quot;AES&quot;);
Cipher cipher = Cipher.getInstance(&quot;AES&quot;);
cipher.init(Cipher.ENCRYPT_MODE, aesKey);
byte[] encrypted = cipher.doFinal(text.getBytes());
vars.put(&quot;encryptedDOB&quot;,Base64.getEncoder().encodeToString(encrypted)); 

//Phone Number
String text = &quot;312-224-${__Random(1000,9999,)}&quot;;         
String secret = &quot;Apollo11Apollo11&quot;;
SecretKeySpec aesKey = new SecretKeySpec(secret.getBytes(), &quot;AES&quot;);
Cipher cipher = Cipher.getInstance(&quot;AES&quot;);
cipher.init(Cipher.ENCRYPT_MODE, aesKey);
byte[] encrypted = cipher.doFinal(text.getBytes());
vars.put(&quot;encryptedPhoneNumber&quot;,Base64.getEncoder().encodeToString(encrypted)); </stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Activate" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;tenantId&quot;: &quot;27&quot;,&#xd;
&quot;mode&quot;: &quot;Activate&quot;,&#xd;
&quot;programme&quot;: {&#xd;
&quot;entityNumber&quot;: ${apolloId}, &#xd;
&quot;programType&quot;: &quot;FIBYOD&quot;,&#xd;
&quot;effectivePeriods&quot;: [&#xd;
{&#xd;
&quot;effectiveFrom&quot;: &quot;${dateToday}&quot;,&#xd;
&quot;effectiveTo&quot;: &quot;9999-12-30&quot;&#xd;
}&#xd;
]&#xd;
}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/${arPath}/1.0/Activation</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-vsl-timestamp</stringProp>
                    <stringProp name="Header.value">${timeStamp}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${wso2AccessToken}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Programme Activated Assertion " enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="480266719">Programme Activated and Benefit Activated and Goal Generated</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="BENEFIT_ENTETIES: APPL_B generated " enabled="false">
              <boolProp name="TransactionController.parent">true</boolProp>
              <boolProp name="TransactionController.includeTimers">false</boolProp>
            </TransactionController>
            <hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Wait Until Processed" enabled="true">
                <stringProp name="WhileController.condition">${__groovy(vars.get(&quot;benefitType_1&quot;) != &quot;APPL_B&quot;,)}
</stringProp>
              </WhileController>
              <hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="BENEFIT_ENTITY" enabled="true">
                  <stringProp name="dataSource">DHDB</stringProp>
                  <stringProp name="query">SELECT be.benefit_type, be.entity_no, bec.compo_id, be.date_time_last_modified, bec.eff_from
FROM benefit_entities be, benefit_entity_compos bec
WHERE be.benefit_entity_id = bec.benefit_entity_id
AND ENTITY_NO = ${apolloId}</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="variableNames">benefitType</stringProp>
                </JDBCSampler>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="1937235822">APPL_B</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">1</intProp>
                    <stringProp name="Assertion.scope">variable</stringProp>
                    <stringProp name="Scope.variable">benefitType_1</stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
                  <boolProp name="LoopController.continue_forever">true</boolProp>
                  <stringProp name="LoopController.loops">10</stringProp>
                </LoopController>
                <hashTree>
                  <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
                    <intProp name="ActionProcessor.action">3</intProp>
                    <intProp name="ActionProcessor.target">0</intProp>
                    <stringProp name="ActionProcessor.duration">0</stringProp>
                  </TestAction>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Start Next Thread Loop if failed" enabled="true">
                  <stringProp name="IfController.condition">${__groovy(vars.get(&quot;benefitType_1&quot;) = &quot;APPL_B&quot;,)}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <boolProp name="IfController.useExpression">true</boolProp>
                </IfController>
                <hashTree>
                  <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Start Next Thread Loop" enabled="true">
                    <intProp name="ActionProcessor.action">3</intProp>
                    <intProp name="ActionProcessor.target">0</intProp>
                    <stringProp name="ActionProcessor.duration">0</stringProp>
                  </TestAction>
                  <hashTree>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="-1300468476">${mnemonic}</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                      <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">1</intProp>
                      <stringProp name="Assertion.scope">variable</stringProp>
                      <stringProp name="Scope.variable">eventCreated_1</stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                </hashTree>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Verify that AR goal was generated" enabled="false"/>
            <hashTree>
              <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${vslBase}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </ConfigTestElement>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST VSL Token" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="grant_type" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">client_credentials</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">grant_type</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/token</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Basic ${vslTokenBase64}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="VSL Token" enabled="false">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">wso2AccessToken </stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;access_token&quot;:&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">Not_Found</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="vslAccessToken" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">vslToken</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Progress Tracker" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="offset" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">0</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">offset</stringProp>
                    </elementProp>
                    <elementProp name="limit" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">2147483647</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">limit</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/goal-progress-api/1.0/27/api/v1/progressTrackers/memberId/${apolloId}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${vslToken}</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Verify that AR goal was generated" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${vslBase}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </ConfigTestElement>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST VSL Token" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="grant_type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">client_credentials</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">grant_type</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/token</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Basic ${vslTokenBase64}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="VSL Token" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">wso2AccessToken </stringProp>
                <stringProp name="RegexExtractor.regex">&quot;access_token&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">Not_Found</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="vslAccessToken" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">vslToken</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Progress Tracker" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="offset" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">offset</stringProp>
                  </elementProp>
                  <elementProp name="limit" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">2147483647</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">limit</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/goal-progress-api/1.0/27/api/v1/progressTrackers/memberId/${apolloId}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${vslToken}</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="RTE: APOLLO SI" enabled="false"/>
          <hashTree>
            <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${wso2Base}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout">30000</stringProp>
              <stringProp name="HTTPSampler.response_timeout">300000</stringProp>
            </ConfigTestElement>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST VSL Token" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="grant_type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">client_credentials</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">grant_type</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/token</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Basic ${wso2Token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="VSL Token" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">wso2AccessToken </stringProp>
                <stringProp name="RegexExtractor.regex">&quot;access_token&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">Not_Found</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="apiAccessToken" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">wso2AccessToken</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RTE: SI" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&#xd;
 {&#xd;
  &quot;enrollmentRequestEncrypted&quot;: {&#xd;
    &quot;firstNameEncrypted&quot;: &quot;${encryptedFirstName}&quot;,&#xd;
    &quot;lastNameEncrypted&quot;: &quot;${encryptedLastName}&quot;,&#xd;
    &quot;dateOfBirthEncrypted&quot;: &quot;${encryptedDOB}&quot;,&#xd;
    &quot;insuredId&quot;: &quot;${randomString}&quot;,&#xd;
    &quot;gender&quot;: &quot;${__chooseRandom(M,F,U,randomProduct)}&quot;,&#xd;
    &quot;vitalityCoverageEffectiveDate&quot;: &quot;${__RandomDate(yyyy-MM-dd,2018-01-01,${__time(yyyy-MM-dd)},,)}&quot;,&#xd;
    &quot;productIndicator&quot;: &quot;SELF&quot;,&#xd;
    &quot;emailAddress&quot;: &quot;test1gmail.com&quot;,&#xd;
    &quot;zipCode&quot;: &quot;&quot;,&#xd;
    &quot;customerServicePhone&quot;: &quot;${encryptedPhoneNumber}&quot;,&#xd;
    &quot;reportField1&quot;: &quot;123&quot;,&#xd;
    &quot;reportField2&quot;: &quot;20170701&quot;,&#xd;
    &quot;reportField3&quot;: &quot;ABC&quot;,&#xd;
    &quot;reportField4&quot;: &quot;DEF&quot;&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/${wso2RtePath}/svc/0/apolloEnrollmentEncrypted</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${wso2AccessToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Entity Number" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">entityNo</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.enrollmentResponseEncrypted.vitalityId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert: User has been created" enabled="true">
                <stringProp name="JSON_PATH">$.enrollmentResponseEncrypted.insuredId</stringProp>
                <stringProp name="EXPECTED_VALUE"></stringProp>
                <boolProp name="JSONVALIDATION">false</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: Vitality ID present" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1165624797">vitalityId</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="RTE: Mango Consumer via WG" enabled="false"/>
          <hashTree>
            <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${wgBase}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </ConfigTestElement>
            <hashTree/>
            <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
              <collectionProp name="CookieManager.cookies"/>
              <boolProp name="CookieManager.clearEachIteration">true</boolProp>
            </CookieManager>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Mango: Create New User" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;firstName&quot;: &quot;FN${randomString}&quot;,&#xd;
	&quot;lastName&quot;: &quot;LN${randomString}&quot;,&#xd;
	&quot;login&quot;: &quot;VG${randomString}@mango.com&quot;,&#xd;
	&quot;password&quot;: &quot;Mango2019&quot;,&#xd;
	&quot;emailOptInInd&quot;: false,&#xd;
	&quot;tncAcceptInd&quot;: true,&#xd;
	&quot;loyaltyType&quot;: &quot;enroll&quot;,&#xd;
	&quot;phoneNumber&quot;: &quot;773555${randomNumericFour}&quot;,&#xd;
	&quot;phoneType&quot;: &quot;Cell&quot;,&#xd;
	&quot;address&quot;: {&#xd;
		&quot;zipCode&quot;: &quot;60606&quot;,&#xd;
		&quot;addOnZipCode&quot;: &quot;&quot;&#xd;
	},&#xd;
	&quot;dateOfBirth&quot;: &quot;05/21/1983&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/svc/profiles</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout">30000</stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: ENROLL Status" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-933465782">ENROLL_SUCCESS</stringProp>
                  <stringProp name="1473411863">ENROLL_FAIL</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">34</intProp>
              </ResponseAssertion>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Post Data Extract" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">String requestData = ctx.getCurrentSampler().getArguments().getArgument(0).getValue();
vars.put(&quot;requestData&quot;, requestData);</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extarcting Values from Post Data" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">mangoLogin;mangoPswd</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.login;$.password;</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">variable</stringProp>
                <stringProp name="Scope.variable">requestData</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">mangoLogin_NOT_FOUND;mangoPswd_NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Mango: Create Vitality ID" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">brhc/createVitalityId</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout">30000</stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract: vitalityId" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">mangoId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.vitalityId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">mangoId NOT FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract: jwtToken" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">jwtToken</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.jwt</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">jwtToken NOT FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">true</boolProp>
                <stringProp name="script">FileWriter fstream = new FileWriter(&quot;/Users/DNesterov/Documents/Mango_Consumer_Users_${enviroment}.csv&quot;,true);
BufferedWriter out = new BufferedWriter(fstream);
out.write(&quot;Login,&quot; + vars.get(&quot;mangoLogin&quot;) + &quot;,&quot; + &quot;Password,&quot; + vars.get(&quot;mangoPswd&quot;) + &quot;,&quot; + &quot;Vitality_ID,&quot; + vars.get(&quot;mangoId&quot;));
out.write(System.getProperty(&quot;line.separator&quot;));
out.close();
fstream.close();</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="RTE: White Lable" enabled="false"/>
          <hashTree>
            <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${zuulHostRte}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout">30000</stringProp>
              <stringProp name="HTTPSampler.response_timeout">300000</stringProp>
            </ConfigTestElement>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST RTE Token" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;issuedDate&quot;: &quot;${dateToday}&quot;,&#xd;
  &quot;entityNo&quot;: null,&#xd;
  &quot;expiryDate&quot;: &quot;${dateTomorrow}&quot;,&#xd;
  &quot;verifiedDate&quot;: null,&#xd;
  &quot;partnerId&quot;: &quot;BESTBUY&quot;,&#xd;
  &quot;generatedBy&quot;: &quot;PERF-TEST&quot;,&#xd;
  &quot;tokenType&quot;: &quot;Token&quot;,&#xd;
  &quot;tokenValue&quot;: &quot;${randomAlphaNumericString}&quot;,&#xd;
  &quot;status&quot;: &quot;P&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">vitality-whitelabel-domain-service-1/svc/2/token.json</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="RTE Token: WhiteLable" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">rteTokenWhiteLable</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.tokenValue</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RTE: WhiteLable" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
 &quot;enrollMemberRequest&quot;: {&#xd;
   &quot;coverageEffectiveDate&quot;: &quot;${dateToday}&quot;,&#xd;
   &quot;dateOfBirth&quot;: &quot;${__RandomDate(yyyy-MM-dd,1930-01-01,2001-12-31,,)}&quot;,&#xd;
   &quot;firstName&quot;: &quot;${randomString}&quot;,&#xd;
   &quot;gender&quot;: &quot;${__chooseRandom(M,F,U,randomProduct)}&quot;,&#xd;
   &quot;lastName&quot;: &quot;${randomString}&quot;,&#xd;
   &quot;partnerId&quot;: &quot;BESTBUY&quot;,&#xd;
   &quot;uniqueId&quot;: &quot;${rteTokenWhiteLable}&quot;,&#xd;
   &quot;zipCode&quot;: &quot;60605&quot;&#xd;
 }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">vitality-whitelabel-enrolment-service-1/svc/2/enrollMember</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: Vitality ID present" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1165624797">vitalityId</stringProp>
                  <stringProp name="-43807935">enrollMemberResponse</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">sapphireId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.enrollMemberResponse.vitalityId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NO sapphireId FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="RTE: Sapphire" enabled="false"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST MS WSO2 Access Token" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="grant_type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">client_credentials</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">grant_type</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/token</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Basic ${msWso2Token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="msWso2Bearer" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">msWso2Bearer</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST RTE Token: Generate" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;issuedDate&quot;: &quot;${dateToday}&quot;,&#xd;
  &quot;entityNo&quot;: null,&#xd;
  &quot;expiryDate&quot;: &quot;${dateTomorrow}&quot;,&#xd;
  &quot;verifiedDate&quot;: null,&#xd;
  &quot;partnerId&quot;: &quot;BESTBUY&quot;,&#xd;
  &quot;generatedBy&quot;: &quot;PERF-TEST&quot;,&#xd;
  &quot;tokenType&quot;: &quot;Token&quot;,&#xd;
  &quot;tokenValue&quot;: &quot;${randomAlphaNumericString}&quot;,&#xd;
  &quot;status&quot;: &quot;P&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${zuulHostRte}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">vitality-whitelabel-domain-service-1/svc/2/token.json</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.proxyHost">${zuulProxy}</stringProp>
              <stringProp name="HTTPSampler.proxyPort">${proxyPort}</stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="RTE Token: WhiteLable" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">sapphireRteToken</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.tokenValue</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert: sapphireRteToken" enabled="true">
                <stringProp name="JSON_PATH">$.tokenValue</stringProp>
                <stringProp name="EXPECTED_VALUE">${sapphireRteToken}</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">false</boolProp>
              </JSONPathAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RTE: Sapphire Create a New User" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
 &quot;enrollMemberRequest&quot;: {&#xd;
   &quot;coverageEffectiveDate&quot;: &quot;${dateToday}&quot;,&#xd;
   &quot;dateOfBirth&quot;: &quot;${__RandomDate(yyyy-MM-dd,1930-01-01,2001-12-31,,)}&quot;,&#xd;
   &quot;firstName&quot;: &quot;${randomString}&quot;,&#xd;
   &quot;gender&quot;: &quot;${__chooseRandom(M,F,U,randomProduct)}&quot;,&#xd;
   &quot;lastName&quot;: &quot;${randomString}&quot;,&#xd;
   &quot;partnerId&quot;: &quot;BESTBUY&quot;,&#xd;
   &quot;uniqueId&quot;: &quot;${sapphireRteToken}&quot;,&#xd;
   &quot;zipCode&quot;: &quot;60605&quot;&#xd;
 }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/whitelabel-rte/1.0/svc/2/enrollMember</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${wso2AccessToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: Vitality ID present" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1203236063">errorMessage</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">6</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract entityNo" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">sapphireId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.enrollMemberResponse.vitalityId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Activate" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;tenantId&quot;: &quot;32&quot;,&#xd;
&quot;mode&quot;: &quot;Activate&quot;,&#xd;
&quot;programme&quot;: {&#xd;
&quot;entityNumber&quot;: ${sapphireId}, &#xd;
&quot;programType&quot;: &quot;ActiveRewards&quot;,&#xd;
&quot;effectivePeriods&quot;: [&#xd;
{&#xd;
&quot;effectiveFrom&quot;: &quot;${dateToday}&quot;,&#xd;
&quot;effectiveTo&quot;: &quot;9999-12-30&quot;&#xd;
}&#xd;
]&#xd;
}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/${arPath}/1.0/Activation</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-vsl-timestamp</stringProp>
                    <stringProp name="Header.value">${timeStamp}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${msWso2Bearer}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Programme Activated Assertion " enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1158061982">Programme Activated and Goal Generated</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="BENEFIT_ENTETIES: APPL_B generated " enabled="true">
              <boolProp name="TransactionController.parent">true</boolProp>
              <boolProp name="TransactionController.includeTimers">false</boolProp>
            </TransactionController>
            <hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Wait Until Processed" enabled="true">
                <stringProp name="WhileController.condition">${__groovy(vars.get(&quot;benefitType_1&quot;) != &quot;APPL_B&quot;,)}
</stringProp>
              </WhileController>
              <hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="BENEFIT_ENTITY" enabled="true">
                  <stringProp name="dataSource">DHDB</stringProp>
                  <stringProp name="query">SELECT be.benefit_type, be.entity_no, bec.compo_id, be.date_time_last_modified, bec.eff_from
FROM benefit_entities be, benefit_entity_compos bec
WHERE be.benefit_entity_id = bec.benefit_entity_id
AND ENTITY_NO = ${sapphireId}</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="variableNames">benefitType</stringProp>
                </JDBCSampler>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="1937235822">APPL_B</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">1</intProp>
                    <stringProp name="Assertion.scope">variable</stringProp>
                    <stringProp name="Scope.variable">benefitType_1</stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
                  <boolProp name="LoopController.continue_forever">true</boolProp>
                  <stringProp name="LoopController.loops">10</stringProp>
                </LoopController>
                <hashTree>
                  <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
                    <intProp name="ActionProcessor.action">3</intProp>
                    <intProp name="ActionProcessor.target">0</intProp>
                    <stringProp name="ActionProcessor.duration">0</stringProp>
                  </TestAction>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Start Next Thread Loop if failed" enabled="true">
                  <stringProp name="IfController.condition">${__groovy(vars.get(&quot;benefitType_1&quot;) = &quot;APPL_B&quot;,)}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <boolProp name="IfController.useExpression">true</boolProp>
                </IfController>
                <hashTree>
                  <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Start Next Thread Loop" enabled="true">
                    <intProp name="ActionProcessor.action">3</intProp>
                    <intProp name="ActionProcessor.target">0</intProp>
                    <stringProp name="ActionProcessor.duration">0</stringProp>
                  </TestAction>
                  <hashTree>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="-1300468476">${mnemonic}</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                      <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">1</intProp>
                      <stringProp name="Assertion.scope">variable</stringProp>
                      <stringProp name="Scope.variable">eventCreated_1</stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                </hashTree>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Verify that AR goal was generated: AFTER re-try" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${vslBase}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </ConfigTestElement>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST VSL Token" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="grant_type" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">client_credentials</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">grant_type</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${vslBase}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/token</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Basic ${vslTokenBase64}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="VSL Token" enabled="false">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">wso2AccessToken </stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;access_token&quot;:&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">Not_Found</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="vslAccessToken" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">vslToken</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Progress Tracker" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="offset" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">0</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">offset</stringProp>
                    </elementProp>
                    <elementProp name="limit" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">2147483647</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">limit</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${vslBase}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/goal-progress-api/1.0/32/api/v1/progressTrackers/memberId/${sapphireId}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${vslToken}</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Active Rewards" enabled="false"/>
        <hashTree>
          <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${wso2Base}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout">30000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">300000</stringProp>
          </ConfigTestElement>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST WSO2 Token" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="grant_type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">client_credentials</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">grant_type</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/token</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Basic ${wso2Token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="VSL Token" enabled="false">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">wso2AccessToken </stringProp>
              <stringProp name="RegexExtractor.regex">&quot;access_token&quot;:&quot;(.+?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">Not_Found</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="apiAccessToken" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">wso2AccessToken</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Watch Dispatch" enabled="true"/>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="x-vsl-timestamp" elementType="Header">
                  <stringProp name="Header.name">x-vsl-timestamp</stringProp>
                  <stringProp name="Header.value">${timeStamp}</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${wso2AccessToken}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET: Repayment History" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="memberId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">1439035138</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">memberId</stringProp>
                  </elementProp>
                  <elementProp name="tenantId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">27</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">tenantId</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/ActiveRewards/1.0/RepaymentHistory</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract: purchase ID" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">purchaseId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.payload.content.purchase[0].purchaseId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract: purchaseReference" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">purchaseReference</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.payload.content.purchase[0].purchaseInstallmentInfo.purchaseReference[0].purchaseReference</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ReGex: tenant" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">URL</stringProp>
                <stringProp name="RegexExtractor.refname">tenantID</stringProp>
                <stringProp name="RegexExtractor.regex">tenantId=(.*)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Scope.variable"></stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: Watch Dispatch" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;purchaseReference&quot;: &quot;${purchaseReference}&quot;,&#xd;
	&quot;purchaseReferenceType&quot;: &quot;OrderReference&quot;,&#xd;
	&quot;distributorReferenceNumber&quot;: &quot;${purchaseId}&quot;,&#xd;
	&quot;courier&quot;: &quot;UPS&quot;,&#xd;
	&quot;orderTrackingNumber&quot;: &quot;1ZA828Y90334683642&quot;,&#xd;
	&quot;dateOfDispatch&quot;: &quot;${dateToday}T19:00:01Z&quot;,&#xd;
	&quot;tenantId&quot;: &quot;${tenantID}&quot;,&#xd;
	&quot;purchaseId&quot;: &quot;${purchaseId}&quot;,&#xd;
	&quot;supplierId&quot;: &quot;${supplierId}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/ActiveRewards/1.0/WatchDispatch</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="2132625647">Watch Dispatch successful</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="CG: Create" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Goal: HAS" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;goalManagementMessage&quot;: {&#xd;
    &quot;managementInstruction&quot;: &quot;CREATE&quot;,&#xd;
    &quot;goal&quot;: {&#xd;
      &quot;goalId&quot;: null,&#xd;
      &quot;goalTitle&quot;: &quot;HAS PPV&quot;,&#xd;
      &quot;vitalityMemberId&quot;: 1431787793,&#xd;
      &quot;campaignId&quot;: &quot;1431787793&quot;,&#xd;
      &quot;adjudications&quot;: {&#xd;
        &quot;apolloAdjudications&quot;: [&#xd;
          {&#xd;
            &quot;type&quot;: &quot;healthSurveys&quot;,&#xd;
            &quot;adjudicator&quot;: &quot;AETNA&quot;,&#xd;
            &quot;targetValue&quot;: 5.0,&#xd;
            &quot;targetUnit&quot;: null,&#xd;
            &quot;frequency&quot;: &quot;weekly&quot;,&#xd;
            &quot;targetMetric&quot;: &quot;sessions&quot;,&#xd;
            &quot;targetFunction&quot;: &quot;sum&quot;,&#xd;
            &quot;targetOperator&quot;: &quot;any&quot;&#xd;
          }&#xd;
        ],&#xd;
&quot;healthSurveys&quot;: [&#xd;
          {&#xd;
            &quot;adjudicator&quot;: &quot;VITALITY&quot;,&#xd;
            &quot;surveyId&quot;: 21781346557&#xd;
          }&#xd;
        ]&#xd;
      },&#xd;
      &quot;description&quot;: &quot;Goal Description&quot;,&#xd;
      &quot;title&quot;: &quot;Goal title!&quot;,&#xd;
      &quot;howToAchieve&quot;: &quot;Complete Survey&quot;,&#xd;
      &quot;externalMemberId&quot;: &quot;180490929&quot;,&#xd;
      &quot;goalState&quot;: &quot;UNAWARDED&quot;,&#xd;
      &quot;startDate&quot;:&quot;${dateToday}T09:52:25.371000000-05:00[America/Chicago]&quot;,&#xd;
      &quot;internalEndDate&quot;:&quot;${dateTodayPlusFour}T09:52:25.371000000-05:00[America/Chicago]&quot;,&#xd;
      &quot;monitorEndDate&quot;:&quot;${dateTodayPlusFive}T09:52:25.371000000-05:00[America/Chicago]&quot;,&#xd;
      &quot;externalEndDate&quot;:&quot;${dateTodayPlusSix}T09:52:25.371000000-05:00[America/Chicago]&quot;,&#xd;
      &quot;partnerId&quot;:&quot;AETNA&quot;,&#xd;
      &quot;buttons&quot;: [&#xd;
        {&#xd;
          &quot;buttonLabel&quot;: &quot;Button-1&quot;,&#xd;
          &quot;buttonAction&quot;: &quot;openSSO:/apollo/health_survey/21781346557&quot;,&#xd;
          &quot;buttonIndex&quot;: 0&#xd;
        },&#xd;
        {&#xd;
          &quot;buttonLabel&quot;: &quot;Help&quot;,&#xd;
          &quot;buttonAction&quot;: &quot;openURL:http://www.aetna.com&quot;,&#xd;
          &quot;buttonIndex&quot;: 1&#xd;
        }&#xd;
      ],&#xd;
       &quot;reward&quot;: {&#xd;
      &quot;coreEvents&quot;: [&#xd;
        {&#xd;
          &quot;eventMnemonic&quot;: &quot;HAMS&quot;,&#xd;
          &quot;eventValue&quot;: 10&#xd;
        }&#xd;
      ]&#xd;
    }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${zuulBase}</stringProp>
            <stringProp name="HTTPSampler.port">${zuulPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${zuulCGPath}/svc/27/maintainGoal</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: Rresponce code is 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Goal: BRTH" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&#xd;
{  &#xd;
   &quot;goalManagementMessage&quot;:{  &#xd;
      &quot;managementInstruction&quot;:&quot;CREATE&quot;,&#xd;
      &quot;goal&quot;:{  &#xd;
         &quot;goalId&quot;:null,&#xd;
         &quot;goalTitle&quot;:&quot;Breathe Goal&quot;,&#xd;
         &quot;vitalityMemberId&quot;:${vitalityIdForCG},&#xd;
         &quot;campaignId&quot;:${vitalityIdForCG},&#xd;
         &quot;adjudications&quot;: {&#xd;
           &quot;apolloAdjudications&quot;: [&#xd;
             {&#xd;
               &quot;adjudicator&quot;: &quot;AETNA&quot;,&#xd;
               &quot;frequency&quot;: null,&#xd;
               &quot;targetFunction&quot;: &quot;sum&quot;,&#xd;
               &quot;targetMetric&quot;: &quot;sessions&quot;,&#xd;
               &quot;targetOperator&quot;: &quot;&gt;=&quot;,&#xd;
               &quot;targetValue&quot;: 5,&#xd;
               &quot;type&quot;: &quot;breathe&quot;&#xd;
             }&#xd;
           ]&#xd;
         },&#xd;
         &quot;description&quot;:&quot;Please try breathing!&quot;,&#xd;
         &quot;howToAchieve&quot;:&quot;Use the Breathe app&quot;,&#xd;
         &quot;externalMemberId&quot;:&quot;${apolloIdForCG}&quot;,&#xd;
         &quot;goalState&quot;:&quot;UNAWARDED&quot;,&#xd;
         &quot;startDate&quot;:&quot;${dateTomorrow}T09:52:25.371000000-05:00[America/Chicago]&quot;,&#xd;
         &quot;internalEndDate&quot;:&quot;${dateTodayPlusFour}T09:52:25.371000000-05:00[America/Chicago]&quot;,&#xd;
         &quot;monitorEndDate&quot;:&quot;${dateTodayPlusFive}T09:52:25.371000000-05:00[America/Chicago]&quot;,&#xd;
         &quot;externalEndDate&quot;:&quot;${dateTodayPlusSix}T09:52:25.371000000-05:00[America/Chicago]&quot;,&#xd;
         &quot;partnerId&quot;:&quot;AETNA&quot;,&#xd;
         &quot;buttons&quot;:[  &#xd;
            {  &#xd;
               &quot;buttonLabel&quot;:&quot;Open in maps!&quot;,&#xd;
               &quot;buttonAction&quot;:&quot;openMaps:http://maps.apple.com/lat=1234323,long=987324&quot;,&#xd;
               &quot;buttonIndex&quot;:0&#xd;
            },&#xd;
            {  &#xd;
               &quot;buttonLabel&quot;:&quot;Find out more!&quot;,&#xd;
               &quot;buttonAction&quot;:&quot;openURL:http://www.aetna.com/breathe.html&quot;,&#xd;
               &quot;buttonIndex&quot;:1&#xd;
            }&#xd;
         ],&#xd;
         &quot;reward&quot;:{  &#xd;
            &quot;coreEvents&quot;:[  &#xd;
               {  &#xd;
                  &quot;eventMnemonic&quot;:&quot;BRTH&quot;,&#xd;
                  &quot;eventValue&quot;:5&#xd;
               }&#xd;
            ]&#xd;
         }&#xd;
      }&#xd;
   }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${zuulBase}/${zuulCGPath}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">svc/27/maintainGoal</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1746537160">CREATED</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="CampaignGoal_ID" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">CampaignGoal_ID</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.goalNotificationMessage.goal.goalId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Adjudicate Goal" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
&quot;goalManagementMessage&quot;: {&#xd;
&quot;managementInstruction&quot;: &quot;ADJUDICATE&quot;, &#xd;
&quot;adjudication&quot;: {&#xd;
&quot;goalId&quot;: ${CampaignGoal_ID},&#xd;
&quot;partnerId&quot;: &quot;AETNA&quot;,&#xd;
&quot;adjudicationDecision&quot;: &quot;AWARDED&quot;,&#xd;
&quot;adjudicationDate&quot;: &quot;${dateToday}T09:52:25.371000000-06:00[America/Chicago]&quot;,&#xd;
&quot;adjudicationProcessedDate&quot;: &quot;${dateToday}T09:52:25.371000000-06:00[America/Chicago]&quot;&#xd;
}&#xd;
}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${zuulBase}/${zuulCGPath}</stringProp>
            <stringProp name="HTTPSampler.port">${zuulPort}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">svc/27/maintainGoal</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: Rresponce code is 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Goal: HAS" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;goalManagementMessage&quot;: {&#xd;
    &quot;managementInstruction&quot;: &quot;CREATE&quot;,&#xd;
    &quot;goal&quot;: {&#xd;
      &quot;goalId&quot;: null,&#xd;
      &quot;goalTitle&quot;: &quot;Dillans HA&quot;,&#xd;
      &quot;vitalityMemberId&quot;: 1420821439,&#xd;
      &quot;campaignId&quot;: &quot;1420054825&quot;,&#xd;
      &quot;adjudications&quot;: {&#xd;
        &quot;apolloAdjudications&quot;: [&#xd;
          {&#xd;
            &quot;type&quot;: &quot;healthSurveys&quot;,&#xd;
            &quot;adjudicator&quot;: &quot;AETNA&quot;,&#xd;
            &quot;targetValue&quot;: 5.0,&#xd;
            &quot;targetUnit&quot;: null,&#xd;
            &quot;frequency&quot;: &quot;weekly&quot;,&#xd;
            &quot;targetMetric&quot;: &quot;sessions&quot;,&#xd;
            &quot;targetFunction&quot;: &quot;sum&quot;,&#xd;
            &quot;targetOperator&quot;: &quot;any&quot;&#xd;
          }&#xd;
        ],&#xd;
&quot;healthSurveys&quot;: [&#xd;
          {&#xd;
            &quot;adjudicator&quot;: &quot;VITALITY&quot;,&#xd;
            &quot;surveyId&quot;: 1229715578&#xd;
          }&#xd;
        ]&#xd;
      },&#xd;
      &quot;description&quot;: &quot;Goal Description&quot;,&#xd;
      &quot;title&quot;: &quot;Goal title!&quot;,&#xd;
      &quot;howToAchieve&quot;: &quot;Complete Survey&quot;,&#xd;
      &quot;externalMemberId&quot;: &quot;IY90WT21B03V67I6TH4X&quot;,&#xd;
      &quot;goalState&quot;: &quot;UNAWARDED&quot;,&#xd;
      &quot;startDate&quot;:&quot;${dateToday}T09:52:25.371000000-05:00[America/Chicago]&quot;,&#xd;
      &quot;internalEndDate&quot;:&quot;${dateTodayPlusFour}T09:52:25.371000000-05:00[America/Chicago]&quot;,&#xd;
      &quot;monitorEndDate&quot;:&quot;${dateTodayPlusFive}T09:52:25.371000000-05:00[America/Chicago]&quot;,&#xd;
      &quot;externalEndDate&quot;:&quot;${dateTodayPlusSix}T09:52:25.371000000-05:00[America/Chicago]&quot;,&#xd;
      &quot;partnerId&quot;:&quot;AETNA&quot;,&#xd;
      &quot;buttons&quot;: [&#xd;
        {&#xd;
          &quot;buttonLabel&quot;: &quot;Take a Survey&quot;,&#xd;
          &quot;buttonAction&quot;: &quot;openSSO:/apollo/health_survey/1229715578&quot;,&#xd;
          &quot;buttonIndex&quot;: 0&#xd;
        },&#xd;
        {&#xd;
          &quot;buttonLabel&quot;: &quot;Help&quot;,&#xd;
          &quot;buttonAction&quot;: &quot;openURL:http://www.aetna.com&quot;,&#xd;
          &quot;buttonIndex&quot;: 1&#xd;
        }&#xd;
      ],&#xd;
       &quot;reward&quot;: {&#xd;
      &quot;coreEvents&quot;: [&#xd;
        {&#xd;
          &quot;eventMnemonic&quot;: &quot;HAMS&quot;,&#xd;
          &quot;eventValue&quot;: 10&#xd;
        }&#xd;
      ]&#xd;
    }&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${zuulBase}</stringProp>
            <stringProp name="HTTPSampler.port">${zuulPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${zuulCGPath}/svc/27/maintainGoal</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: Rresponce code is 200" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${wso2Base}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout">30000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">300000</stringProp>
          </ConfigTestElement>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Apollo WSO2 Access Token" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="grant_type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">client_credentials</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">grant_type</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/token</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Basic ${wso2Token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extracting WSO2 AccessToken" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">wso2AccessToken</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST HAS" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
&quot;ApolloHealthAssessmentSurvey&quot;: {&#xd;
&quot;name&quot;: &quot;Health Ambition Survey&quot;,&#xd;
&quot;webDescription&quot;: &quot;This program is designed to help you reach some of your health goals. In addition to having new opportunities to earn points, the program will involve sending messages for healthier behavior. This survey is meant to help personalize your program. Please answer each question and submit your survey to earn your points.&quot;,&#xd;
&quot;questions&quot;: [&#xd;
	{&#xd;
	&quot;tempUniqueId&quot;: 1,&#xd;
	&quot;order&quot;: 1,&#xd;
	&quot;question&quot;: &quot;Today I feel that I…&quot;,&#xd;
	&quot;questionType&quot;: &quot;chooseOne&quot;,&#xd;
	&quot;questionGuidance&quot;: &quot;Please choose one answer&quot;,&#xd;
	&quot;conditionalParent&quot;: null,&#xd;
	&quot;options&quot;: [&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;A&quot;,&#xd;
					&quot;text&quot;: &quot;have below average health&quot;,&#xd;
					&quot;order&quot;: 1&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;B&quot;,&#xd;
					&quot;text&quot;: &quot;have average health&quot;,&#xd;
					&quot;order&quot;: 2&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;C&quot;,&#xd;
					&quot;text&quot;: &quot;have above average health&quot;,&#xd;
					&quot;order&quot;: 3&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;D&quot;,&#xd;
					&quot;text&quot;: &quot;am very healthy&quot;,&#xd;
					&quot;order&quot;: 4&#xd;
				}]&#xd;
		},&#xd;
		{&#xd;
		&quot;tempUniqueId&quot;: 2,&#xd;
		&quot;order&quot;: 2,&#xd;
		&quot;question&quot;: &quot;What best describes your desire to change your health status…&quot;,&#xd;
		&quot;questionType&quot;: &quot;chooseOne&quot;,&#xd;
		&quot;questionGuidance&quot;: &quot;Choose one&quot;,&#xd;
		&quot;conditionalParent&quot;: {&#xd;
		&quot;tempUniqueIdParent&quot;: 1,&#xd;
		&quot;parentQuestionAnswer&quot;: [&quot;A&quot;]&#xd;
		},&#xd;
			&quot;options&quot;: [&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;A&quot;,&#xd;
					&quot;text&quot;: &quot;I am content with my health&quot;,&#xd;
					&quot;order&quot;: 1&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;B&quot;,&#xd;
					&quot;text&quot;: &quot;I want to take steps to improve my health&quot;,&#xd;
					&quot;order&quot;: 2&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;C&quot;,&#xd;
					&quot;text&quot;: &quot;I am actively taking steps to improve my health&quot;,&#xd;
					&quot;order&quot;: 3&#xd;
				}]&#xd;
		},&#xd;
		{&#xd;
		&quot;tempUniqueId&quot;: 3,&#xd;
		&quot;order&quot;: 3,&#xd;
		&quot;question&quot;: &quot;What best describes your desire to change your health status…&quot;,&#xd;
		&quot;questionType&quot;: &quot;chooseOne&quot;,&#xd;
		&quot;questionGuidance&quot;: &quot;Choose one&quot;,&#xd;
		&quot;conditionalParent&quot;: {&#xd;
		&quot;tempUniqueIdParent&quot;: 1,&#xd;
		&quot;parentQuestionAnswer&quot;: [&quot;B&quot;]&#xd;
		},&#xd;
			&quot;options&quot;: [&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;A&quot;,&#xd;
					&quot;text&quot;: &quot;I am content with my health&quot;,&#xd;
					&quot;order&quot;: 1&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;B&quot;,&#xd;
					&quot;text&quot;: &quot;I want to take steps to improve my health&quot;,&#xd;
					&quot;order&quot;: 2&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;C&quot;,&#xd;
					&quot;text&quot;: &quot;I am actively taking steps to improve my health&quot;,&#xd;
					&quot;order&quot;: 3&#xd;
				}]&#xd;
		},&#xd;
		{&#xd;
		&quot;tempUniqueId&quot;: 4,&#xd;
		&quot;order&quot;: 4,&#xd;
		&quot;question&quot;: &quot;What are your three biggest motivations around health?&quot;,&#xd;
		&quot;questionType&quot;: &quot;chooseMinMax&quot;,&#xd;
		&quot;questionGuidance&quot;: &quot;Please choose up to 3 answers&quot;,&#xd;
		&quot;conditionalParent&quot;: null,&#xd;
		&quot;minMaxOptions&quot;: &#xd;
		{&#xd;
    		&quot;choiceMinimum&quot;: 1,&#xd;
    		&quot;choiceMaximum&quot;: 3&#xd;
    	},&#xd;
			&quot;options&quot;: [&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;A&quot;,&#xd;
					&quot;text&quot;: &quot;I want to be more active&quot;,&#xd;
					&quot;order&quot;: 1&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;B&quot;,&#xd;
					&quot;text&quot;: &quot;I want to have more energy / feel better&quot;,&#xd;
					&quot;order&quot;: 2&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;C&quot;,&#xd;
					&quot;text&quot;: &quot;I want to eat better&quot;,&#xd;
					&quot;order&quot;: 3&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;D&quot;,&#xd;
					&quot;text&quot;: &quot;I want to lose weight&quot;,&#xd;
					&quot;order&quot;: 4&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;E&quot;,&#xd;
					&quot;text&quot;: &quot;I want to look better&quot;,&#xd;
					&quot;order&quot;: 5&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;F&quot;,&#xd;
					&quot;text&quot;: &quot;I want to ensure long-term health for my family&quot;,&#xd;
					&quot;order&quot;: 6&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;G&quot;,&#xd;
					&quot;text&quot;: &quot;I want to reduce medical expenses&quot;,&#xd;
					&quot;order&quot;: 7&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;H&quot;,&#xd;
					&quot;text&quot;: &quot;I want to manage my medical condition better&quot;,&#xd;
					&quot;order&quot;: 8&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;I&quot;,&#xd;
					&quot;text&quot;: &quot;I want to sleep better&quot;,&#xd;
					&quot;order&quot;: 9&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;J&quot;,&#xd;
					&quot;text&quot;: &quot;I want to manage my stress &quot;,&#xd;
					&quot;order&quot;: 10&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;K&quot;,&#xd;
					&quot;text&quot;: &quot;I want to stop using substances that impair my health (alcohol / tobacco / recreational drugs)&quot;,&#xd;
					&quot;order&quot;: 11&#xd;
				}]&#xd;
		},&#xd;
		{&#xd;
		&quot;tempUniqueId&quot;: 5,&#xd;
		&quot;order&quot;: 5,&#xd;
		&quot;question&quot;: &quot;Do any of these barriers prevent you from improving your health?&quot;,&#xd;
		&quot;questionType&quot;: &quot;chooseMinMax&quot;,&#xd;
		&quot;questionGuidance&quot;: &quot;Please choose any that apply&quot;,&#xd;
		&quot;conditionalParent&quot;: null,&#xd;
		&quot;minMaxOptions&quot;: &#xd;
		{&#xd;
    		&quot;choiceMinimum&quot;: 1,&#xd;
    		&quot;choiceMaximum&quot;: 8&#xd;
    	},&#xd;
			&quot;options&quot;: [&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;A&quot;,&#xd;
					&quot;text&quot;: &quot;I am too busy caring for others to spend time on my health&quot;,&#xd;
					&quot;order&quot;: 1&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;B&quot;,&#xd;
					&quot;text&quot;: &quot;I have trouble doing the daily tasks that will improve my health&quot;,&#xd;
					&quot;order&quot;: 2&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;C&quot;,&#xd;
					&quot;text&quot;: &quot;I am too busy professionally to spend time on my health&quot;,&#xd;
					&quot;order&quot;: 3&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;D&quot;,&#xd;
					&quot;text&quot;: &quot;Improving my health will cost too much money&quot;,&#xd;
					&quot;order&quot;: 4&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;E&quot;,&#xd;
					&quot;text&quot;: &quot;I struggle to find the motivation to improve my health&quot;,&#xd;
					&quot;order&quot;: 5&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;F&quot;,&#xd;
					&quot;text&quot;: &quot;I feel my health is beyond my control&quot;,&#xd;
					&quot;order&quot;: 6&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;G&quot;,&#xd;
					&quot;text&quot;: &quot;I do not trust in the health advice I receive&quot;,&#xd;
					&quot;order&quot;: 7&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;H&quot;,&#xd;
					&quot;text&quot;: &quot;The healthcare system is too complex &quot;,&#xd;
					&quot;order&quot;: 8&#xd;
				}]&#xd;
		},&#xd;
		{&#xd;
	    &quot;tempUniqueId&quot;: 6,&#xd;
	    &quot;order&quot;: 6,&#xd;
	    &quot;question&quot;: &quot;How frequently do you experience periods of stress, anxiety or depression?&quot;,&#xd;
	    &quot;questionType&quot;: &quot;chooseOneSlider&quot;,&#xd;
	    &quot;conditionalParent&quot;: null,&#xd;
	    	&quot;options&quot;: [&#xd;
			      {&#xd;
			        &quot;alpha&quot;: &quot;A&quot;,&#xd;
			        &quot;text&quot;: &quot;Never&quot;,&#xd;
			        &quot;order&quot;: 1&#xd;
			      },&#xd;
			      {&#xd;
			        &quot;alpha&quot;: &quot;B&quot;,&#xd;
			        &quot;text&quot;: &quot;Occasionally&quot;,&#xd;
			        &quot;order&quot;: 2&#xd;
			      },&#xd;
			      {&#xd;
			        &quot;alpha&quot;: &quot;C&quot;,&#xd;
			        &quot;text&quot;: &quot;Frequently&quot;,&#xd;
			        &quot;order&quot;: 3&#xd;
			      },&#xd;
			      {&#xd;
			        &quot;alpha&quot;: &quot;D&quot;,&#xd;
			        &quot;text&quot;: &quot;Most of the time&quot;,&#xd;
			        &quot;order&quot;: 4&#xd;
			      }]&#xd;
		},&#xd;
		{&#xd;
	    &quot;tempUniqueId&quot;: 7,&#xd;
	    &quot;order&quot;: 7,&#xd;
	    &quot;question&quot;: &quot;How frequently would you like to receive messages around improving your health or saving money on health-related expenses?&quot;,&#xd;
	    &quot;questionType&quot;: &quot;chooseOneSlider&quot;,&#xd;
	    &quot;conditionalParent&quot;: null,&#xd;
	    	&quot;options&quot;: [&#xd;
			      {&#xd;
			        &quot;alpha&quot;: &quot;A&quot;,&#xd;
			        &quot;text&quot;: &quot;Once a week&quot;,&#xd;
			        &quot;order&quot;: 1&#xd;
			      },&#xd;
			      {&#xd;
			        &quot;alpha&quot;: &quot;B&quot;,&#xd;
			        &quot;text&quot;: &quot;A few times a week&quot;,&#xd;
			        &quot;order&quot;: 2&#xd;
			      },&#xd;
			      {&#xd;
			        &quot;alpha&quot;: &quot;C&quot;,&#xd;
			        &quot;text&quot;: &quot;Once a day&quot;,&#xd;
			        &quot;order&quot;: 3&#xd;
			      },&#xd;
			      {&#xd;
			        &quot;alpha&quot;: &quot;D&quot;,&#xd;
			        &quot;text&quot;: &quot;Multiple times a day&quot;,&#xd;
			        &quot;order&quot;: 4&#xd;
			      }]&#xd;
		},&#xd;
		{&#xd;
		&quot;tempUniqueId&quot;: 8,&#xd;
		&quot;order&quot;: 8,&#xd;
		&quot;question&quot;: &quot;When are you most likely to read short messages from the program on your phone or watch?&quot;,&#xd;
		&quot;questionType&quot;: &quot;chooseOne&quot;,&#xd;
		&quot;questionGuidance&quot;: &quot;Please choose one answer&quot;,&#xd;
		&quot;conditionalParent&quot;: null,&#xd;
			&quot;options&quot;: [&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;A&quot;,&#xd;
					&quot;text&quot;: &quot;Weekdays&quot;,&#xd;
					&quot;order&quot;: 1&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;B&quot;,&#xd;
					&quot;text&quot;: &quot;Weekends&quot;,&#xd;
					&quot;order&quot;: 2&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;C&quot;,&#xd;
					&quot;text&quot;: &quot;Either&quot;,&#xd;
					&quot;order&quot;: 3&#xd;
				}]&#xd;
		},&#xd;
		{&#xd;
	    &quot;tempUniqueId&quot;: 9,&#xd;
	    &quot;order&quot;: 9,&#xd;
	    &quot;question&quot;: &quot;At what time of day do you prefer to receive messages on your phone or watch?&quot;,&#xd;
	    &quot;questionType&quot;: &quot;chooseOneSlider&quot;,&#xd;
	    &quot;conditionalParent&quot;: null,&#xd;
	    	&quot;options&quot;: [&#xd;
			      {&#xd;
			        &quot;alpha&quot;: &quot;A&quot;,&#xd;
			        &quot;text&quot;: &quot;Before 8am&quot;,&#xd;
			        &quot;order&quot;: 1&#xd;
			      },&#xd;
			      {&#xd;
			        &quot;alpha&quot;: &quot;B&quot;,&#xd;
			        &quot;text&quot;: &quot;8am-12pm&quot;,&#xd;
			        &quot;order&quot;: 2&#xd;
			      },&#xd;
			      {&#xd;
			        &quot;alpha&quot;: &quot;C&quot;,&#xd;
			        &quot;text&quot;: &quot;12-4pm&quot;,&#xd;
			        &quot;order&quot;: 3&#xd;
			      },&#xd;
			      {&#xd;
			        &quot;alpha&quot;: &quot;D&quot;,&#xd;
			        &quot;text&quot;: &quot;4-8pm&quot;,&#xd;
			        &quot;order&quot;: 4&#xd;
			      },&#xd;
			      {&#xd;
			        &quot;alpha&quot;: &quot;E&quot;,&#xd;
			        &quot;text&quot;: &quot;After 8pm&quot;,&#xd;
			        &quot;order&quot;: 5&#xd;
			      }]&#xd;
		},&#xd;
		{&#xd;
		&quot;tempUniqueId&quot;: 10,&#xd;
		&quot;order&quot;: 10,&#xd;
		&quot;question&quot;: &quot;Financially:&quot;,&#xd;
		&quot;questionType&quot;: &quot;chooseOne&quot;,&#xd;
		&quot;questionGuidance&quot;: &quot;Choose one&quot;,&#xd;
		&quot;conditionalParent&quot;: null,&#xd;
			&quot;options&quot;: [&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;A&quot;,&#xd;
					&quot;text&quot;: &quot;I am unable to pay my medical expenses&quot;,&#xd;
					&quot;order&quot;: 1&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;B&quot;,&#xd;
					&quot;text&quot;: &quot;I am able to pay my medical expenses, yet I struggle to do so&quot;,&#xd;
					&quot;order&quot;: 2&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;C&quot;,&#xd;
					&quot;text&quot;: &quot;I do not have a problem paying my medical expenses&quot;,&#xd;
					&quot;order&quot;: 3&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;D&quot;,&#xd;
					&quot;text&quot;: &quot;I have not incurred any medical expenses recently&quot;,&#xd;
					&quot;order&quot;: 4&#xd;
				}]&#xd;
		},&#xd;
		{&#xd;
		&quot;tempUniqueId&quot;: 11,&#xd;
		&quot;order&quot;: 11,&#xd;
		&quot;question&quot;: &quot;How aware are you of the options you have to save money on your health such as&quot;,&#xd;
		&quot;questionType&quot;: &quot;chooseMinMax&quot;,&#xd;
		&quot;questionGuidance&quot;: &quot;Choose all that apply&quot;,&#xd;
		&quot;conditionalParent&quot;: {&#xd;
		&quot;tempUniqueIdParent&quot;: 10,&#xd;
		&quot;parentQuestionAnswer&quot;: [&quot;A&quot;]&#xd;
		},&#xd;
			&quot;minMaxOptions&quot;: {&#xd;
    		&quot;choiceMinimum&quot;: 1,&#xd;
    		&quot;choiceMaximum&quot;: 7&#xd;
    	},&#xd;
			&quot;options&quot;: [&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;A&quot;,&#xd;
					&quot;text&quot;: &quot;Using in-network providers&quot;,&#xd;
					&quot;order&quot;: 1&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;B&quot;,&#xd;
					&quot;text&quot;: &quot;Switching from brand name drugs to generic&quot;,&#xd;
					&quot;order&quot;: 2&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;C&quot;,&#xd;
					&quot;text&quot;: &quot;Signing up for home delivery pharmacy&quot;,&#xd;
					&quot;order&quot;: 3&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;D&quot;,&#xd;
					&quot;text&quot;: &quot;Taking advantage of Teladoc&quot;,&#xd;
					&quot;order&quot;: 4&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;E&quot;,&#xd;
					&quot;text&quot;: &quot;Going to walk-in clinics instead of the ER for non-emergent issues&quot;,&#xd;
					&quot;order&quot;: 5&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;F&quot;,&#xd;
					&quot;text&quot;: &quot;Changing to a high-deductible plan during open-enrollment&quot;,&#xd;
					&quot;order&quot;: 6&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;G&quot;,&#xd;
					&quot;text&quot;: &quot;I am not familiar with any of these options&quot;,&#xd;
					&quot;order&quot;: 7&#xd;
				}]&#xd;
		},&#xd;
		{&#xd;
		&quot;tempUniqueId&quot;: 12,&#xd;
		&quot;order&quot;: 12,&#xd;
		&quot;question&quot;: &quot;How aware are you of the options you have to save money on your health such as&quot;,&#xd;
		&quot;questionType&quot;: &quot;chooseMinMax&quot;,&#xd;
		&quot;questionGuidance&quot;: &quot;Choose all that apply&quot;,&#xd;
		&quot;conditionalParent&quot;: {&#xd;
		&quot;tempUniqueIdParent&quot;: 10,&#xd;
		&quot;parentQuestionAnswer&quot;: [&quot;B&quot;]&#xd;
		},&#xd;
			&quot;minMaxOptions&quot;: {&#xd;
    		&quot;choiceMinimum&quot;: 1,&#xd;
    		&quot;choiceMaximum&quot;: 7&#xd;
    	},&#xd;
			&quot;options&quot;: [&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;A&quot;,&#xd;
					&quot;text&quot;: &quot;Using in-network providers&quot;,&#xd;
					&quot;order&quot;: 1&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;B&quot;,&#xd;
					&quot;text&quot;: &quot;Switching from brand name drugs to generic&quot;,&#xd;
					&quot;order&quot;: 2&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;C&quot;,&#xd;
					&quot;text&quot;: &quot;Signing up for home delivery pharmacy&quot;,&#xd;
					&quot;order&quot;: 3&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;D&quot;,&#xd;
					&quot;text&quot;: &quot;Taking advantage of Teladoc&quot;,&#xd;
					&quot;order&quot;: 4&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;E&quot;,&#xd;
					&quot;text&quot;: &quot;Going to walk-in clinics instead of the ER for non-emergent issues&quot;,&#xd;
					&quot;order&quot;: 5&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;F&quot;,&#xd;
					&quot;text&quot;: &quot;Changing to a high-deductible plan during open-enrollment&quot;,&#xd;
					&quot;order&quot;: 6&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;G&quot;,&#xd;
					&quot;text&quot;: &quot;I am not familiar with any of these options&quot;,&#xd;
					&quot;order&quot;: 7&#xd;
				}]&#xd;
		},&#xd;
		{&#xd;
		&quot;tempUniqueId&quot;: 13,&#xd;
		&quot;order&quot;: 13,&#xd;
		&quot;question&quot;: &quot;From whom do you prefer to get healthcare information?&quot;,&#xd;
		&quot;questionType&quot;: &quot;chooseOne&quot;,&#xd;
		&quot;questionGuidance&quot;: &quot;Please choose one answer&quot;,&#xd;
		&quot;conditionalParent&quot;: null,&#xd;
			&quot;options&quot;: [&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;A&quot;,&#xd;
					&quot;text&quot;: &quot;Your doctor&quot;,&#xd;
					&quot;order&quot;: 1&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;B&quot;,&#xd;
					&quot;text&quot;: &quot;A doctor&quot;,&#xd;
					&quot;order&quot;: 2&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;C&quot;,&#xd;
					&quot;text&quot;: &quot;Pharmacist&quot;,&#xd;
					&quot;order&quot;: 3&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;D&quot;,&#xd;
					&quot;text&quot;: &quot;Aetna&quot;,&#xd;
					&quot;order&quot;: 4&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;E&quot;,&#xd;
					&quot;text&quot;: &quot;Online resources&quot;,&#xd;
					&quot;order&quot;: 5&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;F&quot;,&#xd;
					&quot;text&quot;: &quot;Family / friends&quot;,&#xd;
					&quot;order&quot;: 6&#xd;
				}]&#xd;
		},&#xd;
		{&#xd;
		&quot;tempUniqueId&quot;: 14,&#xd;
		&quot;order&quot;: 14,&#xd;
		&quot;question&quot;: &quot;What are you hoping to get out of this program?&quot;,&#xd;
		&quot;questionType&quot;: &quot;chooseMinMax&quot;,&#xd;
		&quot;questionGuidance&quot;: &quot;Choose all that apply&quot;,&#xd;
		&quot;conditionalParent&quot;: null,&#xd;
		&quot;minMaxOptions&quot;: &#xd;
			{&#xd;
		      &quot;choiceMinimum&quot;: 1,&#xd;
		      &quot;choiceMaximum&quot;:7&#xd;
		    },&#xd;
			&quot;options&quot;: [&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;A&quot;,&#xd;
					&quot;text&quot;: &quot;I want extra motivation to be healthy&quot;,&#xd;
					&quot;order&quot;: 1&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;B&quot;,&#xd;
					&quot;text&quot;: &quot;I want to earn money / Watch / other gifts&quot;,&#xd;
					&quot;order&quot;: 2&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;C&quot;,&#xd;
					&quot;text&quot;: &quot;I want help losing weight&quot;,&#xd;
					&quot;order&quot;: 3&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;D&quot;,&#xd;
					&quot;text&quot;: &quot;I want to make a difference by choosing to share information for scientific research&quot;,&#xd;
					&quot;order&quot;: 4&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;E&quot;,&#xd;
					&quot;text&quot;: &quot;I want help improving my medical condition&quot;,&#xd;
					&quot;order&quot;: 5&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;F&quot;,&#xd;
					&quot;text&quot;: &quot;I want to learn more about my health&quot;,&#xd;
					&quot;order&quot;: 6&#xd;
				},&#xd;
				{&#xd;
					&quot;alpha&quot;: &quot;G&quot;,&#xd;
					&quot;text&quot;: &quot;I want something else&quot;,&#xd;
					&quot;order&quot;: 7&#xd;
				}]&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/${wso2RestPath}/apollo/survey/create</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${wso2AccessToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Survey Id" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">surveyId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.surveyId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Health Data Upload" enabled="false"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Auth Token" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="entity_no" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${vitalityId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">entity_no</stringProp>
                </elementProp>
                <elementProp name="encrypted_entity_no" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${vitality_IdEncrypted}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">encrypted_entity_no</stringProp>
                </elementProp>
                <elementProp name="_p" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">IOS</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">_p</stringProp>
                </elementProp>
                <elementProp name="_v" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${mob.app.version}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">_v</stringProp>
                </elementProp>
                <elementProp name="_doc_browser_context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">_doc_browser_context</stringProp>
                </elementProp>
                <elementProp name="_c" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">BESTBUY</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">_c</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${msBase}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${msPath}/auth/simulate_auth</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Active Rewards Token" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">ar_Token</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.session.token</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Health Data Upload" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
 &quot;device&quot;: {&#xd;
   &quot;deviceId&quot;: &quot;y5lkasfve9ce6-y5lkpe9ce6&quot;,&#xd;
   &quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
   &quot;model&quot;: &quot;iOS 10.0.1&quot;&#xd;
 },&#xd;
	 &quot;header&quot;: {&#xd;
	   &quot;partnerSystem&quot;: &quot;Apple&quot;,&#xd;
	   &quot;processingType&quot;: &quot;BATCH&quot;,&#xd;
	   &quot;rawUploadData&quot;: &quot;&quot;,&#xd;
	   &quot;sessionId&quot;: &quot;y5lkpe9asfve6-y5lkpe9ce6&quot;,&#xd;
	   &quot;tenantId&quot;: &quot;32&quot;,&#xd;
	   &quot;uploadCount&quot;: 3,&#xd;
	   &quot;uploadDate&quot;: &quot;2019-07-18T00:00:00+03:00&quot;,&#xd;
	   &quot;user&quot;: {&#xd;
	     &quot;entityNo&quot;: &quot;${vitalityId}&quot;,&#xd;
	     &quot;partnerUserId&quot;: &quot;&quot;&#xd;
	  },&#xd;
	   &quot;verified&quot;: &quot;true&quot;&#xd;
	  },&#xd;
		 &quot;readings&quot;: [&#xd;
		   {&#xd;
		     &quot;dataCategory&quot;: &quot;BIOMETRIC&quot;,&#xd;
		     &quot;endTime&quot;: &quot;2019-07-18T00:00:00+03:00&quot;,&#xd;
		     &quot;healthData&quot;: {&#xd;
		     &quot;weight&quot;: {&#xd;
		     &quot;unitOfMeasurement&quot;: &quot;KILOGRAMS&quot;,&#xd;
		     &quot;value&quot;: 95&#xd;
		       }&#xd;
     },&#xd;
     &quot;integrity&quot;: &quot;UNVERIFIED&quot;,&#xd;
     &quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
     &quot;model&quot;: &quot;iOS 10.0.1&quot;,&#xd;
     &quot;partnerReadingId&quot;: &quot;2019-07-18y5lkasfvAVA9ce6&quot;,&#xd;
     &quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
     &quot;readingType&quot;: &quot;WEIGHT&quot;,&#xd;
     &quot;startTime&quot;: &quot;2019-07-17T00:00:00+03:00&quot;&#xd;
   },&#xd;
   {&#xd;
     &quot;dataCategory&quot;: &quot;ROUTINE&quot;,&#xd;
     &quot;duration&quot;: 86400,&#xd;
     &quot;endTime&quot;: &quot;2019-07-18T00:00:00+03:00&quot;,&#xd;
     &quot;integrity&quot;: &quot;VERIFIED&quot;,&#xd;
     &quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
     &quot;model&quot;: &quot;iOS 10.0.1&quot;,&#xd;
     &quot;partnerReadingId&quot;: &quot;2019-07-18y5lkpAWR9ce6&quot;,&#xd;
     &quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
     &quot;readingType&quot;: &quot;WALKING&quot;,&#xd;
     &quot;startTime&quot;: &quot;2019-07-17T00:00:00+03:00&quot;,&#xd;
     &quot;workout&quot;: {&#xd;
       &quot;energyExpenditure&quot;: {&#xd;
         &quot;unitOfMeasurement&quot;: &quot;KILOCALORIES&quot;,&#xd;
         &quot;value&quot;: 1009&#xd;
       }&#xd;
     }&#xd;
   }&#xd;
   &#xd;
 ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${wso2Base}/api/${msPath}/1.0</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">health_data/upload</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Vitality-Token" elementType="Header">
                  <stringProp name="Header.name">Vitality-Token</stringProp>
                  <stringProp name="Header.value">${ar_Token}</stringProp>
                </elementProp>
                <elementProp name="Vitality-App-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-App-Version</stringProp>
                  <stringProp name="Header.value">7</stringProp>
                </elementProp>
                <elementProp name="Vitality-Language" elementType="Header">
                  <stringProp name="Header.name">Vitality-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Vitality-Device-Id" elementType="Header">
                  <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                  <stringProp name="Header.value">swagger-3f802407-77b4-407c-a758-842af5830c2b</stringProp>
                </elementProp>
                <elementProp name="Vitality-Local-Time" elementType="Header">
                  <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                  <stringProp name="Header.value">${__time(yyyy-MM-dd,)}</stringProp>
                </elementProp>
                <elementProp name="Vitality-API-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-API-Version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                  <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                  <stringProp name="Header.value">IOS</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="VDP: Verify That Data was recieved" enabled="false"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST OLD GDL Token" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="tenantId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">38</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">tenantId</stringProp>
                </elementProp>
                <elementProp name="grantType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">clientCredentials</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">grantType</stringProp>
                </elementProp>
                <elementProp name="clientId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">78600</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">clientId</stringProp>
                </elementProp>
                <elementProp name="reference" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1439901180</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">reference</stringProp>
                </elementProp>
                <elementProp name="clientSecret" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">c2Vuem9tYWxpbmdh</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">clientSecret</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${vslBase}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">serviceapi/TokenManager/Token</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-vsl-timestamp</stringProp>
                  <stringProp name="Header.value">${timeStamp}</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="x-vsl-version" elementType="Header">
                  <stringProp name="Header.name">x-vsl-version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="x-vsl-sourcetype" elementType="Header">
                  <stringProp name="Header.name">x-vsl-sourcetype</stringProp>
                  <stringProp name="Header.value">GDL</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, application/*+json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">104</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="apiAccessToken" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">gdlToken</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.payload.content.authDetails.accessToken</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract userEntity" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">as_document</stringProp>
              <stringProp name="RegexExtractor.refname">userEntity</stringProp>
              <stringProp name="RegexExtractor.regex">&amp;reference=(.*?)</stringProp>
              <stringProp name="RegexExtractor.template"></stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Veirfy Data recieved by VDP: Routine" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="entityNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1439901180</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">entityNo</stringProp>
                </elementProp>
                <elementProp name="dataCategories" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">Routine</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">dataCategories</stringProp>
                </elementProp>
                <elementProp name="startDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">2019-12-12</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">startDate</stringProp>
                </elementProp>
                <elementProp name="endDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">2019-12-12</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">endDate</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${vslBase}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">deviceapi/Device/HistoryTracker</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="x-vsl-sourcetype" elementType="Header">
                  <stringProp name="Header.name">x-vsl-sourcetype</stringProp>
                  <stringProp name="Header.value">GDL</stringProp>
                </elementProp>
                <elementProp name="x-vsl-timestamp" elementType="Header">
                  <stringProp name="Header.name">x-vsl-timestamp</stringProp>
                  <stringProp name="Header.value">${timeStamp}</stringProp>
                </elementProp>
                <elementProp name="x-vsl-version" elementType="Header">
                  <stringProp name="Header.name">x-vsl-version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">x-vsl-token</stringProp>
                  <stringProp name="Header.value">${gdlToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">dataCategory</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.payload.content.historyTracker.dataCategory</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-45891473">successfully retrieved</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Veirfy Data recieved by VDP: Biometric" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="entityNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">1439901180</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">entityNo</stringProp>
                </elementProp>
                <elementProp name="dataCategories" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">Biometric</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">dataCategories</stringProp>
                </elementProp>
                <elementProp name="startDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">2019-12-12</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">startDate</stringProp>
                </elementProp>
                <elementProp name="endDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">2019-12-12</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">endDate</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${vslBase}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">deviceapi/Device/HistoryTracker</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="x-vsl-sourcetype" elementType="Header">
                  <stringProp name="Header.name">x-vsl-sourcetype</stringProp>
                  <stringProp name="Header.value">GDL</stringProp>
                </elementProp>
                <elementProp name="x-vsl-timestamp" elementType="Header">
                  <stringProp name="Header.name">x-vsl-timestamp</stringProp>
                  <stringProp name="Header.value">${timeStamp}</stringProp>
                </elementProp>
                <elementProp name="x-vsl-version" elementType="Header">
                  <stringProp name="Header.name">x-vsl-version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">x-vsl-token</stringProp>
                  <stringProp name="Header.value">${gdlToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">dataCategory</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.payload.content.historyTracker.dataCategory</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-45891473">successfully retrieved</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="POV NewsFeed" enabled="false"/>
        <hashTree>
          <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="limit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">100</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">limit</stringProp>
                </elementProp>
                <elementProp name="mobile" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">mobile</stringProp>
                </elementProp>
                <elementProp name="offset" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">offset</stringProp>
                </elementProp>
                <elementProp name="lang" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">en_US</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">lang</stringProp>
                </elementProp>
                <elementProp name="plain" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">plain</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${vapBase}</stringProp>
            <stringProp name="HTTPSampler.port">${vapPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/vap/rest/nfe/mobile/all/user/1424935268</stringProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </ConfigTestElement>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Purge NewsFeed" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port">7007</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="671778703">Request method &amp;#39;POST&amp;#39; not supported</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET NewsFeed" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="140636634">has_more</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Forwarding To AMB" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;ADPHealthSurveyResult&quot;: {&#xd;
		&quot;vitalityMemberId&quot;: 1431787793,&#xd;
		&quot;surveyId&quot;: 15729440707,&#xd;
		&quot;questions&quot;: [&#xd;
			{&#xd;
				&quot;id&quot;: 1,&#xd;
				&quot;order&quot;: 1,&#xd;
				&quot;question&quot;: &quot;Today I feel that I?&quot;,&#xd;
				&quot;questionType&quot;: &quot;chooseOne&quot;,&#xd;
				&quot;conditionalParent&quot;: null,&#xd;
				&quot;options&quot;: [&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;A&quot;,&#xd;
						&quot;text&quot;: &quot;have below average health&quot;,&#xd;
						&quot;order&quot;: 1&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;B&quot;,&#xd;
						&quot;text&quot;: &quot;have average health&quot;,&#xd;
						&quot;order&quot;: 2&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;C&quot;,&#xd;
						&quot;text&quot;: &quot;have above average health&quot;,&#xd;
						&quot;order&quot;: 3&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;D&quot;,&#xd;
						&quot;text&quot;: &quot;am very healthy&quot;,&#xd;
						&quot;order&quot;: 4&#xd;
					}&#xd;
				],&#xd;
				&quot;answers&quot;: [&#xd;
					{&#xd;
						&quot;value&quot;: &quot;A&quot;&#xd;
					}&#xd;
				]&#xd;
			},&#xd;
			{&#xd;
				&quot;id&quot;: 2,&#xd;
				&quot;order&quot;: 2,&#xd;
				&quot;question&quot;: &quot;What best describes your desire to change your health status?&quot;,&#xd;
				&quot;questionType&quot;: &quot;chooseOne&quot;,&#xd;
				&quot;conditionalParent&quot;: {&#xd;
					&quot;parentQuestionId&quot;: 1,&#xd;
					&quot;parentQuestionAnswer&quot;: [&#xd;
						&quot;A&quot;&#xd;
					]&#xd;
				},&#xd;
				&quot;options&quot;: [&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;A&quot;,&#xd;
						&quot;text&quot;: &quot;I am content with my health&quot;,&#xd;
						&quot;order&quot;: 1&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;B&quot;,&#xd;
						&quot;text&quot;: &quot;I want to take steps to improve my health&quot;,&#xd;
						&quot;order&quot;: 2&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;C&quot;,&#xd;
						&quot;text&quot;: &quot;I am actively taking steps to improve my health&quot;,&#xd;
						&quot;order&quot;: 3&#xd;
					}&#xd;
				],&#xd;
				&quot;answers&quot;: [&#xd;
					{&#xd;
						&quot;value&quot;: &quot;B&quot;&#xd;
					}&#xd;
				]&#xd;
			},&#xd;
			{&#xd;
				&quot;id&quot;: 3,&#xd;
				&quot;order&quot;: 3,&#xd;
				&quot;question&quot;: &quot;What best describes your desire to change your health status?&quot;,&#xd;
				&quot;questionType&quot;: &quot;chooseOne&quot;,&#xd;
				&quot;conditionalParent&quot;: {&#xd;
					&quot;parentQuestionId&quot;: 1,&#xd;
					&quot;parentQuestionAnswer&quot;: [&#xd;
						&quot;B&quot;&#xd;
					]&#xd;
				},&#xd;
				&quot;options&quot;: [&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;A&quot;,&#xd;
						&quot;text&quot;: &quot;I am content with my health&quot;,&#xd;
						&quot;order&quot;: 1&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;B&quot;,&#xd;
						&quot;text&quot;: &quot;I want to take steps to improve my health&quot;,&#xd;
						&quot;order&quot;: 2&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;C&quot;,&#xd;
						&quot;text&quot;: &quot;I am actively taking steps to improve my health&quot;,&#xd;
						&quot;order&quot;: 3&#xd;
					}&#xd;
				],&#xd;
				&quot;answers&quot;: []&#xd;
			},&#xd;
			{&#xd;
				&quot;id&quot;: 4,&#xd;
				&quot;order&quot;: 4,&#xd;
				&quot;question&quot;: &quot;What are your three biggest motivations around health?&quot;,&#xd;
				&quot;questionType&quot;: &quot;chooseMinMax&quot;,&#xd;
				&quot;conditionalParent&quot;: null,&#xd;
				&quot;options&quot;: [&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;A&quot;,&#xd;
						&quot;text&quot;: &quot;I want to be more active&quot;,&#xd;
						&quot;order&quot;: 1&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;B&quot;,&#xd;
						&quot;text&quot;: &quot;I want to have more energy / feel better&quot;,&#xd;
						&quot;order&quot;: 2&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;C&quot;,&#xd;
						&quot;text&quot;: &quot;I want to eat better&quot;,&#xd;
						&quot;order&quot;: 3&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;D&quot;,&#xd;
						&quot;text&quot;: &quot;I want to lose weight&quot;,&#xd;
						&quot;order&quot;: 4&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;E&quot;,&#xd;
						&quot;text&quot;: &quot;I want to look better&quot;,&#xd;
						&quot;order&quot;: 5&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;F&quot;,&#xd;
						&quot;text&quot;: &quot;I want to ensure long-term health for my family&quot;,&#xd;
						&quot;order&quot;: 6&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;G&quot;,&#xd;
						&quot;text&quot;: &quot;I want to reduce medical expenses&quot;,&#xd;
						&quot;order&quot;: 7&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;H&quot;,&#xd;
						&quot;text&quot;: &quot;I want to manage my medical condition better&quot;,&#xd;
						&quot;order&quot;: 8&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;I&quot;,&#xd;
						&quot;text&quot;: &quot;I want to sleep better&quot;,&#xd;
						&quot;order&quot;: 9&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;J&quot;,&#xd;
						&quot;text&quot;: &quot;I want to manage my stress &quot;,&#xd;
						&quot;order&quot;: 10&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;K&quot;,&#xd;
						&quot;text&quot;: &quot;I want to stop using substances that impair my health (alcohol / tobacco / recreational drugs)&quot;,&#xd;
						&quot;order&quot;: 11&#xd;
					}&#xd;
				],&#xd;
				&quot;answers&quot;: [&#xd;
					{&#xd;
						&quot;value&quot;: &quot;E&quot;&#xd;
					}&#xd;
				]&#xd;
			},&#xd;
			{&#xd;
				&quot;id&quot;: 5,&#xd;
				&quot;order&quot;: 5,&#xd;
				&quot;question&quot;: &quot;Do any of these barriers prevent you from improving your health?&quot;,&#xd;
				&quot;questionType&quot;: &quot;chooseMinMax&quot;,&#xd;
				&quot;conditionalParent&quot;: null,&#xd;
				&quot;options&quot;: [&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;A&quot;,&#xd;
						&quot;text&quot;: &quot;I am too busy caring for others to spend time on my health&quot;,&#xd;
						&quot;order&quot;: 1&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;B&quot;,&#xd;
						&quot;text&quot;: &quot;I have trouble doing the daily tasks that will improve my health&quot;,&#xd;
						&quot;order&quot;: 2&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;C&quot;,&#xd;
						&quot;text&quot;: &quot;I am too busy professionally to spend time on my health&quot;,&#xd;
						&quot;order&quot;: 3&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;D&quot;,&#xd;
						&quot;text&quot;: &quot;Improving my health will cost too much money&quot;,&#xd;
						&quot;order&quot;: 4&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;E&quot;,&#xd;
						&quot;text&quot;: &quot;I struggle to find the motivation to improve my health&quot;,&#xd;
						&quot;order&quot;: 5&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;F&quot;,&#xd;
						&quot;text&quot;: &quot;I feel my health is beyond my control&quot;,&#xd;
						&quot;order&quot;: 6&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;G&quot;,&#xd;
						&quot;text&quot;: &quot;I do not trust in the health advice I receive&quot;,&#xd;
						&quot;order&quot;: 7&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;H&quot;,&#xd;
						&quot;text&quot;: &quot;The healthcare system is too complex &quot;,&#xd;
						&quot;order&quot;: 8&#xd;
					}&#xd;
				],&#xd;
				&quot;answers&quot;: [&#xd;
					{&#xd;
						&quot;value&quot;: &quot;D&quot;&#xd;
					}&#xd;
				]&#xd;
			},&#xd;
			{&#xd;
				&quot;id&quot;: 6,&#xd;
				&quot;order&quot;: 6,&#xd;
				&quot;question&quot;: &quot;How frequently do you experience periods of stress, anxiety or depression?&quot;,&#xd;
				&quot;questionType&quot;: &quot;chooseOneSlider&quot;,&#xd;
				&quot;conditionalParent&quot;: null,&#xd;
				&quot;options&quot;: [&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;A&quot;,&#xd;
						&quot;text&quot;: &quot;Never&quot;,&#xd;
						&quot;order&quot;: 1&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;B&quot;,&#xd;
						&quot;text&quot;: &quot;Occasionally&quot;,&#xd;
						&quot;order&quot;: 2&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;C&quot;,&#xd;
						&quot;text&quot;: &quot;Frequently&quot;,&#xd;
						&quot;order&quot;: 3&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;D&quot;,&#xd;
						&quot;text&quot;: &quot;Most of the time&quot;,&#xd;
						&quot;order&quot;: 4&#xd;
					}&#xd;
				],&#xd;
				&quot;answers&quot;: [&#xd;
					{&#xd;
						&quot;value&quot;: &quot;B&quot;&#xd;
					}&#xd;
				]&#xd;
			},&#xd;
			{&#xd;
				&quot;id&quot;: 7,&#xd;
				&quot;order&quot;: 7,&#xd;
				&quot;question&quot;: &quot;How frequently would you like to receive messages around improving your health or saving money on health-related expenses?&quot;,&#xd;
				&quot;questionType&quot;: &quot;chooseOneSlider&quot;,&#xd;
				&quot;conditionalParent&quot;: null,&#xd;
				&quot;options&quot;: [&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;A&quot;,&#xd;
						&quot;text&quot;: &quot;Once a week&quot;,&#xd;
						&quot;order&quot;: 1&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;B&quot;,&#xd;
						&quot;text&quot;: &quot;A few times a week&quot;,&#xd;
						&quot;order&quot;: 2&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;C&quot;,&#xd;
						&quot;text&quot;: &quot;Once a day&quot;,&#xd;
						&quot;order&quot;: 3&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;D&quot;,&#xd;
						&quot;text&quot;: &quot;Multiple times a day&quot;,&#xd;
						&quot;order&quot;: 4&#xd;
					}&#xd;
				],&#xd;
				&quot;answers&quot;: [&#xd;
					{&#xd;
						&quot;value&quot;: &quot;B&quot;&#xd;
					}&#xd;
				]&#xd;
			},&#xd;
			{&#xd;
				&quot;id&quot;: 8,&#xd;
				&quot;order&quot;: 8,&#xd;
				&quot;question&quot;: &quot;When are you most likely to read short messages from the program on your phone or watch?&quot;,&#xd;
				&quot;questionType&quot;: &quot;chooseOne&quot;,&#xd;
				&quot;conditionalParent&quot;: null,&#xd;
				&quot;options&quot;: [&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;A&quot;,&#xd;
						&quot;text&quot;: &quot;Weekdays&quot;,&#xd;
						&quot;order&quot;: 1&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;B&quot;,&#xd;
						&quot;text&quot;: &quot;Weekends&quot;,&#xd;
						&quot;order&quot;: 2&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;C&quot;,&#xd;
						&quot;text&quot;: &quot;Either&quot;,&#xd;
						&quot;order&quot;: 3&#xd;
					}&#xd;
				],&#xd;
				&quot;answers&quot;: [&#xd;
					{&#xd;
						&quot;value&quot;: &quot;A&quot;&#xd;
					}&#xd;
				]&#xd;
			},&#xd;
			{&#xd;
				&quot;id&quot;: 9,&#xd;
				&quot;order&quot;: 9,&#xd;
				&quot;question&quot;: &quot;At what time of day do you prefer to receive messages on your phone or watch?&quot;,&#xd;
				&quot;questionType&quot;: &quot;chooseOneSlider&quot;,&#xd;
				&quot;conditionalParent&quot;: null,&#xd;
				&quot;options&quot;: [&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;A&quot;,&#xd;
						&quot;text&quot;: &quot;Before 8am&quot;,&#xd;
						&quot;order&quot;: 1&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;B&quot;,&#xd;
						&quot;text&quot;: &quot;8am-12pm&quot;,&#xd;
						&quot;order&quot;: 2&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;C&quot;,&#xd;
						&quot;text&quot;: &quot;12-4pm&quot;,&#xd;
						&quot;order&quot;: 3&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;D&quot;,&#xd;
						&quot;text&quot;: &quot;4-8pm&quot;,&#xd;
						&quot;order&quot;: 4&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;E&quot;,&#xd;
						&quot;text&quot;: &quot;After 8pm&quot;,&#xd;
						&quot;order&quot;: 5&#xd;
					}&#xd;
				],&#xd;
				&quot;answers&quot;: [&#xd;
					{&#xd;
						&quot;value&quot;: &quot;C&quot;&#xd;
					}&#xd;
				]&#xd;
			},&#xd;
			{&#xd;
				&quot;id&quot;: 10,&#xd;
				&quot;order&quot;: 10,&#xd;
				&quot;question&quot;: &quot;Financially:&quot;,&#xd;
				&quot;questionType&quot;: &quot;chooseOne&quot;,&#xd;
				&quot;conditionalParent&quot;: null,&#xd;
				&quot;options&quot;: [&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;A&quot;,&#xd;
						&quot;text&quot;: &quot;I am unable to pay my medical expenses&quot;,&#xd;
						&quot;order&quot;: 1&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;B&quot;,&#xd;
						&quot;text&quot;: &quot;I am able to pay my medical expenses, yet I struggle to do so&quot;,&#xd;
						&quot;order&quot;: 2&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;C&quot;,&#xd;
						&quot;text&quot;: &quot;I do not have a problem paying my medical expenses&quot;,&#xd;
						&quot;order&quot;: 3&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;D&quot;,&#xd;
						&quot;text&quot;: &quot;I have not incurred any medical expenses recently&quot;,&#xd;
						&quot;order&quot;: 4&#xd;
					}&#xd;
				],&#xd;
				&quot;answers&quot;: [&#xd;
					{&#xd;
						&quot;value&quot;: &quot;B&quot;&#xd;
					}&#xd;
				]&#xd;
			},&#xd;
			{&#xd;
				&quot;id&quot;: 11,&#xd;
				&quot;order&quot;: 11,&#xd;
				&quot;question&quot;: &quot;How aware are you of the options you have to save money on your health such as&quot;,&#xd;
				&quot;questionType&quot;: &quot;chooseMinMax&quot;,&#xd;
				&quot;conditionalParent&quot;: {&#xd;
					&quot;parentQuestionId&quot;: 10,&#xd;
					&quot;parentQuestionAnswer&quot;: [&#xd;
						&quot;A&quot;&#xd;
					]&#xd;
				},&#xd;
				&quot;options&quot;: [&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;A&quot;,&#xd;
						&quot;text&quot;: &quot;Using in-network providers&quot;,&#xd;
						&quot;order&quot;: 1&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;B&quot;,&#xd;
						&quot;text&quot;: &quot;Switching from brand name drugs to generic&quot;,&#xd;
						&quot;order&quot;: 2&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;C&quot;,&#xd;
						&quot;text&quot;: &quot;Signing up for home delivery pharmacy&quot;,&#xd;
						&quot;order&quot;: 3&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;D&quot;,&#xd;
						&quot;text&quot;: &quot;Taking advantage of Teladoc&quot;,&#xd;
						&quot;order&quot;: 4&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;E&quot;,&#xd;
						&quot;text&quot;: &quot;Going to walk-in clinics instead of the ER for non-emergent issues&quot;,&#xd;
						&quot;order&quot;: 5&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;F&quot;,&#xd;
						&quot;text&quot;: &quot;Changing to a high-deductible plan during open-enrollment&quot;,&#xd;
						&quot;order&quot;: 6&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;G&quot;,&#xd;
						&quot;text&quot;: &quot;I am not familiar with any of these options&quot;,&#xd;
						&quot;order&quot;: 7&#xd;
					}&#xd;
				],&#xd;
				&quot;answers&quot;: []&#xd;
			},&#xd;
			{&#xd;
				&quot;id&quot;: 12,&#xd;
				&quot;order&quot;: 12,&#xd;
				&quot;question&quot;: &quot;How aware are you of the options you have to save money on your health such as&quot;,&#xd;
				&quot;questionType&quot;: &quot;chooseMinMax&quot;,&#xd;
				&quot;conditionalParent&quot;: {&#xd;
					&quot;parentQuestionId&quot;: 10,&#xd;
					&quot;parentQuestionAnswer&quot;: [&#xd;
						&quot;B&quot;&#xd;
					]&#xd;
				},&#xd;
				&quot;options&quot;: [&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;A&quot;,&#xd;
						&quot;text&quot;: &quot;Using in-network providers&quot;,&#xd;
						&quot;order&quot;: 1&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;B&quot;,&#xd;
						&quot;text&quot;: &quot;Switching from brand name drugs to generic&quot;,&#xd;
						&quot;order&quot;: 2&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;C&quot;,&#xd;
						&quot;text&quot;: &quot;Signing up for home delivery pharmacy&quot;,&#xd;
						&quot;order&quot;: 3&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;D&quot;,&#xd;
						&quot;text&quot;: &quot;Taking advantage of Teladoc&quot;,&#xd;
						&quot;order&quot;: 4&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;E&quot;,&#xd;
						&quot;text&quot;: &quot;Going to walk-in clinics instead of the ER for non-emergent issues&quot;,&#xd;
						&quot;order&quot;: 5&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;F&quot;,&#xd;
						&quot;text&quot;: &quot;Changing to a high-deductible plan during open-enrollment&quot;,&#xd;
						&quot;order&quot;: 6&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;G&quot;,&#xd;
						&quot;text&quot;: &quot;I am not familiar with any of these options&quot;,&#xd;
						&quot;order&quot;: 7&#xd;
					}&#xd;
				],&#xd;
				&quot;answers&quot;: [&#xd;
					{&#xd;
						&quot;value&quot;: &quot;A&quot;&#xd;
					}&#xd;
				]&#xd;
			},&#xd;
			{&#xd;
				&quot;id&quot;: 13,&#xd;
				&quot;order&quot;: 13,&#xd;
				&quot;question&quot;: &quot;From whom do you prefer to get healthcare information?&quot;,&#xd;
				&quot;questionType&quot;: &quot;chooseOne&quot;,&#xd;
				&quot;conditionalParent&quot;: null,&#xd;
				&quot;options&quot;: [&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;A&quot;,&#xd;
						&quot;text&quot;: &quot;Your doctor&quot;,&#xd;
						&quot;order&quot;: 1&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;B&quot;,&#xd;
						&quot;text&quot;: &quot;A doctor&quot;,&#xd;
						&quot;order&quot;: 2&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;C&quot;,&#xd;
						&quot;text&quot;: &quot;Pharmacist&quot;,&#xd;
						&quot;order&quot;: 3&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;D&quot;,&#xd;
						&quot;text&quot;: &quot;Aetna&quot;,&#xd;
						&quot;order&quot;: 4&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;E&quot;,&#xd;
						&quot;text&quot;: &quot;Online resources&quot;,&#xd;
						&quot;order&quot;: 5&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;F&quot;,&#xd;
						&quot;text&quot;: &quot;Family / friends&quot;,&#xd;
						&quot;order&quot;: 6&#xd;
					}&#xd;
				],&#xd;
				&quot;answers&quot;: [&#xd;
					{&#xd;
						&quot;value&quot;: &quot;C&quot;&#xd;
					}&#xd;
				]&#xd;
			},&#xd;
			{&#xd;
				&quot;id&quot;: 14,&#xd;
				&quot;order&quot;: 14,&#xd;
				&quot;question&quot;: &quot;What are you hoping to get out of this program?&quot;,&#xd;
				&quot;questionType&quot;: &quot;chooseMinMax&quot;,&#xd;
				&quot;conditionalParent&quot;: null,&#xd;
				&quot;options&quot;: [&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;A&quot;,&#xd;
						&quot;text&quot;: &quot;I want extra motivation to be healthy&quot;,&#xd;
						&quot;order&quot;: 1&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;B&quot;,&#xd;
						&quot;text&quot;: &quot;I want to earn money / Watch / other gifts&quot;,&#xd;
						&quot;order&quot;: 2&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;C&quot;,&#xd;
						&quot;text&quot;: &quot;I want help losing weight&quot;,&#xd;
						&quot;order&quot;: 3&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;D&quot;,&#xd;
						&quot;text&quot;: &quot;I want to make a difference by choosing to share information for scientific research&quot;,&#xd;
						&quot;order&quot;: 4&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;E&quot;,&#xd;
						&quot;text&quot;: &quot;I want help improving my medical condition&quot;,&#xd;
						&quot;order&quot;: 5&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;F&quot;,&#xd;
						&quot;text&quot;: &quot;I want to learn more about my health&quot;,&#xd;
						&quot;order&quot;: 6&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;G&quot;,&#xd;
						&quot;text&quot;: &quot;I want something else&quot;,&#xd;
						&quot;order&quot;: 7&#xd;
					}&#xd;
				],&#xd;
				&quot;answers&quot;: [&#xd;
					{&#xd;
						&quot;value&quot;: &quot;B&quot;&#xd;
					}&#xd;
				]&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${zuulBase}</stringProp>
          <stringProp name="HTTPSampler.port">${zuulPort}</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">tvg-message-bus-management-service-1/svc/27/forwardMessage</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: Rresponce code is 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST NEW VDP Device: Tenant: 2" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">vdp/api/vdp-api/1.0/devices/tenant/2/identifier/${vitalityId}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${gdlToken}</stringProp>
              </elementProp>
              <elementProp name="X-Source_VDP" elementType="Header">
                <stringProp name="Header.name">X-Source_VDP</stringProp>
                <stringProp name="Header.value">test.vitality.developer.com</stringProp>
              </elementProp>
              <elementProp name="Content-Length" elementType="Header">
                <stringProp name="Header.name">Content-Length</stringProp>
                <stringProp name="Header.value">1088</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Zuul AR" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">5</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1514078571000</longProp>
        <longProp name="ThreadGroup.end_time">1514078571000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">300</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Users: Apollo" enabled="true">
          <collectionProp name="UserParameters.names">
            <stringProp name="1165624797">vitalityId</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="1966936419">
              <stringProp name="-1226073238">${apolloID_1}</stringProp>
            </collectionProp>
            <collectionProp name="1966932972">
              <stringProp name="-1226073207">${apolloID_2}</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">true</boolProp>
        </UserParameters>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="AR Java Rewritten Servises: ZUUL" enabled="true"/>
        <hashTree>
          <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${zuulVgBase}</stringProp>
            <stringProp name="HTTPSampler.port">${zuulPort}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </ConfigTestElement>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET AW Eligibility" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="tenantId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">27</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">tenantId</stringProp>
                </elementProp>
                <elementProp name="memberId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${vitalityId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">memberId</stringProp>
                </elementProp>
                <elementProp name="eligibilityType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">WatchPurchase</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">eligibilityType</stringProp>
                </elementProp>
                <elementProp name="productIdentifier" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">AppleWatch</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">productIdentifier</stringProp>
                </elementProp>
                <elementProp name="effectiveDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${dateToday}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">effectiveDate</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">vitality-orchestration-service/api/ActiveRewards/1.0/Eligibility</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Sucessfull Reqeuest" enabled="true">
              <stringProp name="JSON_PATH">$.content.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET AR Eligibility" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="tenantId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">27</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">tenantId</stringProp>
                </elementProp>
                <elementProp name="memberId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${vitalityId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">memberId</stringProp>
                </elementProp>
                <elementProp name="eligibilityType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">ActiveRewards</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">eligibilityType</stringProp>
                </elementProp>
                <elementProp name="productIdentifier" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">FIEYW</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">productIdentifier</stringProp>
                </elementProp>
                <elementProp name="effectiveDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${dateToday}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">effectiveDate</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">vitality-orchestration-service/api/ActiveRewards/1.0/Eligibility</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Sucessfull Reqeuest" enabled="true">
              <stringProp name="JSON_PATH">$.content.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Purchase" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="tenantId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">27</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">tenantId</stringProp>
                </elementProp>
                <elementProp name="memberId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${vitalityId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">memberId</stringProp>
                </elementProp>
                <elementProp name="mode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">Purchaser</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">mode</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">vitality-orchestration-service/api/ActiveRewards/1.0/Purchase</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Sucessfull Reqeuest" enabled="true">
              <stringProp name="JSON_PATH">$.content.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Repayment History" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="tenantId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">27</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">tenantId</stringProp>
                </elementProp>
                <elementProp name="memberId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${vitalityId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">memberId</stringProp>
                </elementProp>
                <elementProp name="purchaseType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">AppleWatch</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">purchaseType</stringProp>
                </elementProp>
                <elementProp name="effectiveFrom" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${dateToday}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">effectiveFrom</stringProp>
                </elementProp>
                <elementProp name="effectiveTo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${dateTomorrow}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">effectiveTo</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">vitality-orchestration-service/api/ActiveRewards/1.0/RepaymentHistory</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Sucessfull Reqeuest" enabled="true">
              <stringProp name="JSON_PATH">$.payload.content.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Vsl_To_Zuul" enabled="false"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="VSL Repayment History" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET identified-by-purchaser" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${zuulBase}/${zuulPurchasePath}</stringProp>
              <stringProp name="HTTPSampler.port">${zuulPort}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">identified-by-purchaser/${userWithPurchase}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Reference_Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">reference</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.purchases[0].references[1].reference</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Reference_Type_Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">referenceType</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.purchases[0].references[1].type</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="PurchaseID_Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">purchaseId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.purchases[0].id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET installment-info-by" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${zuulBase}/${zuulPurchasePath}</stringProp>
              <stringProp name="HTTPSampler.port">${zuulPort}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">installment-info-by/${purchaseId}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET identified-by-reference" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${zuulBase}/${zuulFinancePath}</stringProp>
              <stringProp name="HTTPSampler.port">${zuulPort}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">account/identified-by-reference/${reference}/referenceType/${referenceType}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="accountID_Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">account</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.accounts[0].id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET identified-by-account" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${zuulBase}/${zuulFinancePath}</stringProp>
              <stringProp name="HTTPSampler.port">${zuulPort}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">transaction/identified-by-account/${account}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET progressTrackers" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="offset" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">offset</stringProp>
                  </elementProp>
                  <elementProp name="limit" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">10000</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">limit</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${zuulBase}/${zuulGoalProgressPath}</stringProp>
              <stringProp name="HTTPSampler.port">${zuulPort}</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">progressTrackers/memberId/${userWithPurchase}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="accountID_Extractor" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">account</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.accounts[0].id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="RTE" enabled="false"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Mango Consumer" enabled="false"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST /enrollMangoConsumer" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;enrollMangoConsumerRequest&quot;: {&#xd;
    &quot;dateOfBirth&quot;: &quot;${__RandomDate(yyyy-MM-dd,1930-01-01,2001-12-31,,)}&quot;,&#xd;
    &quot;emailAddress&quot;: &quot;VG${randomString}@mango.com&quot;,&#xd;
    &quot;firstName&quot;: &quot;${randomString}&quot;,&#xd;
    &quot;lastName&quot;: &quot;${randomString}&quot;,&#xd;
    &quot;partnerId&quot;: &quot;WGConsumer&quot;,&#xd;
    &quot;uniqueId&quot;: &quot;${randomAlphaNumericString}&quot;,&#xd;
    &quot;vitalityCoverageEffectiveDate&quot;: &quot;${dateToday}&quot;&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">vitality-whitelabel-enrolment-service-1/svc/2/enrollMangoConsumer</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: Rresponce code is 200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: Vitality ID present" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1165624797">vitalityId</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST /enrollMangoConsumer: 01" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;enrollMangoConsumerRequest&quot;: {&#xd;
    &quot;dateOfBirth&quot;: &quot;${__RandomDate(yyyy-MM-dd,1930-01-01,2001-12-31,,)}&quot;,&#xd;
    &quot;emailAddress&quot;: &quot;VG${randomString}@mango.com&quot;,&#xd;
    &quot;firstName&quot;: &quot;${randomString}&quot;,&#xd;
    &quot;lastName&quot;: &quot;${randomString}&quot;,&#xd;
    &quot;partnerId&quot;: &quot;WGConsumer&quot;,&#xd;
    &quot;uniqueId&quot;: &quot;${randomAlphaNumericString}&quot;,&#xd;
    &quot;vitalityCoverageEffectiveDate&quot;: &quot;${dateToday}&quot;&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">zuul.tvg.qa01.tvgose.discsrv.co.za</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">vitality-whitelabel-enrolment-service-1/svc/2/enrollMangoConsumer</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: Rresponce code is 200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: Vitality ID present" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1165624797">vitalityId</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST /enrollMangoConsumer: 02" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;enrollMangoConsumerRequest&quot;: {&#xd;
    &quot;dateOfBirth&quot;: &quot;${__RandomDate(yyyy-MM-dd,1930-01-01,2001-12-31,,)}&quot;,&#xd;
    &quot;emailAddress&quot;: &quot;VG${randomString}@mango.com&quot;,&#xd;
    &quot;firstName&quot;: &quot;${randomString}&quot;,&#xd;
    &quot;lastName&quot;: &quot;${randomString}&quot;,&#xd;
    &quot;partnerId&quot;: &quot;WGConsumer&quot;,&#xd;
    &quot;uniqueId&quot;: &quot;${randomAlphaNumericString}&quot;,&#xd;
    &quot;vitalityCoverageEffectiveDate&quot;: &quot;${dateToday}&quot;&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">zuul.tvg.qa02.tvgose.discsrv.co.za</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">vitality-whitelabel-enrolment-service-1/svc/2/enrollMangoConsumer</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: Rresponce code is 200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: Vitality ID present" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1165624797">vitalityId</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Apollo" enabled="true"/>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="AES_Encryption" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.util.Base64;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.spec.SecretKeySpec;

//First Name
String text = &quot;${randomString}&quot;;         
String secret = &quot;Apollo11Apollo11&quot;;
SecretKeySpec aesKey = new SecretKeySpec(secret.getBytes(), &quot;AES&quot;);
Cipher cipher = Cipher.getInstance(&quot;AES&quot;);
cipher.init(Cipher.ENCRYPT_MODE, aesKey);
byte[] encrypted = cipher.doFinal(text.getBytes());
vars.put(&quot;encryptedFirstName&quot;,Base64.getEncoder().encodeToString(encrypted)); 

//Last Name
String text = &quot;Apollo-${randomString}&quot;;         
String secret = &quot;Apollo11Apollo11&quot;;
SecretKeySpec aesKey = new SecretKeySpec(secret.getBytes(), &quot;AES&quot;);
Cipher cipher = Cipher.getInstance(&quot;AES&quot;);
cipher.init(Cipher.ENCRYPT_MODE, aesKey);
byte[] encrypted = cipher.doFinal(text.getBytes());
vars.put(&quot;encryptedLastName&quot;,Base64.getEncoder().encodeToString(encrypted)); 

//DOB
String text = &quot;${__RandomDate(yyyy-MM-dd,1930-01-01,2001-12-31,,)}&quot;;         
String secret = &quot;Apollo11Apollo11&quot;;
SecretKeySpec aesKey = new SecretKeySpec(secret.getBytes(), &quot;AES&quot;);
Cipher cipher = Cipher.getInstance(&quot;AES&quot;);
cipher.init(Cipher.ENCRYPT_MODE, aesKey);
byte[] encrypted = cipher.doFinal(text.getBytes());
vars.put(&quot;encryptedDOB&quot;,Base64.getEncoder().encodeToString(encrypted)); 

//Phone Number
String text = &quot;312-224-${__Random(1000,9999,)}&quot;;         
String secret = &quot;Apollo11Apollo11&quot;;
SecretKeySpec aesKey = new SecretKeySpec(secret.getBytes(), &quot;AES&quot;);
Cipher cipher = Cipher.getInstance(&quot;AES&quot;);
cipher.init(Cipher.ENCRYPT_MODE, aesKey);
byte[] encrypted = cipher.doFinal(text.getBytes());
vars.put(&quot;encryptedPhoneNumber&quot;,Base64.getEncoder().encodeToString(encrypted)); </stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST /apolloEnrollmentEncrypted" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;enrollmentRequestEncrypted&quot;: {&#xd;
    &quot;firstNameEncrypted&quot;: &quot;${encryptedFirstName}&quot;,&#xd;
    &quot;lastNameEncrypted&quot;: &quot;${encryptedLastName}&quot;,&#xd;
    &quot;dateOfBirthEncrypted&quot;: &quot;${encryptedDOB}&quot;,&#xd;
    &quot;insuredId&quot;: &quot;${randomString}&quot;,&#xd;
    &quot;gender&quot;: &quot;M&quot;,&#xd;
    &quot;vitalityCoverageEffectiveDate&quot;: &quot;${__RandomDate(yyyy-MM-dd,2018-01-01,${__time(yyyy-MM-dd)},,)}&quot;,&#xd;
    &quot;productIndicator&quot;: &quot;${__chooseRandom(FULL,SELF,randomProduct)}&quot;,&#xd;
    &quot;emailAddress&quot;: &quot;test@gmail.com&quot;,&#xd;
    &quot;zipCode&quot;: &quot;&quot;,&#xd;
    &quot;customerServicePhone&quot;: &quot;${encryptedPhoneNumber}&quot;,&#xd;
    &quot;reportField1&quot;: &quot;123&quot;,&#xd;
    &quot;reportField2&quot;: &quot;20170701&quot;,&#xd;
    &quot;reportField3&quot;: &quot;ABC&quot;,&#xd;
    &quot;reportField4&quot;: &quot;DEF&quot;&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">vitality-enrolment-service-service-1/svc/0/apolloEnrollmentEncrypted</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: Rresponce code is 200" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert: User has been created" enabled="true">
                <stringProp name="JSON_PATH">$.enrollmentResponseEncrypted.insuredId</stringProp>
                <stringProp name="EXPECTED_VALUE"></stringProp>
                <boolProp name="JSONVALIDATION">false</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: Vitality ID present" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1165624797">vitalityId</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Active Calories E2E" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">stopthread</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1514078571000</longProp>
        <longProp name="ThreadGroup.end_time">1514078571000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">60</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="US DB" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery">select 1 from dual</stringProp>
          <stringProp name="connectionAge">10000</stringProp>
          <stringProp name="dataSource">DHDB</stringProp>
          <stringProp name="dbUrl">jdbc:oracle:thin:@${dbHost}.dhna.corp:${dbPort}:DHDB</stringProp>
          <stringProp name="driver">oracle.jdbc.OracleDriver</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">${dbPassword}</stringProp>
          <stringProp name="poolMax">20</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">${dbUserName}</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="AR DB" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery">select 1 from dual</stringProp>
          <stringProp name="connectionAge">10000</stringProp>
          <stringProp name="dataSource">AR_DB</stringProp>
          <stringProp name="dbUrl">jdbc:oracle:thin:@${arDbHost}.dhna.corp:${dbPort}:DHDB</stringProp>
          <stringProp name="driver">oracle.jdbc.OracleDriver</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">${dbPassword}</stringProp>
          <stringProp name="poolMax">20</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">${dbUserName}</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${wso2Base}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout">30000</stringProp>
          <stringProp name="HTTPSampler.response_timeout">300000</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST WSO2 Access Token" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="grant_type" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">client_credentials</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">grant_type</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api/token</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Basic ${wso2Token}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extracting WSO2 AccessToken" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">wso2AccessToken</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="Sample.scope">all</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">wso2AccessToken_NOT_FOUND</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Sapphire" enabled="true"/>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-2102099708">entityNo</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="580638458">
                <stringProp name="922101097">${sapphireId}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
          </UserParameters>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="mnemonic" elementType="Argument">
                <stringProp name="Argument.name">mnemonic</stringProp>
                <stringProp name="Argument.value">AWAW</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="caloriesPoints" elementType="Argument">
                <stringProp name="Argument.name">caloriesPoints</stringProp>
                <stringProp name="Argument.value">15</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="RTE: Sapphire" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST RTE Token" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;issuedDate&quot;: &quot;${dateToday}&quot;,&#xd;
  &quot;entityNo&quot;: null,&#xd;
  &quot;expiryDate&quot;: &quot;${dateTomorrow}&quot;,&#xd;
  &quot;verifiedDate&quot;: null,&#xd;
  &quot;partnerId&quot;: &quot;BESTBUY&quot;,&#xd;
  &quot;generatedBy&quot;: &quot;PERF-TEST&quot;,&#xd;
  &quot;tokenType&quot;: &quot;Token&quot;,&#xd;
  &quot;tokenValue&quot;: &quot;${randomAlphaNumericString}&quot;,&#xd;
  &quot;status&quot;: &quot;P&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${zuulHostRte}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">vitality-whitelabel-domain-service-1/svc/2/token.json</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="RTE Token: WhiteLable" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">rteTokenWhiteLable</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.tokenValue</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RTE: Sapphire" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
 &quot;enrollMemberRequest&quot;: {&#xd;
   &quot;coverageEffectiveDate&quot;: &quot;${dateToday}&quot;,&#xd;
   &quot;dateOfBirth&quot;: &quot;${__RandomDate(yyyy-MM-dd,1930-01-01,2001-12-31,,)}&quot;,&#xd;
   &quot;firstName&quot;: &quot;${randomString}&quot;,&#xd;
   &quot;gender&quot;: &quot;${__chooseRandom(M,F,U,randomProduct)}&quot;,&#xd;
   &quot;lastName&quot;: &quot;${randomString}&quot;,&#xd;
   &quot;partnerId&quot;: &quot;BESTBUY&quot;,&#xd;
   &quot;uniqueId&quot;: &quot;${rteTokenWhiteLable}&quot;,&#xd;
   &quot;zipCode&quot;: &quot;60605&quot;&#xd;
 }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/whitelabel-rte/1.0/svc/2/enrollMember</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${wso2AccessToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: Vitality ID present" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1203236063">errorMessage</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">6</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract entityNo" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">entityNo</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.enrollMemberResponse.vitalityId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="VDP Generic GDL: Tenant 32" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${vslBase}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout">30000</stringProp>
              <stringProp name="HTTPSampler.response_timeout">300000</stringProp>
            </ConfigTestElement>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="VDP Generic GDL Token: Tenant 32" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="tenantId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">32</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">tenantId</stringProp>
                  </elementProp>
                  <elementProp name="grantType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">clientCredentials</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">grantType</stringProp>
                  </elementProp>
                  <elementProp name="clientId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">78600</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">clientId</stringProp>
                  </elementProp>
                  <elementProp name="reference" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${entityNo}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">reference</stringProp>
                  </elementProp>
                  <elementProp name="clientSecret" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">c2Vuem9tYWxpbmdh</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">clientSecret</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">serviceapi/TokenManager/Token</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-vsl-timestamp</stringProp>
                    <stringProp name="Header.value">${timeStamp}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="x-vsl-version" elementType="Header">
                    <stringProp name="Header.name">x-vsl-version</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="x-vsl-sourcetype" elementType="Header">
                    <stringProp name="Header.name">x-vsl-sourcetype</stringProp>
                    <stringProp name="Header.value">GDL</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, application/*+json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">104</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="apiAccessToken" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">gdlToken</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.payload.content.authDetails.accessToken</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="VDP Generic GDL Upload: Tenant 32" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;header&quot;: {&#xd;
		&quot;uploadDate&quot;: &quot;${dateToday}T00:00:00+03:00&quot;,&#xd;
		&quot;sessionId&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}&quot;,&#xd;
		&quot;user&quot;: {&#xd;
			&quot;entityNo&quot;: &quot;${entityNo}&quot;,&#xd;
			&quot;email&quot;: &quot;${randomString}@vitalitygroup.com&quot;,&#xd;
			&quot;partnerUserId&quot;: &quot;&quot;&#xd;
		},&#xd;
		&quot;partnerSystem&quot;: &quot;Apple&quot;,&#xd;
		&quot;rawUploadData&quot;: &quot;&quot;,&#xd;
		&quot;processingType&quot;: &quot;BATCH&quot;,&#xd;
		&quot;tenantId&quot;: &quot;32&quot;,&#xd;
		&quot;verified&quot;: &quot;true&quot;,&#xd;
		&quot;uploadCount&quot;: 1&#xd;
	},&#xd;
	&quot;device&quot;: {&#xd;
		&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
		&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
		&quot;deviceId&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}&quot;&#xd;
	},&#xd;
	&quot;readings&quot;: [&#xd;
		{&#xd;
			&quot;startTime&quot;: &quot;${dateToday}T00:00:00-05:00&quot;,&#xd;
			&quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00-05:00&quot;,&#xd;
			&quot;readingType&quot;: &quot;WALKING&quot;,&#xd;
			&quot;dataCategory&quot;: &quot;ROUTINE&quot;,&#xd;
			&quot;integrity&quot;: &quot;VERIFIED&quot;,&#xd;
			&quot;workout&quot;: {&#xd;
				&quot;energyExpenditure&quot;: {&#xd;
					&quot;unitOfMeasurement&quot;: &quot;KILOCALORIES&quot;,&#xd;
					&quot;value&quot;: 1200&#xd;
				}&#xd;
			},&#xd;
			&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
			&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
			&quot;partnerReadingId&quot;: &quot;${dateToday}${randomAlphaNumericString}&quot;,&#xd;
			&quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
			&quot;duration&quot;: 86400&#xd;
		},&#xd;
		{&#xd;
			&quot;startTime&quot;: &quot;${dateToday}T00:00:00-05:00&quot;,&#xd;
			&quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00-05:00&quot;,&#xd;
			&quot;readingType&quot;: &quot;WEIGHT&quot;,&#xd;
			&quot;dataCategory&quot;: &quot;BIOMETRIC&quot;,&#xd;
			&quot;integrity&quot;: &quot;UNVERIFIED&quot;,&#xd;
			&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
			&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
			&quot;partnerReadingId&quot;: &quot;${dateToday}${randomAlphaNumericString}&quot;,&#xd;
			&quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
			&quot;healthData&quot;: {&#xd;
				&quot;weight&quot;: {&#xd;
					&quot;unitOfMeasurement&quot;: &quot;KILOGRAMS&quot;,&#xd;
					&quot;value&quot;: 60.980000000000665&#xd;
				}&#xd;
			}&#xd;
		}&#xd;
	]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">deviceapi/Device/GenericGDLUpload</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-vsl-timestamp</stringProp>
                    <stringProp name="Header.value">${timeStamp}</stringProp>
                  </elementProp>
                  <elementProp name="x-vsl-version" elementType="Header">
                    <stringProp name="Header.name">x-vsl-version</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="x-vsl-sourcetype" elementType="Header">
                    <stringProp name="Header.name">x-vsl-sourcetype</stringProp>
                    <stringProp name="Header.value">GDL</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-vsl-token</stringProp>
                    <stringProp name="Header.value">${gdlToken}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">743</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1880474659">Successfully Uploaded Health Data to GDL</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Apollo" enabled="false"/>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="false">
            <collectionProp name="UserParameters.names">
              <stringProp name="-2102099708">entityNo</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="1221018233">
                <stringProp name="-1530242525">${vitalityId_Apollo}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
          </UserParameters>
          <hashTree/>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Users: Apollo" enabled="false">
            <collectionProp name="UserParameters.names">
              <stringProp name="-2102099708">entityNo</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="1966936419">
                <stringProp name="-1226073238">${apolloID_1}</stringProp>
              </collectionProp>
              <collectionProp name="1966932972">
                <stringProp name="-1226073207">${apolloID_2}</stringProp>
              </collectionProp>
              <collectionProp name="1966905438">
                <stringProp name="-1226073176">${apolloID_3}</stringProp>
              </collectionProp>
              <collectionProp name="1966901991">
                <stringProp name="-1226073145">${apolloID_4}</stringProp>
              </collectionProp>
              <collectionProp name="1966898544">
                <stringProp name="-1226073114">${apolloID_5}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
          </UserParameters>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="mnemonic" elementType="Argument">
                <stringProp name="Argument.name">mnemonic</stringProp>
                <stringProp name="Argument.value">SWAW</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="caloriesPoints" elementType="Argument">
                <stringProp name="Argument.name">caloriesPoints</stringProp>
                <stringProp name="Argument.value">10</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RTE: Apollo" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&#xd;
 {&#xd;
  &quot;enrollmentRequestEncrypted&quot;: {&#xd;
    &quot;firstNameEncrypted&quot;: &quot;${encryptedFirstName}&quot;,&#xd;
    &quot;lastNameEncrypted&quot;: &quot;${encryptedLastName}&quot;,&#xd;
    &quot;dateOfBirthEncrypted&quot;: &quot;${encryptedDOB}&quot;,&#xd;
    &quot;insuredId&quot;: &quot;${randomString}&quot;,&#xd;
    &quot;gender&quot;: &quot;${__chooseRandom(M,F,U,randomProduct)}&quot;,&#xd;
    &quot;vitalityCoverageEffectiveDate&quot;: &quot;${__RandomDate(yyyy-MM-dd,2018-01-01,${__time(yyyy-MM-dd)},,)}&quot;,&#xd;
    &quot;productIndicator&quot;: &quot;${__chooseRandom(FULL,SELF,randomProduct)}&quot;,&#xd;
    &quot;emailAddress&quot;: &quot;POC-${randomString}@rte-perf.com&quot;,&#xd;
    &quot;zipCode&quot;: &quot;&quot;,&#xd;
    &quot;customerServicePhone&quot;: &quot;${encryptedPhoneNumber}&quot;,&#xd;
    &quot;reportField1&quot;: &quot;123&quot;,&#xd;
    &quot;reportField2&quot;: &quot;20170701&quot;,&#xd;
    &quot;reportField3&quot;: &quot;ABC&quot;,&#xd;
    &quot;reportField4&quot;: &quot;DEF&quot;&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${wso2Base}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/${wso2RtePath}/svc/0/apolloEnrollmentEncrypted</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${wso2AccessToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Entity Number" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">entityNo</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.enrollmentResponseEncrypted.vitalityId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: Vitality ID present" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1165624797">vitalityId</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="VDP Generic GDL: Tenant 27" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${vslBase}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout">30000</stringProp>
              <stringProp name="HTTPSampler.response_timeout">300000</stringProp>
            </ConfigTestElement>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="VDP Generic GDL Token: Tenant 27" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="tenantId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">27</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">tenantId</stringProp>
                  </elementProp>
                  <elementProp name="grantType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">clientCredentials</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">grantType</stringProp>
                  </elementProp>
                  <elementProp name="clientId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">78600</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">clientId</stringProp>
                  </elementProp>
                  <elementProp name="reference" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${entityNo}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">reference</stringProp>
                  </elementProp>
                  <elementProp name="clientSecret" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">c2Vuem9tYWxpbmdh</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">clientSecret</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">serviceapi/TokenManager/Token</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-vsl-timestamp</stringProp>
                    <stringProp name="Header.value">${timeStamp}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="x-vsl-version" elementType="Header">
                    <stringProp name="Header.name">x-vsl-version</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="x-vsl-sourcetype" elementType="Header">
                    <stringProp name="Header.name">x-vsl-sourcetype</stringProp>
                    <stringProp name="Header.value">GDL</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, application/*+json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">104</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="apiAccessToken" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">gdlToken</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.payload.content.authDetails.accessToken</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="VDP Generic GDL Upload: Tenant 27" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;header&quot;: {&#xd;
		&quot;uploadDate&quot;: &quot;${dateToday}T00:00:00+03:00&quot;,&#xd;
		&quot;sessionId&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}&quot;,&#xd;
		&quot;user&quot;: {&#xd;
			&quot;entityNo&quot;: &quot;${entityNo}&quot;,&#xd;
			&quot;email&quot;: &quot;${randomString}@vitalitygroup.com&quot;,&#xd;
			&quot;partnerUserId&quot;: &quot;&quot;&#xd;
		},&#xd;
		&quot;partnerSystem&quot;: &quot;Apple&quot;,&#xd;
		&quot;rawUploadData&quot;: &quot;&quot;,&#xd;
		&quot;processingType&quot;: &quot;BATCH&quot;,&#xd;
		&quot;tenantId&quot;: &quot;27&quot;,&#xd;
		&quot;verified&quot;: &quot;true&quot;,&#xd;
		&quot;uploadCount&quot;: 1&#xd;
	},&#xd;
	&quot;device&quot;: {&#xd;
		&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
		&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
		&quot;deviceId&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}&quot;&#xd;
	},&#xd;
	&quot;readings&quot;: [&#xd;
		{&#xd;
			&quot;startTime&quot;: &quot;${dateToday}T00:00:00-05:00&quot;,&#xd;
			&quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00-05:00&quot;,&#xd;
			&quot;readingType&quot;: &quot;WALKING&quot;,&#xd;
			&quot;dataCategory&quot;: &quot;ROUTINE&quot;,&#xd;
			&quot;integrity&quot;: &quot;VERIFIED&quot;,&#xd;
			&quot;workout&quot;: {&#xd;
				&quot;energyExpenditure&quot;: {&#xd;
					&quot;unitOfMeasurement&quot;: &quot;KILOCALORIES&quot;,&#xd;
					&quot;value&quot;: 1200&#xd;
				}&#xd;
			},&#xd;
			&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
			&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
			&quot;partnerReadingId&quot;: &quot;${dateToday}${randomAlphaNumericString}&quot;,&#xd;
			&quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
			&quot;duration&quot;: 86400&#xd;
		},&#xd;
		{&#xd;
			&quot;startTime&quot;: &quot;${dateToday}T00:00:00-05:00&quot;,&#xd;
			&quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00-05:00&quot;,&#xd;
			&quot;readingType&quot;: &quot;WEIGHT&quot;,&#xd;
			&quot;dataCategory&quot;: &quot;BIOMETRIC&quot;,&#xd;
			&quot;integrity&quot;: &quot;UNVERIFIED&quot;,&#xd;
			&quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
			&quot;model&quot;: &quot;iOS 12.3.1&quot;,&#xd;
			&quot;partnerReadingId&quot;: &quot;${dateToday}${randomAlphaNumericString}&quot;,&#xd;
			&quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
			&quot;healthData&quot;: {&#xd;
				&quot;weight&quot;: {&#xd;
					&quot;unitOfMeasurement&quot;: &quot;KILOGRAMS&quot;,&#xd;
					&quot;value&quot;: 60.980000000000665&#xd;
				}&#xd;
			}&#xd;
		}&#xd;
	]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">deviceapi/Device/GenericGDLUpload</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-vsl-timestamp</stringProp>
                    <stringProp name="Header.value">${timeStamp}</stringProp>
                  </elementProp>
                  <elementProp name="x-vsl-version" elementType="Header">
                    <stringProp name="Header.name">x-vsl-version</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="x-vsl-sourcetype" elementType="Header">
                    <stringProp name="Header.name">x-vsl-sourcetype</stringProp>
                    <stringProp name="Header.value">GDL</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-vsl-token</stringProp>
                    <stringProp name="Header.value">${gdlToken}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Length</stringProp>
                    <stringProp name="Header.value">743</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1880474659">Successfully Uploaded Health Data to GDL</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Verify Data in VDP" enabled="true">
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${vslBase}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout">30000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">300000</stringProp>
          </ConfigTestElement>
          <hashTree/>
          <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Verify that VDP has data: ROUTINE " enabled="true">
            <stringProp name="WhileController.condition">${__groovy(vars.get(&quot;kilojoules&quot;) != &quot;KILOJOULES&quot;,)}</stringProp>
          </WhileController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Veirfy Data recieved by VDP" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="entityNo" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${entityNo}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">entityNo</stringProp>
                  </elementProp>
                  <elementProp name="dataCategories" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">Routine</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">dataCategories</stringProp>
                  </elementProp>
                  <elementProp name="startDate" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${dateToday}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">startDate</stringProp>
                  </elementProp>
                  <elementProp name="endDate" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${dateToday}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">endDate</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">deviceapi/Device/HistoryTracker</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="x-vsl-sourcetype" elementType="Header">
                    <stringProp name="Header.name">x-vsl-sourcetype</stringProp>
                    <stringProp name="Header.value">GDL</stringProp>
                  </elementProp>
                  <elementProp name="x-vsl-timestamp" elementType="Header">
                    <stringProp name="Header.name">x-vsl-timestamp</stringProp>
                    <stringProp name="Header.value">${timeStamp}</stringProp>
                  </elementProp>
                  <elementProp name="x-vsl-version" elementType="Header">
                    <stringProp name="Header.name">x-vsl-version</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">x-vsl-token</stringProp>
                    <stringProp name="Header.value">${gdlToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Data type: KILOJOULES" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">kilojoules</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.payload.content.historyTracker.calories.unit</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(vars.get(&quot;kilojoules&quot;) = &quot;KILOJOULES&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
                <intProp name="ActionProcessor.action">3</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">0</stringProp>
              </TestAction>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-503532059">No results were returned</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Verify that VDP has data: BIOMETRIC " enabled="false">
            <stringProp name="WhileController.condition">${__groovy(vars.get(&quot;biometric&quot;) != &quot;KILOGRAMS&quot;,)}</stringProp>
          </WhileController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Veirfy Data recieved by VDP" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="entityNo" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${entityNo}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">entityNo</stringProp>
                  </elementProp>
                  <elementProp name="dataCategories" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">Biometric</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">dataCategories</stringProp>
                  </elementProp>
                  <elementProp name="startDate" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${dateToday}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">startDate</stringProp>
                  </elementProp>
                  <elementProp name="endDate" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${dateToday}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">endDate</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">deviceapi/Device/HistoryTracker</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="x-vsl-sourcetype" elementType="Header">
                    <stringProp name="Header.name">x-vsl-sourcetype</stringProp>
                    <stringProp name="Header.value">GDL</stringProp>
                  </elementProp>
                  <elementProp name="x-vsl-timestamp" elementType="Header">
                    <stringProp name="Header.name">x-vsl-timestamp</stringProp>
                    <stringProp name="Header.value">${timeStamp}</stringProp>
                  </elementProp>
                  <elementProp name="x-vsl-version" elementType="Header">
                    <stringProp name="Header.name">x-vsl-version</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">x-vsl-token</stringProp>
                    <stringProp name="Header.value">${gdlToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Data type: BIOMETRIC" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">biometric</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.payload.content.historyTracker.weight.unit</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(vars.get(&quot;biometric&quot;) = &quot;KILOGRAMS&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
                <intProp name="ActionProcessor.action">3</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">0</stringProp>
              </TestAction>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Active Calories processed by ESB" enabled="true">
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Wait Until Processed" enabled="true">
            <stringProp name="WhileController.condition">${__groovy(vars.get(&quot;activeCalorieProcessed_1&quot;) != &quot;1&quot;,)}</stringProp>
          </WhileController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ACTIVITY REGISTER" enabled="true">
              <stringProp name="dataSource">DHDB</stringProp>
              <stringProp name="query">SELECT ITEM_PROCESSED 
FROM ACTIVITY_REGISTER
WHERE ACTIVITY_TYPE in (&apos;ACTIVE_CAL&apos;)  
AND MEMBER_ENTITY_NO = ${entityNo}
AND EVENT_DATE = &apos;${dateToday2}&apos;
ORDER BY EVENT_DATE DESC</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">activeCalorieProcessed</stringProp>
            </JDBCSampler>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(vars.get(&quot;activeCalorieProcessed_1&quot;) = &quot;1&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
                <intProp name="ActionProcessor.action">3</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">0</stringProp>
              </TestAction>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="49">1</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">48</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">activeCalorieProcessed_1</stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="PC4_EVENTS: Event created" enabled="true">
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Wait Until Processed" enabled="true">
            <stringProp name="WhileController.condition">${__groovy(vars.get(&quot;eventCreated_1&quot;) != vars.get(&quot;mnemonic&quot;),)}</stringProp>
          </WhileController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="PC4_EVENTS" enabled="true">
              <stringProp name="dataSource">DHDB</stringProp>
              <stringProp name="query">SELECT DETAILED_CATEGORY_CODE 
FROM PC4_EVENTS 
WHERE MEMBER_ENTITY_NO = ${entityNo}
AND EVENT_DATE = &apos;${dateToday2}&apos;
ORDER BY EVENT_DATE DESC, CREATED_AT DESC</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">eventCreated</stringProp>
            </JDBCSampler>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(vars.get(&quot;eventCreated_1&quot;) = vars.get(&quot;mnemonic&quot;),)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
                <intProp name="ActionProcessor.action">3</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">0</stringProp>
              </TestAction>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1300468476">${mnemonic}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">1</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">eventCreated_1</stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
            <stringProp name="DurationAssertion.duration">2000</stringProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </DurationAssertion>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="VITALITY_EVENTS: Points awarded By Core" enabled="true">
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Wait Until Processed" enabled="true">
            <stringProp name="WhileController.condition">${__groovy(vars.get(&quot;eventStatus_1&quot;) != &quot;L&quot;,)}</stringProp>
          </WhileController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="VITALITY_EVENTS" enabled="true">
              <stringProp name="dataSource">DHDB</stringProp>
              <stringProp name="query">SELECT STATUS, CALCULATED_POINTS
FROM VITALITY_EVENT 
WHERE MEMBER_ENTITY_NO = ${entityNo}
AND EVENT_DATE_TIME = &apos;${dateToday2}&apos;
ORDER BY EVENT_DATE_TIME DESC, DATE_TIME_LAST_MODIFIED DESC</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">eventStatus,pointsCalculated</stringProp>
            </JDBCSampler>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(vars.get(&quot;eventStatus_1&quot;) = &quot;L&quot;,)} || ${__groovy(vars.get(&quot;eventStatus_2&quot;) = &quot;L&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
                <intProp name="ActionProcessor.action">3</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">0</stringProp>
              </TestAction>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-140538787">${caloriesPoints}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">1</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">pointsCalculated_1</stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
            <stringProp name="DurationAssertion.duration">2000</stringProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </DurationAssertion>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="ENG_GOAL.EVENT_LOG: Points awarded By AR" enabled="true">
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Wait Until Processed" enabled="true">
            <stringProp name="WhileController.condition">${__groovy(vars.get(&quot;eventStatusAR_1&quot;) != &quot;L&quot;,)}</stringProp>
          </WhileController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ENG_GOAL.EVENT_LOG" enabled="true">
              <stringProp name="dataSource">AR_DB</stringProp>
              <stringProp name="query">SELECT STATUS, POINTS
FROM ENG_GOAL.EVENT_LOG 
WHERE MEMBER_ID = ${entityNo}
AND EVENT_DATE = &apos;${dateToday2}&apos;
AND CAPTURE_DATE = &apos;${dateToday2}&apos;
ORDER BY EVENT_DATE DESC
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">eventStatusAR,pointsCalculatedAR</stringProp>
            </JDBCSampler>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(vars.get(&quot;eventStatusAR_1&quot;) = &quot;L&quot;,)} || ${__groovy(vars.get(&quot;eventStatusAR_2&quot;) = &quot;L&quot;,)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
                <intProp name="ActionProcessor.action">3</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">0</stringProp>
              </TestAction>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-140538787">${caloriesPoints}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">1</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">pointsCalculatedAR_1</stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
            <stringProp name="DurationAssertion.duration">2000</stringProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </DurationAssertion>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="ENG_GOAL.PROGRESS_TRACKER: Points awarded By AR" enabled="false">
          <boolProp name="TransactionController.parent">true</boolProp>
          <boolProp name="TransactionController.includeTimers">false</boolProp>
        </TransactionController>
        <hashTree>
          <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Wait Until Processed" enabled="true">
            <stringProp name="WhileController.condition">${__groovy(vars.get(&quot;pointsAR_1&quot;) != vars.get(&quot;caloriesPoints&quot;), )}</stringProp>
          </WhileController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ENG_GOAL.PROGRESS_TRACKER" enabled="true">
              <stringProp name="dataSource">AR_DB</stringProp>
              <stringProp name="query">SELECT CURRENT_VALUE 
FROM ENG_GOAL.PROGRESS_TRACKER
WHERE MEMBER_ID = ${entityNo}
ORDER BY CREATED_DATE DESC
</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">pointsAR</stringProp>
            </JDBCSampler>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">${__groovy(vars.get(&quot;pointsAR_1&quot;) = vars.get(&quot;caloriesPoints&quot;), )}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
                <intProp name="ActionProcessor.action">3</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">0</stringProp>
              </TestAction>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-140538787">${caloriesPoints}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">1</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">pointsAR_1</stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
            <stringProp name="DurationAssertion.duration">2000</stringProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </DurationAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Settings" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="_doc_browser_context" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_doc_browser_context</stringProp>
              </elementProp>
              <elementProp name="_p" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">IOS</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_p</stringProp>
              </elementProp>
              <elementProp name="_v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${mob.app.version}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_v</stringProp>
              </elementProp>
              <elementProp name="_t" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${__time(yyyy-MM-dd,)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_t</stringProp>
              </elementProp>
              <elementProp name="token" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${ar_Token}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">token</stringProp>
              </elementProp>
              <elementProp name="filter" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">HEALTH_DATA_THRESHOLDS</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">filter</stringProp>
              </elementProp>
              <elementProp name="weightKg" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${weight}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">weightKg</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${msBase}</stringProp>
          <stringProp name="HTTPSampler.port">${msPort}</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${msPath}/user_settings/settings</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Code 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Verify: LWAW" enabled="true">
            <stringProp name="JSON_PATH">$.output.healthDataThresholdSettings.caloriesThresholds.thresholds[0].threshold</stringProp>
            <stringProp name="EXPECTED_VALUE">${lwaw}</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">true</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Verify: SWAW" enabled="true">
            <stringProp name="JSON_PATH">$.output.healthDataThresholdSettings.caloriesThresholds.thresholds[1].threshold</stringProp>
            <stringProp name="EXPECTED_VALUE">${swaw}</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">true</boolProp>
          </JSONPathAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Verify: AWAW" enabled="true">
            <stringProp name="JSON_PATH">$.output.healthDataThresholdSettings.caloriesThresholds.thresholds[2].threshold</stringProp>
            <stringProp name="EXPECTED_VALUE">${awaw}</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">true</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Fail Test on Duration: 2H" enabled="true">
          <stringProp name="DurationAssertion.duration">60000</stringProp>
          <stringProp name="Assertion.scope">all</stringProp>
        </DurationAssertion>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <kg.apc.jmeter.threads.UltimateThreadGroup guiclass="kg.apc.jmeter.threads.UltimateThreadGroupGui" testclass="kg.apc.jmeter.threads.UltimateThreadGroup" testname="Forwarding To AMB: 100 concurrent" enabled="false">
        <collectionProp name="ultimatethreadgroupdata">
          <collectionProp name="327251904">
            <stringProp name="1567">10</stringProp>
            <stringProp name="48">0</stringProp>
            <stringProp name="48">0</stringProp>
            <stringProp name="50547">300</stringProp>
            <stringProp name="48">0</stringProp>
          </collectionProp>
          <collectionProp name="-392301837">
            <stringProp name="1567">10</stringProp>
            <stringProp name="53">5</stringProp>
            <stringProp name="48">0</stringProp>
            <stringProp name="49870">295</stringProp>
            <stringProp name="48">0</stringProp>
          </collectionProp>
          <collectionProp name="-1570020979">
            <stringProp name="1567">10</stringProp>
            <stringProp name="1567">10</stringProp>
            <stringProp name="48">0</stringProp>
            <stringProp name="49865">290</stringProp>
            <stringProp name="48">0</stringProp>
          </collectionProp>
          <collectionProp name="-1541315971">
            <stringProp name="1567">10</stringProp>
            <stringProp name="1572">15</stringProp>
            <stringProp name="48">0</stringProp>
            <stringProp name="49839">285</stringProp>
            <stringProp reference="../../collectionProp[3]/stringProp[5]"/>
          </collectionProp>
          <collectionProp name="-1465593139">
            <stringProp name="1567">10</stringProp>
            <stringProp name="1598">20</stringProp>
            <stringProp name="48">0</stringProp>
            <stringProp name="49834">280</stringProp>
            <stringProp reference="../../collectionProp[3]/stringProp[5]"/>
          </collectionProp>
          <collectionProp name="-719312314">
            <stringProp name="1567">10</stringProp>
            <stringProp name="1603">25</stringProp>
            <stringProp name="48">0</stringProp>
            <stringProp name="49808">275</stringProp>
            <stringProp reference="../../collectionProp[3]/stringProp[5]"/>
          </collectionProp>
          <collectionProp name="-643589482">
            <stringProp name="1567">10</stringProp>
            <stringProp name="1629">30</stringProp>
            <stringProp name="48">0</stringProp>
            <stringProp name="49803">270</stringProp>
            <stringProp reference="../../collectionProp[3]/stringProp[5]"/>
          </collectionProp>
          <collectionProp name="-615631171">
            <stringProp name="1567">10</stringProp>
            <stringProp name="1634">35</stringProp>
            <stringProp name="48">0</stringProp>
            <stringProp name="49777">265</stringProp>
            <stringProp reference="../../collectionProp[3]/stringProp[5]"/>
          </collectionProp>
          <collectionProp name="-516760732">
            <stringProp name="1567">10</stringProp>
            <stringProp name="1660">40</stringProp>
            <stringProp name="48">0</stringProp>
            <stringProp name="49772">260</stringProp>
            <stringProp reference="../../collectionProp[3]/stringProp[5]"/>
          </collectionProp>
          <collectionProp name="-511203331">
            <stringProp name="1567">10</stringProp>
            <stringProp name="1665">45</stringProp>
            <stringProp name="48">0</stringProp>
            <stringProp name="49746">255</stringProp>
            <stringProp reference="../../collectionProp[3]/stringProp[5]"/>
          </collectionProp>
        </collectionProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
      </kg.apc.jmeter.threads.UltimateThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Forwarding To AMB" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;ADPHealthSurveyResult&quot;: {&#xd;
		&quot;vitalityMemberId&quot;: 1431787793,&#xd;
		&quot;surveyId&quot;: 15729440707,&#xd;
		&quot;questions&quot;: [&#xd;
			{&#xd;
				&quot;id&quot;: 1,&#xd;
				&quot;order&quot;: 1,&#xd;
				&quot;question&quot;: &quot;Today I feel that I?&quot;,&#xd;
				&quot;questionType&quot;: &quot;chooseOne&quot;,&#xd;
				&quot;conditionalParent&quot;: null,&#xd;
				&quot;options&quot;: [&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;A&quot;,&#xd;
						&quot;text&quot;: &quot;have below average health&quot;,&#xd;
						&quot;order&quot;: 1&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;B&quot;,&#xd;
						&quot;text&quot;: &quot;have average health&quot;,&#xd;
						&quot;order&quot;: 2&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;C&quot;,&#xd;
						&quot;text&quot;: &quot;have above average health&quot;,&#xd;
						&quot;order&quot;: 3&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;D&quot;,&#xd;
						&quot;text&quot;: &quot;am very healthy&quot;,&#xd;
						&quot;order&quot;: 4&#xd;
					}&#xd;
				],&#xd;
				&quot;answers&quot;: [&#xd;
					{&#xd;
						&quot;value&quot;: &quot;A&quot;&#xd;
					}&#xd;
				]&#xd;
			},&#xd;
			{&#xd;
				&quot;id&quot;: 2,&#xd;
				&quot;order&quot;: 2,&#xd;
				&quot;question&quot;: &quot;What best describes your desire to change your health status?&quot;,&#xd;
				&quot;questionType&quot;: &quot;chooseOne&quot;,&#xd;
				&quot;conditionalParent&quot;: {&#xd;
					&quot;parentQuestionId&quot;: 1,&#xd;
					&quot;parentQuestionAnswer&quot;: [&#xd;
						&quot;A&quot;&#xd;
					]&#xd;
				},&#xd;
				&quot;options&quot;: [&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;A&quot;,&#xd;
						&quot;text&quot;: &quot;I am content with my health&quot;,&#xd;
						&quot;order&quot;: 1&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;B&quot;,&#xd;
						&quot;text&quot;: &quot;I want to take steps to improve my health&quot;,&#xd;
						&quot;order&quot;: 2&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;C&quot;,&#xd;
						&quot;text&quot;: &quot;I am actively taking steps to improve my health&quot;,&#xd;
						&quot;order&quot;: 3&#xd;
					}&#xd;
				],&#xd;
				&quot;answers&quot;: [&#xd;
					{&#xd;
						&quot;value&quot;: &quot;B&quot;&#xd;
					}&#xd;
				]&#xd;
			},&#xd;
			{&#xd;
				&quot;id&quot;: 3,&#xd;
				&quot;order&quot;: 3,&#xd;
				&quot;question&quot;: &quot;What best describes your desire to change your health status?&quot;,&#xd;
				&quot;questionType&quot;: &quot;chooseOne&quot;,&#xd;
				&quot;conditionalParent&quot;: {&#xd;
					&quot;parentQuestionId&quot;: 1,&#xd;
					&quot;parentQuestionAnswer&quot;: [&#xd;
						&quot;B&quot;&#xd;
					]&#xd;
				},&#xd;
				&quot;options&quot;: [&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;A&quot;,&#xd;
						&quot;text&quot;: &quot;I am content with my health&quot;,&#xd;
						&quot;order&quot;: 1&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;B&quot;,&#xd;
						&quot;text&quot;: &quot;I want to take steps to improve my health&quot;,&#xd;
						&quot;order&quot;: 2&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;C&quot;,&#xd;
						&quot;text&quot;: &quot;I am actively taking steps to improve my health&quot;,&#xd;
						&quot;order&quot;: 3&#xd;
					}&#xd;
				],&#xd;
				&quot;answers&quot;: []&#xd;
			},&#xd;
			{&#xd;
				&quot;id&quot;: 4,&#xd;
				&quot;order&quot;: 4,&#xd;
				&quot;question&quot;: &quot;What are your three biggest motivations around health?&quot;,&#xd;
				&quot;questionType&quot;: &quot;chooseMinMax&quot;,&#xd;
				&quot;conditionalParent&quot;: null,&#xd;
				&quot;options&quot;: [&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;A&quot;,&#xd;
						&quot;text&quot;: &quot;I want to be more active&quot;,&#xd;
						&quot;order&quot;: 1&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;B&quot;,&#xd;
						&quot;text&quot;: &quot;I want to have more energy / feel better&quot;,&#xd;
						&quot;order&quot;: 2&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;C&quot;,&#xd;
						&quot;text&quot;: &quot;I want to eat better&quot;,&#xd;
						&quot;order&quot;: 3&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;D&quot;,&#xd;
						&quot;text&quot;: &quot;I want to lose weight&quot;,&#xd;
						&quot;order&quot;: 4&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;E&quot;,&#xd;
						&quot;text&quot;: &quot;I want to look better&quot;,&#xd;
						&quot;order&quot;: 5&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;F&quot;,&#xd;
						&quot;text&quot;: &quot;I want to ensure long-term health for my family&quot;,&#xd;
						&quot;order&quot;: 6&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;G&quot;,&#xd;
						&quot;text&quot;: &quot;I want to reduce medical expenses&quot;,&#xd;
						&quot;order&quot;: 7&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;H&quot;,&#xd;
						&quot;text&quot;: &quot;I want to manage my medical condition better&quot;,&#xd;
						&quot;order&quot;: 8&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;I&quot;,&#xd;
						&quot;text&quot;: &quot;I want to sleep better&quot;,&#xd;
						&quot;order&quot;: 9&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;J&quot;,&#xd;
						&quot;text&quot;: &quot;I want to manage my stress &quot;,&#xd;
						&quot;order&quot;: 10&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;K&quot;,&#xd;
						&quot;text&quot;: &quot;I want to stop using substances that impair my health (alcohol / tobacco / recreational drugs)&quot;,&#xd;
						&quot;order&quot;: 11&#xd;
					}&#xd;
				],&#xd;
				&quot;answers&quot;: [&#xd;
					{&#xd;
						&quot;value&quot;: &quot;E&quot;&#xd;
					}&#xd;
				]&#xd;
			},&#xd;
			{&#xd;
				&quot;id&quot;: 5,&#xd;
				&quot;order&quot;: 5,&#xd;
				&quot;question&quot;: &quot;Do any of these barriers prevent you from improving your health?&quot;,&#xd;
				&quot;questionType&quot;: &quot;chooseMinMax&quot;,&#xd;
				&quot;conditionalParent&quot;: null,&#xd;
				&quot;options&quot;: [&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;A&quot;,&#xd;
						&quot;text&quot;: &quot;I am too busy caring for others to spend time on my health&quot;,&#xd;
						&quot;order&quot;: 1&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;B&quot;,&#xd;
						&quot;text&quot;: &quot;I have trouble doing the daily tasks that will improve my health&quot;,&#xd;
						&quot;order&quot;: 2&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;C&quot;,&#xd;
						&quot;text&quot;: &quot;I am too busy professionally to spend time on my health&quot;,&#xd;
						&quot;order&quot;: 3&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;D&quot;,&#xd;
						&quot;text&quot;: &quot;Improving my health will cost too much money&quot;,&#xd;
						&quot;order&quot;: 4&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;E&quot;,&#xd;
						&quot;text&quot;: &quot;I struggle to find the motivation to improve my health&quot;,&#xd;
						&quot;order&quot;: 5&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;F&quot;,&#xd;
						&quot;text&quot;: &quot;I feel my health is beyond my control&quot;,&#xd;
						&quot;order&quot;: 6&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;G&quot;,&#xd;
						&quot;text&quot;: &quot;I do not trust in the health advice I receive&quot;,&#xd;
						&quot;order&quot;: 7&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;H&quot;,&#xd;
						&quot;text&quot;: &quot;The healthcare system is too complex &quot;,&#xd;
						&quot;order&quot;: 8&#xd;
					}&#xd;
				],&#xd;
				&quot;answers&quot;: [&#xd;
					{&#xd;
						&quot;value&quot;: &quot;D&quot;&#xd;
					}&#xd;
				]&#xd;
			},&#xd;
			{&#xd;
				&quot;id&quot;: 6,&#xd;
				&quot;order&quot;: 6,&#xd;
				&quot;question&quot;: &quot;How frequently do you experience periods of stress, anxiety or depression?&quot;,&#xd;
				&quot;questionType&quot;: &quot;chooseOneSlider&quot;,&#xd;
				&quot;conditionalParent&quot;: null,&#xd;
				&quot;options&quot;: [&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;A&quot;,&#xd;
						&quot;text&quot;: &quot;Never&quot;,&#xd;
						&quot;order&quot;: 1&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;B&quot;,&#xd;
						&quot;text&quot;: &quot;Occasionally&quot;,&#xd;
						&quot;order&quot;: 2&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;C&quot;,&#xd;
						&quot;text&quot;: &quot;Frequently&quot;,&#xd;
						&quot;order&quot;: 3&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;D&quot;,&#xd;
						&quot;text&quot;: &quot;Most of the time&quot;,&#xd;
						&quot;order&quot;: 4&#xd;
					}&#xd;
				],&#xd;
				&quot;answers&quot;: [&#xd;
					{&#xd;
						&quot;value&quot;: &quot;B&quot;&#xd;
					}&#xd;
				]&#xd;
			},&#xd;
			{&#xd;
				&quot;id&quot;: 7,&#xd;
				&quot;order&quot;: 7,&#xd;
				&quot;question&quot;: &quot;How frequently would you like to receive messages around improving your health or saving money on health-related expenses?&quot;,&#xd;
				&quot;questionType&quot;: &quot;chooseOneSlider&quot;,&#xd;
				&quot;conditionalParent&quot;: null,&#xd;
				&quot;options&quot;: [&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;A&quot;,&#xd;
						&quot;text&quot;: &quot;Once a week&quot;,&#xd;
						&quot;order&quot;: 1&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;B&quot;,&#xd;
						&quot;text&quot;: &quot;A few times a week&quot;,&#xd;
						&quot;order&quot;: 2&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;C&quot;,&#xd;
						&quot;text&quot;: &quot;Once a day&quot;,&#xd;
						&quot;order&quot;: 3&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;D&quot;,&#xd;
						&quot;text&quot;: &quot;Multiple times a day&quot;,&#xd;
						&quot;order&quot;: 4&#xd;
					}&#xd;
				],&#xd;
				&quot;answers&quot;: [&#xd;
					{&#xd;
						&quot;value&quot;: &quot;B&quot;&#xd;
					}&#xd;
				]&#xd;
			},&#xd;
			{&#xd;
				&quot;id&quot;: 8,&#xd;
				&quot;order&quot;: 8,&#xd;
				&quot;question&quot;: &quot;When are you most likely to read short messages from the program on your phone or watch?&quot;,&#xd;
				&quot;questionType&quot;: &quot;chooseOne&quot;,&#xd;
				&quot;conditionalParent&quot;: null,&#xd;
				&quot;options&quot;: [&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;A&quot;,&#xd;
						&quot;text&quot;: &quot;Weekdays&quot;,&#xd;
						&quot;order&quot;: 1&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;B&quot;,&#xd;
						&quot;text&quot;: &quot;Weekends&quot;,&#xd;
						&quot;order&quot;: 2&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;C&quot;,&#xd;
						&quot;text&quot;: &quot;Either&quot;,&#xd;
						&quot;order&quot;: 3&#xd;
					}&#xd;
				],&#xd;
				&quot;answers&quot;: [&#xd;
					{&#xd;
						&quot;value&quot;: &quot;A&quot;&#xd;
					}&#xd;
				]&#xd;
			},&#xd;
			{&#xd;
				&quot;id&quot;: 9,&#xd;
				&quot;order&quot;: 9,&#xd;
				&quot;question&quot;: &quot;At what time of day do you prefer to receive messages on your phone or watch?&quot;,&#xd;
				&quot;questionType&quot;: &quot;chooseOneSlider&quot;,&#xd;
				&quot;conditionalParent&quot;: null,&#xd;
				&quot;options&quot;: [&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;A&quot;,&#xd;
						&quot;text&quot;: &quot;Before 8am&quot;,&#xd;
						&quot;order&quot;: 1&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;B&quot;,&#xd;
						&quot;text&quot;: &quot;8am-12pm&quot;,&#xd;
						&quot;order&quot;: 2&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;C&quot;,&#xd;
						&quot;text&quot;: &quot;12-4pm&quot;,&#xd;
						&quot;order&quot;: 3&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;D&quot;,&#xd;
						&quot;text&quot;: &quot;4-8pm&quot;,&#xd;
						&quot;order&quot;: 4&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;E&quot;,&#xd;
						&quot;text&quot;: &quot;After 8pm&quot;,&#xd;
						&quot;order&quot;: 5&#xd;
					}&#xd;
				],&#xd;
				&quot;answers&quot;: [&#xd;
					{&#xd;
						&quot;value&quot;: &quot;C&quot;&#xd;
					}&#xd;
				]&#xd;
			},&#xd;
			{&#xd;
				&quot;id&quot;: 10,&#xd;
				&quot;order&quot;: 10,&#xd;
				&quot;question&quot;: &quot;Financially:&quot;,&#xd;
				&quot;questionType&quot;: &quot;chooseOne&quot;,&#xd;
				&quot;conditionalParent&quot;: null,&#xd;
				&quot;options&quot;: [&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;A&quot;,&#xd;
						&quot;text&quot;: &quot;I am unable to pay my medical expenses&quot;,&#xd;
						&quot;order&quot;: 1&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;B&quot;,&#xd;
						&quot;text&quot;: &quot;I am able to pay my medical expenses, yet I struggle to do so&quot;,&#xd;
						&quot;order&quot;: 2&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;C&quot;,&#xd;
						&quot;text&quot;: &quot;I do not have a problem paying my medical expenses&quot;,&#xd;
						&quot;order&quot;: 3&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;D&quot;,&#xd;
						&quot;text&quot;: &quot;I have not incurred any medical expenses recently&quot;,&#xd;
						&quot;order&quot;: 4&#xd;
					}&#xd;
				],&#xd;
				&quot;answers&quot;: [&#xd;
					{&#xd;
						&quot;value&quot;: &quot;B&quot;&#xd;
					}&#xd;
				]&#xd;
			},&#xd;
			{&#xd;
				&quot;id&quot;: 11,&#xd;
				&quot;order&quot;: 11,&#xd;
				&quot;question&quot;: &quot;How aware are you of the options you have to save money on your health such as&quot;,&#xd;
				&quot;questionType&quot;: &quot;chooseMinMax&quot;,&#xd;
				&quot;conditionalParent&quot;: {&#xd;
					&quot;parentQuestionId&quot;: 10,&#xd;
					&quot;parentQuestionAnswer&quot;: [&#xd;
						&quot;A&quot;&#xd;
					]&#xd;
				},&#xd;
				&quot;options&quot;: [&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;A&quot;,&#xd;
						&quot;text&quot;: &quot;Using in-network providers&quot;,&#xd;
						&quot;order&quot;: 1&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;B&quot;,&#xd;
						&quot;text&quot;: &quot;Switching from brand name drugs to generic&quot;,&#xd;
						&quot;order&quot;: 2&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;C&quot;,&#xd;
						&quot;text&quot;: &quot;Signing up for home delivery pharmacy&quot;,&#xd;
						&quot;order&quot;: 3&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;D&quot;,&#xd;
						&quot;text&quot;: &quot;Taking advantage of Teladoc&quot;,&#xd;
						&quot;order&quot;: 4&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;E&quot;,&#xd;
						&quot;text&quot;: &quot;Going to walk-in clinics instead of the ER for non-emergent issues&quot;,&#xd;
						&quot;order&quot;: 5&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;F&quot;,&#xd;
						&quot;text&quot;: &quot;Changing to a high-deductible plan during open-enrollment&quot;,&#xd;
						&quot;order&quot;: 6&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;G&quot;,&#xd;
						&quot;text&quot;: &quot;I am not familiar with any of these options&quot;,&#xd;
						&quot;order&quot;: 7&#xd;
					}&#xd;
				],&#xd;
				&quot;answers&quot;: []&#xd;
			},&#xd;
			{&#xd;
				&quot;id&quot;: 12,&#xd;
				&quot;order&quot;: 12,&#xd;
				&quot;question&quot;: &quot;How aware are you of the options you have to save money on your health such as&quot;,&#xd;
				&quot;questionType&quot;: &quot;chooseMinMax&quot;,&#xd;
				&quot;conditionalParent&quot;: {&#xd;
					&quot;parentQuestionId&quot;: 10,&#xd;
					&quot;parentQuestionAnswer&quot;: [&#xd;
						&quot;B&quot;&#xd;
					]&#xd;
				},&#xd;
				&quot;options&quot;: [&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;A&quot;,&#xd;
						&quot;text&quot;: &quot;Using in-network providers&quot;,&#xd;
						&quot;order&quot;: 1&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;B&quot;,&#xd;
						&quot;text&quot;: &quot;Switching from brand name drugs to generic&quot;,&#xd;
						&quot;order&quot;: 2&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;C&quot;,&#xd;
						&quot;text&quot;: &quot;Signing up for home delivery pharmacy&quot;,&#xd;
						&quot;order&quot;: 3&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;D&quot;,&#xd;
						&quot;text&quot;: &quot;Taking advantage of Teladoc&quot;,&#xd;
						&quot;order&quot;: 4&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;E&quot;,&#xd;
						&quot;text&quot;: &quot;Going to walk-in clinics instead of the ER for non-emergent issues&quot;,&#xd;
						&quot;order&quot;: 5&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;F&quot;,&#xd;
						&quot;text&quot;: &quot;Changing to a high-deductible plan during open-enrollment&quot;,&#xd;
						&quot;order&quot;: 6&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;G&quot;,&#xd;
						&quot;text&quot;: &quot;I am not familiar with any of these options&quot;,&#xd;
						&quot;order&quot;: 7&#xd;
					}&#xd;
				],&#xd;
				&quot;answers&quot;: [&#xd;
					{&#xd;
						&quot;value&quot;: &quot;A&quot;&#xd;
					}&#xd;
				]&#xd;
			},&#xd;
			{&#xd;
				&quot;id&quot;: 13,&#xd;
				&quot;order&quot;: 13,&#xd;
				&quot;question&quot;: &quot;From whom do you prefer to get healthcare information?&quot;,&#xd;
				&quot;questionType&quot;: &quot;chooseOne&quot;,&#xd;
				&quot;conditionalParent&quot;: null,&#xd;
				&quot;options&quot;: [&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;A&quot;,&#xd;
						&quot;text&quot;: &quot;Your doctor&quot;,&#xd;
						&quot;order&quot;: 1&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;B&quot;,&#xd;
						&quot;text&quot;: &quot;A doctor&quot;,&#xd;
						&quot;order&quot;: 2&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;C&quot;,&#xd;
						&quot;text&quot;: &quot;Pharmacist&quot;,&#xd;
						&quot;order&quot;: 3&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;D&quot;,&#xd;
						&quot;text&quot;: &quot;Aetna&quot;,&#xd;
						&quot;order&quot;: 4&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;E&quot;,&#xd;
						&quot;text&quot;: &quot;Online resources&quot;,&#xd;
						&quot;order&quot;: 5&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;F&quot;,&#xd;
						&quot;text&quot;: &quot;Family / friends&quot;,&#xd;
						&quot;order&quot;: 6&#xd;
					}&#xd;
				],&#xd;
				&quot;answers&quot;: [&#xd;
					{&#xd;
						&quot;value&quot;: &quot;C&quot;&#xd;
					}&#xd;
				]&#xd;
			},&#xd;
			{&#xd;
				&quot;id&quot;: 14,&#xd;
				&quot;order&quot;: 14,&#xd;
				&quot;question&quot;: &quot;What are you hoping to get out of this program?&quot;,&#xd;
				&quot;questionType&quot;: &quot;chooseMinMax&quot;,&#xd;
				&quot;conditionalParent&quot;: null,&#xd;
				&quot;options&quot;: [&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;A&quot;,&#xd;
						&quot;text&quot;: &quot;I want extra motivation to be healthy&quot;,&#xd;
						&quot;order&quot;: 1&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;B&quot;,&#xd;
						&quot;text&quot;: &quot;I want to earn money / Watch / other gifts&quot;,&#xd;
						&quot;order&quot;: 2&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;C&quot;,&#xd;
						&quot;text&quot;: &quot;I want help losing weight&quot;,&#xd;
						&quot;order&quot;: 3&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;D&quot;,&#xd;
						&quot;text&quot;: &quot;I want to make a difference by choosing to share information for scientific research&quot;,&#xd;
						&quot;order&quot;: 4&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;E&quot;,&#xd;
						&quot;text&quot;: &quot;I want help improving my medical condition&quot;,&#xd;
						&quot;order&quot;: 5&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;F&quot;,&#xd;
						&quot;text&quot;: &quot;I want to learn more about my health&quot;,&#xd;
						&quot;order&quot;: 6&#xd;
					},&#xd;
					{&#xd;
						&quot;alpha&quot;: &quot;G&quot;,&#xd;
						&quot;text&quot;: &quot;I want something else&quot;,&#xd;
						&quot;order&quot;: 7&#xd;
					}&#xd;
				],&#xd;
				&quot;answers&quot;: [&#xd;
					{&#xd;
						&quot;value&quot;: &quot;B&quot;&#xd;
					}&#xd;
				]&#xd;
			}&#xd;
		]&#xd;
	}&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${zuulBase}</stringProp>
          <stringProp name="HTTPSampler.port">${zuulPort}</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">tvg-message-bus-management-service-1/svc/27/forwardMessage</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: Rresponce code is 200" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="JIRA Stories" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1500</stringProp>
        <stringProp name="ThreadGroup.ramp_time">500</stringProp>
        <longProp name="ThreadGroup.start_time">1514078571000</longProp>
        <longProp name="ThreadGroup.end_time">1514078571000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">900</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="US DB" enabled="false">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery">select 1 from dual</stringProp>
          <stringProp name="connectionAge">10000</stringProp>
          <stringProp name="dataSource">DHDB</stringProp>
          <stringProp name="dbUrl">jdbc:oracle:thin:@${dbHost}.dhna.corp:${dbPort}:DHDB</stringProp>
          <stringProp name="driver">oracle.jdbc.OracleDriver</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">${dbPassword}</stringProp>
          <stringProp name="poolMax">20</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">${dbUserName}</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="AR DB" enabled="false">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery">select 1 from dual</stringProp>
          <stringProp name="connectionAge">10000</stringProp>
          <stringProp name="dataSource">AR_DB</stringProp>
          <stringProp name="dbUrl">jdbc:oracle:thin:@${arDbHost}.dhna.corp:${dbPort}:DHDB</stringProp>
          <stringProp name="driver">oracle.jdbc.OracleDriver</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">${dbPassword}</stringProp>
          <stringProp name="poolMax">20</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">${dbUserName}</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Apollo" enabled="false"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="AP-19 Apollo - Campaign Goals - support Dismissed campaign goals" enabled="false"/>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Setting Up Test User: Apollo User" enabled="true">
              <stringProp name="dataSource">DHDB</stringProp>
              <stringProp name="query">SELECT cm.entity_no, ecm.ext_id
FROM ${member_table} m, vsa_admin.a_employer e, vsa_admin.a_entity_cross_map cm, vsa_admin.a_ent_ext_id_cross_map ecm, vitality_policy_link vpl
WHERE m.curnt_emp_no=e.emp_no
AND e.emp_name in (&apos;${apolloFull}&apos;, &apos;${apolloSelf}&apos;)
AND cm.ref1 = m.mem_no
AND vpl.initiating_policy_no = m.mem_no
AND ecm.vsa_ent_no = m.mem_no
AND M.SURNAME = &apos;APOLLO-RUNID&apos;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">vitalityId_Apollo,apolloId</stringProp>
            </JDBCSampler>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Encrypted Entity" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import java.security.MessageDigest;

MessageDigest digest = MessageDigest.getInstance(&quot;MD5&quot;);
byte[] bytes = digest.digest((&quot;${vitalityId_Apollo}&quot; + &quot;${msSalt}&quot;).getBytes());
vars.put(&quot;entityNo_versioning_Encrypted&quot;,javax.xml.bind.DatatypeConverter.printHexBinary(bytes).toLowerCase());</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">import java.security.MessageDigest;

//Entity Encription for Apollo
MessageDigest digest = MessageDigest.getInstance(&quot;MD5&quot;);
byte[] bytes = digest.digest((&quot;${vitalityId_Apollo_1}&quot; + &quot;${msSalt}&quot;).getBytes());
vars.put(&quot;vitalityId_Encrypted&quot;,javax.xml.bind.DatatypeConverter.printHexBinary(bytes).toLowerCase());
</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${wso2Base}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout">30000</stringProp>
              <stringProp name="HTTPSampler.response_timeout">300000</stringProp>
            </ConfigTestElement>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Apollo WSO2 Access Token" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="grant_type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">client_credentials</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">grant_type</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/token</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Basic ${wso2Token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extracting WSO2 AccessToken" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">wso2AccessToken</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RTE: Enrolling a new user" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&#xd;
 {&#xd;
  &quot;enrollmentRequestEncrypted&quot;: {&#xd;
    &quot;firstNameEncrypted&quot;: &quot;${encryptedFirstName}&quot;,&#xd;
    &quot;lastNameEncrypted&quot;: &quot;${encryptedLastName}&quot;,&#xd;
    &quot;dateOfBirthEncrypted&quot;: &quot;${encryptedDOB}&quot;,&#xd;
    &quot;insuredId&quot;: &quot;${randomString}&quot;,&#xd;
    &quot;gender&quot;: &quot;${__chooseRandom(M,F,U,randomProduct)}&quot;,&#xd;
    &quot;vitalityCoverageEffectiveDate&quot;: &quot;${__RandomDate(yyyy-MM-dd,2018-01-01,${__time(yyyy-MM-dd)},,)}&quot;,&#xd;
    &quot;productIndicator&quot;: &quot;${__chooseRandom(FULL,SELF,randomProduct)}&quot;,&#xd;
    &quot;emailAddress&quot;: &quot;POC-${randomString}@rte-perf.com&quot;,&#xd;
    &quot;zipCode&quot;: &quot;&quot;,&#xd;
    &quot;customerServicePhone&quot;: &quot;${encryptedPhoneNumber}&quot;,&#xd;
    &quot;reportField1&quot;: &quot;123&quot;,&#xd;
    &quot;reportField2&quot;: &quot;20170701&quot;,&#xd;
    &quot;reportField3&quot;: &quot;ABC&quot;,&#xd;
    &quot;reportField4&quot;: &quot;DEF&quot;&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/${wso2RtePath}/svc/0/apolloEnrollmentEncrypted</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${wso2AccessToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Vitality_ID, Apollo_ID" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">vitalityId_Apollo;apolloId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.enrollmentResponseEncrypted.vitalityId;$.enrollmentResponseEncrypted.insuredId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND;NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert: User has been created" enabled="true">
                <stringProp name="JSON_PATH">$.enrollmentResponseEncrypted.insuredId</stringProp>
                <stringProp name="EXPECTED_VALUE"></stringProp>
                <boolProp name="JSONVALIDATION">false</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: Vitality ID present" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1165624797">vitalityId</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST CG: CREATE" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&#xd;
{  &#xd;
   &quot;goalManagementMessage&quot;:{  &#xd;
      &quot;managementInstruction&quot;:&quot;CREATE&quot;,&#xd;
      &quot;goal&quot;:{&#xd;
      	&quot;supportedAppVersions&quot;: [&#xd;
		&quot;1.1.0&quot;,&#xd;
		&quot;1.2.*&quot;,&#xd;
		&quot;2.*&quot;&#xd;
		],  &#xd;
         &quot;goalId&quot;:null,&#xd;
         &quot;goalTitle&quot;:&quot;Breathe Goal&quot;,&#xd;
         &quot;vitalityMemberId&quot;:${vitalityId_Apollo_1},&#xd;
         &quot;campaignId&quot;:${vitalityId_Apollo_1},&#xd;
         &quot;adjudications&quot;: {&#xd;
           &quot;apolloAdjudications&quot;: [&#xd;
             {&#xd;
               &quot;adjudicator&quot;: &quot;AETNA&quot;,&#xd;
               &quot;frequency&quot;: null,&#xd;
               &quot;targetFunction&quot;: &quot;sum&quot;,&#xd;
               &quot;targetMetric&quot;: &quot;sessions&quot;,&#xd;
               &quot;targetOperator&quot;: &quot;&gt;=&quot;,&#xd;
               &quot;targetValue&quot;: 5,&#xd;
               &quot;type&quot;: &quot;breathe&quot;&#xd;
             }&#xd;
           ]&#xd;
         },&#xd;
         &quot;description&quot;:&quot;Please try breathing!&quot;,&#xd;
         &quot;howToAchieve&quot;:&quot;Use the Breathe app&quot;,&#xd;
         &quot;externalMemberId&quot;:&quot;${apolloId_1}&quot;,&#xd;
         &quot;goalState&quot;:&quot;UNAWARDED&quot;,&#xd;
         &quot;startDate&quot;:&quot;${dateToday}T09:52:25.371000000-05:00[America/Chicago]&quot;,&#xd;
         &quot;internalEndDate&quot;:&quot;${dateTodayPlusFour}T09:52:25.371000000-05:00[America/Chicago]&quot;,&#xd;
         &quot;monitorEndDate&quot;:&quot;${dateTodayPlusFive}T09:52:25.371000000-05:00[America/Chicago]&quot;,&#xd;
         &quot;externalEndDate&quot;:&quot;${dateTodayPlusSix}T09:52:25.371000000-05:00[America/Chicago]&quot;,&#xd;
         &quot;transmitGUID&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}-${randomAlphaNumericString}-${randomAlphaNumericString}-${randomAlphaNumericString}&quot;,&#xd;
         &quot;partnerId&quot;:&quot;AETNA&quot;,&#xd;
         &quot;buttons&quot;:[  &#xd;
                {&#xd;
            &quot;buttonAction&quot;: &quot;markCompleted&quot;,&#xd;
            &quot;buttonIndex&quot;: 0,&#xd;
            &quot;buttonLabel&quot;: &quot;Got It&quot;&#xd;
          }&#xd;
         ],&#xd;
         &quot;reward&quot;:{  &#xd;
            &quot;coreEvents&quot;:[  &#xd;
               {  &#xd;
                  &quot;eventMnemonic&quot;:&quot;BRTH&quot;,&#xd;
                  &quot;eventValue&quot;:5&#xd;
               }&#xd;
            ]&#xd;
         }&#xd;
      }&#xd;
   }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${zuulBase}</stringProp>
              <stringProp name="HTTPSampler.port">${zuulPort}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${zuulCGPath}/svc/27/maintainGoal</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.proxyHost">${zuulProxy}</stringProp>
              <stringProp name="HTTPSampler.proxyPort">${zuulPortCg}</stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="CampaignGoal_ID" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">CGoalId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.goalNotificationMessage.goal.goalId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CREATED Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1746537160">CREATED</stringProp>
                  <stringProp name="-403081501">UNAWARDED</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: Version is present" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1242798514">supportedAppVersions</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST CG: UPDATE" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;goalManagementMessage&quot;: {&#xd;
&quot;managementInstruction&quot;:&quot;UPDATE&quot;,&#xd;
&quot;goal&quot;:{&#xd;
&quot;goalId&quot;:${CGoalId},&#xd;
&quot;goalState&quot;:&quot;CLOSED&quot;&#xd;
}&#xd;
}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${zuulBase}</stringProp>
              <stringProp name="HTTPSampler.port">${zuulPort}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${zuulCGPath}/svc/27/maintainGoal</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.proxyHost">${zuulProxy}</stringProp>
              <stringProp name="HTTPSampler.proxyPort">${zuulPortCg}</stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assertion: goal state = CLOSED" enabled="true">
                <stringProp name="JSON_PATH">$.goalNotificationMessage.goal.goalState</stringProp>
                <stringProp name="EXPECTED_VALUE">CLOSED</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">false</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assertion: notification Type = UPDATED" enabled="true">
                <stringProp name="JSON_PATH">$.goalNotificationMessage.notificationType</stringProp>
                <stringProp name="EXPECTED_VALUE">UPDATED</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">false</boolProp>
              </JSONPathAssertion>
              <hashTree/>
            </hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="VITALITY_EVENTS: NO Points should be awarded" enabled="true">
              <stringProp name="dataSource">DHDB</stringProp>
              <stringProp name="query">SELECT CALCULATED_POINTS
FROM VITALITY_EVENT 
WHERE MEMBER_ENTITY_NO = ${vitalityId_Apollo_1}
AND EVENT_DATE_TIME = &apos;${dateToday2}&apos;
ORDER BY EVENT_DATE_TIME DESC, DATE_TIME_LAST_MODIFIED DESC</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">pointsCalculated</stringProp>
            </JDBCSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="53">5</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">12</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">pointsCalculated_1</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Auth Token" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="entity_no" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${vitalityId_Apollo_1}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">entity_no</stringProp>
                  </elementProp>
                  <elementProp name="encrypted_entity_no" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${vitalityId_Encrypted}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">encrypted_entity_no</stringProp>
                  </elementProp>
                  <elementProp name="_p" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">IOS</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">_p</stringProp>
                  </elementProp>
                  <elementProp name="_v" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${mob.app.version}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">_v</stringProp>
                  </elementProp>
                  <elementProp name="_doc_browser_context" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">_doc_browser_context</stringProp>
                  </elementProp>
                  <elementProp name="_c" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">Aetna</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">_c</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${msBase}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${msPath}/auth/simulate_auth</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Active Rewards Token" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">ar_Token</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.session.token</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="LLT Assertion" enabled="true">
                <stringProp name="JSON_PATH">$.session.timeout</stringProp>
                <stringProp name="EXPECTED_VALUE">2280</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">false</boolProp>
              </JSONPathAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST CG: Adjudicate CLOSED goal" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;goalId&quot;: ${CGoalId},&#xd;
	&quot;partnerId&quot;: &quot;AETNA&quot;,&#xd;
	&quot;adjudicationDecision&quot;: &quot;AWARDED&quot;,&#xd;
	&quot;adjudicationDate&quot;: &quot;${dateToday}T09:52:25.371000000-06:00&quot;,&#xd;
	&quot;adjudicationProcessedDate&quot;: &quot;${dateToday}T09:52:25.371000000-06:00[America/Chicago]&quot;&#xd;
	}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${wso2Base}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/${msPath}/1.0/campaign_goals/adjudicate</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Vitality-Client" elementType="Header">
                    <stringProp name="Header.name">Vitality-Client</stringProp>
                    <stringProp name="Header.value">Aetna</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Token" elementType="Header">
                    <stringProp name="Header.name">Vitality-Token</stringProp>
                    <stringProp name="Header.value">${ar_Token}</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-App-Version" elementType="Header">
                    <stringProp name="Header.name">Vitality-App-Version</stringProp>
                    <stringProp name="Header.value">8.4</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                    <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                    <stringProp name="Header.value">IOS</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Language" elementType="Header">
                    <stringProp name="Header.name">Vitality-Language</stringProp>
                    <stringProp name="Header.value">en</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Device-Id" elementType="Header">
                    <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                    <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Local-Time" elementType="Header">
                    <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                    <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-API-Version" elementType="Header">
                    <stringProp name="Header.name">Vitality-API-Version</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ADJUDICATED Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1733827326">ADJUDICATED</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assertion: goal state = AWARDED" enabled="true">
                <stringProp name="JSON_PATH">$.output.goalNotificationMessage.goal.goalState</stringProp>
                <stringProp name="EXPECTED_VALUE">AWARDED</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">false</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: Version is present" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1242798514">supportedAppVersions</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="VITALITY_EVENTS: 5 points should be awarded" enabled="true">
              <boolProp name="TransactionController.parent">true</boolProp>
              <boolProp name="TransactionController.includeTimers">false</boolProp>
            </TransactionController>
            <hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Wait Until Processed" enabled="true">
                <stringProp name="WhileController.condition">${__groovy(vars.get(&quot;pointsCalculated_1&quot;) != &quot;5&quot;,)}</stringProp>
              </WhileController>
              <hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="VITALITY_EVENTS: 5 points should be awarded" enabled="true">
                  <stringProp name="dataSource">DHDB</stringProp>
                  <stringProp name="query">SELECT CALCULATED_POINTS
FROM VITALITY_EVENT 
WHERE MEMBER_ENTITY_NO = ${vitalityId_Apollo_1}
AND EVENT_DATE_TIME = &apos;${dateToday2}&apos;
ORDER BY EVENT_DATE_TIME DESC, DATE_TIME_LAST_MODIFIED DESC</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="variableNames">pointsCalculated</stringProp>
                </JDBCSampler>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="53">5</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">8</intProp>
                    <stringProp name="Assertion.scope">variable</stringProp>
                    <stringProp name="Scope.variable">pointsCalculated_1</stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                  <stringProp name="IfController.condition">${__groovy(vars.get(&quot;pointsCalculated_1&quot;) = &quot;5&quot;,)}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <boolProp name="IfController.useExpression">true</boolProp>
                </IfController>
                <hashTree>
                  <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
                    <intProp name="ActionProcessor.action">3</intProp>
                    <intProp name="ActionProcessor.target">0</intProp>
                    <stringProp name="ActionProcessor.duration">0</stringProp>
                  </TestAction>
                  <hashTree>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="53">5</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">16</intProp>
                      <stringProp name="Assertion.scope">variable</stringProp>
                      <stringProp name="Scope.variable">pointsCalculated_1</stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                </hashTree>
              </hashTree>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                <stringProp name="DurationAssertion.duration">2000</stringProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </DurationAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="VGUSA-4230 Apollo - support app versioning" enabled="false"/>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="false">
              <collectionProp name="UserParameters.names">
                <stringProp name="-1488751215">vitalityId_Apollo</stringProp>
                <stringProp name="1150977578">apolloID</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="1203158427">
                  <stringProp name="-1600976122">1421142322</stringProp>
                  <stringProp name="1116696416">IY90WS57303VNWCY41S2</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">false</boolProp>
            </UserParameters>
            <hashTree/>
            <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${wso2Base}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout">30000</stringProp>
              <stringProp name="HTTPSampler.response_timeout">300000</stringProp>
            </ConfigTestElement>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Apollo WSO2 Access Token" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="grant_type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">client_credentials</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">grant_type</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/token</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Basic ${wso2Token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extracting WSO2 AccessToken" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">wso2AccessToken</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RTE: Enrolling a new user" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&#xd;
 {&#xd;
  &quot;enrollmentRequestEncrypted&quot;: {&#xd;
    &quot;firstNameEncrypted&quot;: &quot;${encryptedFirstName}&quot;,&#xd;
    &quot;lastNameEncrypted&quot;: &quot;${encryptedLastName}&quot;,&#xd;
    &quot;dateOfBirthEncrypted&quot;: &quot;${encryptedDOB}&quot;,&#xd;
    &quot;insuredId&quot;: &quot;${randomString}&quot;,&#xd;
    &quot;gender&quot;: &quot;${__chooseRandom(M,F,U,randomProduct)}&quot;,&#xd;
    &quot;vitalityCoverageEffectiveDate&quot;: &quot;${__RandomDate(yyyy-MM-dd,2018-01-01,${__time(yyyy-MM-dd)},,)}&quot;,&#xd;
    &quot;productIndicator&quot;: &quot;${__chooseRandom(FULL,SELF,randomProduct)}&quot;,&#xd;
    &quot;emailAddress&quot;: &quot;POC-${randomString}@rte-perf.com&quot;,&#xd;
    &quot;zipCode&quot;: &quot;&quot;,&#xd;
    &quot;customerServicePhone&quot;: &quot;${encryptedPhoneNumber}&quot;,&#xd;
    &quot;reportField1&quot;: &quot;123&quot;,&#xd;
    &quot;reportField2&quot;: &quot;20170701&quot;,&#xd;
    &quot;reportField3&quot;: &quot;ABC&quot;,&#xd;
    &quot;reportField4&quot;: &quot;DEF&quot;&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/${wso2RtePath}/svc/0/apolloEnrollmentEncrypted</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${wso2AccessToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Vitality_ID, Apollo_ID" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">vitalityId_Apollo;apolloId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.enrollmentResponseEncrypted.vitalityId;$.enrollmentResponseEncrypted.insuredId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND;NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert: User has been created" enabled="true">
                <stringProp name="JSON_PATH">$.enrollmentResponseEncrypted.insuredId</stringProp>
                <stringProp name="EXPECTED_VALUE"></stringProp>
                <boolProp name="JSONVALIDATION">false</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: Vitality ID present" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1165624797">vitalityId</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Encrypted Entity" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import java.security.MessageDigest;

MessageDigest digest = MessageDigest.getInstance(&quot;MD5&quot;);
byte[] bytes = digest.digest((&quot;${vitalityId_Apollo}&quot; + &quot;${msSalt}&quot;).getBytes());
vars.put(&quot;entityNo_versioning_Encrypted&quot;,javax.xml.bind.DatatypeConverter.printHexBinary(bytes).toLowerCase());</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Auth Token" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="entity_no" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${vitalityId_Apollo}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">entity_no</stringProp>
                  </elementProp>
                  <elementProp name="encrypted_entity_no" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${entityNo_versioning_Encrypted}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">encrypted_entity_no</stringProp>
                  </elementProp>
                  <elementProp name="_p" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">IOS</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">_p</stringProp>
                  </elementProp>
                  <elementProp name="_v" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${mob.app.version}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">_v</stringProp>
                  </elementProp>
                  <elementProp name="_doc_browser_context" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">_doc_browser_context</stringProp>
                  </elementProp>
                  <elementProp name="_c" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">Aetna</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">_c</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${msBase}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${msPath}/auth/simulate_auth</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Active Rewards Token" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">ar_Token</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.session.token</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="LLT Assertion" enabled="true">
                <stringProp name="JSON_PATH">$.session.timeout</stringProp>
                <stringProp name="EXPECTED_VALUE">2280</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">false</boolProp>
              </JSONPathAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="MS POST CG V1, GET CG V1, GET CGs V1, POST ADJ V1" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST CG: V1" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&#xd;
{  &#xd;
   &quot;goalManagementMessage&quot;:{  &#xd;
      &quot;managementInstruction&quot;:&quot;CREATE&quot;,&#xd;
      &quot;goal&quot;:{&#xd;
         &quot;goalId&quot;:null,&#xd;
         &quot;goalTitle&quot;:&quot;Breathe Goal&quot;,&#xd;
         &quot;vitalityMemberId&quot;:${vitalityId_Apollo},&#xd;
         &quot;campaignId&quot;:${vitalityId_Apollo},&#xd;
         &quot;adjudications&quot;: {&#xd;
           &quot;apolloAdjudications&quot;: [&#xd;
             {&#xd;
               &quot;adjudicator&quot;: &quot;AETNA&quot;,&#xd;
               &quot;frequency&quot;: null,&#xd;
               &quot;targetFunction&quot;: &quot;sum&quot;,&#xd;
               &quot;targetMetric&quot;: &quot;sessions&quot;,&#xd;
               &quot;targetOperator&quot;: &quot;&gt;=&quot;,&#xd;
               &quot;targetValue&quot;: 5,&#xd;
               &quot;type&quot;: &quot;breathe&quot;&#xd;
             }&#xd;
           ]&#xd;
         },&#xd;
         &quot;description&quot;:&quot;Please try breathing!&quot;,&#xd;
         &quot;howToAchieve&quot;:&quot;Use the Breathe app&quot;,&#xd;
         &quot;externalMemberId&quot;:&quot;${apolloId}&quot;,&#xd;
         &quot;goalState&quot;:&quot;UNAWARDED&quot;,&#xd;
         &quot;startDate&quot;:&quot;${dateToday}T09:52:25.371000000-05:00[America/Chicago]&quot;,&#xd;
         &quot;internalEndDate&quot;:&quot;${dateTodayPlusFour}T09:52:25.371000000-05:00[America/Chicago]&quot;,&#xd;
         &quot;monitorEndDate&quot;:&quot;${dateTodayPlusFive}T09:52:25.371000000-05:00[America/Chicago]&quot;,&#xd;
         &quot;externalEndDate&quot;:&quot;${dateTodayPlusSix}T09:52:25.371000000-05:00[America/Chicago]&quot;,&#xd;
         &quot;transmitGUID&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}-${randomAlphaNumericString}-${randomAlphaNumericString}-${randomAlphaNumericString}&quot;,&#xd;
         &quot;partnerId&quot;:&quot;AETNA&quot;,&#xd;
         &quot;buttons&quot;:[  &#xd;
             {&#xd;
            &quot;buttonAction&quot;: &quot;markCompleted&quot;,&#xd;
            &quot;buttonIndex&quot;: 0,&#xd;
            &quot;buttonLabel&quot;: &quot;Got It&quot;&#xd;
          }&#xd;
         ],&#xd;
         &quot;reward&quot;:{  &#xd;
            &quot;coreEvents&quot;:[  &#xd;
               {  &#xd;
                  &quot;eventMnemonic&quot;:&quot;BRTH&quot;,&#xd;
                  &quot;eventValue&quot;:10000&#xd;
               }&#xd;
            ]&#xd;
         }&#xd;
      }&#xd;
   }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${zuulBase}</stringProp>
                <stringProp name="HTTPSampler.port">${zuulPort}</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${zuulCGPath}/svc/27/maintainGoal</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.proxyHost">${zuulProxy}</stringProp>
                <stringProp name="HTTPSampler.proxyPort">${zuulPortCg}</stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="CampaignGoal_ID" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">CGoalId</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.goalNotificationMessage.goal.goalId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CREATED Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1746537160">CREATED</stringProp>
                    <stringProp name="-403081501">UNAWARDED</stringProp>
                    <stringProp name="0"></stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.scope">all</stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GET CG, POST ADJ: V1" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="MS GET CG goal: V1 - version is NOT present" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="goalId" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">${CGoalId}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">goalId</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${msBase}</stringProp>
                  <stringProp name="HTTPSampler.port">${msPort}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${msPath}/campaign_goals/goal</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Vitality-Client" elementType="Header">
                        <stringProp name="Header.name">Vitality-Client</stringProp>
                        <stringProp name="Header.value">Aetna</stringProp>
                      </elementProp>
                      <elementProp name="Vitality-Token" elementType="Header">
                        <stringProp name="Header.name">Vitality-Token</stringProp>
                        <stringProp name="Header.value">${ar_Token}</stringProp>
                      </elementProp>
                      <elementProp name="Vitality-App-Version" elementType="Header">
                        <stringProp name="Header.name">Vitality-App-Version</stringProp>
                        <stringProp name="Header.value">8.4</stringProp>
                      </elementProp>
                      <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                        <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                        <stringProp name="Header.value">IOS</stringProp>
                      </elementProp>
                      <elementProp name="Vitality-Language" elementType="Header">
                        <stringProp name="Header.name">Vitality-Language</stringProp>
                        <stringProp name="Header.value">en</stringProp>
                      </elementProp>
                      <elementProp name="Vitality-Device-Id" elementType="Header">
                        <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                        <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                      </elementProp>
                      <elementProp name="Vitality-Local-Time" elementType="Header">
                        <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                        <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                      </elementProp>
                      <elementProp name="Vitality-API-Version" elementType="Header">
                        <stringProp name="Header.name">Vitality-API-Version</stringProp>
                        <stringProp name="Header.value">1</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: Version is NOT present" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1242798514">supportedAppVersions</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">6</intProp>
                    <stringProp name="Assertion.scope">all</stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="MS GET CG goals: V1 - version is NOT present" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="limit" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">10</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                        <stringProp name="Argument.name">limit</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${msBase}</stringProp>
                  <stringProp name="HTTPSampler.port">${msPort}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${msPath}/campaign_goals/goals</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Vitality-Client" elementType="Header">
                        <stringProp name="Header.name">Vitality-Client</stringProp>
                        <stringProp name="Header.value">Aetna</stringProp>
                      </elementProp>
                      <elementProp name="Vitality-Token" elementType="Header">
                        <stringProp name="Header.name">Vitality-Token</stringProp>
                        <stringProp name="Header.value">${ar_Token}</stringProp>
                      </elementProp>
                      <elementProp name="Vitality-App-Version" elementType="Header">
                        <stringProp name="Header.name">Vitality-App-Version</stringProp>
                        <stringProp name="Header.value">8.4</stringProp>
                      </elementProp>
                      <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                        <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                        <stringProp name="Header.value">IOS</stringProp>
                      </elementProp>
                      <elementProp name="Vitality-Language" elementType="Header">
                        <stringProp name="Header.name">Vitality-Language</stringProp>
                        <stringProp name="Header.value">en</stringProp>
                      </elementProp>
                      <elementProp name="Vitality-Device-Id" elementType="Header">
                        <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                        <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                      </elementProp>
                      <elementProp name="Vitality-Local-Time" elementType="Header">
                        <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                        <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                      </elementProp>
                      <elementProp name="Vitality-API-Version" elementType="Header">
                        <stringProp name="Header.name">Vitality-API-Version</stringProp>
                        <stringProp name="Header.value">1</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: Version is NOT present" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1242798514">supportedAppVersions</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">6</intProp>
                    <stringProp name="Assertion.scope">all</stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="MS POST CG ADJ: V1" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
	&quot;goalId&quot;: ${CGoalId},&#xd;
	&quot;partnerId&quot;: &quot;AETNA&quot;,&#xd;
	&quot;adjudicationDecision&quot;: &quot;AWARDED&quot;,&#xd;
	&quot;adjudicationDate&quot;: &quot;${dateToday}T09:52:25.371000000-06:00&quot;,&#xd;
	&quot;adjudicationProcessedDate&quot;: &quot;${dateToday}T09:52:25.371000000-06:00[America/Chicago]&quot;&#xd;
	}&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${msBase}</stringProp>
                  <stringProp name="HTTPSampler.port">${msPort}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${msPath}/campaign_goals/adjudicate</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Vitality-Client" elementType="Header">
                        <stringProp name="Header.name">Vitality-Client</stringProp>
                        <stringProp name="Header.value">Aetna</stringProp>
                      </elementProp>
                      <elementProp name="Vitality-Token" elementType="Header">
                        <stringProp name="Header.name">Vitality-Token</stringProp>
                        <stringProp name="Header.value">${ar_Token}</stringProp>
                      </elementProp>
                      <elementProp name="Vitality-App-Version" elementType="Header">
                        <stringProp name="Header.name">Vitality-App-Version</stringProp>
                        <stringProp name="Header.value">8.4</stringProp>
                      </elementProp>
                      <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                        <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                        <stringProp name="Header.value">IOS</stringProp>
                      </elementProp>
                      <elementProp name="Vitality-Language" elementType="Header">
                        <stringProp name="Header.name">Vitality-Language</stringProp>
                        <stringProp name="Header.value">en</stringProp>
                      </elementProp>
                      <elementProp name="Vitality-Device-Id" elementType="Header">
                        <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                        <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                      </elementProp>
                      <elementProp name="Vitality-Local-Time" elementType="Header">
                        <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                        <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                      </elementProp>
                      <elementProp name="Vitality-API-Version" elementType="Header">
                        <stringProp name="Header.name">Vitality-API-Version</stringProp>
                        <stringProp name="Header.value">1</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">application/json</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1242798514">supportedAppVersions</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">6</intProp>
                    <stringProp name="Assertion.scope">all</stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ADJUDICATED Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1733827326">ADJUDICATED</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">2</intProp>
                    <stringProp name="Assertion.scope">all</stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="MS POST CG V1, GET CG V2, GET CGs V2, POST ADJ V2" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST CG: V1" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&#xd;
{  &#xd;
   &quot;goalManagementMessage&quot;:{  &#xd;
      &quot;managementInstruction&quot;:&quot;CREATE&quot;,&#xd;
      &quot;goal&quot;:{&#xd;
         &quot;goalId&quot;:null,&#xd;
         &quot;goalTitle&quot;:&quot;Breathe Goal&quot;,&#xd;
         &quot;vitalityMemberId&quot;:${vitalityId_Apollo},&#xd;
         &quot;campaignId&quot;:${vitalityId_Apollo},&#xd;
         &quot;adjudications&quot;: {&#xd;
           &quot;apolloAdjudications&quot;: [&#xd;
             {&#xd;
               &quot;adjudicator&quot;: &quot;AETNA&quot;,&#xd;
               &quot;frequency&quot;: null,&#xd;
               &quot;targetFunction&quot;: &quot;sum&quot;,&#xd;
               &quot;targetMetric&quot;: &quot;sessions&quot;,&#xd;
               &quot;targetOperator&quot;: &quot;&gt;=&quot;,&#xd;
               &quot;targetValue&quot;: 5,&#xd;
               &quot;type&quot;: &quot;breathe&quot;&#xd;
             }&#xd;
           ]&#xd;
         },&#xd;
         &quot;description&quot;:&quot;Please try breathing!&quot;,&#xd;
         &quot;howToAchieve&quot;:&quot;Use the Breathe app&quot;,&#xd;
         &quot;externalMemberId&quot;:&quot;${apolloId}&quot;,&#xd;
         &quot;goalState&quot;:&quot;UNAWARDED&quot;,&#xd;
         &quot;startDate&quot;:&quot;${dateToday}T09:52:25.371000000-05:00[America/Chicago]&quot;,&#xd;
         &quot;internalEndDate&quot;:&quot;${dateTodayPlusFour}T09:52:25.371000000-05:00[America/Chicago]&quot;,&#xd;
         &quot;monitorEndDate&quot;:&quot;${dateTodayPlusFive}T09:52:25.371000000-05:00[America/Chicago]&quot;,&#xd;
         &quot;externalEndDate&quot;:&quot;${dateTodayPlusSix}T09:52:25.371000000-05:00[America/Chicago]&quot;,&#xd;
         &quot;transmitGUID&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}-${randomAlphaNumericString}-${randomAlphaNumericString}-${randomAlphaNumericString}&quot;,&#xd;
         &quot;partnerId&quot;:&quot;AETNA&quot;,&#xd;
         &quot;buttons&quot;:[  &#xd;
             {&#xd;
            &quot;buttonAction&quot;: &quot;markCompleted&quot;,&#xd;
            &quot;buttonIndex&quot;: 0,&#xd;
            &quot;buttonLabel&quot;: &quot;Got It&quot;&#xd;
          }&#xd;
         ],&#xd;
         &quot;reward&quot;:{  &#xd;
            &quot;coreEvents&quot;:[  &#xd;
               {  &#xd;
                  &quot;eventMnemonic&quot;:&quot;BRTH&quot;,&#xd;
                  &quot;eventValue&quot;:10000&#xd;
               }&#xd;
            ]&#xd;
         }&#xd;
      }&#xd;
   }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${zuulBase}</stringProp>
                <stringProp name="HTTPSampler.port">${zuulPort}</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${zuulCGPath}/svc/27/maintainGoal</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.proxyHost">${zuulProxy}</stringProp>
                <stringProp name="HTTPSampler.proxyPort">${zuulPortCg}</stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="CampaignGoal_ID" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">CGoalId</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.goalNotificationMessage.goal.goalId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CREATED Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1746537160">CREATED</stringProp>
                    <stringProp name="-403081501">UNAWARDED</stringProp>
                    <stringProp name="0"></stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.scope">all</stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="MS GET CG goal: V2 - version is NOT present" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="goalId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${CGoalId}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">goalId</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${msBase}</stringProp>
                <stringProp name="HTTPSampler.port">${msPort}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${msPath}/campaign_goals/v2/goal</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Vitality-Client" elementType="Header">
                      <stringProp name="Header.name">Vitality-Client</stringProp>
                      <stringProp name="Header.value">Aetna</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Token" elementType="Header">
                      <stringProp name="Header.name">Vitality-Token</stringProp>
                      <stringProp name="Header.value">${ar_Token}</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-App-Version" elementType="Header">
                      <stringProp name="Header.name">Vitality-App-Version</stringProp>
                      <stringProp name="Header.value">8.4</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                      <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                      <stringProp name="Header.value">IOS</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Language" elementType="Header">
                      <stringProp name="Header.name">Vitality-Language</stringProp>
                      <stringProp name="Header.value">en</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Device-Id" elementType="Header">
                      <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                      <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Local-Time" elementType="Header">
                      <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                      <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-API-Version" elementType="Header">
                      <stringProp name="Header.name">Vitality-API-Version</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: Version is NOT present" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1242798514">supportedAppVersions</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">6</intProp>
                  <stringProp name="Assertion.scope">all</stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="MS GET CG goals: V2 - version is NOT present" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="limit" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">10</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">limit</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${msBase}</stringProp>
                <stringProp name="HTTPSampler.port">${msPort}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${msPath}/campaign_goals/v2/goals</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Vitality-Client" elementType="Header">
                      <stringProp name="Header.name">Vitality-Client</stringProp>
                      <stringProp name="Header.value">Aetna</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Token" elementType="Header">
                      <stringProp name="Header.name">Vitality-Token</stringProp>
                      <stringProp name="Header.value">${ar_Token}</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-App-Version" elementType="Header">
                      <stringProp name="Header.name">Vitality-App-Version</stringProp>
                      <stringProp name="Header.value">8.4</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                      <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                      <stringProp name="Header.value">IOS</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Language" elementType="Header">
                      <stringProp name="Header.name">Vitality-Language</stringProp>
                      <stringProp name="Header.value">en</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Device-Id" elementType="Header">
                      <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                      <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Local-Time" elementType="Header">
                      <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                      <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-API-Version" elementType="Header">
                      <stringProp name="Header.name">Vitality-API-Version</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: Version is NOT present" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1242798514">supportedAppVersions</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">6</intProp>
                  <stringProp name="Assertion.scope">all</stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="MS POST CG ADJ: V2" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;goalId&quot;: ${CGoalId},&#xd;
	&quot;partnerId&quot;: &quot;AETNA&quot;,&#xd;
	&quot;adjudicationDecision&quot;: &quot;AWARDED&quot;,&#xd;
	&quot;adjudicationDate&quot;: &quot;${dateToday}T09:52:25.371000000-06:00&quot;,&#xd;
	&quot;adjudicationProcessedDate&quot;: &quot;${dateToday}T09:52:25.371000000-06:00[America/Chicago]&quot;&#xd;
	}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${msBase}</stringProp>
                <stringProp name="HTTPSampler.port">${msPort}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${msPath}/campaign_goals/v2/adjudicate</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Vitality-Client" elementType="Header">
                      <stringProp name="Header.name">Vitality-Client</stringProp>
                      <stringProp name="Header.value">Aetna</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Token" elementType="Header">
                      <stringProp name="Header.name">Vitality-Token</stringProp>
                      <stringProp name="Header.value">${ar_Token}</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-App-Version" elementType="Header">
                      <stringProp name="Header.name">Vitality-App-Version</stringProp>
                      <stringProp name="Header.value">8.4</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                      <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                      <stringProp name="Header.value">IOS</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Language" elementType="Header">
                      <stringProp name="Header.name">Vitality-Language</stringProp>
                      <stringProp name="Header.value">en</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Device-Id" elementType="Header">
                      <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                      <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Local-Time" elementType="Header">
                      <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                      <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-API-Version" elementType="Header">
                      <stringProp name="Header.name">Vitality-API-Version</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1242798514">supportedAppVersions</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">6</intProp>
                  <stringProp name="Assertion.scope">all</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ADJUDICATED Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1733827326">ADJUDICATED</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.scope">all</stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="MS POST CG V2, GET CG V2, GET CGs V2, POST ADJ V2" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST CG: V2" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&#xd;
{  &#xd;
   &quot;goalManagementMessage&quot;:{  &#xd;
      &quot;managementInstruction&quot;:&quot;CREATE&quot;,&#xd;
      &quot;goal&quot;:{&#xd;
      	&quot;supportedAppVersions&quot;: [&#xd;
		&quot;1.1.0&quot;,&#xd;
		&quot;1.2.*&quot;,&#xd;
		&quot;2.*&quot;&#xd;
		],  &#xd;
         &quot;goalId&quot;:null,&#xd;
         &quot;goalTitle&quot;:&quot;Breathe Goal&quot;,&#xd;
         &quot;vitalityMemberId&quot;:${vitalityId_Apollo},&#xd;
         &quot;campaignId&quot;:${vitalityId_Apollo},&#xd;
         &quot;adjudications&quot;: {&#xd;
           &quot;apolloAdjudications&quot;: [&#xd;
             {&#xd;
               &quot;adjudicator&quot;: &quot;AETNA&quot;,&#xd;
               &quot;frequency&quot;: null,&#xd;
               &quot;targetFunction&quot;: &quot;sum&quot;,&#xd;
               &quot;targetMetric&quot;: &quot;sessions&quot;,&#xd;
               &quot;targetOperator&quot;: &quot;&gt;=&quot;,&#xd;
               &quot;targetValue&quot;: 5,&#xd;
               &quot;type&quot;: &quot;breathe&quot;&#xd;
             }&#xd;
           ]&#xd;
         },&#xd;
         &quot;description&quot;:&quot;Please try breathing!&quot;,&#xd;
         &quot;howToAchieve&quot;:&quot;Use the Breathe app&quot;,&#xd;
         &quot;externalMemberId&quot;:&quot;${apolloId}&quot;,&#xd;
         &quot;goalState&quot;:&quot;UNAWARDED&quot;,&#xd;
         &quot;startDate&quot;:&quot;${dateToday}T09:52:25.371000000-05:00[America/Chicago]&quot;,&#xd;
         &quot;internalEndDate&quot;:&quot;${dateTodayPlusFour}T09:52:25.371000000-05:00[America/Chicago]&quot;,&#xd;
         &quot;monitorEndDate&quot;:&quot;${dateTodayPlusFive}T09:52:25.371000000-05:00[America/Chicago]&quot;,&#xd;
         &quot;externalEndDate&quot;:&quot;${dateTodayPlusSix}T09:52:25.371000000-05:00[America/Chicago]&quot;,&#xd;
         &quot;transmitGUID&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}-${randomAlphaNumericString}-${randomAlphaNumericString}-${randomAlphaNumericString}&quot;,&#xd;
         &quot;partnerId&quot;:&quot;AETNA&quot;,&#xd;
         &quot;buttons&quot;:[  &#xd;
                {&#xd;
            &quot;buttonAction&quot;: &quot;markCompleted&quot;,&#xd;
            &quot;buttonIndex&quot;: 0,&#xd;
            &quot;buttonLabel&quot;: &quot;Got It&quot;&#xd;
          }&#xd;
         ],&#xd;
         &quot;reward&quot;:{  &#xd;
            &quot;coreEvents&quot;:[  &#xd;
               {  &#xd;
                  &quot;eventMnemonic&quot;:&quot;BRTH&quot;,&#xd;
                  &quot;eventValue&quot;:5&#xd;
               }&#xd;
            ]&#xd;
         }&#xd;
      }&#xd;
   }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${zuulBase}</stringProp>
                <stringProp name="HTTPSampler.port">${zuulPort}</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${zuulCGPath}/svc/27/maintainGoal</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.proxyHost">${zuulProxy}</stringProp>
                <stringProp name="HTTPSampler.proxyPort">${zuulPortCg}</stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="CampaignGoal_ID" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">CGoalId</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.goalNotificationMessage.goal.goalId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CREATED Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1746537160">CREATED</stringProp>
                    <stringProp name="-403081501">UNAWARDED</stringProp>
                    <stringProp name="0"></stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.scope">all</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: Version is present" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1242798514">supportedAppVersions</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.scope">all</stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="MS GET CG goal: V2 - version is present" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="goalId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${CGoalId}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">goalId</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${msBase}</stringProp>
                <stringProp name="HTTPSampler.port">${msPort}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${msPath}/campaign_goals/v2/goal</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Vitality-Client" elementType="Header">
                      <stringProp name="Header.name">Vitality-Client</stringProp>
                      <stringProp name="Header.value">Aetna</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Token" elementType="Header">
                      <stringProp name="Header.name">Vitality-Token</stringProp>
                      <stringProp name="Header.value">${ar_Token}</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-App-Version" elementType="Header">
                      <stringProp name="Header.name">Vitality-App-Version</stringProp>
                      <stringProp name="Header.value">8.4</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                      <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                      <stringProp name="Header.value">IOS</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Language" elementType="Header">
                      <stringProp name="Header.name">Vitality-Language</stringProp>
                      <stringProp name="Header.value">en</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Device-Id" elementType="Header">
                      <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                      <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Local-Time" elementType="Header">
                      <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                      <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-API-Version" elementType="Header">
                      <stringProp name="Header.name">Vitality-API-Version</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: Version is present" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1242798514">supportedAppVersions</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.scope">all</stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="MS GET CG goals: V2 - version is present" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="limit" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">10</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">limit</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${msBase}</stringProp>
                <stringProp name="HTTPSampler.port">${msPort}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${msPath}/campaign_goals/v2/goals</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Vitality-Client" elementType="Header">
                      <stringProp name="Header.name">Vitality-Client</stringProp>
                      <stringProp name="Header.value">Aetna</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Token" elementType="Header">
                      <stringProp name="Header.name">Vitality-Token</stringProp>
                      <stringProp name="Header.value">${ar_Token}</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-App-Version" elementType="Header">
                      <stringProp name="Header.name">Vitality-App-Version</stringProp>
                      <stringProp name="Header.value">8.4</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                      <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                      <stringProp name="Header.value">IOS</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Language" elementType="Header">
                      <stringProp name="Header.name">Vitality-Language</stringProp>
                      <stringProp name="Header.value">en</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Device-Id" elementType="Header">
                      <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                      <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Local-Time" elementType="Header">
                      <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                      <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-API-Version" elementType="Header">
                      <stringProp name="Header.name">Vitality-API-Version</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: Version is present" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1242798514">supportedAppVersions</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.scope">all</stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="MS POST CG ADJ: V2" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;goalId&quot;: ${CGoalId},&#xd;
	&quot;partnerId&quot;: &quot;AETNA&quot;,&#xd;
	&quot;adjudicationDecision&quot;: &quot;AWARDED&quot;,&#xd;
	&quot;adjudicationDate&quot;: &quot;${dateToday}T09:52:25.371000000-06:00&quot;,&#xd;
	&quot;adjudicationProcessedDate&quot;: &quot;${dateToday}T09:52:25.371000000-06:00[America/Chicago]&quot;&#xd;
	}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${msBase}</stringProp>
                <stringProp name="HTTPSampler.port">${msPort}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${msPath}/campaign_goals/v2/adjudicate</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Vitality-Client" elementType="Header">
                      <stringProp name="Header.name">Vitality-Client</stringProp>
                      <stringProp name="Header.value">Aetna</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Token" elementType="Header">
                      <stringProp name="Header.name">Vitality-Token</stringProp>
                      <stringProp name="Header.value">${ar_Token}</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-App-Version" elementType="Header">
                      <stringProp name="Header.name">Vitality-App-Version</stringProp>
                      <stringProp name="Header.value">8.4</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                      <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                      <stringProp name="Header.value">IOS</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Language" elementType="Header">
                      <stringProp name="Header.name">Vitality-Language</stringProp>
                      <stringProp name="Header.value">en</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Device-Id" elementType="Header">
                      <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                      <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Local-Time" elementType="Header">
                      <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                      <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-API-Version" elementType="Header">
                      <stringProp name="Header.name">Vitality-API-Version</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: Version is present" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1242798514">supportedAppVersions</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.scope">all</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ADJUDICATED Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1733827326">ADJUDICATED</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.scope">all</stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="WSO2 POST CG V1, GET CG WSO2, GET CGs WSO2, POST ADJ WSO2" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST CG: V1" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&#xd;
{  &#xd;
   &quot;goalManagementMessage&quot;:{  &#xd;
      &quot;managementInstruction&quot;:&quot;CREATE&quot;,&#xd;
      &quot;goal&quot;:{&#xd;
         &quot;goalId&quot;:null,&#xd;
         &quot;goalTitle&quot;:&quot;Breathe Goal&quot;,&#xd;
         &quot;vitalityMemberId&quot;:${vitalityId_Apollo},&#xd;
         &quot;campaignId&quot;:${vitalityId_Apollo},&#xd;
         &quot;adjudications&quot;: {&#xd;
           &quot;apolloAdjudications&quot;: [&#xd;
             {&#xd;
               &quot;adjudicator&quot;: &quot;AETNA&quot;,&#xd;
               &quot;frequency&quot;: null,&#xd;
               &quot;targetFunction&quot;: &quot;sum&quot;,&#xd;
               &quot;targetMetric&quot;: &quot;sessions&quot;,&#xd;
               &quot;targetOperator&quot;: &quot;&gt;=&quot;,&#xd;
               &quot;targetValue&quot;: 5,&#xd;
               &quot;type&quot;: &quot;breathe&quot;&#xd;
             }&#xd;
           ]&#xd;
         },&#xd;
         &quot;description&quot;:&quot;Please try breathing!&quot;,&#xd;
         &quot;howToAchieve&quot;:&quot;Use the Breathe app&quot;,&#xd;
         &quot;externalMemberId&quot;:&quot;${apolloId}&quot;,&#xd;
         &quot;goalState&quot;:&quot;UNAWARDED&quot;,&#xd;
         &quot;startDate&quot;:&quot;${dateToday}T09:52:25.371000000-05:00[America/Chicago]&quot;,&#xd;
         &quot;internalEndDate&quot;:&quot;${dateTodayPlusFour}T09:52:25.371000000-05:00[America/Chicago]&quot;,&#xd;
         &quot;monitorEndDate&quot;:&quot;${dateTodayPlusFive}T09:52:25.371000000-05:00[America/Chicago]&quot;,&#xd;
         &quot;externalEndDate&quot;:&quot;${dateTodayPlusSix}T09:52:25.371000000-05:00[America/Chicago]&quot;,&#xd;
         &quot;transmitGUID&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}-${randomAlphaNumericString}-${randomAlphaNumericString}-${randomAlphaNumericString}&quot;,&#xd;
         &quot;partnerId&quot;:&quot;AETNA&quot;,&#xd;
         &quot;buttons&quot;:[  &#xd;
             {&#xd;
            &quot;buttonAction&quot;: &quot;markCompleted&quot;,&#xd;
            &quot;buttonIndex&quot;: 0,&#xd;
            &quot;buttonLabel&quot;: &quot;Got It&quot;&#xd;
          }&#xd;
         ],&#xd;
         &quot;reward&quot;:{  &#xd;
            &quot;coreEvents&quot;:[  &#xd;
               {  &#xd;
                  &quot;eventMnemonic&quot;:&quot;BRTH&quot;,&#xd;
                  &quot;eventValue&quot;:10000&#xd;
               }&#xd;
            ]&#xd;
         }&#xd;
      }&#xd;
   }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${zuulBase}</stringProp>
                <stringProp name="HTTPSampler.port">${zuulPort}</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${zuulCGPath}/svc/27/maintainGoal</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.proxyHost">${zuulProxy}</stringProp>
                <stringProp name="HTTPSampler.proxyPort">${zuulPortCg}</stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="CampaignGoal_ID" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">CGoalId</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.goalNotificationMessage.goal.goalId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CREATED Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1746537160">CREATED</stringProp>
                    <stringProp name="-403081501">UNAWARDED</stringProp>
                    <stringProp name="0"></stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.scope">all</stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Vitality-Client" elementType="Header">
                    <stringProp name="Header.name">Vitality-Client</stringProp>
                    <stringProp name="Header.value">Aetna</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Token" elementType="Header">
                    <stringProp name="Header.name">Vitality-Token</stringProp>
                    <stringProp name="Header.value">${ar_Token}</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-App-Version" elementType="Header">
                    <stringProp name="Header.name">Vitality-App-Version</stringProp>
                    <stringProp name="Header.value">8.4</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                    <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                    <stringProp name="Header.value">IOS</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Language" elementType="Header">
                    <stringProp name="Header.name">Vitality-Language</stringProp>
                    <stringProp name="Header.value">en</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Device-Id" elementType="Header">
                    <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                    <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Local-Time" elementType="Header">
                    <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                    <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-API-Version" elementType="Header">
                    <stringProp name="Header.name">Vitality-API-Version</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET CG goal: version is NOT present" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="goalId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${CGoalId}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">goalId</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/${msPath}/1.0/campaign_goals/goal</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: Version is NOT present" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1242798514">supportedAppVersions</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">6</intProp>
                  <stringProp name="Assertion.scope">all</stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET CG goals: version is NOT present" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="limit" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">10</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">limit</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/${msPath}/1.0/campaign_goals/goals</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: Version is NOT present" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1242798514">supportedAppVersions</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">6</intProp>
                  <stringProp name="Assertion.scope">all</stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="WSO2 POST CG ADJ: version is NOT present" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;goalId&quot;: ${CGoalId},&#xd;
	&quot;partnerId&quot;: &quot;AETNA&quot;,&#xd;
	&quot;adjudicationDecision&quot;: &quot;AWARDED&quot;,&#xd;
	&quot;adjudicationDate&quot;: &quot;${dateToday}T09:52:25.371000000-06:00&quot;,&#xd;
	&quot;adjudicationProcessedDate&quot;: &quot;${dateToday}T09:52:25.371000000-06:00[America/Chicago]&quot;&#xd;
	}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${wso2Base}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/${msPath}/1.0/campaign_goals/adjudicate</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: Version is NOT present" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1242798514">supportedAppVersions</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">6</intProp>
                  <stringProp name="Assertion.scope">all</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ADJUDICATED Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1733827326">ADJUDICATED</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.scope">all</stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="WSO2 POST CG V2, GET CG WSO2, GET CGs WSO2, POST ADJ WSO2" enabled="false"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST CG: V2" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&#xd;
{  &#xd;
   &quot;goalManagementMessage&quot;:{  &#xd;
      &quot;managementInstruction&quot;:&quot;CREATE&quot;,&#xd;
      &quot;goal&quot;:{&#xd;
      	&quot;supportedAppVersions&quot;: [&#xd;
		&quot;1.1.0&quot;,&#xd;
		&quot;1.2.*&quot;,&#xd;
		&quot;2.*&quot;&#xd;
		],  &#xd;
         &quot;goalId&quot;:null,&#xd;
         &quot;goalTitle&quot;:&quot;Breathe Goal&quot;,&#xd;
         &quot;vitalityMemberId&quot;:${vitalityId_Apollo},&#xd;
         &quot;campaignId&quot;:${vitalityId_Apollo},&#xd;
         &quot;adjudications&quot;: {&#xd;
           &quot;apolloAdjudications&quot;: [&#xd;
             {&#xd;
               &quot;adjudicator&quot;: &quot;AETNA&quot;,&#xd;
               &quot;frequency&quot;: null,&#xd;
               &quot;targetFunction&quot;: &quot;sum&quot;,&#xd;
               &quot;targetMetric&quot;: &quot;sessions&quot;,&#xd;
               &quot;targetOperator&quot;: &quot;&gt;=&quot;,&#xd;
               &quot;targetValue&quot;: 5,&#xd;
               &quot;type&quot;: &quot;breathe&quot;&#xd;
             }&#xd;
           ]&#xd;
         },&#xd;
         &quot;description&quot;:&quot;Please try breathing!&quot;,&#xd;
         &quot;howToAchieve&quot;:&quot;Use the Breathe app&quot;,&#xd;
         &quot;externalMemberId&quot;:&quot;${apolloId}&quot;,&#xd;
         &quot;goalState&quot;:&quot;UNAWARDED&quot;,&#xd;
         &quot;startDate&quot;:&quot;${dateToday}T09:52:25.371000000-05:00[America/Chicago]&quot;,&#xd;
         &quot;internalEndDate&quot;:&quot;${dateTodayPlusFour}T09:52:25.371000000-05:00[America/Chicago]&quot;,&#xd;
         &quot;monitorEndDate&quot;:&quot;${dateTodayPlusFive}T09:52:25.371000000-05:00[America/Chicago]&quot;,&#xd;
         &quot;externalEndDate&quot;:&quot;${dateTodayPlusSix}T09:52:25.371000000-05:00[America/Chicago]&quot;,&#xd;
         &quot;transmitGUID&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}-${randomAlphaNumericString}-${randomAlphaNumericString}-${randomAlphaNumericString}&quot;,&#xd;
         &quot;partnerId&quot;:&quot;AETNA&quot;,&#xd;
         &quot;buttons&quot;:[  &#xd;
                {&#xd;
            &quot;buttonAction&quot;: &quot;markCompleted&quot;,&#xd;
            &quot;buttonIndex&quot;: 0,&#xd;
            &quot;buttonLabel&quot;: &quot;Got It&quot;&#xd;
          }&#xd;
         ],&#xd;
         &quot;reward&quot;:{  &#xd;
            &quot;coreEvents&quot;:[  &#xd;
               {  &#xd;
                  &quot;eventMnemonic&quot;:&quot;BRTH&quot;,&#xd;
                  &quot;eventValue&quot;:5&#xd;
               }&#xd;
            ]&#xd;
         }&#xd;
      }&#xd;
   }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${zuulBase}</stringProp>
                <stringProp name="HTTPSampler.port">${zuulPort}</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${zuulCGPath}/svc/27/maintainGoal</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.proxyHost">${zuulProxy}</stringProp>
                <stringProp name="HTTPSampler.proxyPort">${zuulPortCg}</stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="CampaignGoal_ID" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">CGoalId</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.goalNotificationMessage.goal.goalId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CREATED Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1746537160">CREATED</stringProp>
                    <stringProp name="-403081501">UNAWARDED</stringProp>
                    <stringProp name="0"></stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.scope">all</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: Version is present" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1242798514">supportedAppVersions</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.scope">all</stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Vitality-Client" elementType="Header">
                    <stringProp name="Header.name">Vitality-Client</stringProp>
                    <stringProp name="Header.value">Aetna</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Token" elementType="Header">
                    <stringProp name="Header.name">Vitality-Token</stringProp>
                    <stringProp name="Header.value">${ar_Token}</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-App-Version" elementType="Header">
                    <stringProp name="Header.name">Vitality-App-Version</stringProp>
                    <stringProp name="Header.value">8.4</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                    <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                    <stringProp name="Header.value">IOS</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Language" elementType="Header">
                    <stringProp name="Header.name">Vitality-Language</stringProp>
                    <stringProp name="Header.value">en</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Device-Id" elementType="Header">
                    <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                    <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Local-Time" elementType="Header">
                    <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                    <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-API-Version" elementType="Header">
                    <stringProp name="Header.name">Vitality-API-Version</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET CG goal: version IS present" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="goalId" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${CGoalId}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">goalId</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/${msPath}/1.0/campaign_goals/goal</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: Version is present" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1242798514">supportedAppVersions</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.scope">all</stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET CG goals: version IS present" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="offset" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">0</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">offset</stringProp>
                    </elementProp>
                    <elementProp name="limit" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">15</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">limit</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/${msPath}/1.0/campaign_goals/goals</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="JSON Structure Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="408179302">adjudicator</stringProp>
                    <stringProp name="241352577">buttons</stringProp>
                    <stringProp name="915719548">eventMnemonic</stringProp>
                    <stringProp name="-1318255029">campaignId</stringProp>
                    <stringProp name="-1724546052">description</stringProp>
                    <stringProp name="-1179356962">externalEndDate</stringProp>
                    <stringProp name="-254860736">externalMemberId</stringProp>
                    <stringProp name="-1240658034">goalId</stringProp>
                    <stringProp name="2054867262">goalState</stringProp>
                    <stringProp name="2055481093">goalTitle</stringProp>
                    <stringProp name="199149798">howToAchieve</stringProp>
                    <stringProp name="1316501932">internalEndDate</stringProp>
                    <stringProp name="922683503">monitorEndDate</stringProp>
                    <stringProp name="-1795632125">partnerId</stringProp>
                    <stringProp name="-2129778896">startDate</stringProp>
                    <stringProp name="-109999815">transmitGUID</stringProp>
                    <stringProp name="2145596567">vitalityMemberId</stringProp>
                    <stringProp name="-2070259289">status&quot;:1</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">34</intProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: Version is present" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1242798514">supportedAppVersions</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.scope">all</stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="WSO2 POST CG ADJ: V1" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;goalId&quot;: ${CGoalId},&#xd;
	&quot;partnerId&quot;: &quot;AETNA&quot;,&#xd;
	&quot;adjudicationDecision&quot;: &quot;AWARDED&quot;,&#xd;
	&quot;adjudicationDate&quot;: &quot;${dateToday}T09:52:25.371000000-06:00&quot;,&#xd;
	&quot;adjudicationProcessedDate&quot;: &quot;${dateToday}T09:52:25.371000000-06:00[America/Chicago]&quot;&#xd;
	}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${wso2Base}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/${msPath}/1.0/campaign_goals/adjudicate</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ADJUDICATED Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1733827326">ADJUDICATED</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.scope">all</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: Version is present" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1242798514">supportedAppVersions</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.scope">all</stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="VGUSA-4529 Uncross TEST and STAGING OpenShift environments - Squad 2" enabled="false"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: CG - Create" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&#xd;
{  &#xd;
   &quot;goalManagementMessage&quot;:{  &#xd;
      &quot;managementInstruction&quot;:&quot;CREATE&quot;,&#xd;
      &quot;goal&quot;:{&#xd;
      	&quot;supportedAppVersions&quot;: [&#xd;
		&quot;1.1.0&quot;,&#xd;
		&quot;1.2.*&quot;,&#xd;
		&quot;2.*&quot;&#xd;
		],  &#xd;
         &quot;goalId&quot;:null,&#xd;
         &quot;goalTitle&quot;:&quot;Breathe Goal&quot;,&#xd;
         &quot;vitalityMemberId&quot;:${apolloId},&#xd;
         &quot;campaignId&quot;:${randomNumericString},&#xd;
         &quot;adjudications&quot;: {&#xd;
           &quot;apolloAdjudications&quot;: [&#xd;
             {&#xd;
               &quot;adjudicator&quot;: &quot;AETNA&quot;,&#xd;
               &quot;frequency&quot;: null,&#xd;
               &quot;targetFunction&quot;: &quot;sum&quot;,&#xd;
               &quot;targetMetric&quot;: &quot;sessions&quot;,&#xd;
               &quot;targetOperator&quot;: &quot;&gt;=&quot;,&#xd;
               &quot;targetValue&quot;: 5,&#xd;
               &quot;type&quot;: &quot;breathe&quot;&#xd;
             }&#xd;
           ]&#xd;
         },&#xd;
         &quot;description&quot;:&quot;Please try breathing!&quot;,&#xd;
         &quot;howToAchieve&quot;:&quot;Use the Breathe app&quot;,&#xd;
         &quot;externalMemberId&quot;:&quot;${externalId}&quot;,&#xd;
         &quot;goalState&quot;:&quot;UNAWARDED&quot;,&#xd;
         &quot;startDate&quot;:&quot;${dateToday}T09:52:25.371000000-05:00[America/Chicago]&quot;,&#xd;
         &quot;internalEndDate&quot;:&quot;${dateTodayPlusFour}T09:52:25.371000000-05:00[America/Chicago]&quot;,&#xd;
         &quot;monitorEndDate&quot;:&quot;${dateTodayPlusFive}T09:52:25.371000000-05:00[America/Chicago]&quot;,&#xd;
         &quot;externalEndDate&quot;:&quot;${dateTodayPlusSix}T09:52:25.371000000-05:00[America/Chicago]&quot;,&#xd;
         &quot;transmitGUID&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}-${randomAlphaNumericString}-${randomAlphaNumericString}-${randomAlphaNumericString}&quot;,&#xd;
         &quot;partnerId&quot;:&quot;AETNA&quot;,&#xd;
         &quot;buttons&quot;:[  &#xd;
            {  &#xd;
               &quot;buttonLabel&quot;:&quot;Open in maps!&quot;,&#xd;
               &quot;buttonAction&quot;:&quot;openMaps:http://maps.apple.com/lat=1234323,long=987324&quot;,&#xd;
               &quot;buttonIndex&quot;:0&#xd;
            },&#xd;
            {  &#xd;
               &quot;buttonLabel&quot;:&quot;Find out more!&quot;,&#xd;
               &quot;buttonAction&quot;:&quot;openURL:http://www.aetna.com/breathe.html&quot;,&#xd;
               &quot;buttonIndex&quot;:1&#xd;
            }&#xd;
         ],&#xd;
         &quot;reward&quot;:{  &#xd;
            &quot;coreEvents&quot;:[  &#xd;
               {  &#xd;
                  &quot;eventMnemonic&quot;:&quot;BRTH&quot;,&#xd;
                  &quot;eventValue&quot;:5&#xd;
               }&#xd;
            ]&#xd;
         }&#xd;
      }&#xd;
   }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${zuulBase}</stringProp>
              <stringProp name="HTTPSampler.port">${zuulPort}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${zuulCGPath}/svc/27/maintainGoal</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.proxyHost">${zuulProxy}</stringProp>
              <stringProp name="HTTPSampler.proxyPort">${zuulPortCg}</stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="CampaignGoal_ID" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">CampaignGoal_ID</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.goalNotificationMessage.goal.goalId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CREATED Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1746537160">CREATED</stringProp>
                  <stringProp name="-403081501">UNAWARDED</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: CG - Adjudicate" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;goalId&quot;: ${CampaignGoal_ID},&#xd;
	&quot;partnerId&quot;: &quot;AETNA&quot;,&#xd;
	&quot;adjudicationDecision&quot;: &quot;AWARDED&quot;,&#xd;
	&quot;adjudicationDate&quot;: &quot;${dateToday}T09:52:25.371000000-06:00&quot;,&#xd;
	&quot;adjudicationProcessedDate&quot;: &quot;${dateToday}T09:52:25.371000000-06:00[America/Chicago]&quot;&#xd;
	}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/${msPath}/1.0/campaign_goals/adjudicate</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Vitality-Client" elementType="Header">
                    <stringProp name="Header.name">Vitality-Client</stringProp>
                    <stringProp name="Header.value">Aetna</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Token" elementType="Header">
                    <stringProp name="Header.name">Vitality-Token</stringProp>
                    <stringProp name="Header.value">${ar_Token}</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-App-Version" elementType="Header">
                    <stringProp name="Header.name">Vitality-App-Version</stringProp>
                    <stringProp name="Header.value">8.4</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                    <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                    <stringProp name="Header.value">IOS</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Language" elementType="Header">
                    <stringProp name="Header.name">Vitality-Language</stringProp>
                    <stringProp name="Header.value">en</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Device-Id" elementType="Header">
                    <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                    <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Local-Time" elementType="Header">
                    <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                    <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-API-Version" elementType="Header">
                    <stringProp name="Header.name">Vitality-API-Version</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="CampaignGoal_ID" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">CampaignGoal_ID</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.goalNotificationMessage.goal.goalId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ADJUDICATED Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1733827326">ADJUDICATED</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="VGUSA-5059 Apollo: Campaign Goals limit parameter configuration" enabled="true"/>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Users: Apollo" enabled="true">
              <collectionProp name="UserParameters.names">
                <stringProp name="1150977610">apolloId</stringProp>
                <stringProp name="-1699764666">externalId</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1482544063">
                  <stringProp name="-1226073238">${apolloID_1}</stringProp>
                  <stringProp name="-1226073238">${apolloID_1}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">true</boolProp>
            </UserParameters>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: CG - Create" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&#xd;
{  &#xd;
   &quot;goalManagementMessage&quot;:{  &#xd;
      &quot;managementInstruction&quot;:&quot;CREATE&quot;,&#xd;
      &quot;goal&quot;:{&#xd;
      	&quot;supportedAppVersions&quot;: [&#xd;
		&quot;1.1.0&quot;,&#xd;
		&quot;1.2.*&quot;,&#xd;
		&quot;2.*&quot;&#xd;
		],  &#xd;
         &quot;goalId&quot;:null,&#xd;
         &quot;goalTitle&quot;:&quot;Breathe Goal&quot;,&#xd;
         &quot;vitalityMemberId&quot;:${apolloId},&#xd;
         &quot;campaignId&quot;:${randomNumericString},&#xd;
         &quot;adjudications&quot;: {&#xd;
           &quot;apolloAdjudications&quot;: [&#xd;
             {&#xd;
               &quot;adjudicator&quot;: &quot;AETNA&quot;,&#xd;
               &quot;frequency&quot;: null,&#xd;
               &quot;targetFunction&quot;: &quot;sum&quot;,&#xd;
               &quot;targetMetric&quot;: &quot;sessions&quot;,&#xd;
               &quot;targetOperator&quot;: &quot;&gt;=&quot;,&#xd;
               &quot;targetValue&quot;: 5,&#xd;
               &quot;type&quot;: &quot;breathe&quot;&#xd;
             }&#xd;
           ]&#xd;
         },&#xd;
         &quot;description&quot;:&quot;Please try breathing!&quot;,&#xd;
         &quot;howToAchieve&quot;:&quot;Use the Breathe app&quot;,&#xd;
         &quot;externalMemberId&quot;:&quot;${externalId}&quot;,&#xd;
         &quot;goalState&quot;:&quot;UNAWARDED&quot;,&#xd;
         &quot;startDate&quot;:&quot;${dateToday}T09:52:25.371000000-05:00[America/Chicago]&quot;,&#xd;
         &quot;internalEndDate&quot;:&quot;${dateTodayPlusFour}T09:52:25.371000000-05:00[America/Chicago]&quot;,&#xd;
         &quot;monitorEndDate&quot;:&quot;${dateTodayPlusFive}T09:52:25.371000000-05:00[America/Chicago]&quot;,&#xd;
         &quot;externalEndDate&quot;:&quot;${dateTodayPlusSix}T09:52:25.371000000-05:00[America/Chicago]&quot;,&#xd;
         &quot;transmitGUID&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}-${randomAlphaNumericString}-${randomAlphaNumericString}-${randomAlphaNumericString}&quot;,&#xd;
         &quot;partnerId&quot;:&quot;AETNA&quot;,&#xd;
         &quot;buttons&quot;:[  &#xd;
            {  &#xd;
               &quot;buttonLabel&quot;:&quot;Open in maps!&quot;,&#xd;
               &quot;buttonAction&quot;:&quot;openMaps:http://maps.apple.com/lat=1234323,long=987324&quot;,&#xd;
               &quot;buttonIndex&quot;:0&#xd;
            },&#xd;
            {  &#xd;
               &quot;buttonLabel&quot;:&quot;Find out more!&quot;,&#xd;
               &quot;buttonAction&quot;:&quot;openURL:http://www.aetna.com/breathe.html&quot;,&#xd;
               &quot;buttonIndex&quot;:1&#xd;
            }&#xd;
         ],&#xd;
         &quot;reward&quot;:{  &#xd;
            &quot;coreEvents&quot;:[  &#xd;
               {  &#xd;
                  &quot;eventMnemonic&quot;:&quot;BRTH&quot;,&#xd;
                  &quot;eventValue&quot;:5&#xd;
               }&#xd;
            ]&#xd;
         }&#xd;
      }&#xd;
   }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${zuulBase}</stringProp>
              <stringProp name="HTTPSampler.port">${zuulPort}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${zuulCGPath}/svc/27/maintainGoal</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.proxyHost">${zuulProxy}</stringProp>
              <stringProp name="HTTPSampler.proxyPort">${zuulPortCg}</stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="CampaignGoal_ID" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">CampaignGoal_ID</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.goalNotificationMessage.goal.goalId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CREATED Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1746537160">CREATED</stringProp>
                  <stringProp name="-403081501">UNAWARDED</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Adjudicate, Get Goals" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Auth Token" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="entity_no" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${apolloId}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">entity_no</stringProp>
                    </elementProp>
                    <elementProp name="encrypted_entity_no" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${apolloIdEncrypted}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">encrypted_entity_no</stringProp>
                    </elementProp>
                    <elementProp name="_p" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">IOS</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">_p</stringProp>
                    </elementProp>
                    <elementProp name="_v" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${mob.app.version}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">_v</stringProp>
                    </elementProp>
                    <elementProp name="_doc_browser_context" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">_doc_browser_context</stringProp>
                    </elementProp>
                    <elementProp name="_c" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">Aetna</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">_c</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${msBase}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${msPath}/auth/simulate_auth</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Active Rewards Token" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">ar_Token</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.session.token</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="LLT Assertion" enabled="true">
                  <stringProp name="JSON_PATH">$.session.timeout</stringProp>
                  <stringProp name="EXPECTED_VALUE">2280</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Encrypted Entity" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">import java.security.MessageDigest;

//Entity Encription for Apollo
MessageDigest digest = MessageDigest.getInstance(&quot;MD5&quot;);
byte[] bytes = digest.digest((&quot;${apolloId}&quot; + &quot;${msSalt}&quot;).getBytes());
vars.put(&quot;apolloIdEncrypted&quot;,javax.xml.bind.DatatypeConverter.printHexBinary(bytes).toLowerCase());</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
              </hashTree>
              <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${wso2Base}</stringProp>
                <stringProp name="HTTPSampler.port">${port}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout">30000</stringProp>
                <stringProp name="HTTPSampler.response_timeout">300000</stringProp>
              </ConfigTestElement>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: CG - Adjudicate" enabled="false">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;goalId&quot;: ${CampaignGoal_ID},&#xd;
	&quot;partnerId&quot;: &quot;AETNA&quot;,&#xd;
	&quot;adjudicationDecision&quot;: &quot;AWARDED&quot;,&#xd;
	&quot;adjudicationDate&quot;: &quot;${dateToday}T09:52:25.371000000-06:00&quot;,&#xd;
	&quot;adjudicationProcessedDate&quot;: &quot;${dateToday}T09:52:25.371000000-06:00[America/Chicago]&quot;&#xd;
	}&#xd;
</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/${msPath}/1.0/campaign_goals/adjudicate</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Vitality-Client" elementType="Header">
                      <stringProp name="Header.name">Vitality-Client</stringProp>
                      <stringProp name="Header.value">Aetna</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Token" elementType="Header">
                      <stringProp name="Header.name">Vitality-Token</stringProp>
                      <stringProp name="Header.value">${ar_Token}</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-App-Version" elementType="Header">
                      <stringProp name="Header.name">Vitality-App-Version</stringProp>
                      <stringProp name="Header.value">8.4</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                      <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                      <stringProp name="Header.value">IOS</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Language" elementType="Header">
                      <stringProp name="Header.name">Vitality-Language</stringProp>
                      <stringProp name="Header.value">en</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Device-Id" elementType="Header">
                      <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                      <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Local-Time" elementType="Header">
                      <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                      <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-API-Version" elementType="Header">
                      <stringProp name="Header.name">Vitality-API-Version</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="CampaignGoal_ID" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">CampaignGoal_ID</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.goalNotificationMessage.goal.goalId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ADJUDICATED Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1733827326">ADJUDICATED</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.scope">all</stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET CG_Goals" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="offset" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">0</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">offset</stringProp>
                    </elementProp>
                    <elementProp name="limit" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">999</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">limit</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/${msPath}/1.0/campaign_goals/goals</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Client" elementType="Header">
                      <stringProp name="Header.name">Vitality-Client</stringProp>
                      <stringProp name="Header.value">Aetna</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Token" elementType="Header">
                      <stringProp name="Header.name">Vitality-Token</stringProp>
                      <stringProp name="Header.value">${ar_Token}</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-App-Version" elementType="Header">
                      <stringProp name="Header.name">Vitality-App-Version</stringProp>
                      <stringProp name="Header.value">7</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                      <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                      <stringProp name="Header.value">IOS</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Language" elementType="Header">
                      <stringProp name="Header.name">Vitality-Language</stringProp>
                      <stringProp name="Header.value">en</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Device-Id" elementType="Header">
                      <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                      <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Local-Time" elementType="Header">
                      <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                      <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-API-Version" elementType="Header">
                      <stringProp name="Header.name">Vitality-API-Version</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="CGoalId" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">CGoalId</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.output.goalsArray.goals[0].goalId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="JSON Structure Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="408179302">adjudicator</stringProp>
                    <stringProp name="241352577">buttons</stringProp>
                    <stringProp name="915719548">eventMnemonic</stringProp>
                    <stringProp name="-1318255029">campaignId</stringProp>
                    <stringProp name="-1724546052">description</stringProp>
                    <stringProp name="-1179356962">externalEndDate</stringProp>
                    <stringProp name="-254860736">externalMemberId</stringProp>
                    <stringProp name="-1240658034">goalId</stringProp>
                    <stringProp name="2054867262">goalState</stringProp>
                    <stringProp name="2055481093">goalTitle</stringProp>
                    <stringProp name="199149798">howToAchieve</stringProp>
                    <stringProp name="1316501932">internalEndDate</stringProp>
                    <stringProp name="922683503">monitorEndDate</stringProp>
                    <stringProp name="-1795632125">partnerId</stringProp>
                    <stringProp name="-2129778896">startDate</stringProp>
                    <stringProp name="-109999815">transmitGUID</stringProp>
                    <stringProp name="2145596567">vitalityMemberId</stringProp>
                    <stringProp name="-2070259289">status&quot;:1</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">34</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="CG DB" enabled="false">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery">select 1 from dual</stringProp>
          <stringProp name="connectionAge">10000</stringProp>
          <stringProp name="dataSource">CG_DB</stringProp>
          <stringProp name="dbUrl">jdbc:oracle:thin:@${arDbHost}.dhna.corp:${dbPort}:DHDB</stringProp>
          <stringProp name="driver">oracle.jdbc.OracleDriver</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">${dbPassword}</stringProp>
          <stringProp name="poolMax">20</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">${dbUserName}</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="VRZN" enabled="false"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="VGPS-718 ESB - Verizon - only award SWAW" enabled="false"/>
          <hashTree>
            <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="false">
              <collectionProp name="UserParameters.names">
                <stringProp name="-2102099708">entityNo</stringProp>
              </collectionProp>
              <collectionProp name="UserParameters.thread_values">
                <collectionProp name="-1202356898">
                  <stringProp name="-295549701">${vrznId}</stringProp>
                </collectionProp>
              </collectionProp>
              <boolProp name="UserParameters.per_iteration">false</boolProp>
            </UserParameters>
            <hashTree/>
            <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${wso2Base}</stringProp>
              <stringProp name="HTTPSampler.port">${port}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout">30000</stringProp>
              <stringProp name="HTTPSampler.response_timeout">300000</stringProp>
            </ConfigTestElement>
            <hashTree/>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="mnemonic" elementType="Argument">
                  <stringProp name="Argument.name">mnemonic</stringProp>
                  <stringProp name="Argument.value">SWAW</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="caloriesPoints" elementType="Argument">
                  <stringProp name="Argument.name">caloriesPoints</stringProp>
                  <stringProp name="Argument.value">10</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST WSO2 Access Token" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="grant_type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">client_credentials</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">grant_type</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/token</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Basic ${wso2Token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extracting WSO2 AccessToken" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">wso2AccessToken</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="RTE: VRZN" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST RTE VRZN Token: Genarate" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;issuedDate&quot;: &quot;${dateToday}&quot;,&#xd;
  &quot;entityNo&quot;: null,&#xd;
  &quot;expiryDate&quot;: &quot;${dateTomorrow}&quot;,&#xd;
  &quot;verifiedDate&quot;: null,&#xd;
  &quot;partnerId&quot;: &quot;${vrznPartnerId}&quot;,&#xd;
  &quot;generatedBy&quot;: &quot;PERF-TEST&quot;,&#xd;
  &quot;tokenType&quot;: &quot;Token&quot;,&#xd;
  &quot;tokenValue&quot;: &quot;${randomAlphaNumericString}&quot;,&#xd;
  &quot;status&quot;: &quot;P&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${zuulRteNode01}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">vitality-whitelabel-domain-service-1/svc/${tenantWhiteLable}/token.json</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract RTE Token: VRZN" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">vrznRteToken</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.tokenValue</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert: vrznRteToken" enabled="true">
                  <stringProp name="JSON_PATH">$.tokenValue</stringProp>
                  <stringProp name="EXPECTED_VALUE">${vrznRteToken}</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST RTE VRZN Token: Validate" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;validateTokenRequest&quot;: {&#xd;
    &quot;partnerId&quot;: &quot;${vrznPartnerId}&quot;,&#xd;
    &quot;tokenId&quot;: &quot;${vrznRteToken}&quot;&#xd;
  }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/whitelabel-rte/1.0/svc/${tenantWhiteLable}/validateToken</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${wso2AccessToken}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: Token is valid" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1616563228">validateTokenResponse</stringProp>
                    <stringProp name="-374023120">tokenAttributes</stringProp>
                    <stringProp name="-2031077811">isTokenValid</stringProp>
                    <stringProp name="3569038">true</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.scope">all</stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RTE: VRZN" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
 &quot;enrollMemberRequest&quot;: {&#xd;
   &quot;coverageEffectiveDate&quot;: &quot;${dateToday}&quot;,&#xd;
   &quot;dateOfBirth&quot;: &quot;${__RandomDate(yyyy-MM-dd,1930-01-01,2001-12-31,,)}&quot;,&#xd;
   &quot;firstName&quot;: &quot;${randomString}&quot;,&#xd;
   &quot;gender&quot;: &quot;${__chooseRandom(M,F,U,randomProduct)}&quot;,&#xd;
   &quot;lastName&quot;: &quot;${randomString}&quot;,&#xd;
   &quot;partnerId&quot;: &quot;${vrznPartnerId}&quot;,&#xd;
   &quot;uniqueId&quot;: &quot;${vrznRteToken}&quot;,&#xd;
   &quot;zipCode&quot;: &quot;60605&quot;&#xd;
 }&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/whitelabel-rte/1.0/svc/${tenantWhiteLable}/enrollMember</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${wso2AccessToken}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: Vitality ID present" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1203236063">errorMessage</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">6</intProp>
                  <stringProp name="Assertion.scope">all</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract entityNo" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">entityNo</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.enrollMemberResponse.vitalityId</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="SOAP Send Calories: Tenant 37" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${povBase}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">tibcoservices/sendTransportBridgeMessageToTVGService</stringProp>
                <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout">30000</stringProp>
                <stringProp name="HTTPSampler.response_timeout">300000</stringProp>
              </ConfigTestElement>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SOAP: Calories" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://schemas.vitalitytibcoservices.com/vts/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:genericTBMRequest&gt;&#xd;
         &lt;v1:messageType&gt;xml&lt;/v1:messageType&gt;&#xd;
         &lt;v1:destinationTopic&gt;${tibcoGDLQueue}&lt;/v1:destinationTopic&gt;&#xd;
		&lt;ns2:DeviceUpload  xmlns:ns2=&quot;http://schemas.discovery.co.za/vitality&quot;&gt;&#xd;
		&lt;ns2:header&gt;&#xd;
			&lt;ns2:user&gt;&#xd;
				&lt;entityNo&gt;${entityNo}&lt;/entityNo&gt;&#xd;
			&lt;/ns2:user&gt;&#xd;
			&lt;ns2:uploadDate&gt;${dateToday}T11:23:33.176Z&lt;/ns2:uploadDate&gt;&#xd;
			&lt;ns2:sessionId&gt;${randomAlphaNumericString}-${randomAlphaNumericString}&lt;/ns2:sessionId&gt;&#xd;
			&lt;ns2:gdlSessionId&gt;${randomNumericString}&lt;/ns2:gdlSessionId&gt;&#xd;
			&lt;ns2:partnerSystem&gt;Apple&lt;/ns2:partnerSystem&gt;&#xd;
			&lt;ns2:verified&gt;true&lt;/ns2:verified&gt;&#xd;
			&lt;ns2:uploadCount&gt;0&lt;/ns2:uploadCount&gt;&#xd;
			&lt;ns2:tenantId&gt;${tenantVrzn}&lt;/ns2:tenantId&gt;&#xd;
			&lt;ns2:processingType&gt;BATCH&lt;/ns2:processingType&gt;&#xd;
			&lt;ns2:rawUploadData&gt;NOT REQUIRED&lt;/ns2:rawUploadData&gt;&#xd;
		&lt;/ns2:header&gt;&#xd;
&#xd;
		&lt;ns2:device&gt;&#xd;
			&lt;manufacturer&gt;Apple&lt;/manufacturer&gt;&#xd;
			&lt;model&gt;iOS 13.0&lt;/model&gt;&#xd;
		&lt;/ns2:device&gt;&#xd;
&#xd;
		&lt;ns2:readings&gt;&#xd;
			&lt;startTime&gt;${dateToday}T00:00:00.000+03:00&lt;/startTime&gt;&#xd;
			&lt;endTime&gt;${dateTomorrow}T00:00:00.000+03:00&lt;/endTime&gt;&#xd;
			&lt;duration&gt;86400&lt;/duration&gt;&#xd;
			&lt;readingId&gt;${randomNumericString}&lt;/readingId&gt;&#xd;
			&lt;partnerReadingId&gt;${randomAlphaNumericString}-${randomAlphaNumericString}&lt;/partnerReadingId&gt;&#xd;
			&lt;readingType&gt;WALKING&lt;/readingType&gt;&#xd;
			&lt;dataCategory&gt;ROUTINE&lt;/dataCategory&gt;&#xd;
			&lt;integrity&gt;VERIFIED&lt;/integrity&gt;&#xd;
			&lt;isDuplicate&gt;0&lt;/isDuplicate&gt;&#xd;
			&lt;isValid&gt;1&lt;/isValid&gt;&#xd;
			&lt;isActive&gt;1&lt;/isActive&gt;&#xd;
			&lt;aggregationId&gt;${randomNumericString}&lt;/aggregationId&gt;&#xd;
		&lt;workout&gt;&#xd;
			&lt;partnerActivityType&gt;WALKING&lt;/partnerActivityType&gt;&#xd;
			&lt;energyExpenditure&gt;&#xd;
				&lt;value&gt;${awawKilojoule}&lt;/value&gt;&#xd;
				&lt;unitOfMeasurement&gt;KILOJOULES&lt;/unitOfMeasurement&gt;&#xd;
			&lt;/energyExpenditure&gt;&lt;heartRate/&gt;&#xd;
		&lt;/workout&gt;&#xd;
		&lt;/ns2:readings&gt;&#xd;
		&lt;/ns2:DeviceUpload&gt;&#xd;
      &lt;/v1:genericTBMRequest&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip,deflate</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">text/xml;charset=UTF-8</stringProp>
                    </elementProp>
                    <elementProp name="SOAPAction" elementType="Header">
                      <stringProp name="Header.name">SOAPAction</stringProp>
                      <stringProp name="Header.value">&quot;/SendTransportBridgeMessageToTVGService/SendTransportBridgeMessageToTVGOp&quot;</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SOAP: Weight" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://schemas.vitalitytibcoservices.com/vts/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:genericTBMRequest&gt;&#xd;
         &lt;v1:messageType&gt;xml&lt;/v1:messageType&gt;&#xd;
         &lt;v1:destinationTopic&gt;${tibcoGDLQueue}&lt;/v1:destinationTopic&gt;&#xd;
		&lt;ns2:DeviceUpload  xmlns:ns2=&quot;http://schemas.discovery.co.za/vitality&quot;&gt;&#xd;
		&lt;ns2:header&gt;&#xd;
			&lt;ns2:user&gt;&#xd;
				&lt;entityNo&gt;${entityNo}&lt;/entityNo&gt;&#xd;
			&lt;/ns2:user&gt;&#xd;
			&#xd;
			&lt;ns2:uploadDate&gt;${dateToday}T11:23:33.176Z&lt;/ns2:uploadDate&gt;&#xd;
			&lt;ns2:sessionId&gt;${randomAlphaNumericString}-${randomAlphaNumericString}&lt;/ns2:sessionId&gt;&#xd;
			&lt;ns2:gdlSessionId&gt;${randomNumericString}&lt;/ns2:gdlSessionId&gt;&#xd;
			&lt;ns2:partnerSystem&gt;Apple&lt;/ns2:partnerSystem&gt;&#xd;
			&lt;ns2:verified&gt;false&lt;/ns2:verified&gt;&#xd;
			&lt;ns2:uploadCount&gt;0&lt;/ns2:uploadCount&gt;&#xd;
			&lt;ns2:tenantId&gt;${tenantVrzn}&lt;/ns2:tenantId&gt;&#xd;
			&lt;ns2:processingType&gt;REALTIME&lt;/ns2:processingType&gt;&#xd;
			&lt;ns2:rawUploadData&gt;NOT REQUIRED&lt;/ns2:rawUploadData&gt;&#xd;
		&lt;/ns2:header&gt;&#xd;
&#xd;
		&lt;ns2:device&gt;&#xd;
			&lt;manufacturer&gt;Apple&lt;/manufacturer&gt;&#xd;
			&lt;model&gt;iOS 13.0&lt;/model&gt;&#xd;
		&lt;/ns2:device&gt;&#xd;
&#xd;
		&lt;ns2:readings&gt;&#xd;
			&lt;startTime&gt;${dateToday}T00:00:00.000+03:00&lt;/startTime&gt;&#xd;
			&lt;endTime&gt;${dateTomorrow}T00:00:00.000+03:00&lt;/endTime&gt;&#xd;
			&lt;duration&gt;86400&lt;/duration&gt;&#xd;
			&lt;partnerSystemSource&gt;Apple Health&lt;/partnerSystemSource&gt;&#xd;
&#xd;
			&lt;readingId&gt;${randomNumericString}&lt;/readingId&gt;&#xd;
			&lt;partnerReadingId&gt;${randomAlphaNumericString}-${randomAlphaNumericString}&lt;/partnerReadingId&gt;&#xd;
			&lt;readingType&gt;UNKNOWN&lt;/readingType&gt;&#xd;
			&lt;dataCategory&gt;BIOMETRIC&lt;/dataCategory&gt;&#xd;
			&lt;integrity&gt;UNVERIFIED&lt;/integrity&gt;&#xd;
			&lt;isDuplicate&gt;0&lt;/isDuplicate&gt;&#xd;
			&lt;isValid&gt;1&lt;/isValid&gt;&#xd;
			&lt;isActive&gt;1&lt;/isActive&gt;&#xd;
			&lt;aggregationId&gt;${randomNumericString}&lt;/aggregationId&gt;&#xd;
			&lt;workout&gt;&#xd;
				&lt;partnerActivityType&gt;WEIGHT&lt;/partnerActivityType&gt;&#xd;
				&lt;heartRate/&gt;&#xd;
			&lt;/workout&gt;&#xd;
			&lt;healthData&gt;&#xd;
				&lt;weight&gt;&#xd;
				&lt;value&gt;${weightKg}&lt;/value&gt;&#xd;
				&lt;unitOfMeasurement&gt;KILOGRAMS&lt;/unitOfMeasurement&gt;&#xd;
				&lt;/weight&gt;&#xd;
			&lt;heartRate/&gt;&lt;/healthData&gt;&#xd;
		&lt;/ns2:readings&gt;&#xd;
		&lt;/ns2:DeviceUpload&gt;&#xd;
      &lt;/v1:genericTBMRequest&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip,deflate</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">text/xml;charset=UTF-8</stringProp>
                    </elementProp>
                    <elementProp name="SOAPAction" elementType="Header">
                      <stringProp name="Header.name">SOAPAction</stringProp>
                      <stringProp name="Header.value">&quot;/SendTransportBridgeMessageToTVGService/SendTransportBridgeMessageToTVGOp&quot;</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="FORMULA_VERSION should be 2" enabled="true">
              <boolProp name="TransactionController.parent">true</boolProp>
              <boolProp name="TransactionController.includeTimers">false</boolProp>
            </TransactionController>
            <hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Wait Until Processed" enabled="true">
                <stringProp name="WhileController.condition">${__groovy(vars.get(&quot;formulaVersion_1&quot;) != &quot;2&quot;,)}</stringProp>
              </WhileController>
              <hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="FORMULA VERSION" enabled="true">
                  <stringProp name="dataSource">DHDB</stringProp>
                  <stringProp name="query">SELECT FORMULA_VERSION 
FROM FORMULA_VERSION 
WHERE ENTITY_ID = ${entityNo}
</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="variableNames">formulaVersion</stringProp>
                </JDBCSampler>
                <hashTree/>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                  <stringProp name="IfController.condition">${__groovy(vars.get(&quot;formulaVersion_1&quot;) = &quot;1&quot;,)}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <boolProp name="IfController.useExpression">true</boolProp>
                </IfController>
                <hashTree>
                  <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
                    <intProp name="ActionProcessor.action">3</intProp>
                    <intProp name="ActionProcessor.target">0</intProp>
                    <stringProp name="ActionProcessor.duration">0</stringProp>
                  </TestAction>
                  <hashTree>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="50">2</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">1</intProp>
                      <stringProp name="Assertion.scope">variable</stringProp>
                      <stringProp name="Scope.variable">formulaVersion_1</stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                </hashTree>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="ACTIVITY_REGISTER: ITEM_PROCESSED = 1" enabled="true">
              <boolProp name="TransactionController.parent">true</boolProp>
              <boolProp name="TransactionController.includeTimers">false</boolProp>
            </TransactionController>
            <hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Wait Until Processed" enabled="true">
                <stringProp name="WhileController.condition">${__groovy(vars.get(&quot;activeCalorieProcessed_1&quot;) != &quot;1&quot;,)}</stringProp>
              </WhileController>
              <hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ACTIVITY REGISTER" enabled="true">
                  <stringProp name="dataSource">DHDB</stringProp>
                  <stringProp name="query">SELECT ITEM_PROCESSED 
FROM ACTIVITY_REGISTER
WHERE ACTIVITY_TYPE in (&apos;ACTIVE_CAL&apos;)  
AND MEMBER_ENTITY_NO = ${entityNo}
AND EVENT_DATE = &apos;${dateToday2}&apos;
ORDER BY EVENT_DATE DESC</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="variableNames">activeCalorieProcessed</stringProp>
                </JDBCSampler>
                <hashTree/>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                  <stringProp name="IfController.condition">${__groovy(vars.get(&quot;activeCalorieProcessed_1&quot;) = &quot;1&quot;,)}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <boolProp name="IfController.useExpression">true</boolProp>
                </IfController>
                <hashTree>
                  <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
                    <intProp name="ActionProcessor.action">3</intProp>
                    <intProp name="ActionProcessor.target">0</intProp>
                    <stringProp name="ActionProcessor.duration">0</stringProp>
                  </TestAction>
                  <hashTree>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="49">1</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">48</intProp>
                      <stringProp name="Assertion.scope">variable</stringProp>
                      <stringProp name="Scope.variable">activeCalorieProcessed_1</stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                </hashTree>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="ACTIVITY_REGISTER: PC4_EVENT_ID != NULL" enabled="false">
              <boolProp name="TransactionController.parent">true</boolProp>
              <boolProp name="TransactionController.includeTimers">false</boolProp>
            </TransactionController>
            <hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Wait Until Processed" enabled="true">
                <stringProp name="WhileController.condition">${__groovy(vars.get(&quot;PC4_EVENT_ID_1&quot;) = vars.get(&quot;PC4_EVENT_ID_1&quot;),)}</stringProp>
              </WhileController>
              <hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ACTIVITY REGISTER" enabled="true">
                  <stringProp name="dataSource">DHDB</stringProp>
                  <stringProp name="query">SELECT PC4_EVENT_ID
FROM ACTIVITY_REGISTER 
WHERE MEMBER_ENTITY_NO = ${entityNo}
AND PC4_EVENT_ID IS NOT NULL
AND EVENT_DATE = &apos;${dateToday2}&apos;</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="variableNames">PC4_EVENT_ID</stringProp>
                </JDBCSampler>
                <hashTree/>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                  <stringProp name="IfController.condition">${__groovy(vars.get(&quot;PC4_EVENT_ID_1&quot;) != &apos;0&apos;,)}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <boolProp name="IfController.useExpression">true</boolProp>
                </IfController>
                <hashTree>
                  <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
                    <intProp name="ActionProcessor.action">3</intProp>
                    <intProp name="ActionProcessor.target">0</intProp>
                    <stringProp name="ActionProcessor.duration">0</stringProp>
                  </TestAction>
                  <hashTree>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="48">0</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">5</intProp>
                      <stringProp name="Assertion.scope">variable</stringProp>
                      <stringProp name="Scope.variable">PC4_EVENT_ID_1</stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                </hashTree>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="PC4_EVENTS: DETAILED_CATEGORY_CODE = SWAW" enabled="true">
              <boolProp name="TransactionController.parent">true</boolProp>
              <boolProp name="TransactionController.includeTimers">false</boolProp>
            </TransactionController>
            <hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Wait Until Processed" enabled="true">
                <stringProp name="WhileController.condition">${__groovy(vars.get(&quot;eventCreated_1&quot;) != vars.get(&quot;mnemonic&quot;),)}</stringProp>
              </WhileController>
              <hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="PC4_EVENTS" enabled="true">
                  <stringProp name="dataSource">DHDB</stringProp>
                  <stringProp name="query">SELECT DETAILED_CATEGORY_CODE 
FROM PC4_EVENTS 
WHERE MEMBER_ENTITY_NO = ${entityNo}
AND EVENT_DATE = &apos;${dateToday2}&apos;
ORDER BY EVENT_DATE DESC, CREATED_AT DESC</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="variableNames">eventCreated</stringProp>
                </JDBCSampler>
                <hashTree/>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                  <stringProp name="IfController.condition">${__groovy(vars.get(&quot;eventCreated_1&quot;) = vars.get(&quot;mnemonic&quot;),)}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <boolProp name="IfController.useExpression">true</boolProp>
                </IfController>
                <hashTree>
                  <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
                    <intProp name="ActionProcessor.action">3</intProp>
                    <intProp name="ActionProcessor.target">0</intProp>
                    <stringProp name="ActionProcessor.duration">0</stringProp>
                  </TestAction>
                  <hashTree>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="-1300468476">${mnemonic}</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                      <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">1</intProp>
                      <stringProp name="Assertion.scope">variable</stringProp>
                      <stringProp name="Scope.variable">eventCreated_1</stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                </hashTree>
              </hashTree>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                <stringProp name="DurationAssertion.duration">2000</stringProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </DurationAssertion>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="VITALITY_EVENTS: Points awarded By Core" enabled="true">
              <boolProp name="TransactionController.parent">true</boolProp>
              <boolProp name="TransactionController.includeTimers">false</boolProp>
            </TransactionController>
            <hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Wait Until Processed" enabled="true">
                <stringProp name="WhileController.condition">${__groovy(vars.get(&quot;eventStatus_1&quot;) != &quot;L&quot;,)}</stringProp>
              </WhileController>
              <hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="VITALITY_EVENTS" enabled="true">
                  <stringProp name="dataSource">DHDB</stringProp>
                  <stringProp name="query">SELECT STATUS, CALCULATED_POINTS
FROM VITALITY_EVENT 
WHERE MEMBER_ENTITY_NO = ${entityNo}
AND EVENT_DATE_TIME = &apos;${dateToday2}&apos;
ORDER BY EVENT_DATE_TIME DESC, DATE_TIME_LAST_MODIFIED DESC</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="variableNames">eventStatus,pointsCalculated</stringProp>
                </JDBCSampler>
                <hashTree/>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                  <stringProp name="IfController.condition">${__groovy(vars.get(&quot;eventStatus_1&quot;) = &quot;L&quot;,)} || ${__groovy(vars.get(&quot;eventStatus_2&quot;) = &quot;L&quot;,)}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <boolProp name="IfController.useExpression">true</boolProp>
                </IfController>
                <hashTree>
                  <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
                    <intProp name="ActionProcessor.action">3</intProp>
                    <intProp name="ActionProcessor.target">0</intProp>
                    <stringProp name="ActionProcessor.duration">0</stringProp>
                  </TestAction>
                  <hashTree>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="-140538787">${caloriesPoints}</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                      <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">1</intProp>
                      <stringProp name="Assertion.scope">variable</stringProp>
                      <stringProp name="Scope.variable">pointsCalculated_1</stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                </hashTree>
              </hashTree>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                <stringProp name="DurationAssertion.duration">2000</stringProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </DurationAssertion>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="ENG_GOAL.EVENT_LOG: Points awarded By AR" enabled="false">
              <boolProp name="TransactionController.parent">true</boolProp>
              <boolProp name="TransactionController.includeTimers">false</boolProp>
            </TransactionController>
            <hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Wait Until Processed" enabled="true">
                <stringProp name="WhileController.condition">${__groovy(vars.get(&quot;eventStatusAR_1&quot;) != &quot;L&quot;,)}</stringProp>
              </WhileController>
              <hashTree>
                <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ENG_GOAL.EVENT_LOG" enabled="true">
                  <stringProp name="dataSource">AR_DB</stringProp>
                  <stringProp name="query">SELECT STATUS, POINTS
FROM ENG_GOAL.EVENT_LOG 
WHERE MEMBER_ID = ${entityNo}
AND EVENT_DATE = &apos;${dateToday2}&apos;
AND CAPTURE_DATE = &apos;${dateToday2}&apos;
ORDER BY EVENT_DATE DESC
</stringProp>
                  <stringProp name="queryArguments"></stringProp>
                  <stringProp name="queryArgumentsTypes"></stringProp>
                  <stringProp name="queryTimeout"></stringProp>
                  <stringProp name="queryType">Select Statement</stringProp>
                  <stringProp name="resultSetHandler">Store as String</stringProp>
                  <stringProp name="resultVariable"></stringProp>
                  <stringProp name="variableNames">eventStatusAR,pointsCalculatedAR</stringProp>
                </JDBCSampler>
                <hashTree/>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                  <stringProp name="IfController.condition">${__groovy(vars.get(&quot;eventStatusAR_1&quot;) = &quot;L&quot;,)} || ${__groovy(vars.get(&quot;eventStatusAR_2&quot;) = &quot;L&quot;,)}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <boolProp name="IfController.useExpression">true</boolProp>
                </IfController>
                <hashTree>
                  <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
                    <intProp name="ActionProcessor.action">3</intProp>
                    <intProp name="ActionProcessor.target">0</intProp>
                    <stringProp name="ActionProcessor.duration">0</stringProp>
                  </TestAction>
                  <hashTree>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="-140538787">${caloriesPoints}</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                      <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">1</intProp>
                      <stringProp name="Assertion.scope">variable</stringProp>
                      <stringProp name="Scope.variable">pointsCalculatedAR_1</stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                </hashTree>
              </hashTree>
              <DurationAssertion guiclass="DurationAssertionGui" testclass="DurationAssertion" testname="Duration Assertion" enabled="false">
                <stringProp name="DurationAssertion.duration">2000</stringProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </DurationAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="VOL" enabled="false"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="VOL-159: Weekly Lifestyle Goal EndPoint" enabled="false"/>
          <hashTree>
            <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${vapBase}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </ConfigTestElement>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="VOL: GET WLG Progress" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">vap/rest/vitality_one_goals/lifestyle/progress/1421784313</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract: physAct" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">physAct</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;challenge_type&quot; : &quot;P(.*)</stringProp>
                <stringProp name="RegexExtractor.template">$0$</stringProp>
                <stringProp name="RegexExtractor.default">physAct NOT FOUND</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract: lifeStyle" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">lifeStyle</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;challenge_type&quot; : &quot;L(.*)</stringProp>
                <stringProp name="RegexExtractor.template">$0$</stringProp>
                <stringProp name="RegexExtractor.default">lifeStyle NOT FOUND</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: PHYSICAL_ACTIVITY" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1695391557">&quot;challenge_type&quot; : &quot;PHYSICAL_ACTIVITY&quot;,</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">physAct</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: LIFESTYLE" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1668137433">&quot;challenge_type&quot; : &quot;LIFESTYLE&quot;,</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">lifeStyle</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="VOL: GET WLG Set Goal Active" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">vap/rest/vitality_one_goals/lifestyle/set_goal_active/1213357423/1421784313</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract: physAct" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">physAct</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;challenge_type&quot; : &quot;P(.*)</stringProp>
                <stringProp name="RegexExtractor.template">$0$</stringProp>
                <stringProp name="RegexExtractor.default">physAct NOT FOUND</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract: lifeStyle" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">lifeStyle</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;challenge_type&quot; : &quot;L(.*)</stringProp>
                <stringProp name="RegexExtractor.template">$0$</stringProp>
                <stringProp name="RegexExtractor.default">lifeStyle NOT FOUND</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: PHYSICAL_ACTIVITY" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1695391557">&quot;challenge_type&quot; : &quot;PHYSICAL_ACTIVITY&quot;,</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">physAct</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: LIFESTYLE" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1668137433">&quot;challenge_type&quot; : &quot;LIFESTYLE&quot;,</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">lifeStyle</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="VOL-159: Weekly Lifestyle Goal EndPoint" enabled="false"/>
          <hashTree>
            <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${vapBase}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </ConfigTestElement>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="VOL: GET WLG Progress" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">vap/rest/vitality_one_goals/lifestyle/progress/1421784313</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract: physAct" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">physAct</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;challenge_type&quot; : &quot;P(.*)</stringProp>
                <stringProp name="RegexExtractor.template">$0$</stringProp>
                <stringProp name="RegexExtractor.default">physAct NOT FOUND</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract: lifeStyle" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">lifeStyle</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;challenge_type&quot; : &quot;L(.*)</stringProp>
                <stringProp name="RegexExtractor.template">$0$</stringProp>
                <stringProp name="RegexExtractor.default">lifeStyle NOT FOUND</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: PHYSICAL_ACTIVITY" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1695391557">&quot;challenge_type&quot; : &quot;PHYSICAL_ACTIVITY&quot;,</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">physAct</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: LIFESTYLE" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1668137433">&quot;challenge_type&quot; : &quot;LIFESTYLE&quot;,</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">lifeStyle</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="VOL: GET WLG Set Goal Active" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">vap/rest/vitality_one_goals/lifestyle/set_goal_active/1213357423/1421784313</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract: physAct" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">physAct</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;challenge_type&quot; : &quot;P(.*)</stringProp>
                <stringProp name="RegexExtractor.template">$0$</stringProp>
                <stringProp name="RegexExtractor.default">physAct NOT FOUND</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract: lifeStyle" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">lifeStyle</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;challenge_type&quot; : &quot;L(.*)</stringProp>
                <stringProp name="RegexExtractor.template">$0$</stringProp>
                <stringProp name="RegexExtractor.default">lifeStyle NOT FOUND</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: PHYSICAL_ACTIVITY" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1695391557">&quot;challenge_type&quot; : &quot;PHYSICAL_ACTIVITY&quot;,</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">physAct</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: LIFESTYLE" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1668137433">&quot;challenge_type&quot; : &quot;LIFESTYLE&quot;,</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">lifeStyle</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="VOL-503 ESB - activity_register - award new events for Vitality One" enabled="false"/>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Setting Up Test User: Not in ACTIVITY_REGISTER" enabled="true">
              <stringProp name="dataSource">DHDB</stringProp>
              <stringProp name="query">SELECT cm.entity_no
FROM VSA_ADMIN.A_MEMBER m, vsa_admin.a_employer e, vsa_admin.a_entity_cross_map cm, vsa_admin.a_ent_ext_id_cross_map ecm, vitality_policy_link vpl
WHERE m.curnt_emp_no=e.emp_no
AND e.emp_name in (&apos;${VOL_EMPLOYER}&apos;)
AND cm.ref1 = m.mem_no
AND vpl.initiating_policy_no = m.mem_no
AND ecm.vsa_ent_no = m.mem_no
AND NOT EXISTS (SELECT * FROM ACTIVITY_REGISTER ar WHERE ar.member_entity_no = cm.entity_no)</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
              <stringProp name="queryType">Select Statement</stringProp>
              <stringProp name="resultSetHandler">Store as String</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="variableNames">volId</stringProp>
            </JDBCSampler>
            <hashTree/>
            <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${povBase}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">tibcoservices/sendTransportBridgeMessageToTVGService</stringProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout">30000</stringProp>
              <stringProp name="HTTPSampler.response_timeout">300000</stringProp>
            </ConfigTestElement>
            <hashTree/>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Meditation" enabled="true"/>
            <hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Meditation: DM5, HMDM" enabled="true"/>
              <hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Meditation Accumulated Value: 299, No Events Should be processed" enabled="true"/>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Meditation Accumulated Value: 299" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://schemas.vitalitytibcoservices.com/vts/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:genericTBMRequest&gt;&#xd;
         &lt;v1:messageType&gt;xml&lt;/v1:messageType&gt;&#xd;
         &lt;v1:destinationTopic&gt;${tibcoGDLQueue}&lt;/v1:destinationTopic&gt;&#xd;
	&lt;ns2:DeviceUpload xmlns:ns2=&quot;http://schemas.discovery.co.za/vitality&quot;&gt;&#xd;
   		&lt;ns2:header&gt;&#xd;
      	&lt;ns2:user&gt;&#xd;
         		&lt;entityNo&gt;${volId_1}&lt;/entityNo&gt;&#xd;
      &lt;/ns2:user&gt;&#xd;
      &lt;ns2:uploadDate&gt;${dateToday}T14:16:30.936Z&lt;/ns2:uploadDate&gt;&#xd;
      &lt;ns2:sessionId&gt;${randomAlphaNumericString}-${randomAlphaNumericString}&lt;/ns2:sessionId&gt;&#xd;
      &lt;ns2:gdlSessionId&gt;${randomNumericString}&lt;/ns2:gdlSessionId&gt;&#xd;
      &lt;ns2:partnerSystem&gt;Google&lt;/ns2:partnerSystem&gt;&#xd;
      &lt;ns2:verified&gt;true&lt;/ns2:verified&gt;&#xd;
      &lt;ns2:uploadCount&gt;0&lt;/ns2:uploadCount&gt;&#xd;
      &lt;ns2:tenantId&gt;${tenant_VOL}&lt;/ns2:tenantId&gt;&#xd;
      &lt;ns2:processingType&gt;REALTIME&lt;/ns2:processingType&gt;&#xd;
      &lt;ns2:rawUploadData&gt;NOT REQUIRED&lt;/ns2:rawUploadData&gt;&#xd;
   &lt;/ns2:header&gt;&#xd;
   &lt;ns2:device&gt;&#xd;
      &lt;ns2:manufacturer&gt;headspace&lt;/ns2:manufacturer&gt;&#xd;
   &lt;/ns2:device&gt;&#xd;
   &lt;ns2:readings&gt;&#xd;
      &lt;startTime&gt;${dateToday}T00:00:00.000+03:00&lt;/startTime&gt;&#xd;
      &lt;endTime&gt;${dateTomorrow}T00:00:00.000+03:00&lt;/endTime&gt;&#xd;
      &lt;duration&gt;86400&lt;/duration&gt;&#xd;
      &lt;activeDuration&gt;299&lt;/activeDuration&gt;&#xd;
      &lt;description&gt;raw:com.google.activity.segment:com.getsomeheadspace.android:&lt;/description&gt;&#xd;
      &lt;partnerSystemSource&gt;Google Fit&lt;/partnerSystemSource&gt;&#xd;
      &lt;manufacturer&gt;headspace&lt;/manufacturer&gt;&#xd;
      &lt;readingId&gt;${randomNumericString}&lt;/readingId&gt;&#xd;
      &lt;partnerReadingId&gt;${randomAlphaNumericString}-${randomAlphaNumericString}&lt;/partnerReadingId&gt;&#xd;
      &lt;readingType&gt;MEDITATION&lt;/readingType&gt;&#xd;
      &lt;dataCategory&gt;MENTAL_WELLBEING&lt;/dataCategory&gt;&#xd;
      &lt;integrity&gt;VERIFIED&lt;/integrity&gt;&#xd;
      &lt;isDuplicate&gt;0&lt;/isDuplicate&gt;&#xd;
      &lt;isValid&gt;1&lt;/isValid&gt;&#xd;
      &lt;isActive&gt;1&lt;/isActive&gt;&#xd;
      &lt;aggregationId&gt;${randomNumericString}&lt;/aggregationId&gt;&#xd;
      &lt;healthData&gt;&#xd;
         &lt;heartRate /&gt;&#xd;
      &lt;/healthData&gt;&#xd;
      &lt;workout&gt;&#xd;
         &lt;partnerActivityType&gt;MEDITATION&lt;/partnerActivityType&gt;&#xd;
         &lt;heartRate /&gt;&#xd;
      &lt;/workout&gt;&#xd;
   &lt;/ns2:readings&gt;&#xd;
&lt;/ns2:DeviceUpload&gt;&#xd;
 &lt;/v1:genericTBMRequest&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path"></stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">Java</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Accept-Encoding" elementType="Header">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value">gzip,deflate</stringProp>
                        </elementProp>
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">text/xml;charset=UTF-8</stringProp>
                        </elementProp>
                        <elementProp name="SOAPAction" elementType="Header">
                          <stringProp name="Header.name">SOAPAction</stringProp>
                          <stringProp name="Header.value">&quot;/SendTransportBridgeMessageToTVGService/SendTransportBridgeMessageToTVGOp&quot;</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="MEDITATION processed by ESB" enabled="true">
                    <boolProp name="TransactionController.parent">true</boolProp>
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                  </TransactionController>
                  <hashTree>
                    <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Wait Until Processed" enabled="true">
                      <stringProp name="WhileController.condition">${__groovy(vars.get(&quot;itemProcessed_1&quot;) != &quot;1&quot;,)}</stringProp>
                    </WhileController>
                    <hashTree>
                      <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ACTIVITY REGISTER" enabled="true">
                        <stringProp name="dataSource">DHDB</stringProp>
                        <stringProp name="query">SELECT ITEM_PROCESSED
FROM ACTIVITY_REGISTER
WHERE ACTIVITY_TYPE in (&apos;MEDITATION&apos;)  
AND MEMBER_ENTITY_NO = ${volId_1}
AND EVENT_DATE = &apos;${dateToday2}&apos;
ORDER BY DATE_TIME_LAST_MODIFIED ASC</stringProp>
                        <stringProp name="queryArguments"></stringProp>
                        <stringProp name="queryArgumentsTypes"></stringProp>
                        <stringProp name="queryTimeout"></stringProp>
                        <stringProp name="queryType">Select Statement</stringProp>
                        <stringProp name="resultSetHandler">Store as String</stringProp>
                        <stringProp name="resultVariable"></stringProp>
                        <stringProp name="variableNames">itemProcessed</stringProp>
                      </JDBCSampler>
                      <hashTree/>
                      <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                        <stringProp name="IfController.condition">${__groovy(vars.get(&quot;itemProcessed_1&quot;) = &quot;1&quot;,)}</stringProp>
                        <boolProp name="IfController.evaluateAll">false</boolProp>
                        <boolProp name="IfController.useExpression">true</boolProp>
                      </IfController>
                      <hashTree>
                        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
                          <intProp name="ActionProcessor.action">3</intProp>
                          <intProp name="ActionProcessor.target">0</intProp>
                          <stringProp name="ActionProcessor.duration">0</stringProp>
                        </TestAction>
                        <hashTree>
                          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                            <collectionProp name="Asserion.test_strings">
                              <stringProp name="49">1</stringProp>
                            </collectionProp>
                            <stringProp name="Assertion.custom_message"></stringProp>
                            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                            <boolProp name="Assertion.assume_success">false</boolProp>
                            <intProp name="Assertion.test_type">1</intProp>
                            <stringProp name="Assertion.scope">variable</stringProp>
                            <stringProp name="Scope.variable">itemProcessed_1</stringProp>
                          </ResponseAssertion>
                          <hashTree/>
                        </hashTree>
                      </hashTree>
                    </hashTree>
                  </hashTree>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ACTIVITY REGISTER: Verify that PC4_EVENT = 0" enabled="true">
                    <stringProp name="dataSource">DHDB</stringProp>
                    <stringProp name="query">SELECT PC4_EVENT_ID 
FROM ACTIVITY_REGISTER
WHERE ACTIVITY_TYPE in (&apos;MEDITATION&apos;)  
AND MEMBER_ENTITY_NO = ${volId_1}
AND EVENT_DATE = &apos;${dateToday2}&apos;
ORDER BY DATE_TIME_LAST_MODIFIED ASC</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="queryType">Select Statement</stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="variableNames">pc4Event</stringProp>
                  </JDBCSampler>
                  <hashTree>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="48">0</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">1</intProp>
                      <stringProp name="Assertion.scope">variable</stringProp>
                      <stringProp name="Scope.variable">pc4Event_1</stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Meditation Accumulated Value: 300, DM5 should be created." enabled="true"/>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Meditation Accumulated Value: 300" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://schemas.vitalitytibcoservices.com/vts/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:genericTBMRequest&gt;&#xd;
         &lt;v1:messageType&gt;xml&lt;/v1:messageType&gt;&#xd;
         &lt;v1:destinationTopic&gt;${tibcoGDLQueue}&lt;/v1:destinationTopic&gt;&#xd;
	&lt;ns2:DeviceUpload xmlns:ns2=&quot;http://schemas.discovery.co.za/vitality&quot;&gt;&#xd;
   		&lt;ns2:header&gt;&#xd;
      	&lt;ns2:user&gt;&#xd;
         		&lt;entityNo&gt;${volId_1}&lt;/entityNo&gt;&#xd;
      &lt;/ns2:user&gt;&#xd;
      &lt;ns2:uploadDate&gt;${dateToday}T14:16:30.936Z&lt;/ns2:uploadDate&gt;&#xd;
      &lt;ns2:sessionId&gt;${randomAlphaNumericString}-${randomAlphaNumericString}&lt;/ns2:sessionId&gt;&#xd;
      &lt;ns2:gdlSessionId&gt;${randomNumericString}&lt;/ns2:gdlSessionId&gt;&#xd;
      &lt;ns2:partnerSystem&gt;Google&lt;/ns2:partnerSystem&gt;&#xd;
      &lt;ns2:verified&gt;true&lt;/ns2:verified&gt;&#xd;
      &lt;ns2:uploadCount&gt;0&lt;/ns2:uploadCount&gt;&#xd;
      &lt;ns2:tenantId&gt;${tenant_VOL}&lt;/ns2:tenantId&gt;&#xd;
      &lt;ns2:processingType&gt;REALTIME&lt;/ns2:processingType&gt;&#xd;
      &lt;ns2:rawUploadData&gt;NOT REQUIRED&lt;/ns2:rawUploadData&gt;&#xd;
   &lt;/ns2:header&gt;&#xd;
   &lt;ns2:device&gt;&#xd;
      &lt;ns2:manufacturer&gt;headspace&lt;/ns2:manufacturer&gt;&#xd;
   &lt;/ns2:device&gt;&#xd;
   &lt;ns2:readings&gt;&#xd;
      &lt;startTime&gt;${dateToday}T00:00:00.000+03:00&lt;/startTime&gt;&#xd;
      &lt;endTime&gt;${dateTomorrow}T00:00:00.000+03:00&lt;/endTime&gt;&#xd;
      &lt;duration&gt;86400&lt;/duration&gt;&#xd;
      &lt;activeDuration&gt;300&lt;/activeDuration&gt;&#xd;
      &lt;description&gt;raw:com.google.activity.segment:com.getsomeheadspace.android:&lt;/description&gt;&#xd;
      &lt;partnerSystemSource&gt;Google Fit&lt;/partnerSystemSource&gt;&#xd;
      &lt;manufacturer&gt;headspace&lt;/manufacturer&gt;&#xd;
      &lt;readingId&gt;${randomNumericString}&lt;/readingId&gt;&#xd;
      &lt;partnerReadingId&gt;${randomAlphaNumericString}-${randomAlphaNumericString}&lt;/partnerReadingId&gt;&#xd;
      &lt;readingType&gt;MEDITATION&lt;/readingType&gt;&#xd;
      &lt;dataCategory&gt;MENTAL_WELLBEING&lt;/dataCategory&gt;&#xd;
      &lt;integrity&gt;VERIFIED&lt;/integrity&gt;&#xd;
      &lt;isDuplicate&gt;0&lt;/isDuplicate&gt;&#xd;
      &lt;isValid&gt;1&lt;/isValid&gt;&#xd;
      &lt;isActive&gt;1&lt;/isActive&gt;&#xd;
      &lt;aggregationId&gt;${randomNumericString}&lt;/aggregationId&gt;&#xd;
      &lt;healthData&gt;&#xd;
         &lt;heartRate /&gt;&#xd;
      &lt;/healthData&gt;&#xd;
      &lt;workout&gt;&#xd;
         &lt;partnerActivityType&gt;MEDITATION&lt;/partnerActivityType&gt;&#xd;
         &lt;heartRate /&gt;&#xd;
      &lt;/workout&gt;&#xd;
   &lt;/ns2:readings&gt;&#xd;
&lt;/ns2:DeviceUpload&gt;&#xd;
 &lt;/v1:genericTBMRequest&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path"></stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">Java</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Accept-Encoding" elementType="Header">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value">gzip,deflate</stringProp>
                        </elementProp>
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">text/xml;charset=UTF-8</stringProp>
                        </elementProp>
                        <elementProp name="SOAPAction" elementType="Header">
                          <stringProp name="Header.name">SOAPAction</stringProp>
                          <stringProp name="Header.value">&quot;/SendTransportBridgeMessageToTVGService/SendTransportBridgeMessageToTVGOp&quot;</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="MEDITATION processed by ESB" enabled="true">
                    <boolProp name="TransactionController.parent">true</boolProp>
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                  </TransactionController>
                  <hashTree>
                    <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Wait Until Processed" enabled="true">
                      <stringProp name="WhileController.condition">${__groovy(vars.get(&quot;itemProcessed_1&quot;) != &quot;1&quot;,)}</stringProp>
                    </WhileController>
                    <hashTree>
                      <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ACTIVITY REGISTER" enabled="true">
                        <stringProp name="dataSource">DHDB</stringProp>
                        <stringProp name="query">SELECT ITEM_PROCESSED
FROM ACTIVITY_REGISTER
WHERE ACTIVITY_TYPE in (&apos;MEDITATION&apos;)  
AND MEMBER_ENTITY_NO = ${volId_1}
AND EVENT_DATE = &apos;${dateToday2}&apos;
ORDER BY DATE_TIME_LAST_MODIFIED DESC</stringProp>
                        <stringProp name="queryArguments"></stringProp>
                        <stringProp name="queryArgumentsTypes"></stringProp>
                        <stringProp name="queryTimeout"></stringProp>
                        <stringProp name="queryType">Select Statement</stringProp>
                        <stringProp name="resultSetHandler">Store as String</stringProp>
                        <stringProp name="resultVariable"></stringProp>
                        <stringProp name="variableNames">itemProcessed</stringProp>
                      </JDBCSampler>
                      <hashTree/>
                      <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                        <stringProp name="IfController.condition">${__groovy(vars.get(&quot;itemProcessed_1&quot;) = &quot;1&quot;,)}</stringProp>
                        <boolProp name="IfController.evaluateAll">false</boolProp>
                        <boolProp name="IfController.useExpression">true</boolProp>
                      </IfController>
                      <hashTree>
                        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
                          <intProp name="ActionProcessor.action">3</intProp>
                          <intProp name="ActionProcessor.target">0</intProp>
                          <stringProp name="ActionProcessor.duration">0</stringProp>
                        </TestAction>
                        <hashTree>
                          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                            <collectionProp name="Asserion.test_strings">
                              <stringProp name="49">1</stringProp>
                            </collectionProp>
                            <stringProp name="Assertion.custom_message"></stringProp>
                            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                            <boolProp name="Assertion.assume_success">false</boolProp>
                            <intProp name="Assertion.test_type">1</intProp>
                            <stringProp name="Assertion.scope">variable</stringProp>
                            <stringProp name="Scope.variable">itemProcessed_1</stringProp>
                          </ResponseAssertion>
                          <hashTree/>
                        </hashTree>
                      </hashTree>
                    </hashTree>
                  </hashTree>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ACTIVITY REGISTER: Verify that PC4_EVENT != 0" enabled="true">
                    <stringProp name="dataSource">DHDB</stringProp>
                    <stringProp name="query">SELECT PC4_EVENT_ID 
FROM ACTIVITY_REGISTER
WHERE ACTIVITY_TYPE in (&apos;MEDITATION&apos;)  
AND MEMBER_ENTITY_NO = ${volId_1}
AND EVENT_DATE = &apos;${dateToday2}&apos;
ORDER BY DATE_TIME_LAST_MODIFIED DESC</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="queryType">Select Statement</stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="variableNames">pc4Event</stringProp>
                  </JDBCSampler>
                  <hashTree>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="48">0</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">5</intProp>
                      <stringProp name="Assertion.scope">variable</stringProp>
                      <stringProp name="Scope.variable">pc4Event_1</stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="PC4_EVENTS: Event created" enabled="true">
                    <boolProp name="TransactionController.parent">true</boolProp>
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                  </TransactionController>
                  <hashTree>
                    <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Wait Until Processed" enabled="true">
                      <stringProp name="WhileController.condition">${__groovy(vars.get(&quot;eventProcessed_1&quot;) != &quot;1&quot;,)}</stringProp>
                    </WhileController>
                    <hashTree>
                      <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="PC4_EVENTS: event successfully processed" enabled="true">
                        <stringProp name="dataSource">DHDB</stringProp>
                        <stringProp name="query">SELECT EVENT_SUCCESSFULLY_PROCESSED 
FROM PC4_EVENTS 
WHERE MEMBER_ENTITY_NO = ${volId_1}
AND EVENT_DATE = &apos;${dateToday2}&apos;
ORDER BY CREATED_AT DESC</stringProp>
                        <stringProp name="queryArguments"></stringProp>
                        <stringProp name="queryArgumentsTypes"></stringProp>
                        <stringProp name="queryTimeout"></stringProp>
                        <stringProp name="queryType">Select Statement</stringProp>
                        <stringProp name="resultSetHandler">Store as String</stringProp>
                        <stringProp name="resultVariable"></stringProp>
                        <stringProp name="variableNames">eventProcessed</stringProp>
                      </JDBCSampler>
                      <hashTree/>
                      <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                        <stringProp name="IfController.condition">${__groovy(vars.get(&quot;eventProcessed_1&quot;) = &quot;1&quot;,)}</stringProp>
                        <boolProp name="IfController.evaluateAll">false</boolProp>
                        <boolProp name="IfController.useExpression">true</boolProp>
                      </IfController>
                      <hashTree>
                        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
                          <intProp name="ActionProcessor.action">3</intProp>
                          <intProp name="ActionProcessor.target">0</intProp>
                          <stringProp name="ActionProcessor.duration">0</stringProp>
                        </TestAction>
                        <hashTree>
                          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                            <collectionProp name="Asserion.test_strings">
                              <stringProp name="49">1</stringProp>
                            </collectionProp>
                            <stringProp name="Assertion.custom_message"></stringProp>
                            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                            <boolProp name="Assertion.assume_success">false</boolProp>
                            <intProp name="Assertion.test_type">1</intProp>
                            <stringProp name="Assertion.scope">variable</stringProp>
                            <stringProp name="Scope.variable">eventProcessed_1</stringProp>
                          </ResponseAssertion>
                          <hashTree/>
                        </hashTree>
                      </hashTree>
                    </hashTree>
                  </hashTree>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="PC4_EVENTS: Mnemonic = DM5" enabled="true">
                    <stringProp name="dataSource">DHDB</stringProp>
                    <stringProp name="query">SELECT DETAILED_CATEGORY_CODE 
FROM PC4_EVENTS 
WHERE MEMBER_ENTITY_NO = ${volId_1}
AND EVENT_DATE = &apos;${dateToday2}&apos;
ORDER BY CREATED_AT DESC</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="queryType">Select Statement</stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="variableNames">mnemonic</stringProp>
                  </JDBCSampler>
                  <hashTree>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="67788">DM5</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">1</intProp>
                      <stringProp name="Assertion.scope">variable</stringProp>
                      <stringProp name="Scope.variable">mnemonic_1</stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Meditation Accumulated Value: 599, DM5 should be created." enabled="true"/>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Meditation Accumulated Value: 599" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://schemas.vitalitytibcoservices.com/vts/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:genericTBMRequest&gt;&#xd;
         &lt;v1:messageType&gt;xml&lt;/v1:messageType&gt;&#xd;
         &lt;v1:destinationTopic&gt;${tibcoGDLQueue}&lt;/v1:destinationTopic&gt;&#xd;
	&lt;ns2:DeviceUpload xmlns:ns2=&quot;http://schemas.discovery.co.za/vitality&quot;&gt;&#xd;
   		&lt;ns2:header&gt;&#xd;
      	&lt;ns2:user&gt;&#xd;
         		&lt;entityNo&gt;${volId_1}&lt;/entityNo&gt;&#xd;
      &lt;/ns2:user&gt;&#xd;
      &lt;ns2:uploadDate&gt;${dateToday}T14:16:30.936Z&lt;/ns2:uploadDate&gt;&#xd;
      &lt;ns2:sessionId&gt;${randomAlphaNumericString}-${randomAlphaNumericString}&lt;/ns2:sessionId&gt;&#xd;
      &lt;ns2:gdlSessionId&gt;${randomNumericString}&lt;/ns2:gdlSessionId&gt;&#xd;
      &lt;ns2:partnerSystem&gt;Google&lt;/ns2:partnerSystem&gt;&#xd;
      &lt;ns2:verified&gt;true&lt;/ns2:verified&gt;&#xd;
      &lt;ns2:uploadCount&gt;0&lt;/ns2:uploadCount&gt;&#xd;
      &lt;ns2:tenantId&gt;${tenant_VOL}&lt;/ns2:tenantId&gt;&#xd;
      &lt;ns2:processingType&gt;REALTIME&lt;/ns2:processingType&gt;&#xd;
      &lt;ns2:rawUploadData&gt;NOT REQUIRED&lt;/ns2:rawUploadData&gt;&#xd;
   &lt;/ns2:header&gt;&#xd;
   &lt;ns2:device&gt;&#xd;
      &lt;ns2:manufacturer&gt;headspace&lt;/ns2:manufacturer&gt;&#xd;
   &lt;/ns2:device&gt;&#xd;
   &lt;ns2:readings&gt;&#xd;
      &lt;startTime&gt;${dateToday}T00:00:00.000+03:00&lt;/startTime&gt;&#xd;
      &lt;endTime&gt;${dateTomorrow}T00:00:00.000+03:00&lt;/endTime&gt;&#xd;
      &lt;duration&gt;86400&lt;/duration&gt;&#xd;
      &lt;activeDuration&gt;599&lt;/activeDuration&gt;&#xd;
      &lt;description&gt;raw:com.google.activity.segment:com.getsomeheadspace.android:&lt;/description&gt;&#xd;
      &lt;partnerSystemSource&gt;Google Fit&lt;/partnerSystemSource&gt;&#xd;
      &lt;manufacturer&gt;headspace&lt;/manufacturer&gt;&#xd;
      &lt;readingId&gt;${randomNumericString}&lt;/readingId&gt;&#xd;
      &lt;partnerReadingId&gt;${randomAlphaNumericString}-${randomAlphaNumericString}&lt;/partnerReadingId&gt;&#xd;
      &lt;readingType&gt;MEDITATION&lt;/readingType&gt;&#xd;
      &lt;dataCategory&gt;MENTAL_WELLBEING&lt;/dataCategory&gt;&#xd;
      &lt;integrity&gt;VERIFIED&lt;/integrity&gt;&#xd;
      &lt;isDuplicate&gt;0&lt;/isDuplicate&gt;&#xd;
      &lt;isValid&gt;1&lt;/isValid&gt;&#xd;
      &lt;isActive&gt;1&lt;/isActive&gt;&#xd;
      &lt;aggregationId&gt;${randomNumericString}&lt;/aggregationId&gt;&#xd;
      &lt;healthData&gt;&#xd;
         &lt;heartRate /&gt;&#xd;
      &lt;/healthData&gt;&#xd;
      &lt;workout&gt;&#xd;
         &lt;partnerActivityType&gt;MEDITATION&lt;/partnerActivityType&gt;&#xd;
         &lt;heartRate /&gt;&#xd;
      &lt;/workout&gt;&#xd;
   &lt;/ns2:readings&gt;&#xd;
&lt;/ns2:DeviceUpload&gt;&#xd;
 &lt;/v1:genericTBMRequest&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path"></stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">Java</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Accept-Encoding" elementType="Header">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value">gzip,deflate</stringProp>
                        </elementProp>
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">text/xml;charset=UTF-8</stringProp>
                        </elementProp>
                        <elementProp name="SOAPAction" elementType="Header">
                          <stringProp name="Header.name">SOAPAction</stringProp>
                          <stringProp name="Header.value">&quot;/SendTransportBridgeMessageToTVGService/SendTransportBridgeMessageToTVGOp&quot;</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="MEDITATION processed by ESB" enabled="true">
                    <boolProp name="TransactionController.parent">true</boolProp>
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                  </TransactionController>
                  <hashTree>
                    <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Wait Until Processed" enabled="true">
                      <stringProp name="WhileController.condition">${__groovy(vars.get(&quot;itemProcessed_1&quot;) != &quot;1&quot;,)}</stringProp>
                    </WhileController>
                    <hashTree>
                      <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ACTIVITY REGISTER" enabled="true">
                        <stringProp name="dataSource">DHDB</stringProp>
                        <stringProp name="query">SELECT ITEM_PROCESSED
FROM ACTIVITY_REGISTER
WHERE ACTIVITY_TYPE in (&apos;MEDITATION&apos;)  
AND MEMBER_ENTITY_NO = ${volId_1}
AND EVENT_DATE = &apos;${dateToday2}&apos;
ORDER BY EVENT_DATE DESC</stringProp>
                        <stringProp name="queryArguments"></stringProp>
                        <stringProp name="queryArgumentsTypes"></stringProp>
                        <stringProp name="queryTimeout"></stringProp>
                        <stringProp name="queryType">Select Statement</stringProp>
                        <stringProp name="resultSetHandler">Store as String</stringProp>
                        <stringProp name="resultVariable"></stringProp>
                        <stringProp name="variableNames">itemProcessed</stringProp>
                      </JDBCSampler>
                      <hashTree/>
                      <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                        <stringProp name="IfController.condition">${__groovy(vars.get(&quot;itemProcessed_1&quot;) = &quot;1&quot;,)}</stringProp>
                        <boolProp name="IfController.evaluateAll">false</boolProp>
                        <boolProp name="IfController.useExpression">true</boolProp>
                      </IfController>
                      <hashTree>
                        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
                          <intProp name="ActionProcessor.action">3</intProp>
                          <intProp name="ActionProcessor.target">0</intProp>
                          <stringProp name="ActionProcessor.duration">0</stringProp>
                        </TestAction>
                        <hashTree>
                          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                            <collectionProp name="Asserion.test_strings">
                              <stringProp name="49">1</stringProp>
                            </collectionProp>
                            <stringProp name="Assertion.custom_message"></stringProp>
                            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                            <boolProp name="Assertion.assume_success">false</boolProp>
                            <intProp name="Assertion.test_type">1</intProp>
                            <stringProp name="Assertion.scope">variable</stringProp>
                            <stringProp name="Scope.variable">itemProcessed_1</stringProp>
                          </ResponseAssertion>
                          <hashTree/>
                        </hashTree>
                      </hashTree>
                    </hashTree>
                  </hashTree>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ACTIVITY REGISTER: Verify that PC4_EVENT != 0" enabled="true">
                    <stringProp name="dataSource">DHDB</stringProp>
                    <stringProp name="query">SELECT PC4_EVENT_ID 
FROM ACTIVITY_REGISTER
WHERE ACTIVITY_TYPE in (&apos;MEDITATION&apos;)  
AND MEMBER_ENTITY_NO = ${volId_1}
AND EVENT_DATE = &apos;${dateToday2}&apos;
ORDER BY DATE_TIME_LAST_MODIFIED DESC</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="queryType">Select Statement</stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="variableNames">pc4Event</stringProp>
                  </JDBCSampler>
                  <hashTree>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="48">0</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">5</intProp>
                      <stringProp name="Assertion.scope">variable</stringProp>
                      <stringProp name="Scope.variable">pc4Event_1</stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="PC4_EVENTS: Event created" enabled="true">
                    <boolProp name="TransactionController.parent">true</boolProp>
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                  </TransactionController>
                  <hashTree>
                    <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Wait Until Processed" enabled="true">
                      <stringProp name="WhileController.condition">${__groovy(vars.get(&quot;eventProcessed_1&quot;) != &quot;1&quot;,)}</stringProp>
                    </WhileController>
                    <hashTree>
                      <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="PC4_EVENTS: event successfully processed" enabled="true">
                        <stringProp name="dataSource">DHDB</stringProp>
                        <stringProp name="query">SELECT EVENT_SUCCESSFULLY_PROCESSED 
FROM PC4_EVENTS 
WHERE MEMBER_ENTITY_NO = ${volId_1}
AND EVENT_DATE = &apos;${dateToday2}&apos;
ORDER BY CREATED_AT DESC</stringProp>
                        <stringProp name="queryArguments"></stringProp>
                        <stringProp name="queryArgumentsTypes"></stringProp>
                        <stringProp name="queryTimeout"></stringProp>
                        <stringProp name="queryType">Select Statement</stringProp>
                        <stringProp name="resultSetHandler">Store as String</stringProp>
                        <stringProp name="resultVariable"></stringProp>
                        <stringProp name="variableNames">eventProcessed</stringProp>
                      </JDBCSampler>
                      <hashTree/>
                      <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                        <stringProp name="IfController.condition">${__groovy(vars.get(&quot;eventProcessed_1&quot;) = &quot;1&quot;,)}</stringProp>
                        <boolProp name="IfController.evaluateAll">false</boolProp>
                        <boolProp name="IfController.useExpression">true</boolProp>
                      </IfController>
                      <hashTree>
                        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
                          <intProp name="ActionProcessor.action">3</intProp>
                          <intProp name="ActionProcessor.target">0</intProp>
                          <stringProp name="ActionProcessor.duration">0</stringProp>
                        </TestAction>
                        <hashTree>
                          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                            <collectionProp name="Asserion.test_strings">
                              <stringProp name="49">1</stringProp>
                            </collectionProp>
                            <stringProp name="Assertion.custom_message"></stringProp>
                            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                            <boolProp name="Assertion.assume_success">false</boolProp>
                            <intProp name="Assertion.test_type">1</intProp>
                            <stringProp name="Assertion.scope">variable</stringProp>
                            <stringProp name="Scope.variable">eventProcessed_1</stringProp>
                          </ResponseAssertion>
                          <hashTree/>
                        </hashTree>
                      </hashTree>
                    </hashTree>
                  </hashTree>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="PC4_EVENTS: Mnemonic = DM5" enabled="true">
                    <stringProp name="dataSource">DHDB</stringProp>
                    <stringProp name="query">SELECT DETAILED_CATEGORY_CODE 
FROM PC4_EVENTS 
WHERE MEMBER_ENTITY_NO = ${volId_1}
AND EVENT_DATE = &apos;${dateToday2}&apos;
ORDER BY CREATED_AT DESC</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="queryType">Select Statement</stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="variableNames">mnemonic</stringProp>
                  </JDBCSampler>
                  <hashTree>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="67788">DM5</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">1</intProp>
                      <stringProp name="Assertion.scope">variable</stringProp>
                      <stringProp name="Scope.variable">mnemonic_1</stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Meditation Accumulated Value: 600, HMDM should be created." enabled="true"/>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Meditation Accumulated Value: 600" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://schemas.vitalitytibcoservices.com/vts/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:genericTBMRequest&gt;&#xd;
         &lt;v1:messageType&gt;xml&lt;/v1:messageType&gt;&#xd;
         &lt;v1:destinationTopic&gt;${tibcoGDLQueue}&lt;/v1:destinationTopic&gt;&#xd;
	&lt;ns2:DeviceUpload xmlns:ns2=&quot;http://schemas.discovery.co.za/vitality&quot;&gt;&#xd;
   		&lt;ns2:header&gt;&#xd;
      	&lt;ns2:user&gt;&#xd;
         		&lt;entityNo&gt;${volId_1}&lt;/entityNo&gt;&#xd;
      &lt;/ns2:user&gt;&#xd;
      &lt;ns2:uploadDate&gt;${dateToday}T14:16:30.936Z&lt;/ns2:uploadDate&gt;&#xd;
      &lt;ns2:sessionId&gt;${randomAlphaNumericString}-${randomAlphaNumericString}&lt;/ns2:sessionId&gt;&#xd;
      &lt;ns2:gdlSessionId&gt;${randomNumericString}&lt;/ns2:gdlSessionId&gt;&#xd;
      &lt;ns2:partnerSystem&gt;Google&lt;/ns2:partnerSystem&gt;&#xd;
      &lt;ns2:verified&gt;true&lt;/ns2:verified&gt;&#xd;
      &lt;ns2:uploadCount&gt;0&lt;/ns2:uploadCount&gt;&#xd;
      &lt;ns2:tenantId&gt;${tenant_VOL}&lt;/ns2:tenantId&gt;&#xd;
      &lt;ns2:processingType&gt;REALTIME&lt;/ns2:processingType&gt;&#xd;
      &lt;ns2:rawUploadData&gt;NOT REQUIRED&lt;/ns2:rawUploadData&gt;&#xd;
   &lt;/ns2:header&gt;&#xd;
   &lt;ns2:device&gt;&#xd;
      &lt;ns2:manufacturer&gt;headspace&lt;/ns2:manufacturer&gt;&#xd;
   &lt;/ns2:device&gt;&#xd;
   &lt;ns2:readings&gt;&#xd;
      &lt;startTime&gt;${dateToday}T00:00:00.000+03:00&lt;/startTime&gt;&#xd;
      &lt;endTime&gt;${dateTomorrow}T00:00:00.000+03:00&lt;/endTime&gt;&#xd;
      &lt;duration&gt;86400&lt;/duration&gt;&#xd;
      &lt;activeDuration&gt;600&lt;/activeDuration&gt;&#xd;
      &lt;description&gt;raw:com.google.activity.segment:com.getsomeheadspace.android:&lt;/description&gt;&#xd;
      &lt;partnerSystemSource&gt;Google Fit&lt;/partnerSystemSource&gt;&#xd;
      &lt;manufacturer&gt;headspace&lt;/manufacturer&gt;&#xd;
      &lt;readingId&gt;${randomNumericString}&lt;/readingId&gt;&#xd;
      &lt;partnerReadingId&gt;${randomAlphaNumericString}-${randomAlphaNumericString}&lt;/partnerReadingId&gt;&#xd;
      &lt;readingType&gt;MEDITATION&lt;/readingType&gt;&#xd;
      &lt;dataCategory&gt;MENTAL_WELLBEING&lt;/dataCategory&gt;&#xd;
      &lt;integrity&gt;VERIFIED&lt;/integrity&gt;&#xd;
      &lt;isDuplicate&gt;0&lt;/isDuplicate&gt;&#xd;
      &lt;isValid&gt;1&lt;/isValid&gt;&#xd;
      &lt;isActive&gt;1&lt;/isActive&gt;&#xd;
      &lt;aggregationId&gt;${randomNumericString}&lt;/aggregationId&gt;&#xd;
      &lt;healthData&gt;&#xd;
         &lt;heartRate /&gt;&#xd;
      &lt;/healthData&gt;&#xd;
      &lt;workout&gt;&#xd;
         &lt;partnerActivityType&gt;MEDITATION&lt;/partnerActivityType&gt;&#xd;
         &lt;heartRate /&gt;&#xd;
      &lt;/workout&gt;&#xd;
   &lt;/ns2:readings&gt;&#xd;
&lt;/ns2:DeviceUpload&gt;&#xd;
 &lt;/v1:genericTBMRequest&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain"></stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol"></stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path"></stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.implementation">Java</stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Accept-Encoding" elementType="Header">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value">gzip,deflate</stringProp>
                        </elementProp>
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">text/xml;charset=UTF-8</stringProp>
                        </elementProp>
                        <elementProp name="SOAPAction" elementType="Header">
                          <stringProp name="Header.name">SOAPAction</stringProp>
                          <stringProp name="Header.value">&quot;/SendTransportBridgeMessageToTVGService/SendTransportBridgeMessageToTVGOp&quot;</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="MEDITATION processed by ESB" enabled="true">
                    <boolProp name="TransactionController.parent">true</boolProp>
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                  </TransactionController>
                  <hashTree>
                    <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Wait Until Processed" enabled="true">
                      <stringProp name="WhileController.condition">${__groovy(vars.get(&quot;itemProcessed_1&quot;) != &quot;1&quot;,)}</stringProp>
                    </WhileController>
                    <hashTree>
                      <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ACTIVITY REGISTER" enabled="true">
                        <stringProp name="dataSource">DHDB</stringProp>
                        <stringProp name="query">SELECT ITEM_PROCESSED
FROM ACTIVITY_REGISTER
WHERE ACTIVITY_TYPE in (&apos;MEDITATION&apos;)  
AND MEMBER_ENTITY_NO = ${volId_1}
AND EVENT_DATE = &apos;${dateToday2}&apos;
ORDER BY EVENT_DATE DESC</stringProp>
                        <stringProp name="queryArguments"></stringProp>
                        <stringProp name="queryArgumentsTypes"></stringProp>
                        <stringProp name="queryTimeout"></stringProp>
                        <stringProp name="queryType">Select Statement</stringProp>
                        <stringProp name="resultSetHandler">Store as String</stringProp>
                        <stringProp name="resultVariable"></stringProp>
                        <stringProp name="variableNames">itemProcessed</stringProp>
                      </JDBCSampler>
                      <hashTree/>
                      <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                        <stringProp name="IfController.condition">${__groovy(vars.get(&quot;itemProcessed_1&quot;) = &quot;1&quot;,)}</stringProp>
                        <boolProp name="IfController.evaluateAll">false</boolProp>
                        <boolProp name="IfController.useExpression">true</boolProp>
                      </IfController>
                      <hashTree>
                        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
                          <intProp name="ActionProcessor.action">3</intProp>
                          <intProp name="ActionProcessor.target">0</intProp>
                          <stringProp name="ActionProcessor.duration">0</stringProp>
                        </TestAction>
                        <hashTree>
                          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                            <collectionProp name="Asserion.test_strings">
                              <stringProp name="49">1</stringProp>
                            </collectionProp>
                            <stringProp name="Assertion.custom_message"></stringProp>
                            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                            <boolProp name="Assertion.assume_success">false</boolProp>
                            <intProp name="Assertion.test_type">1</intProp>
                            <stringProp name="Assertion.scope">variable</stringProp>
                            <stringProp name="Scope.variable">itemProcessed_1</stringProp>
                          </ResponseAssertion>
                          <hashTree/>
                        </hashTree>
                      </hashTree>
                    </hashTree>
                  </hashTree>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ACTIVITY REGISTER: Verify that PC4_EVENT != 0" enabled="true">
                    <stringProp name="dataSource">DHDB</stringProp>
                    <stringProp name="query">SELECT PC4_EVENT_ID 
FROM ACTIVITY_REGISTER
WHERE ACTIVITY_TYPE in (&apos;MEDITATION&apos;)  
AND MEMBER_ENTITY_NO = ${volId_1}
AND EVENT_DATE = &apos;${dateToday2}&apos;
ORDER BY DATE_TIME_LAST_MODIFIED DESC</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="queryType">Select Statement</stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="variableNames">pc4Event</stringProp>
                  </JDBCSampler>
                  <hashTree>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="48">0</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">5</intProp>
                      <stringProp name="Assertion.scope">variable</stringProp>
                      <stringProp name="Scope.variable">pc4Event_1</stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                  <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="PC4_EVENTS: Event created" enabled="true">
                    <boolProp name="TransactionController.parent">true</boolProp>
                    <boolProp name="TransactionController.includeTimers">false</boolProp>
                  </TransactionController>
                  <hashTree>
                    <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Wait Until Processed" enabled="true">
                      <stringProp name="WhileController.condition">${__groovy(vars.get(&quot;eventProcessed_1&quot;) != &quot;1&quot;,)}</stringProp>
                    </WhileController>
                    <hashTree>
                      <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="PC4_EVENTS: event successfully processed" enabled="true">
                        <stringProp name="dataSource">DHDB</stringProp>
                        <stringProp name="query">SELECT EVENT_SUCCESSFULLY_PROCESSED 
FROM PC4_EVENTS 
WHERE MEMBER_ENTITY_NO = ${volId_1}
AND EVENT_DATE = &apos;${dateToday2}&apos;
ORDER BY CREATED_AT DESC</stringProp>
                        <stringProp name="queryArguments"></stringProp>
                        <stringProp name="queryArgumentsTypes"></stringProp>
                        <stringProp name="queryTimeout"></stringProp>
                        <stringProp name="queryType">Select Statement</stringProp>
                        <stringProp name="resultSetHandler">Store as String</stringProp>
                        <stringProp name="resultVariable"></stringProp>
                        <stringProp name="variableNames">eventProcessed</stringProp>
                      </JDBCSampler>
                      <hashTree/>
                      <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                        <stringProp name="IfController.condition">${__groovy(vars.get(&quot;eventProcessed_1&quot;) = &quot;1&quot;,)}</stringProp>
                        <boolProp name="IfController.evaluateAll">false</boolProp>
                        <boolProp name="IfController.useExpression">true</boolProp>
                      </IfController>
                      <hashTree>
                        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
                          <intProp name="ActionProcessor.action">3</intProp>
                          <intProp name="ActionProcessor.target">0</intProp>
                          <stringProp name="ActionProcessor.duration">0</stringProp>
                        </TestAction>
                        <hashTree>
                          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                            <collectionProp name="Asserion.test_strings">
                              <stringProp name="49">1</stringProp>
                            </collectionProp>
                            <stringProp name="Assertion.custom_message"></stringProp>
                            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                            <boolProp name="Assertion.assume_success">false</boolProp>
                            <intProp name="Assertion.test_type">1</intProp>
                            <stringProp name="Assertion.scope">variable</stringProp>
                            <stringProp name="Scope.variable">eventProcessed_1</stringProp>
                          </ResponseAssertion>
                          <hashTree/>
                        </hashTree>
                      </hashTree>
                    </hashTree>
                  </hashTree>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="PC4_EVENTS: Mnemonic = HMDM" enabled="true">
                    <stringProp name="dataSource">DHDB</stringProp>
                    <stringProp name="query">SELECT DETAILED_CATEGORY_CODE 
FROM PC4_EVENTS 
WHERE MEMBER_ENTITY_NO = ${volId_1}
AND EVENT_DATE = &apos;${dateToday2}&apos;
ORDER BY UPDATED_AT DESC</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="queryType">Select Statement</stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="variableNames">mnemonicHMDM</stringProp>
                  </JDBCSampler>
                  <hashTree>
                    <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                      <collectionProp name="Asserion.test_strings">
                        <stringProp name="2221134">HMDM</stringProp>
                      </collectionProp>
                      <stringProp name="Assertion.custom_message"></stringProp>
                      <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                      <boolProp name="Assertion.assume_success">false</boolProp>
                      <intProp name="Assertion.test_type">1</intProp>
                      <stringProp name="Assertion.scope">variable</stringProp>
                      <stringProp name="Scope.variable">mnemonicHMDM_1</stringProp>
                    </ResponseAssertion>
                    <hashTree/>
                  </hashTree>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="VOL-651 VAP - award events based on AR notifications for gift card tiles and gift cards" enabled="true"/>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Tile Changed Event" enabled="true"/>
            <hashTree>
              <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="tileChangedMnemonic" elementType="Argument">
                    <stringProp name="Argument.name">tileChangedMnemonic</stringProp>
                    <stringProp name="Argument.value">GFCA</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </Arguments>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Test Data: Not in DPM_EVENT_LOG" enabled="true">
                <stringProp name="dataSource">DHDB</stringProp>
                <stringProp name="query">SELECT cm.entity_no
FROM ${member_table} m, vsa_admin.a_employer e, vsa_admin.a_entity_cross_map cm, vsa_admin.a_ent_ext_id_cross_map ecm, vitality_policy_link vpl
WHERE m.curnt_emp_no=e.emp_no
AND e.emp_name = &apos;${VOL_EMPLOYER}&apos;
${volBranch}
AND cm.ref1 = m.mem_no
AND vpl.initiating_policy_no = m.mem_no
AND ecm.vsa_ent_no = m.mem_no
AND NOT EXISTS (SELECT * FROM DPM_EVENT_LOG ar WHERE cm.entity_no = ar.entity_no AND DATE_TIME_LAST_MODIFIED &gt;= &apos;${dateToday2}&apos;)</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="variableNames">volId</stringProp>
              </JDBCSampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST &quot;tileChanged&quot; to DPM_EVENT_LOG" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;awarded_date&quot;:&quot;${dateToday}T01:57:03.594&quot;,&quot;value&quot;: 10}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${zuulVgBase}</stringProp>
                <stringProp name="HTTPSampler.port">${zuulPort}</stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">notification/${tenant_VOL}/v1/notification/notifyMember/${volId_1}/tileChanged</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: JMS message Sent" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-711284890">JMS message sent to queue for member</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.scope">all</stringProp>
                  <stringProp name="Scope.variable">physAct</stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="PC4_EVENTS: Event created" enabled="true">
                <boolProp name="TransactionController.parent">true</boolProp>
                <boolProp name="TransactionController.includeTimers">false</boolProp>
              </TransactionController>
              <hashTree>
                <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Wait Until Processed" enabled="true">
                  <stringProp name="WhileController.condition">${__groovy(vars.get(&quot;pc4Event_1&quot;) != vars.get(&quot;tileChangedMnemonic&quot;),)}</stringProp>
                </WhileController>
                <hashTree>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="PC4_EVENTS" enabled="true">
                    <stringProp name="dataSource">DHDB</stringProp>
                    <stringProp name="query">SELECT DETAILED_CATEGORY_CODE 
FROM PC4_EVENTS 
WHERE MEMBER_ENTITY_NO = ${volId_1}
AND EVENT_DATE &gt;= &apos;${dateToday2}&apos;
ORDER BY EVENT_DATE DESC, CREATED_AT DESC</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="queryType">Select Statement</stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="variableNames">pc4Event</stringProp>
                  </JDBCSampler>
                  <hashTree/>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                    <stringProp name="IfController.condition">${__groovy(vars.get(&quot;pc4Event_1&quot;) = vars.get(&quot;tileChangedMnemonic&quot;),)}</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                    <boolProp name="IfController.useExpression">true</boolProp>
                  </IfController>
                  <hashTree>
                    <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
                      <intProp name="ActionProcessor.action">3</intProp>
                      <intProp name="ActionProcessor.target">0</intProp>
                      <stringProp name="ActionProcessor.duration">0</stringProp>
                    </TestAction>
                    <hashTree>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="-1300468476">${mnemonic}</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.custom_message"></stringProp>
                        <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">1</intProp>
                        <stringProp name="Assertion.scope">variable</stringProp>
                        <stringProp name="Scope.variable">eventCreated_1</stringProp>
                      </ResponseAssertion>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                </hashTree>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="VITALITY_EVENTS: Points awarded By Core" enabled="true">
                <boolProp name="TransactionController.parent">true</boolProp>
                <boolProp name="TransactionController.includeTimers">false</boolProp>
              </TransactionController>
              <hashTree>
                <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Wait Until Processed" enabled="true">
                  <stringProp name="WhileController.condition">${__groovy(vars.get(&quot;eventStatus_1&quot;) != &quot;L&quot;,)}</stringProp>
                </WhileController>
                <hashTree>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="VITALITY_EVENTS" enabled="true">
                    <stringProp name="dataSource">DHDB</stringProp>
                    <stringProp name="query">SELECT STATUS, MNEMONIC
FROM VITALITY_EVENT_V
WHERE MEMBER_ENTITY_NO = ${volId_1}
AND EVENT_DATE_TIME &gt;= &apos;${dateToday2}&apos;
ORDER BY EVENT_DATE_TIME DESC, DATE_TIME_LAST_MODIFIED DESC</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="queryType">Select Statement</stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="variableNames">eventStatus,tileChangedMnemonic</stringProp>
                  </JDBCSampler>
                  <hashTree/>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                    <stringProp name="IfController.condition">${__groovy(vars.get(&quot;eventStatus_1&quot;) = &quot;L&quot;,)}</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                    <boolProp name="IfController.useExpression">true</boolProp>
                  </IfController>
                  <hashTree>
                    <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
                      <intProp name="ActionProcessor.action">3</intProp>
                      <intProp name="ActionProcessor.target">0</intProp>
                      <stringProp name="ActionProcessor.duration">0</stringProp>
                    </TestAction>
                    <hashTree>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="-1030085172">${tileChangedMnemonic}</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.custom_message"></stringProp>
                        <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">1</intProp>
                        <stringProp name="Assertion.scope">variable</stringProp>
                        <stringProp name="Scope.variable">tileChangedMnemonic_1</stringProp>
                      </ResponseAssertion>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                </hashTree>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Direct Reward Awarded" enabled="true"/>
            <hashTree>
              <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="directRewardAwardedMnemonic" elementType="Argument">
                    <stringProp name="Argument.name">directRewardAwardedMnemonic</stringProp>
                    <stringProp name="Argument.value">GFTC</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </Arguments>
              <hashTree/>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Test Data: Not in DPM_EVENT_LOG" enabled="true">
                <stringProp name="dataSource">DHDB</stringProp>
                <stringProp name="query">SELECT cm.entity_no
FROM ${member_table} m, vsa_admin.a_employer e, vsa_admin.a_entity_cross_map cm, vsa_admin.a_ent_ext_id_cross_map ecm, vitality_policy_link vpl
WHERE m.curnt_emp_no=e.emp_no
AND e.emp_name = &apos;${VOL_EMPLOYER}&apos;
${volBranch}
AND cm.ref1 = m.mem_no
AND vpl.initiating_policy_no = m.mem_no
AND ecm.vsa_ent_no = m.mem_no
AND NOT EXISTS (SELECT * FROM DPM_EVENT_LOG ar WHERE cm.entity_no = ar.entity_no AND DATE_TIME_LAST_MODIFIED &gt;= &apos;${dateToday2}&apos;)</stringProp>
                <stringProp name="queryArguments"></stringProp>
                <stringProp name="queryArgumentsTypes"></stringProp>
                <stringProp name="queryTimeout"></stringProp>
                <stringProp name="queryType">Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as String</stringProp>
                <stringProp name="resultVariable"></stringProp>
                <stringProp name="variableNames">volId</stringProp>
              </JDBCSampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST &quot;directRewardAwarded&quot; to DPM_EVENT_LOG" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&quot;awarded_date&quot;:&quot;${dateToday}T01:57:03.594&quot;,&quot;value&quot;: 10}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${zuulVgBase}</stringProp>
                <stringProp name="HTTPSampler.port">${zuulPort}</stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">notification/${tenant_VOL}/v1/notification/notifyMember/${volId_1}/directRewardAwarded</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: JMS message Sent" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-711284890">JMS message sent to queue for member</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                  <stringProp name="Assertion.scope">all</stringProp>
                  <stringProp name="Scope.variable">physAct</stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="PC4_EVENTS: Event created" enabled="true">
                <boolProp name="TransactionController.parent">true</boolProp>
                <boolProp name="TransactionController.includeTimers">false</boolProp>
              </TransactionController>
              <hashTree>
                <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Wait Until Processed" enabled="true">
                  <stringProp name="WhileController.condition">${__groovy(vars.get(&quot;directRewardAwardedMnemonic_1&quot;) != vars.get(&quot;directRewardAwardedMnemonic&quot;),)}</stringProp>
                </WhileController>
                <hashTree>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="PC4_EVENTS" enabled="true">
                    <stringProp name="dataSource">DHDB</stringProp>
                    <stringProp name="query">SELECT DETAILED_CATEGORY_CODE 
FROM PC4_EVENTS 
WHERE MEMBER_ENTITY_NO = ${volId_1}
AND EVENT_DATE &gt;= &apos;${dateToday2}&apos;
ORDER BY EVENT_DATE DESC, CREATED_AT DESC</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="queryType">Select Statement</stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="variableNames">directRewardAwardedMnemonic</stringProp>
                  </JDBCSampler>
                  <hashTree/>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                    <stringProp name="IfController.condition">${__groovy(vars.get(&quot;directRewardAwardedMnemonic_1&quot;) = vars.get(&quot;directRewardAwardedMnemonic&quot;),)}</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                    <boolProp name="IfController.useExpression">true</boolProp>
                  </IfController>
                  <hashTree>
                    <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
                      <intProp name="ActionProcessor.action">3</intProp>
                      <intProp name="ActionProcessor.target">0</intProp>
                      <stringProp name="ActionProcessor.duration">0</stringProp>
                    </TestAction>
                    <hashTree>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="603579534">${directRewardAwardedMnemonic}</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.custom_message"></stringProp>
                        <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">1</intProp>
                        <stringProp name="Assertion.scope">variable</stringProp>
                        <stringProp name="Scope.variable">directRewardAwardedMnemonic_1</stringProp>
                      </ResponseAssertion>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                </hashTree>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="VITALITY_EVENTS: Points awarded By Core" enabled="true">
                <boolProp name="TransactionController.parent">true</boolProp>
                <boolProp name="TransactionController.includeTimers">false</boolProp>
              </TransactionController>
              <hashTree>
                <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Wait Until Processed" enabled="true">
                  <stringProp name="WhileController.condition">${__groovy(vars.get(&quot;directRewardAwardedStatus_1&quot;) != &quot;L&quot;,)}</stringProp>
                </WhileController>
                <hashTree>
                  <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="VITALITY_EVENTS" enabled="true">
                    <stringProp name="dataSource">DHDB</stringProp>
                    <stringProp name="query">SELECT STATUS, MNEMONIC
FROM VITALITY_EVENT_V
WHERE MEMBER_ENTITY_NO = ${volId_1}
AND EVENT_DATE_TIME &gt;= &apos;${dateToday2}&apos;
ORDER BY EVENT_DATE_TIME DESC, DATE_TIME_LAST_MODIFIED DESC</stringProp>
                    <stringProp name="queryArguments"></stringProp>
                    <stringProp name="queryArgumentsTypes"></stringProp>
                    <stringProp name="queryTimeout"></stringProp>
                    <stringProp name="queryType">Select Statement</stringProp>
                    <stringProp name="resultSetHandler">Store as String</stringProp>
                    <stringProp name="resultVariable"></stringProp>
                    <stringProp name="variableNames">directRewardAwardedStatus,directRewardAwardedMnemonic</stringProp>
                  </JDBCSampler>
                  <hashTree/>
                  <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                    <stringProp name="IfController.condition">${__groovy(vars.get(&quot;directRewardAwardedStatus_1&quot;) = &quot;L&quot;,)}</stringProp>
                    <boolProp name="IfController.evaluateAll">false</boolProp>
                    <boolProp name="IfController.useExpression">true</boolProp>
                  </IfController>
                  <hashTree>
                    <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
                      <intProp name="ActionProcessor.action">3</intProp>
                      <intProp name="ActionProcessor.target">0</intProp>
                      <stringProp name="ActionProcessor.duration">0</stringProp>
                    </TestAction>
                    <hashTree>
                      <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                        <collectionProp name="Asserion.test_strings">
                          <stringProp name="603579534">${directRewardAwardedMnemonic}</stringProp>
                        </collectionProp>
                        <stringProp name="Assertion.custom_message"></stringProp>
                        <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
                        <boolProp name="Assertion.assume_success">false</boolProp>
                        <intProp name="Assertion.test_type">1</intProp>
                        <stringProp name="Assertion.scope">variable</stringProp>
                        <stringProp name="Scope.variable">directRewardAwardedMnemonic_1</stringProp>
                      </ResponseAssertion>
                      <hashTree/>
                    </hashTree>
                  </hashTree>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="VPNS-130" enabled="false"/>
        <hashTree>
          <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="limit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">100</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">limit</stringProp>
                </elementProp>
                <elementProp name="mobile" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">mobile</stringProp>
                </elementProp>
                <elementProp name="offset" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">offset</stringProp>
                </elementProp>
                <elementProp name="lang" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">en_US</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">lang</stringProp>
                </elementProp>
                <elementProp name="plain" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">plain</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">vgqvap07.discsrv.co.za</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/vap/rest/nfe/mobile/all/user/1421188390</stringProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </ConfigTestElement>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="PORT: 7007" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Purge NewsFeed: 7007" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port">7007</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="671778703">Request method &amp;#39;POST&amp;#39; not supported</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET NewsFeed: 7007" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port">7007</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="140636634">has_more</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="PORT: 7008" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Purge NewsFeed: 7008" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port">7008</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="671778703">Request method &amp;#39;POST&amp;#39; not supported</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET NewsFeed List: 7008" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port">7008</stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="140636634">has_more</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="VGUSA-4517 Newsfeed - performance improvements - NOV19 S2" enabled="false"/>
        <hashTree>
          <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${wso2Base}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout">30000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">300000</stringProp>
          </ConfigTestElement>
          <hashTree/>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
            <stringProp name="CounterConfig.start">0</stringProp>
            <stringProp name="CounterConfig.end">999999</stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">counter</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">false</boolProp>
          </CounterConfig>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST WSO2 Access Token" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="grant_type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">client_credentials</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">grant_type</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/token</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Basic ${wso2Token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extracting WSO2 AccessToken" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">wso2AccessToken</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RTE: JH" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;enrollJohnHancockMemberRequest&quot;: {&#xd;
		&quot;biometricIndicator&quot;: &quot;Y&quot;,&#xd;
		&quot;branchCode&quot;: &quot;PERM1&quot;,&#xd;
		&quot;coverageEffectiveDate&quot;: &quot;2019-01-01&quot;,&#xd;
		&quot;dateOfBirth&quot;: &quot;1979-09-17&quot;,&#xd;
		&quot;emailAddress&quot;: &quot;${randomString}@gmail.com&quot;,&#xd;
		&quot;employeeId&quot;: &quot;HER${counter}${randomNumericString}&quot;,&#xd;
		&quot;firstName&quot;: &quot;${randomString}&quot;,&#xd;
		&quot;gender&quot;: &quot;F&quot;,&#xd;
		&quot;jointLifeInd&quot;: &quot;Y&quot;,&#xd;
		&quot;lastName&quot;: &quot;${randomString}&quot;,&#xd;
		&quot;partnerId&quot;: &quot;JHDUMMY&quot;,&#xd;
		&quot;uniqueId&quot;: &quot;${counter}${randomString}&quot;,&#xd;
		&quot;upsoldIndicator&quot;: &quot;N&quot;&#xd;
	}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/vitality-johnhancock-enrolment-service-1/1.0/svc/2/enrollJohnHancockMember</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${wso2AccessToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: No Errors" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1203236063">errorMessage</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">6</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extractor jhId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">jhvitalityId;jhuniqueId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.enrollJohnHancockMemberResponse.vitalityId;$.enrollJohnHancockMemberResponse.uniqueId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND;NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: Entity is present" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1956472523">${jhvitalityId}</stringProp>
                <stringProp name="20515964">${jhuniqueId}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="POV NewsFeed" enabled="true"/>
          <hashTree>
            <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="limit" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">100</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">limit</stringProp>
                  </elementProp>
                  <elementProp name="mobile" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">mobile</stringProp>
                  </elementProp>
                  <elementProp name="offset" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">offset</stringProp>
                  </elementProp>
                  <elementProp name="lang" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">en_US</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">lang</stringProp>
                  </elementProp>
                  <elementProp name="plain" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">false</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">plain</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${vapBase}</stringProp>
              <stringProp name="HTTPSampler.port">${vapPort}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/vap/rest/nfe/mobile/all/user/${povId}</stringProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </ConfigTestElement>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Purge NewsFeed" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="671778703">Request method &amp;#39;POST&amp;#39; not supported</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET NewsFeed" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="140636634">has_more</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="VGUSA-4212 [Mobile Services] Healthy Action Description - API" enabled="false"/>
        <hashTree>
          <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${wso2Base}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout">30000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">300000</stringProp>
          </ConfigTestElement>
          <hashTree/>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Parameters: user ID" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="1630326028">vitalityIdApollo</stringProp>
              <stringProp name="-380460844">insuredIdApollo</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="41588510">
                <stringProp name="1119812267">1432491247</stringProp>
                <stringProp name="-664265625">IY90X515003XVT9TBKSK</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">true</boolProp>
          </UserParameters>
          <hashTree/>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Parameters: Goal Type" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="843453981">campaignGoalType</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-815700194">
                <stringProp name="2167449">FSHT</stringProp>
              </collectionProp>
              <collectionProp name="-1007635758">
                <stringProp name="2529513">RXAD</stringProp>
              </collectionProp>
              <collectionProp name="40950445">
                <stringProp name="2209887">HAMS</stringProp>
              </collectionProp>
              <collectionProp name="-1007488274">
                <stringProp name="2529959">RXOP</stringProp>
              </collectionProp>
              <collectionProp name="1167542335">
                <stringProp name="2328711">LABT</stringProp>
              </collectionProp>
              <collectionProp name="-908584208">
                <stringProp name="2556002">STRS</stringProp>
              </collectionProp>
              <collectionProp name="-2101296851">
                <stringProp name="2419256">OBIN</stringProp>
              </collectionProp>
              <collectionProp name="-2000747683">
                <stringProp name="2447860">PABE</stringProp>
              </collectionProp>
              <collectionProp name="-1016529661">
                <stringProp name="2521345">ROPT</stringProp>
              </collectionProp>
              <collectionProp name="-2084570040">
                <stringProp name="2003479">ACTI</stringProp>
              </collectionProp>
              <collectionProp name="-1771576268">
                <stringProp name="2098056">DIBE</stringProp>
              </collectionProp>
              <collectionProp name="-941340077">
                <stringProp name="2547908">SLEP</stringProp>
              </collectionProp>
              <collectionProp name="-2136650438">
                <stringProp name="2408069">NUTR</stringProp>
              </collectionProp>
              <collectionProp name="-1078052081">
                <stringProp name="2507984">RAST</stringProp>
              </collectionProp>
              <collectionProp name="1331685037">
                <stringProp name="2372343">MOOD</stringProp>
              </collectionProp>
              <collectionProp name="68430360">
                <stringProp name="2213602">HEIN</stringProp>
              </collectionProp>
              <collectionProp name="-1935881891">
                <stringProp name="2464307">PREV</stringProp>
              </collectionProp>
              <collectionProp name="-1943363583">
                <stringProp name="2047684">BRTH</stringProp>
              </collectionProp>
              <collectionProp name="-909395239">
                <stringProp name="2555863">STND</stringProp>
              </collectionProp>
              <collectionProp name="-856502653">
                <stringProp name="2151422">FBRT</stringProp>
              </collectionProp>
              <collectionProp name="-815561189">
                <stringProp name="2167815">FSTN</stringProp>
              </collectionProp>
              <collectionProp name="-881670258">
                <stringProp name="2149996">FACT</stringProp>
              </collectionProp>
              <collectionProp name="-820259551">
                <stringProp name="2163014">FNTR</stringProp>
              </collectionProp>
              <collectionProp name="-815662223">
                <stringProp name="2167569">FSLP</stringProp>
              </collectionProp>
              <collectionProp name="-1026300505">
                <stringProp name="2102429">DMSG</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">true</boolProp>
          </UserParameters>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="encrypt vitalityIdApollo for Auth" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import java.security.MessageDigest;

MessageDigest digest = MessageDigest.getInstance(&quot;MD5&quot;);
byte[] bytes = digest.digest((&quot;${vitalityIdApollo}&quot; + &quot;${msSalt}&quot;).getBytes());
vars.put(&quot;vitalityIdApollo_IdEncrypted&quot;,javax.xml.bind.DatatypeConverter.printHexBinary(bytes).toLowerCase());</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="RTE: New User Creation" enabled="false"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST WSO2 Token" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="grant_type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">client_credentials</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">grant_type</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/token</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Basic ${wso2Token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="VSL Token" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">wso2AccessToken </stringProp>
                <stringProp name="RegexExtractor.regex">&quot;access_token&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">Not_Found</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="apiAccessToken" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">wso2AccessToken</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RTE: FI" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&#xd;
 {&#xd;
  &quot;enrollmentRequestEncrypted&quot;: {&#xd;
    &quot;firstNameEncrypted&quot;: &quot;${encryptedFirstName}&quot;,&#xd;
    &quot;lastNameEncrypted&quot;: &quot;${encryptedLastName}&quot;,&#xd;
    &quot;dateOfBirthEncrypted&quot;: &quot;${encryptedDOB}&quot;,&#xd;
    &quot;insuredId&quot;: &quot;${randomString}&quot;,&#xd;
    &quot;gender&quot;: &quot;M&quot;,&#xd;
    &quot;vitalityCoverageEffectiveDate&quot;: &quot;${__RandomDate(yyyy-MM-dd,2018-01-01,${__time(yyyy-MM-dd)},,)}&quot;,&#xd;
    &quot;productIndicator&quot;: &quot;FULL&quot;,&#xd;
    &quot;emailAddress&quot;: &quot;test@gmail.com&quot;,&#xd;
    &quot;zipCode&quot;: &quot;&quot;,&#xd;
    &quot;customerServicePhone&quot;: &quot;${encryptedPhoneNumber}&quot;,&#xd;
    &quot;reportField1&quot;: &quot;123&quot;,&#xd;
    &quot;reportField2&quot;: &quot;20170701&quot;,&#xd;
    &quot;reportField3&quot;: &quot;ABC&quot;,&#xd;
    &quot;reportField4&quot;: &quot;DEF&quot;&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/${wso2RtePath}/svc/0/apolloEnrollmentEncrypted</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${wso2AccessToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Entity Number" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">vitalityIdApollo</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.enrollmentResponseEncrypted.vitalityId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract insuredIdApollo" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">insuredIdApollo</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.enrollmentResponseEncrypted.insuredId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert: User has been created" enabled="true">
                <stringProp name="JSON_PATH">$.enrollmentResponseEncrypted.insuredId</stringProp>
                <stringProp name="EXPECTED_VALUE"></stringProp>
                <boolProp name="JSONVALIDATION">false</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: Vitality ID present" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1165624797">vitalityId</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import java.security.MessageDigest;

MessageDigest digest = MessageDigest.getInstance(&quot;MD5&quot;);
byte[] bytes = digest.digest((&quot;${vitalityIdApollo}&quot; + &quot;${msSalt}&quot;).getBytes());
vars.put(&quot;vitalityIdApollo_IdEncrypted&quot;,javax.xml.bind.DatatypeConverter.printHexBinary(bytes).toLowerCase());</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Auth Token" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="entity_no" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${vitalityIdApollo}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">entity_no</stringProp>
                </elementProp>
                <elementProp name="encrypted_entity_no" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${vitalityIdApollo_IdEncrypted}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">encrypted_entity_no</stringProp>
                </elementProp>
                <elementProp name="_p" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">IOS</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">_p</stringProp>
                </elementProp>
                <elementProp name="_v" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${mob.app.version}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">_v</stringProp>
                </elementProp>
                <elementProp name="_doc_browser_context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">_doc_browser_context</stringProp>
                </elementProp>
                <elementProp name="_c" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">Aetna</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">_c</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${msBase}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${msPath}/auth/simulate_auth</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Active Rewards Token" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">ar_Token</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.session.token</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="LLT Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.session.timeout</stringProp>
              <stringProp name="EXPECTED_VALUE">2280</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Campaign Goals" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>100.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: CG - Create" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{  &#xd;
   &quot;goalManagementMessage&quot;:{  &#xd;
      &quot;managementInstruction&quot;:&quot;CREATE&quot;,&#xd;
      &quot;goal&quot;:{  &#xd;
         &quot;goalId&quot;:null,&#xd;
         &quot;goalTitle&quot;:&quot;Breathe Goal&quot;,&#xd;
         &quot;vitalityMemberId&quot;:${vitalityIdApollo},&#xd;
         &quot;campaignId&quot;:${vitalityIdApollo},&#xd;
         &quot;adjudications&quot;: {&#xd;
           &quot;apolloAdjudications&quot;: [&#xd;
             {&#xd;
               &quot;adjudicator&quot;: &quot;AETNA&quot;,&#xd;
               &quot;frequency&quot;: null,&#xd;
               &quot;targetFunction&quot;: &quot;sum&quot;,&#xd;
               &quot;targetMetric&quot;: &quot;sessions&quot;,&#xd;
               &quot;targetOperator&quot;: &quot;&gt;=&quot;,&#xd;
               &quot;targetValue&quot;: 5,&#xd;
               &quot;type&quot;: &quot;breathe&quot;&#xd;
             }&#xd;
           ]&#xd;
         },&#xd;
         &quot;description&quot;:&quot;Please try breathing!&quot;,&#xd;
         &quot;howToAchieve&quot;:&quot;Use the Breathe app&quot;,&#xd;
         &quot;externalMemberId&quot;:&quot;${insuredIdApollo}&quot;,&#xd;
         &quot;goalState&quot;:&quot;UNAWARDED&quot;,&#xd;
         &quot;startDate&quot;:&quot;${dateTomorrow}T09:52:25.371000000-05:00[America/Chicago]&quot;,&#xd;
         &quot;internalEndDate&quot;:&quot;${dateTodayPlusFour}T09:52:25.371000000-05:00[America/Chicago]&quot;,&#xd;
         &quot;monitorEndDate&quot;:&quot;${dateTodayPlusFive}T09:52:25.371000000-05:00[America/Chicago]&quot;,&#xd;
         &quot;externalEndDate&quot;:&quot;${dateTodayPlusSix}T09:52:25.371000000-05:00[America/Chicago]&quot;,&#xd;
         &quot;transmitGUID&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}-${randomAlphaNumericString}-${randomAlphaNumericString}-${randomAlphaNumericString}&quot;,&#xd;
         &quot;partnerId&quot;:&quot;AETNA&quot;,&#xd;
         &quot;buttons&quot;:[  &#xd;
            {  &#xd;
               &quot;buttonLabel&quot;:&quot;Open in maps!&quot;,&#xd;
               &quot;buttonAction&quot;:&quot;openMaps:http://maps.apple.com/lat=1234323,long=987324&quot;,&#xd;
               &quot;buttonIndex&quot;:0&#xd;
            },&#xd;
            {  &#xd;
               &quot;buttonLabel&quot;:&quot;Find out more!&quot;,&#xd;
               &quot;buttonAction&quot;:&quot;openURL:http://www.aetna.com/breathe.html&quot;,&#xd;
               &quot;buttonIndex&quot;:1&#xd;
            }&#xd;
         ],&#xd;
         &quot;reward&quot;:{  &#xd;
            &quot;coreEvents&quot;:[  &#xd;
               {  &#xd;
                  &quot;eventMnemonic&quot;:&quot;${campaignGoalType}&quot;,&#xd;
                  &quot;eventValue&quot;:5&#xd;
               }&#xd;
            ]&#xd;
         }&#xd;
      }&#xd;
   }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${zuulBase}</stringProp>
              <stringProp name="HTTPSampler.port">${zuulPort}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${zuulCGPath}/svc/27/maintainGoal</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="CampaignGoal_ID" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">CampaignGoal_ID</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.goalNotificationMessage.goal.goalId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="CREATED Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1746537160">CREATED</stringProp>
                  <stringProp name="-403081501">UNAWARDED</stringProp>
                  <stringProp name="0"></stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: CG - Adjudicate" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;goalId&quot;: ${CampaignGoal_ID},&#xd;
	&quot;partnerId&quot;: &quot;AETNA&quot;,&#xd;
	&quot;adjudicationDecision&quot;: &quot;AWARDED&quot;,&#xd;
	&quot;adjudicationDate&quot;: &quot;${dateToday}T09:52:25.371000000-06:00&quot;,&#xd;
	&quot;adjudicationProcessedDate&quot;: &quot;${dateToday}T09:52:25.371000000-06:00[America/Chicago]&quot;&#xd;
	}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/${msPath}/1.0/campaign_goals/adjudicate</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Vitality-Client" elementType="Header">
                    <stringProp name="Header.name">Vitality-Client</stringProp>
                    <stringProp name="Header.value">Aetna</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Token" elementType="Header">
                    <stringProp name="Header.name">Vitality-Token</stringProp>
                    <stringProp name="Header.value">${ar_Token}</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-App-Version" elementType="Header">
                    <stringProp name="Header.name">Vitality-App-Version</stringProp>
                    <stringProp name="Header.value">7</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                    <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                    <stringProp name="Header.value">IOS</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Language" elementType="Header">
                    <stringProp name="Header.name">Vitality-Language</stringProp>
                    <stringProp name="Header.value">en</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Device-Id" elementType="Header">
                    <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                    <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Local-Time" elementType="Header">
                    <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                    <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-API-Version" elementType="Header">
                    <stringProp name="Header.name">Vitality-API-Version</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="CampaignGoal_ID" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">CampaignGoal_ID</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.goalNotificationMessage.goal.goalId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ADJUDICATED Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1733827326">ADJUDICATED</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Event History: Completed Healthy Action" enabled="true">
            <boolProp name="TransactionController.parent">true</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Wait Until Processed" enabled="true">
              <stringProp name="WhileController.condition">${__groovy(vars.get(&quot;healthyActionDescription&quot;) != &quot;Completed Healthy Action&quot;,)}</stringProp>
            </WhileController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Events history" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="limit" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">999</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">limit</stringProp>
                    </elementProp>
                    <elementProp name="offset" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">0</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">offset</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/${msPath}/1.0/events/history</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Vitality-Client" elementType="Header">
                      <stringProp name="Header.name">Vitality-Client</stringProp>
                      <stringProp name="Header.value">Aetna</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Token" elementType="Header">
                      <stringProp name="Header.name">Vitality-Token</stringProp>
                      <stringProp name="Header.value">${ar_Token}</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-App-Version" elementType="Header">
                      <stringProp name="Header.name">Vitality-App-Version</stringProp>
                      <stringProp name="Header.value">7</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                      <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                      <stringProp name="Header.value">IOS</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Language" elementType="Header">
                      <stringProp name="Header.name">Vitality-Language</stringProp>
                      <stringProp name="Header.value">en</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Device-Id" elementType="Header">
                      <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                      <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Local-Time" elementType="Header">
                      <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                      <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-API-Version" elementType="Header">
                      <stringProp name="Header.name">Vitality-API-Version</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">healthyActionDescription</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.output[0].description</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                <stringProp name="IfController.condition">${__groovy(vars.get(&quot;healthyActionDescription&quot;) = &quot;Completed Healthy Action&quot;,)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
                  <intProp name="ActionProcessor.action">3</intProp>
                  <intProp name="ActionProcessor.target">0</intProp>
                  <stringProp name="ActionProcessor.duration">0</stringProp>
                </TestAction>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Healthy Action Description Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="1988587758">Completed Healthy Action</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">1</intProp>
                    <stringProp name="Assertion.scope">variable</stringProp>
                    <stringProp name="Scope.variable">healthyActionDescription</stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="SOAP TO Active Register - find ou twhich story" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="SOAP Send Calories: Tenant 37" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${povBase}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">tibcoservices/sendTransportBridgeMessageToTVGService</stringProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout">30000</stringProp>
              <stringProp name="HTTPSampler.response_timeout">300000</stringProp>
            </ConfigTestElement>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SOAP: Calories" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://schemas.vitalitytibcoservices.com/vts/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:genericTBMRequest&gt;&#xd;
         &lt;v1:messageType&gt;xml&lt;/v1:messageType&gt;&#xd;
         &lt;v1:destinationTopic&gt;${tibcoGDLQueue}&lt;/v1:destinationTopic&gt;&#xd;
		&lt;ns2:DeviceUpload  xmlns:ns2=&quot;http://schemas.discovery.co.za/vitality&quot;&gt;&#xd;
		&lt;ns2:header&gt;&#xd;
			&lt;ns2:user&gt;&#xd;
				&lt;entityNo&gt;${entityNo}&lt;/entityNo&gt;&#xd;
			&lt;/ns2:user&gt;&#xd;
			&lt;ns2:uploadDate&gt;${dateToday}T11:23:33.176Z&lt;/ns2:uploadDate&gt;&#xd;
			&lt;ns2:sessionId&gt;${randomAlphaNumericString}-${randomAlphaNumericString}&lt;/ns2:sessionId&gt;&#xd;
			&lt;ns2:gdlSessionId&gt;${randomNumericString}&lt;/ns2:gdlSessionId&gt;&#xd;
			&lt;ns2:partnerSystem&gt;Apple&lt;/ns2:partnerSystem&gt;&#xd;
			&lt;ns2:verified&gt;true&lt;/ns2:verified&gt;&#xd;
			&lt;ns2:uploadCount&gt;0&lt;/ns2:uploadCount&gt;&#xd;
			&lt;ns2:tenantId&gt;${tenantVrzn}&lt;/ns2:tenantId&gt;&#xd;
			&lt;ns2:processingType&gt;BATCH&lt;/ns2:processingType&gt;&#xd;
			&lt;ns2:rawUploadData&gt;NOT REQUIRED&lt;/ns2:rawUploadData&gt;&#xd;
		&lt;/ns2:header&gt;&#xd;
&#xd;
		&lt;ns2:device&gt;&#xd;
			&lt;manufacturer&gt;Apple&lt;/manufacturer&gt;&#xd;
			&lt;model&gt;iOS 13.0&lt;/model&gt;&#xd;
		&lt;/ns2:device&gt;&#xd;
&#xd;
		&lt;ns2:readings&gt;&#xd;
			&lt;startTime&gt;${dateToday}T00:00:00.000+03:00&lt;/startTime&gt;&#xd;
			&lt;endTime&gt;${dateTomorrow}T00:00:00.000+03:00&lt;/endTime&gt;&#xd;
			&lt;duration&gt;86400&lt;/duration&gt;&#xd;
			&lt;readingId&gt;${randomNumericString}&lt;/readingId&gt;&#xd;
			&lt;partnerReadingId&gt;${randomAlphaNumericString}-${randomAlphaNumericString}&lt;/partnerReadingId&gt;&#xd;
			&lt;readingType&gt;WALKING&lt;/readingType&gt;&#xd;
			&lt;dataCategory&gt;ROUTINE&lt;/dataCategory&gt;&#xd;
			&lt;integrity&gt;VERIFIED&lt;/integrity&gt;&#xd;
			&lt;isDuplicate&gt;0&lt;/isDuplicate&gt;&#xd;
			&lt;isValid&gt;1&lt;/isValid&gt;&#xd;
			&lt;isActive&gt;1&lt;/isActive&gt;&#xd;
			&lt;aggregationId&gt;${randomNumericString}&lt;/aggregationId&gt;&#xd;
		&lt;workout&gt;&#xd;
			&lt;partnerActivityType&gt;WALKING&lt;/partnerActivityType&gt;&#xd;
			&lt;energyExpenditure&gt;&#xd;
				&lt;value&gt;${awawKilojoule}&lt;/value&gt;&#xd;
				&lt;unitOfMeasurement&gt;KILOJOULES&lt;/unitOfMeasurement&gt;&#xd;
			&lt;/energyExpenditure&gt;&lt;heartRate/&gt;&#xd;
		&lt;/workout&gt;&#xd;
		&lt;/ns2:readings&gt;&#xd;
		&lt;/ns2:DeviceUpload&gt;&#xd;
      &lt;/v1:genericTBMRequest&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">text/xml;charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="SOAPAction" elementType="Header">
                    <stringProp name="Header.name">SOAPAction</stringProp>
                    <stringProp name="Header.value">&quot;/SendTransportBridgeMessageToTVGService/SendTransportBridgeMessageToTVGOp&quot;</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SOAP: Weight" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://schemas.vitalitytibcoservices.com/vts/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:genericTBMRequest&gt;&#xd;
         &lt;v1:messageType&gt;xml&lt;/v1:messageType&gt;&#xd;
         &lt;v1:destinationTopic&gt;${tibcoGDLQueue}&lt;/v1:destinationTopic&gt;&#xd;
		&lt;ns2:DeviceUpload  xmlns:ns2=&quot;http://schemas.discovery.co.za/vitality&quot;&gt;&#xd;
		&lt;ns2:header&gt;&#xd;
			&lt;ns2:user&gt;&#xd;
				&lt;entityNo&gt;${entityNo}&lt;/entityNo&gt;&#xd;
			&lt;/ns2:user&gt;&#xd;
			&lt;ns2:uploadDate&gt;${dateToday}T11:23:33.176Z&lt;/ns2:uploadDate&gt;&#xd;
			&lt;ns2:sessionId&gt;${randomAlphaNumericString}-${randomAlphaNumericString}&lt;/ns2:sessionId&gt;&#xd;
			&lt;ns2:gdlSessionId&gt;${randomNumericString}&lt;/ns2:gdlSessionId&gt;&#xd;
			&lt;ns2:partnerSystem&gt;Apple&lt;/ns2:partnerSystem&gt;&#xd;
			&lt;ns2:verified&gt;false&lt;/ns2:verified&gt;&#xd;
			&lt;ns2:uploadCount&gt;0&lt;/ns2:uploadCount&gt;&#xd;
			&lt;ns2:tenantId&gt;${tenantVrzn}&lt;/ns2:tenantId&gt;&#xd;
			&lt;ns2:processingType&gt;REALTIME&lt;/ns2:processingType&gt;&#xd;
			&lt;ns2:rawUploadData&gt;NOT REQUIRED&lt;/ns2:rawUploadData&gt;&#xd;
		&lt;/ns2:header&gt;&#xd;
&#xd;
		&lt;ns2:device&gt;&#xd;
			&lt;manufacturer&gt;Apple&lt;/manufacturer&gt;&#xd;
			&lt;model&gt;iOS 13.0&lt;/model&gt;&#xd;
		&lt;/ns2:device&gt;&#xd;
&#xd;
		&lt;ns2:readings&gt;&#xd;
			&lt;startTime&gt;${dateToday}T00:00:00.000+03:00&lt;/startTime&gt;&#xd;
			&lt;endTime&gt;${dateTomorrow}T00:00:00.000+03:00&lt;/endTime&gt;&#xd;
			&lt;duration&gt;86400&lt;/duration&gt;&#xd;
			&lt;partnerSystemSource&gt;Apple Health&lt;/partnerSystemSource&gt;&#xd;
			&lt;readingId&gt;${randomNumericString}&lt;/readingId&gt;&#xd;
			&lt;partnerReadingId&gt;${randomAlphaNumericString}-${randomAlphaNumericString}&lt;/partnerReadingId&gt;&#xd;
			&lt;readingType&gt;UNKNOWN&lt;/readingType&gt;&#xd;
			&lt;dataCategory&gt;BIOMETRIC&lt;/dataCategory&gt;&#xd;
			&lt;integrity&gt;UNVERIFIED&lt;/integrity&gt;&#xd;
			&lt;isDuplicate&gt;0&lt;/isDuplicate&gt;&#xd;
			&lt;isValid&gt;1&lt;/isValid&gt;&#xd;
			&lt;isActive&gt;1&lt;/isActive&gt;&#xd;
			&lt;aggregationId&gt;${randomNumericString}&lt;/aggregationId&gt;&#xd;
			&lt;workout&gt;&#xd;
				&lt;partnerActivityType&gt;WEIGHT&lt;/partnerActivityType&gt;&#xd;
				&lt;heartRate/&gt;&#xd;
			&lt;/workout&gt;&#xd;
			&lt;healthData&gt;&#xd;
				&lt;weight&gt;&#xd;
				&lt;value&gt;${weightKg}&lt;/value&gt;&#xd;
				&lt;unitOfMeasurement&gt;KILOGRAMS&lt;/unitOfMeasurement&gt;&#xd;
				&lt;/weight&gt;&#xd;
			&lt;heartRate/&gt;&lt;/healthData&gt;&#xd;
		&lt;/ns2:readings&gt;&#xd;
		&lt;/ns2:DeviceUpload&gt;&#xd;
      &lt;/v1:genericTBMRequest&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip,deflate</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">text/xml;charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="SOAPAction" elementType="Header">
                    <stringProp name="Header.name">SOAPAction</stringProp>
                    <stringProp name="Header.value">&quot;/SendTransportBridgeMessageToTVGService/SendTransportBridgeMessageToTVGOp&quot;</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="VGUSA-5115 Fix for Newsfeed deadlocks on news_feed_gen_log table" enabled="true"/>
        <hashTree>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Users" enabled="false">
            <collectionProp name="UserParameters.names">
              <stringProp name="-135932017">elevate.id</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="68183863">
                <stringProp name="-211925331">${elevateID_1}</stringProp>
              </collectionProp>
              <collectionProp name="-1106387488">
                <stringProp name="1281576372">${elevate.id.1}</stringProp>
              </collectionProp>
              <collectionProp name="-1106359892">
                <stringProp name="1281576403">${elevate.id.2}</stringProp>
              </collectionProp>
              <collectionProp name="-1106356383">
                <stringProp name="1281576434">${elevate.id.3}</stringProp>
              </collectionProp>
              <collectionProp name="-1106352874">
                <stringProp name="1281576465">${elevate.id.4}</stringProp>
              </collectionProp>
              <collectionProp name="-1106349365">
                <stringProp name="1281576496">${elevate.id.5}</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
          </UserParameters>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV: test data" enabled="true">
            <stringProp name="TestPlan.comments">User&apos;s Creds</stringProp>
            <stringProp name="filename">/Users/DNesterov/apache-jmeter-4.0/CSV/${active.users}.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">elevate.id</stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="limit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">100</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">limit</stringProp>
                </elementProp>
                <elementProp name="mobile" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">mobile</stringProp>
                </elementProp>
                <elementProp name="offset" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">offset</stringProp>
                </elementProp>
                <elementProp name="lang" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">en_US</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">lang</stringProp>
                </elementProp>
                <elementProp name="plain" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">plain</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${vapBase}</stringProp>
            <stringProp name="HTTPSampler.port">${vapPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/vap/rest/nfe/mobile/all/user/${elevate.id}</stringProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </ConfigTestElement>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Purge NewsFeed" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="671778703">Request method &amp;#39;POST&amp;#39; not supported</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET NewsFeed" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="140636634">has_more</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="HOT FIX" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1514078571000</longProp>
        <longProp name="ThreadGroup.end_time">1514078571000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">5</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="11/03 issue with the calories stuck on VDP for APO, SAP, MLI - HOT FIX" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV: test data" enabled="true">
            <stringProp name="TestPlan.comments">User&apos;s Creds</stringProp>
            <stringProp name="filename">/Users/DNesterov/apache-jmeter-4.0/CSV/WorkoutDataSubmition.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">entityNo,tenantId,weight,kilojoules,steps</stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">false</boolProp>
            <boolProp name="stopThread">true</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${msBase}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">tibcoservices/sendTransportBridgeMessageToTVGService</stringProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout">30000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">300000</stringProp>
          </ConfigTestElement>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip,deflate</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">text/xml;charset=UTF-8</stringProp>
              </elementProp>
              <elementProp name="SOAPAction" elementType="Header">
                <stringProp name="Header.name">SOAPAction</stringProp>
                <stringProp name="Header.value">&quot;/SendTransportBridgeMessageToTVGService/SendTransportBridgeMessageToTVGOp&quot;</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SOAP: Weight" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://schemas.vitalitytibcoservices.com/vts/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:genericTBMRequest&gt;&#xd;
         &lt;v1:messageType&gt;xml&lt;/v1:messageType&gt;&#xd;
         &lt;v1:destinationTopic&gt;${tibcoGDLQueue}&lt;/v1:destinationTopic&gt;&#xd;
		&lt;ns2:DeviceUpload  xmlns:ns2=&quot;http://schemas.discovery.co.za/vitality&quot;&gt;&#xd;
		&lt;ns2:header&gt;&#xd;
			&lt;ns2:user&gt;&#xd;
				&lt;entityNo&gt;${entityNo}&lt;/entityNo&gt;&#xd;
			&lt;/ns2:user&gt;&#xd;
			&lt;ns2:uploadDate&gt;${dateToday}T11:23:33.176Z&lt;/ns2:uploadDate&gt;&#xd;
			&lt;ns2:sessionId&gt;${randomAlphaNumericString}-${randomAlphaNumericString}&lt;/ns2:sessionId&gt;&#xd;
			&lt;ns2:gdlSessionId&gt;${randomNumericString}&lt;/ns2:gdlSessionId&gt;&#xd;
			&lt;ns2:partnerSystem&gt;Apple&lt;/ns2:partnerSystem&gt;&#xd;
			&lt;ns2:verified&gt;false&lt;/ns2:verified&gt;&#xd;
			&lt;ns2:uploadCount&gt;0&lt;/ns2:uploadCount&gt;&#xd;
			&lt;ns2:tenantId&gt;${tenantId}&lt;/ns2:tenantId&gt;&#xd;
			&lt;ns2:processingType&gt;REALTIME&lt;/ns2:processingType&gt;&#xd;
			&lt;ns2:rawUploadData&gt;NOT REQUIRED&lt;/ns2:rawUploadData&gt;&#xd;
		&lt;/ns2:header&gt;&#xd;
&#xd;
		&lt;ns2:device&gt;&#xd;
			&lt;manufacturer&gt;Apple&lt;/manufacturer&gt;&#xd;
			&lt;model&gt;iOS 13.0&lt;/model&gt;&#xd;
		&lt;/ns2:device&gt;&#xd;
&#xd;
		&lt;ns2:readings&gt;&#xd;
			&lt;startTime&gt;${dateToday}T00:00:00.000+03:00&lt;/startTime&gt;&#xd;
			&lt;endTime&gt;${dateTomorrow}T00:00:00.000+03:00&lt;/endTime&gt;&#xd;
			&lt;duration&gt;86400&lt;/duration&gt;&#xd;
			&lt;partnerSystemSource&gt;Apple Health&lt;/partnerSystemSource&gt;&#xd;
			&lt;readingId&gt;${randomNumericString}&lt;/readingId&gt;&#xd;
			&lt;partnerReadingId&gt;${randomAlphaNumericString}-${randomAlphaNumericString}&lt;/partnerReadingId&gt;&#xd;
			&lt;readingType&gt;UNKNOWN&lt;/readingType&gt;&#xd;
			&lt;dataCategory&gt;BIOMETRIC&lt;/dataCategory&gt;&#xd;
			&lt;integrity&gt;UNVERIFIED&lt;/integrity&gt;&#xd;
			&lt;isDuplicate&gt;0&lt;/isDuplicate&gt;&#xd;
			&lt;isValid&gt;1&lt;/isValid&gt;&#xd;
			&lt;isActive&gt;1&lt;/isActive&gt;&#xd;
			&lt;aggregationId&gt;${randomNumericString}&lt;/aggregationId&gt;&#xd;
			&lt;workout&gt;&#xd;
				&lt;partnerActivityType&gt;WEIGHT&lt;/partnerActivityType&gt;&#xd;
				&lt;heartRate/&gt;&#xd;
			&lt;/workout&gt;&#xd;
			&lt;healthData&gt;&#xd;
				&lt;weight&gt;&#xd;
				&lt;value&gt;${weight}&lt;/value&gt;&#xd;
				&lt;unitOfMeasurement&gt;KILOGRAMS&lt;/unitOfMeasurement&gt;&#xd;
				&lt;/weight&gt;&#xd;
			&lt;heartRate/&gt;&lt;/healthData&gt;&#xd;
		&lt;/ns2:readings&gt;&#xd;
		&lt;/ns2:DeviceUpload&gt;&#xd;
      &lt;/v1:genericTBMRequest&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-202516509">Success</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SOAP: Calories" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://schemas.vitalitytibcoservices.com/vts/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:genericTBMRequest&gt;&#xd;
         &lt;v1:messageType&gt;xml&lt;/v1:messageType&gt;&#xd;
         &lt;v1:destinationTopic&gt;${tibcoGDLQueue}&lt;/v1:destinationTopic&gt;&#xd;
		&lt;ns2:DeviceUpload  xmlns:ns2=&quot;http://schemas.discovery.co.za/vitality&quot;&gt;&#xd;
		&lt;ns2:header&gt;&#xd;
			&lt;ns2:user&gt;&#xd;
				&lt;entityNo&gt;${entityNo}&lt;/entityNo&gt;&#xd;
			&lt;/ns2:user&gt;&#xd;
			&lt;ns2:uploadDate&gt;${dateToday}T11:23:33.176Z&lt;/ns2:uploadDate&gt;&#xd;
			&lt;ns2:sessionId&gt;${randomAlphaNumericString}-${randomAlphaNumericString}&lt;/ns2:sessionId&gt;&#xd;
			&lt;ns2:gdlSessionId&gt;${randomNumericString}&lt;/ns2:gdlSessionId&gt;&#xd;
			&lt;ns2:partnerSystem&gt;Apple&lt;/ns2:partnerSystem&gt;&#xd;
			&lt;ns2:verified&gt;true&lt;/ns2:verified&gt;&#xd;
			&lt;ns2:uploadCount&gt;0&lt;/ns2:uploadCount&gt;&#xd;
			&lt;ns2:tenantId&gt;${tenantId}&lt;/ns2:tenantId&gt;&#xd;
			&lt;ns2:processingType&gt;BATCH&lt;/ns2:processingType&gt;&#xd;
			&lt;ns2:rawUploadData&gt;NOT REQUIRED&lt;/ns2:rawUploadData&gt;&#xd;
		&lt;/ns2:header&gt;&#xd;
&#xd;
		&lt;ns2:device&gt;&#xd;
			&lt;manufacturer&gt;Apple&lt;/manufacturer&gt;&#xd;
			&lt;model&gt;iOS 13.0&lt;/model&gt;&#xd;
		&lt;/ns2:device&gt;&#xd;
&#xd;
		&lt;ns2:readings&gt;&#xd;
			&lt;startTime&gt;${dateToday}T00:00:00.000+03:00&lt;/startTime&gt;&#xd;
			&lt;endTime&gt;${dateTomorrow}T00:00:00.000+03:00&lt;/endTime&gt;&#xd;
			&lt;duration&gt;86400&lt;/duration&gt;&#xd;
			&lt;readingId&gt;${randomNumericString}&lt;/readingId&gt;&#xd;
			&lt;partnerReadingId&gt;${randomAlphaNumericString}-${randomAlphaNumericString}&lt;/partnerReadingId&gt;&#xd;
			&lt;readingType&gt;WALKING&lt;/readingType&gt;&#xd;
			&lt;dataCategory&gt;ROUTINE&lt;/dataCategory&gt;&#xd;
			&lt;integrity&gt;VERIFIED&lt;/integrity&gt;&#xd;
			&lt;isDuplicate&gt;0&lt;/isDuplicate&gt;&#xd;
			&lt;isValid&gt;1&lt;/isValid&gt;&#xd;
			&lt;isActive&gt;1&lt;/isActive&gt;&#xd;
			&lt;aggregationId&gt;${randomNumericString}&lt;/aggregationId&gt;&#xd;
		&lt;workout&gt;&#xd;
			&lt;partnerActivityType&gt;WALKING&lt;/partnerActivityType&gt;&#xd;
			&lt;energyExpenditure&gt;&#xd;
				&lt;value&gt;${kilojoules}&lt;/value&gt;&#xd;
				&lt;unitOfMeasurement&gt;KILOJOULES&lt;/unitOfMeasurement&gt;&#xd;
			&lt;/energyExpenditure&gt;&lt;heartRate/&gt;&#xd;
		&lt;/workout&gt;&#xd;
		&lt;/ns2:readings&gt;&#xd;
		&lt;/ns2:DeviceUpload&gt;&#xd;
      &lt;/v1:genericTBMRequest&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-202516509">Success</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SOAP: Steps" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:v1=&quot;http://schemas.vitalitytibcoservices.com/vts/v1&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;v1:genericTBMRequest&gt;&#xd;
         &lt;v1:messageType&gt;xml&lt;/v1:messageType&gt;&#xd;
         &lt;v1:destinationTopic&gt;${tibcoGDLQueue}&lt;/v1:destinationTopic&gt;&#xd;
		&lt;ns2:DeviceUpload  xmlns:ns2=&quot;http://schemas.discovery.co.za/vitality&quot;&gt;&#xd;
		&lt;ns2:header&gt;&#xd;
			&lt;ns2:user&gt;&#xd;
				&lt;entityNo&gt;${entityNo}&lt;/entityNo&gt;&#xd;
			&lt;/ns2:user&gt;&#xd;
			&lt;ns2:uploadDate&gt;${dateToday}T11:23:33.176Z&lt;/ns2:uploadDate&gt;&#xd;
			&lt;ns2:sessionId&gt;${randomAlphaNumericString}-${randomAlphaNumericString}&lt;/ns2:sessionId&gt;&#xd;
			&lt;ns2:gdlSessionId&gt;${randomNumericString}&lt;/ns2:gdlSessionId&gt;&#xd;
			&lt;ns2:partnerSystem&gt;Apple&lt;/ns2:partnerSystem&gt;&#xd;
			&lt;ns2:verified&gt;true&lt;/ns2:verified&gt;&#xd;
			&lt;ns2:uploadCount&gt;0&lt;/ns2:uploadCount&gt;&#xd;
			&lt;ns2:tenantId&gt;${tenantId}&lt;/ns2:tenantId&gt;&#xd;
			&lt;ns2:processingType&gt;REALTIME&lt;/ns2:processingType&gt;&#xd;
			&lt;ns2:rawUploadData&gt;NOT REQUIRED&lt;/ns2:rawUploadData&gt;&#xd;
		&lt;/ns2:header&gt;&#xd;
		&#xd;
		&lt;ns2:device&gt;&#xd;
			&lt;manufacturer&gt;Apple&lt;/manufacturer&gt;&#xd;
			&lt;model&gt;iOS 13.0&lt;/model&gt;&#xd;
		&lt;/ns2:device&gt;&#xd;
		&#xd;
		&lt;ns2:readings&gt;&#xd;
			&lt;startTime&gt;${dateToday}T00:00:00.000+03:00&lt;/startTime&gt;&#xd;
			&lt;endTime&gt;${dateTomorrow}T00:00:00.000+03:00&lt;/endTime&gt;&#xd;
			&lt;duration&gt;86400&lt;/duration&gt;&#xd;
			&lt;manufacturer&gt;Apple&lt;/manufacturer&gt;&#xd;
			&lt;model&gt;iOS 13.0&lt;/model&gt;&#xd;
			&lt;readingId&gt;${randomNumericString}&lt;/readingId&gt;&#xd;
			&lt;partnerReadingId&gt;${randomAlphaNumericString}-${randomAlphaNumericString}&lt;/partnerReadingId&gt;&#xd;
			&lt;readingType&gt;WALKING&lt;/readingType&gt;&#xd;
			&lt;dataCategory&gt;ROUTINE&lt;/dataCategory&gt;&#xd;
			&lt;integrity&gt;VERIFIED&lt;/integrity&gt;&#xd;
			&lt;isDuplicate&gt;0&lt;/isDuplicate&gt;&#xd;
			&lt;isValid&gt;1&lt;/isValid&gt;&#xd;
			&lt;aggregationId&gt;${randomNumericString}&lt;/aggregationId&gt;&#xd;
				&lt;healthData&gt;&#xd;
				&lt;heartRate/&gt;&#xd;
				&lt;/healthData&gt;&#xd;
				&lt;workout&gt;&#xd;
					&lt;totalSteps&gt;${steps}&lt;/totalSteps&gt;&#xd;
				&lt;partnerActivityType&gt;WALKING&lt;/partnerActivityType&gt;&#xd;
				&lt;heartRate/&gt;&#xd;
				&lt;/workout&gt;&#xd;
		&lt;/ns2:readings&gt;&#xd;
		&lt;/ns2:DeviceUpload&gt;&#xd;
      &lt;/v1:genericTBMRequest&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-202516509">Success</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ADPProgramActivated issue - AETNA" enabled="true"/>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV: test data" enabled="true">
            <stringProp name="TestPlan.comments">User&apos;s Creds</stringProp>
            <stringProp name="filename">/Users/DNesterov/apache-jmeter-4.0/CSV/Hot_Fix/Program_Activation_1-20.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">apolloIdHF,programType</stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">false</boolProp>
            <boolProp name="stopThread">true</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST &quot;programActivated&quot; to DPM_EVENT_LOG notification- AR Zuul" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;vitalityMemberId&quot;:1431787793,&quot;programIdentifier&quot;:&quot;FIEYW&quot;,&quot;eventDate&quot;:&quot;2019-11-18T00:00Z&quot;,&quot;createdAt&quot;:&quot;${dateToday}T00:00Z&quot;,&quot;activated&quot;:true}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${zuulVgBase}</stringProp>
            <stringProp name="HTTPSampler.port">${zuulPort}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">notification/${tenantApollo}/v1/notification/notifyMember/1431787793/programActivated</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: JMS message Sent" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-711284890">JMS message sent to queue for member</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
              <stringProp name="Scope.variable">physAct</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST &quot;programActivated&quot; to DPM_EVENT_LOG notification- VAP Zuul" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;vitalityMemberId&quot;:${apolloIdHF},&quot;programIdentifier&quot;:&quot;${programType}&quot;,&quot;eventDate&quot;:&quot;2020-01-27T00:00Z&quot;,&quot;createdAt&quot;:&quot;${dateToday}T00:00Z&quot;,&quot;activated&quot;:true}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${zuulVapBase}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">vap/project_eve/rest/dpm/notifyMember/${apolloIdHF}/programActivated/2020-01-27T00:00:00-0600?token=7868SAHGKLAJSG94U082UJGEPOGJPA8WUY9T72Q3GFPGW4HYJ390UT839QYFGOQ73UIGT</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/plain</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert:   &quot;status&quot; : 1" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1655200039"> &quot;status&quot; : 1</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
              <stringProp name="Scope.variable">physAct</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Activating Benefits for ATTAIN" enabled="false"/>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV: test data" enabled="true">
            <stringProp name="TestPlan.comments">User&apos;s Creds</stringProp>
            <stringProp name="filename">/Users/DNesterov/apache-jmeter-4.0/CSV/Hot_Fix/Benefits_01_06.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">apolloIdHF,benefitType,eff_From,eff_To</stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">false</boolProp>
            <boolProp name="stopThread">true</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Core: Possible Components" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="entityNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${apolloIdHF}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">entityNo</stringProp>
                </elementProp>
                <elementProp name="recalcFromDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">0001/01/01+12%3A00</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">recalcFromDate</stringProp>
                </elementProp>
                <elementProp name="action" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">recalcEntityComponents</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">action</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${vitalitycoreusBase}</stringProp>
            <stringProp name="HTTPSampler.port">${corePort}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">possco/possible_compo_recalc_servlet/?action=recalcEntityComponents</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="0"></stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Core: Benefit Activation" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:vit=&quot;http://schemas.discovery.co.za/vitality&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;vit:BenefitMaintenanceRequestMessage schemaVersion=&quot;1.0&quot;&gt;&#xd;
         &lt;vit:EntityNumber&gt;${apolloIdHF}&lt;/vit:EntityNumber&gt;&#xd;
         &lt;vit:BenefitComponentIdentifier&gt;${benefitType}&lt;/vit:BenefitComponentIdentifier&gt;&#xd;
         &lt;vit:PartnerMembershipNumber&gt;${apolloIdHF}&lt;/vit:PartnerMembershipNumber&gt;&#xd;
         &lt;vit:EffectiveFrom&gt;${eff_From}&lt;/vit:EffectiveFrom&gt;&#xd;
         &lt;vit:EffectiveTo&gt;${eff_To}&lt;/vit:EffectiveTo&gt;&#xd;
         &lt;vit:ActivityIdentifier&gt;0&lt;/vit:ActivityIdentifier&gt;&#xd;
         &lt;vit:ReasonCode&gt;43&lt;/vit:ReasonCode&gt;&#xd;
         &lt;vit:Instruction&gt;ACTIVATION&lt;/vit:Instruction&gt;&#xd;
      &lt;/vit:BenefitMaintenanceRequestMessage&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">vitalitycoreus.dhna.corp</stringProp>
            <stringProp name="HTTPSampler.port">7001</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">BenefitManager/benefitService/</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip,deflate</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">text/xml;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="SOAPAction" elementType="Header">
                  <stringProp name="Header.name">SOAPAction</stringProp>
                  <stringProp name="Header.value">&quot;&quot;</stringProp>
                </elementProp>
                <elementProp name="Content-Length" elementType="Header">
                  <stringProp name="Header.name">Content-Length</stringProp>
                  <stringProp name="Header.value">821</stringProp>
                </elementProp>
                <elementProp name="Host" elementType="Header">
                  <stringProp name="Header.name">Host</stringProp>
                  <stringProp name="Header.value">vitalitycoreus.dhna.corp:7001</stringProp>
                </elementProp>
                <elementProp name="Connection" elementType="Header">
                  <stringProp name="Header.name">Connection</stringProp>
                  <stringProp name="Header.value">Keep-Alive</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Apache-HttpClient/4.1.1 (java 1.5)</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="0"></stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Active Rewards: AW Dispatch" enabled="false"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="numberOfPurchase" elementType="Argument">
                <stringProp name="Argument.name">numberOfPurchase</stringProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <stringProp name="Argument.desc">dedutct one value of actual quantity</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV: test data" enabled="true">
            <stringProp name="TestPlan.comments">User&apos;s Creds</stringProp>
            <stringProp name="filename">/Users/DNesterov/apache-jmeter-4.0/CSV/Hot_Fix/Apple_Watch_Dispatch_Recon_1-20-20.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">userId,trackingNo,carrier,tenantId</stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">false</boolProp>
            <boolProp name="stopThread">true</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${wso2Base}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout">30000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">300000</stringProp>
          </ConfigTestElement>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Tenant" enabled="false">
            <boolProp name="TransactionController.parent">true</boolProp>
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Wait for the tenant" enabled="true">
              <stringProp name="WhileController.condition">${__groovy(vars.get(&quot;status&quot;) != &quot;1&quot;,)}</stringProp>
            </WhileController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Auth Token" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="entity_no" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${userId}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">entity_no</stringProp>
                    </elementProp>
                    <elementProp name="encrypted_entity_no" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${userIdEncrypted}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">encrypted_entity_no</stringProp>
                    </elementProp>
                    <elementProp name="_p" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">IOS</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">_p</stringProp>
                    </elementProp>
                    <elementProp name="_v" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${mob.app.version}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">_v</stringProp>
                    </elementProp>
                    <elementProp name="_doc_browser_context" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">true</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">_doc_browser_context</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${msBase}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${msPath}/auth/simulate_auth</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Tenant" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">tenantId;status</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.output.tenant_id;$.status</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND;NOT_FOUND</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Encrypted Entity" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">import java.security.MessageDigest;

//Entity Encription for Apollo
MessageDigest digest = MessageDigest.getInstance(&quot;MD5&quot;);
byte[] bytes = digest.digest((&quot;${userId}&quot; + &quot;${msSalt}&quot;).getBytes());
vars.put(&quot;userIdEncrypted&quot;,javax.xml.bind.DatatypeConverter.printHexBinary(bytes).toLowerCase());</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                <stringProp name="IfController.condition">${__groovy(vars.get(&quot;status&quot;) = &quot;1&quot;,)}</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <boolProp name="IfController.useExpression">true</boolProp>
              </IfController>
              <hashTree>
                <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
                  <intProp name="ActionProcessor.action">3</intProp>
                  <intProp name="ActionProcessor.target">0</intProp>
                  <stringProp name="ActionProcessor.duration">0</stringProp>
                </TestAction>
                <hashTree>
                  <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                    <collectionProp name="Asserion.test_strings">
                      <stringProp name="-1300468476">${mnemonic}</stringProp>
                    </collectionProp>
                    <stringProp name="Assertion.custom_message"></stringProp>
                    <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                    <boolProp name="Assertion.assume_success">false</boolProp>
                    <intProp name="Assertion.test_type">1</intProp>
                    <stringProp name="Assertion.scope">variable</stringProp>
                    <stringProp name="Scope.variable">eventCreated_1</stringProp>
                  </ResponseAssertion>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Apollo WSO2 Access Token" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="grant_type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">client_credentials</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">grant_type</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/token</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Basic ${wso2Token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extracting WSO2 AccessToken" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">wso2AccessToken</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET: Repayment History" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="memberId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${userId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">memberId</stringProp>
                </elementProp>
                <elementProp name="tenantId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${tenantId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">tenantId</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/ActiveRewards/1.0/RepaymentHistory</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="x-vsl-timestamp" elementType="Header">
                  <stringProp name="Header.name">x-vsl-timestamp</stringProp>
                  <stringProp name="Header.value">${timeStamp}</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${wso2AccessToken}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract: purchase ID" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">purchaseId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.payload.content.purchase[${numberOfPurchase}].purchaseId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract: purchaseReference" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">purchaseReference</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.payload.content.purchase[${numberOfPurchase}].purchaseInstallmentInfo.purchaseReference[0].purchaseReference</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ReGex: tenant" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">URL</stringProp>
              <stringProp name="RegexExtractor.refname">tenantID</stringProp>
              <stringProp name="RegexExtractor.regex">tenantId=(.*)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Scope.variable"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract: Shipping Date" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">shippingDate</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.payload.content.purchase[${numberOfPurchase}].purchaseInstallmentInfo.installmentPaymentMethod[0].effectiveFrom</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract: DistributorReference" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">distributorReference</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.payload.content.purchase[0].purchaseInstallmentInfo.purchaseReference[${numberOfPurchase}].purchaseReference</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: Watch Dispatch" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;purchaseReference&quot;: &quot;${purchaseReference}&quot;,&#xd;
	&quot;purchaseReferenceType&quot;: &quot;OrderReference&quot;,&#xd;
	&quot;distributorReferenceNumber&quot;: &quot;${distributorReference}&quot;,&#xd;
	&quot;courier&quot;: &quot;${carrier}&quot;,&#xd;
	&quot;orderTrackingNumber&quot;: &quot;${trackingNo}&quot;,&#xd;
	&quot;dateOfDispatch&quot;: &quot;${shippingDate}T19:00:01Z&quot;,&#xd;
	&quot;tenantId&quot;: &quot;${tenantID}&quot;,&#xd;
	&quot;purchaseId&quot;: &quot;${purchaseId}&quot;,&#xd;
	&quot;supplierId&quot;: &quot;${supplierId}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/ActiveRewards/1.0/WatchDispatch</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="x-vsl-timestamp" elementType="Header">
                  <stringProp name="Header.name">x-vsl-timestamp</stringProp>
                  <stringProp name="Header.value">${timeStamp}</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${wso2AccessToken}</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2132625647">Watch Dispatch successful</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Issues Triaging" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1514078571000</longProp>
        <longProp name="ThreadGroup.end_time">1514078571000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">300</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Apollo TIBCO: programActivated notification triage" enabled="true"/>
        <hashTree>
          <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${wso2Base}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout">30000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">300000</stringProp>
          </ConfigTestElement>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Activate: FIEYW" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Apollo WSO2 Access Token" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="grant_type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">client_credentials</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">grant_type</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/token</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Basic ${wso2Token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extracting WSO2 AccessToken" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">wso2BearerToken</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RTE: Enrolling a new user" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&#xd;
 {&#xd;
  &quot;enrollmentRequestEncrypted&quot;: {&#xd;
    &quot;firstNameEncrypted&quot;: &quot;${encryptedFirstName}&quot;,&#xd;
    &quot;lastNameEncrypted&quot;: &quot;${encryptedLastName}&quot;,&#xd;
    &quot;dateOfBirthEncrypted&quot;: &quot;${encryptedDOB}&quot;,&#xd;
    &quot;insuredId&quot;: &quot;${randomString}&quot;,&#xd;
    &quot;gender&quot;: &quot;${__chooseRandom(M,F,U,randomProduct)}&quot;,&#xd;
    &quot;vitalityCoverageEffectiveDate&quot;: &quot;${__RandomDate(yyyy-MM-dd,2018-01-01,${__time(yyyy-MM-dd)},,)}&quot;,&#xd;
    &quot;productIndicator&quot;: &quot;FULL&quot;,&#xd;
    &quot;emailAddress&quot;: &quot;POC-${randomString}@rte-perf.com&quot;,&#xd;
    &quot;zipCode&quot;: &quot;&quot;,&#xd;
    &quot;customerServicePhone&quot;: &quot;${encryptedPhoneNumber}&quot;,&#xd;
    &quot;reportField1&quot;: &quot;123&quot;,&#xd;
    &quot;reportField2&quot;: &quot;20170701&quot;,&#xd;
    &quot;reportField3&quot;: &quot;ABC&quot;,&#xd;
    &quot;reportField4&quot;: &quot;DEF&quot;&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/${wso2RtePath}/svc/0/apolloEnrollmentEncrypted</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${wso2BearerToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Entity Number" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">apolloId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.enrollmentResponseEncrypted.vitalityId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert: User has been created" enabled="true">
                <stringProp name="JSON_PATH">$.enrollmentResponseEncrypted.insuredId</stringProp>
                <stringProp name="EXPECTED_VALUE"></stringProp>
                <boolProp name="JSONVALIDATION">false</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: Vitality ID present" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1165624797">vitalityId</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Capture Purchase" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;tenantId&quot;: 27,&#xd;
	&quot;supplierId&quot;: &quot;${supplierId}&quot;,&#xd;
	&quot;memberInfo&quot;: {&#xd;
		&quot;memberId&quot;: ${apolloId},&#xd;
		&quot;transactionDate&quot;: &quot;${dateToday} 01:05:34.177&quot;,&#xd;
		&quot;employerId&quot;: ${employerIdFull},&#xd;
		&quot;branchId&quot;: 0&#xd;
	},&#xd;
	&quot;purchase&quot;: {&#xd;
		&quot;purchaseDetails&quot;: {&#xd;
			&quot;taxAmount&quot;: &quot;USD 20.39&quot;,&#xd;
			&quot;totalCostAfterTax&quot;: &quot;USD 219.39&quot;,&#xd;
			&quot;carrierSubsidy&quot;: &quot;USD 0.0&quot;,&#xd;
			&quot;subsidyAmount&quot;: &quot;USD 0.0&quot;,&#xd;
			&quot;items&quot;: [&#xd;
				{&#xd;
					&quot;description&quot;: &quot;Apple Watch Nike Series 3 GPS, 38mm Space Gray Aluminum Case with Anthracite/Black Nike Sport Band&quot;,&#xd;
					&quot;purchaseItemReference&quot;: &quot;${randomNumericString}&quot;,&#xd;
					&quot;quantity&quot;: 1,&#xd;
					&quot;purchaseItemReferenceType&quot;: &quot;SKUNumber&quot;,&#xd;
					&quot;productPrice&quot;: &quot;USD 219.39&quot;&#xd;
				}&#xd;
			],&#xd;
			&quot;subsidyType&quot;: &quot;EmployerSubsidy&quot;,&#xd;
			&quot;purchaseReferenceType&quot;: &quot;OrderReference&quot;,&#xd;
			&quot;activationFee&quot;: &quot;USD 7.0&quot;,&#xd;
			&quot;productIdentifier&quot;: &quot;AppleWatch&quot;,&#xd;
			&quot;totalCostBeforeTax&quot;: &quot;USD 199.0&quot;,&#xd;
			&quot;financedAmount&quot;: &quot;USD 192.0&quot;,&#xd;
			&quot;upgradeCost&quot;: &quot;USD 0.0&quot;,&#xd;
			&quot;installmentPeriod&quot;: {&#xd;
				&quot;duration&quot;: 24,&#xd;
				&quot;paymentMethod&quot;: &quot;CreditCard&quot;,&#xd;
				&quot;dayOfInstallment&quot;: 0,&#xd;
				&quot;maxMonthlyAmount&quot;: &quot;USD 8.0&quot;,&#xd;
				&quot;durationType&quot;: &quot;MONTH&quot;&#xd;
			},&#xd;
			&quot;purchaseReference&quot;: &quot;${randomNumericString}&quot;,&#xd;
			&quot;reference&quot;: [&#xd;
				{&#xd;
					&quot;purchaseReference&quot;: &quot;${randomNumericString}5b040aa6-bae1-484f-8ace-6b09a0e763de&quot;,&#xd;
					&quot;purchaseReferenceType&quot;: &quot;BillingPartnerReference&quot;&#xd;
				}&#xd;
			],&#xd;
			&quot;discountLevels&quot;: [&#xd;
				{&#xd;
					&quot;type&quot;: &quot;DiscountLevel4&quot;,&#xd;
					&quot;value&quot;: &quot;USD 2.0&quot;&#xd;
				},&#xd;
				{&#xd;
					&quot;type&quot;: &quot;DiscountLevel3&quot;,&#xd;
					&quot;value&quot;: &quot;USD 2.0&quot;&#xd;
				},&#xd;
				{&#xd;
					&quot;type&quot;: &quot;DiscountLevel2&quot;,&#xd;
					&quot;value&quot;: &quot;USD 2.0&quot;&#xd;
				},&#xd;
				{&#xd;
					&quot;type&quot;: &quot;DiscountLevel1&quot;,&#xd;
					&quot;value&quot;: &quot;USD 2.0&quot;&#xd;
				}&#xd;
			],&#xd;
			&quot;actionHistory&quot;: {&#xd;
				&quot;eventDateTime&quot;: &quot;${dateToday}T00:08:46.779Z&quot;,&#xd;
				&quot;actionType&quot;: &quot;PurchaseInitiated&quot;&#xd;
			},&#xd;
			&quot;contactDetail&quot;: {&#xd;
				&quot;addresses&quot;: [&#xd;
					{&#xd;
						&quot;addressLine1&quot;: &quot;4837 W 119th Pl&quot;,&#xd;
						&quot;addressLine2&quot;: &quot;&quot;,&#xd;
						&quot;city&quot;: &quot;Hawthorne&quot;,&#xd;
						&quot;countryCode&quot;: &quot;US&quot;,&#xd;
						&quot;postalCode&quot;: &quot;90250&quot;,&#xd;
						&quot;state&quot;: &quot;CA&quot;&#xd;
					}&#xd;
				],&#xd;
				&quot;emails&quot;: [&#xd;
					{&#xd;
						&quot;emailAddress&quot;: &quot;${randomString}0@gmail.com&quot;&#xd;
					}&#xd;
				],&#xd;
				&quot;phoneNumbers&quot;: [&#xd;
					{&#xd;
						&quot;phoneNumber&quot;: &quot;213.494.0442&quot;&#xd;
					}&#xd;
				]&#xd;
			}&#xd;
		}&#xd;
	},&#xd;
	&quot;memberId&quot;: ${apolloId}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${tibcoBase}</stringProp>
              <stringProp name="HTTPSampler.port">${tibcoPort}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">arapi/ActiveRewards/CapturePurchase</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-vsl-timestamp</stringProp>
                    <stringProp name="Header.value">${timeStamp}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-vsl-version	</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="2004250716">Could not confirm purchase with B2S</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET: Repayment History" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="tenantId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">27</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">tenantId</stringProp>
                  </elementProp>
                  <elementProp name="memberId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${apolloId}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">memberId</stringProp>
                  </elementProp>
                  <elementProp name="purchaseType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">AppleWatch</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">purchaseType</stringProp>
                  </elementProp>
                  <elementProp name="effectiveFrom" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${dateToday}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">effectiveFrom</stringProp>
                  </elementProp>
                  <elementProp name="effectiveTo" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${dateTomorrow}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">effectiveTo</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${tibcoBase}</stringProp>
              <stringProp name="HTTPSampler.port">${tibcoPort}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">arapi/ActiveRewards/RepaymentHistory</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-vsl-timestamp</stringProp>
                    <stringProp name="Header.value">${timeStamp}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-vsl-version	</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1867169789">success</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract: purchase ID" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">purchaseId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.payload.content.purchase[0].purchaseId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract: purchaseReference" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">purchaseReference</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.payload.content.purchase[0].purchaseInstallmentInfo.purchaseReference[0].purchaseReference</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ReGex: tenant" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">URL</stringProp>
                <stringProp name="RegexExtractor.refname">tenantID</stringProp>
                <stringProp name="RegexExtractor.regex">tenantId=(.*?)</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Scope.variable"></stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST: Watch Dispatch" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;purchaseReference&quot;: &quot;${purchaseReference}&quot;,&#xd;
	&quot;purchaseReferenceType&quot;: &quot;OrderReference&quot;,&#xd;
	&quot;distributorReferenceNumber&quot;: &quot;${purchaseId}&quot;,&#xd;
	&quot;courier&quot;: &quot;UPS&quot;,&#xd;
	&quot;orderTrackingNumber&quot;: &quot;1ZA828Y90334683642&quot;,&#xd;
	&quot;dateOfDispatch&quot;: &quot;${dateToday}T19:00:01Z&quot;,&#xd;
	&quot;tenantId&quot;: &quot;${tenantApollo}&quot;,&#xd;
	&quot;purchaseId&quot;: &quot;${purchaseId}&quot;,&#xd;
	&quot;supplierId&quot;: &quot;${supplierId}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${tibcoBase}</stringProp>
              <stringProp name="HTTPSampler.port">${tibcoPort}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">arapi/ActiveRewards/WatchDispatch</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-vsl-timestamp</stringProp>
                    <stringProp name="Header.value">${timeStamp}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="2132625647">Watch Dispatch successful</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Activate: FIBYOD" enabled="false"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Apollo WSO2 Access Token" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="grant_type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">client_credentials</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">grant_type</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/token</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Basic ${wso2Token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extracting WSO2 AccessToken" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">wso2BearerToken</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RTE: Enrolling a new user" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&#xd;
 {&#xd;
  &quot;enrollmentRequestEncrypted&quot;: {&#xd;
    &quot;firstNameEncrypted&quot;: &quot;${encryptedFirstName}&quot;,&#xd;
    &quot;lastNameEncrypted&quot;: &quot;${encryptedLastName}&quot;,&#xd;
    &quot;dateOfBirthEncrypted&quot;: &quot;${encryptedDOB}&quot;,&#xd;
    &quot;insuredId&quot;: &quot;${randomString}&quot;,&#xd;
    &quot;gender&quot;: &quot;${__chooseRandom(M,F,U,randomProduct)}&quot;,&#xd;
    &quot;vitalityCoverageEffectiveDate&quot;: &quot;${__RandomDate(yyyy-MM-dd,2018-01-01,${__time(yyyy-MM-dd)},,)}&quot;,&#xd;
    &quot;productIndicator&quot;: &quot;FULL&quot;,&#xd;
    &quot;emailAddress&quot;: &quot;POC-${randomString}@rte-perf.com&quot;,&#xd;
    &quot;zipCode&quot;: &quot;&quot;,&#xd;
    &quot;customerServicePhone&quot;: &quot;${encryptedPhoneNumber}&quot;,&#xd;
    &quot;reportField1&quot;: &quot;123&quot;,&#xd;
    &quot;reportField2&quot;: &quot;20170701&quot;,&#xd;
    &quot;reportField3&quot;: &quot;ABC&quot;,&#xd;
    &quot;reportField4&quot;: &quot;DEF&quot;&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/${wso2RtePath}/svc/0/apolloEnrollmentEncrypted</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${wso2BearerToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Entity Number" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">apolloId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.enrollmentResponseEncrypted.vitalityId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert: User has been created" enabled="true">
                <stringProp name="JSON_PATH">$.enrollmentResponseEncrypted.insuredId</stringProp>
                <stringProp name="EXPECTED_VALUE"></stringProp>
                <boolProp name="JSONVALIDATION">false</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: Vitality ID present" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1165624797">vitalityId</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Activate: FIBYOD" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;tenantId&quot;: &quot;27&quot;,&#xd;
&quot;mode&quot;: &quot;Activate&quot;,&#xd;
&quot;programme&quot;: {&#xd;
&quot;entityNumber&quot;: ${apolloId}, &#xd;
&quot;programType&quot;: &quot;FIBYOD&quot;,&#xd;
&quot;effectivePeriods&quot;: [&#xd;
{&#xd;
&quot;effectiveFrom&quot;: &quot;${dateToday}&quot;,&#xd;
&quot;effectiveTo&quot;: &quot;9999-12-30&quot;&#xd;
}&#xd;
]&#xd;
}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${tibcoBase}</stringProp>
              <stringProp name="HTTPSampler.port">${tibcoPort}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">arapi/ActiveRewards/Activation</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-vsl-timestamp</stringProp>
                    <stringProp name="Header.value">${timeStamp}</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Programme Activated Assertion " enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="480266719">Programme Activated and Benefit Activated and Goal Generated</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Activate: SIBYOD" enabled="false"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Apollo WSO2 Access Token" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="grant_type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">client_credentials</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">grant_type</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/token</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Basic ${wso2Token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extracting WSO2 AccessToken" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">wso2BearerToken</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RTE: Enrolling a new user" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&#xd;
 {&#xd;
  &quot;enrollmentRequestEncrypted&quot;: {&#xd;
    &quot;firstNameEncrypted&quot;: &quot;${encryptedFirstName}&quot;,&#xd;
    &quot;lastNameEncrypted&quot;: &quot;${encryptedLastName}&quot;,&#xd;
    &quot;dateOfBirthEncrypted&quot;: &quot;${encryptedDOB}&quot;,&#xd;
    &quot;insuredId&quot;: &quot;${randomString}&quot;,&#xd;
    &quot;gender&quot;: &quot;${__chooseRandom(M,F,U,randomProduct)}&quot;,&#xd;
    &quot;vitalityCoverageEffectiveDate&quot;: &quot;${__RandomDate(yyyy-MM-dd,2018-01-01,${__time(yyyy-MM-dd)},,)}&quot;,&#xd;
    &quot;productIndicator&quot;: &quot;SELF&quot;,&#xd;
    &quot;emailAddress&quot;: &quot;POC-${randomString}@rte-perf.com&quot;,&#xd;
    &quot;zipCode&quot;: &quot;&quot;,&#xd;
    &quot;customerServicePhone&quot;: &quot;${encryptedPhoneNumber}&quot;,&#xd;
    &quot;reportField1&quot;: &quot;123&quot;,&#xd;
    &quot;reportField2&quot;: &quot;20170701&quot;,&#xd;
    &quot;reportField3&quot;: &quot;ABC&quot;,&#xd;
    &quot;reportField4&quot;: &quot;DEF&quot;&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/${wso2RtePath}/svc/0/apolloEnrollmentEncrypted</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${wso2BearerToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Entity Number" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">apolloId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.enrollmentResponseEncrypted.vitalityId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert: User has been created" enabled="true">
                <stringProp name="JSON_PATH">$.enrollmentResponseEncrypted.insuredId</stringProp>
                <stringProp name="EXPECTED_VALUE"></stringProp>
                <boolProp name="JSONVALIDATION">false</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: Vitality ID present" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1165624797">vitalityId</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Activate: SIBYOD" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;tenantId&quot;: &quot;27&quot;,&#xd;
&quot;mode&quot;: &quot;Activate&quot;,&#xd;
&quot;programme&quot;: {&#xd;
&quot;entityNumber&quot;: ${apolloId}, &#xd;
&quot;programType&quot;: &quot;SIBYOD&quot;,&#xd;
&quot;effectivePeriods&quot;: [&#xd;
{&#xd;
&quot;effectiveFrom&quot;: &quot;${dateToday}&quot;,&#xd;
&quot;effectiveTo&quot;: &quot;9999-12-30&quot;&#xd;
}&#xd;
]&#xd;
}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${tibcoBase}</stringProp>
              <stringProp name="HTTPSampler.port">${tibcoPort}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">arapi/ActiveRewards/Activation</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-vsl-timestamp</stringProp>
                    <stringProp name="Header.value">${timeStamp}</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Programme Activated Assertion " enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="480266719">Programme Activated and Benefit Activated and Goal Generated</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="BroadLeaf - clear the card" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">5</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1514078571000</longProp>
        <longProp name="ThreadGroup.end_time">1514078571000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">300</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">vgpvitapp01.discsrv.co.za</stringProp>
          <stringProp name="HTTPSampler.port">7003</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout">30000</stringProp>
          <stringProp name="HTTPSampler.response_timeout">300000</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
        </CookieManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BradLeaf: csrfToken" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">mall/mall_admin/</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">csrfToken</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;csrfToken&quot; value=&quot;(.*?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template"></stringProp>
            <stringProp name="RegexExtractor.default"></stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BradLeaf: Loging to the cart" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="csrfToken" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">csrfToken</stringProp>
                <stringProp name="Argument.value">${csrfToken_g1}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="j_password" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">j_password</stringProp>
                <stringProp name="Argument.value">P@ssw0rd1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="j_username" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">j_username</stringProp>
                <stringProp name="Argument.value">Dmitry.Nesterov</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">mall/mall_admin/login_admin_post</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">http://vgpvitapp01.discsrv.co.za:7003</stringProp>
              </elementProp>
              <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
          <stringProp name="WhileController.condition">${__javaScript(&quot;${broadLeafId}&quot; != &quot;&lt;EOF&gt;&quot;,)}</stringProp>
        </WhileController>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV: test data" enabled="true">
            <stringProp name="TestPlan.comments">User&apos;s Creds</stringProp>
            <stringProp name="filename">/Users/DNesterov/apache-jmeter-4.0/CSV/CartClearing.Flex2andShapaOrange.11.11.2019_.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">broadLeafId</stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">false</boolProp>
            <boolProp name="stopThread">true</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="BradLeaf: CLEAR CART" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="csrfToken" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">csrfToken</stringProp>
                  <stringProp name="Argument.value">${csrfToken_g1}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="memberEntityNo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.name">memberEntityNo</stringProp>
                  <stringProp name="Argument.value">${broadLeafId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">mall/mall_admin/clear_cart/clear</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">http://vgpvitapp01.discsrv.co.za:7003</stringProp>
                </elementProp>
                <elementProp name="Upgrade-Insecure-Requests" elementType="Header">
                  <stringProp name="Header.name">Upgrade-Insecure-Requests</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup guiclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroupGui" testclass="com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup" testname="bzm - Concurrency Thread Group" enabled="false">
        <elementProp name="ThreadGroup.main_controller" elementType="com.blazemeter.jmeter.control.VirtualUserController"/>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="TargetLevel">200000</stringProp>
        <stringProp name="RampUp">210</stringProp>
        <stringProp name="Steps">20</stringProp>
        <stringProp name="Hold">1</stringProp>
        <stringProp name="LogFilename"></stringProp>
        <stringProp name="Iterations">100</stringProp>
        <stringProp name="Unit">M</stringProp>
      </com.blazemeter.jmeter.threads.concurrency.ConcurrencyThreadGroup>
      <hashTree>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${wgBase}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <boolProp name="HTTPSampler.image_parser">true</boolProp>
          <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </ConfigTestElement>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
        </CookieManager>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="false">
          <collectionProp name="Arguments.arguments">
            <elementProp name="returningUserLogin" elementType="Argument">
              <stringProp name="Argument.name">returningUserLogin</stringProp>
              <stringProp name="Argument.value">vitalityQAnrajmycvzmmrzsznekws@mango.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="returningUserPassword" elementType="Argument">
              <stringProp name="Argument.name">returningUserPassword</stringProp>
              <stringProp name="Argument.value">P@ssw0rd1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Mango: FTUJ" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Mango: Create New User" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;firstName&quot;: &quot;F${randomString}&quot;,&#xd;
	&quot;lastName&quot;: &quot;L${randomString}&quot;,&#xd;
	&quot;login&quot;: &quot;VG${randomString}@mango.com&quot;,&#xd;
	&quot;password&quot;: &quot;Mango2019&quot;,&#xd;
	&quot;emailOptInInd&quot;: false,&#xd;
	&quot;tncAcceptInd&quot;: true,&#xd;
	&quot;loyaltyType&quot;: &quot;enroll&quot;,&#xd;
	&quot;phoneNumber&quot;: &quot;77${randomNumericFour}${randomNumericFour}&quot;,&#xd;
	&quot;phoneType&quot;: &quot;Cell&quot;,&#xd;
	&quot;address&quot;: {&#xd;
		&quot;zipCode&quot;: &quot;60606&quot;,&#xd;
		&quot;addOnZipCode&quot;: &quot;&quot;&#xd;
	},&#xd;
	&quot;dateOfBirth&quot;: &quot;04/05/1913&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">svc/profiles</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool"></stringProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout">30000</stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: ENROLL Status" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-933465782">ENROLL_SUCCESS</stringProp>
                <stringProp name="1473411863">ENROLL_FAIL</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">34</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Mango: Create Vitality ID" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">brhc/createVitalityId</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout">30000</stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract: vitalityId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">mangoId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.vitalityId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract: jwtToken" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">jwtToken</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.jwt</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Mango: RTUJ" enabled="false"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Mango: POST LogIn" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;login&quot;: &quot;${returningUserLogin}&quot;,&#xd;
	&quot;password&quot;: &quot;${returningUserPassword}&quot;,&#xd;
	&quot;isConsentFlow&quot;: false&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/svc/profiles/login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Mango: GET Vitality ID and JWT Token" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">brhc/getVitalityId</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract: vitalityId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">mangoId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.vitalityId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract: jwtToken" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">jwtToken</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.jwt</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Mango: Using JWT Token" enabled="true"/>
        <hashTree>
          <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${ssoBase}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </ConfigTestElement>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET  PHYSICAL_ACTIVITY: Choose Goal" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">PHYSICAL_ACTIVITY</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">type</stringProp>
                </elementProp>
                <elementProp name="jwtptn" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${jwtToken}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">jwtptn</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">vitality/mango_goals/choose_goal</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">1</stringProp>
            <stringProp name="HTTPSampler.embedded_url_re">qa.powerofvitality.com</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Goal ID" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">physicalActivityGoalID</stringProp>
              <stringProp name="RegexExtractor.regex">name=&quot;goalId&quot; value=&quot;(.+)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">0</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="481331987">Choose a physical activity challenge</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Ignore CDN Errors" enabled="false">
              <collectionProp name="Asserion.test_strings"/>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST PHYSICAL_ACTIVITY: Set Goal Active" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="goalId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${physicalActivityGoalID}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">goalId</stringProp>
                </elementProp>
                <elementProp name="targetCategoryType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">PHYSICAL_ACTIVITY</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">targetCategoryType</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">vitality/mango_goals/set_goal_active</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool"></stringProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract: personal goal Id" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">personalGoalIdPhysAct</stringProp>
              <stringProp name="RegexExtractor.regex">goalId=(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="50549">302</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET PHYSICAL_ACTIVITY: Personal Goal Details" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="goalId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${personalGoalIdPhysAct}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">goalId</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">vitality/mango_goals/current_goal_details</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.concurrentPool"></stringProp>
            <stringProp name="HTTPSampler.embedded_url_re">qa.powerofvitality.com</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1832458561">About this 4-week challenge</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET PHYSICAL_ACTIVITY: Goal Progress" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="goalId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${personalGoalIdPhysAct}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">goalId</stringProp>
                </elementProp>
                <elementProp name="isCurrentWeek" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">isCurrentWeek</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">vitality/vap/getMangoGoalProgress</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.concurrentPool"></stringProp>
            <stringProp name="HTTPSampler.embedded_url_re">qa.powerofvitality.com</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="36500520">progressId</stringProp>
                <stringProp name="-653206855">  &quot;status&quot; : 1</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST PHYSICAL_ACTIVITY: Cancel Active Goal" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="goalId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${physicalActivityGoalID}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">goalId</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">vitality/vap/cancelActiveGoal</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool"></stringProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract: personal goal Id" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">personalGoalIdPhysAct</stringProp>
              <stringProp name="RegexExtractor.regex">goalId=(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="50549">302</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET  LIFESTYLE: Choose Goal" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">LIFESTYLE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">type</stringProp>
                </elementProp>
                <elementProp name="jwtptn" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${jwtToken}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">jwtptn</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">vitality/mango_goals/choose_goal</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">1</stringProp>
            <stringProp name="HTTPSampler.embedded_url_re">qa.powerofvitality.com</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Goal ID" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">lifeStyleGoalID</stringProp>
              <stringProp name="RegexExtractor.regex">name=&quot;goalId&quot; value=&quot;(.+)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">0</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1155597008">Choose a lifestyle challenge</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Ignore CDN Errors" enabled="false">
              <collectionProp name="Asserion.test_strings"/>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST LIFESTYLE: Set Goal Active" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="goalId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${lifeStyleGoalID}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">goalId</stringProp>
                </elementProp>
                <elementProp name="targetCategoryType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">LIFESTYLE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">targetCategoryType</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">vitality/mango_goals/set_goal_active</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool"></stringProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract: personal goal Id" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">personalGoalIdLifeStyle</stringProp>
              <stringProp name="RegexExtractor.regex">goalId=(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="50549">302</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET LIFESTYLE: Personal Goal Details" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="goalId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${personalGoalIdLifeStyle}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">goalId</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">vitality/mango_goals/current_goal_details</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.concurrentPool"></stringProp>
            <stringProp name="HTTPSampler.embedded_url_re">qa.powerofvitality.com</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1832458561">About this 4-week challenge</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET LIFESTYLE: Goal Progress" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="goalId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${personalGoalIdLifeStyle}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">goalId</stringProp>
                </elementProp>
                <elementProp name="isCurrentWeek" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">isCurrentWeek</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">vitality/vap/getMangoGoalProgress</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">true</boolProp>
            <stringProp name="HTTPSampler.concurrentPool"></stringProp>
            <stringProp name="HTTPSampler.embedded_url_re">qa.powerofvitality.com</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="36500520">progressId</stringProp>
                <stringProp name="-653206855">  &quot;status&quot; : 1</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST LIFESTYLE: Cancel Active Goal" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="goalId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${personalGoalIdLifeStyle}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">goalId</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">vitality/vap/cancelActiveGoal</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool"></stringProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract: personal goal Id" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">personalGoalIdPhysAct</stringProp>
              <stringProp name="RegexExtractor.regex">goalId=(.*?)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="50549">302</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GET Tiles" enabled="true"/>
          <hashTree>
            <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${wso2Base}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </ConfigTestElement>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Mango WSO2 Access Token" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="grant_type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">client_credentials</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">grant_type</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/token</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Basic ${wso2Token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extracting WSO2 AccessToken" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">wso2AccessToken</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">wso2AccessToken_NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Tiles" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/mango/1.0/mango_tiles/${mangoId}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${wso2AccessToken}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract: wheel id" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">wheelId</stringProp>
                <stringProp name="RegexExtractor.regex">wheel_data/(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET: Spin via WG" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="jwtptn" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${jwtToken}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">jwtptn</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ssoBase}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">vitality/mango_points_wheel/wheel_data/${wheelId}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re">https://qa.powerofvitality.com</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-2044230225">Now spin it.</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <kg.apc.jmeter.threads.UltimateThreadGroup guiclass="kg.apc.jmeter.threads.UltimateThreadGroupGui" testclass="kg.apc.jmeter.threads.UltimateThreadGroup" testname="Apo/Sap: DRY RUN" enabled="false">
        <collectionProp name="ultimatethreadgroupdata">
          <collectionProp name="1690930557">
            <stringProp name="53">5</stringProp>
            <stringProp name="48">0</stringProp>
            <stringProp name="48">0</stringProp>
            <stringProp name="48625">100</stringProp>
            <stringProp name="48">0</stringProp>
          </collectionProp>
        </collectionProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
      </kg.apc.jmeter.threads.UltimateThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Apollo" enabled="true"/>
        <hashTree>
          <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${wso2Base}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout">30000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">300000</stringProp>
          </ConfigTestElement>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: GET Auth Token" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="entity_no" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${vitalityId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">entity_no</stringProp>
                </elementProp>
                <elementProp name="encrypted_entity_no" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${vitality_IdEncrypted}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">encrypted_entity_no</stringProp>
                </elementProp>
                <elementProp name="_p" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">IOS</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">_p</stringProp>
                </elementProp>
                <elementProp name="_v" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${mob.app.version}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">_v</stringProp>
                </elementProp>
                <elementProp name="_doc_browser_context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">_doc_browser_context</stringProp>
                </elementProp>
                <elementProp name="_c" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">Aetna</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">_c</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${msBase}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${msPath}/auth/simulate_auth</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Active Rewards Token" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">ar_Token</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.session.token</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="LLT Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.session.timeout</stringProp>
              <stringProp name="EXPECTED_VALUE">2280</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: POST Apollo WSO2 Access Token" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="grant_type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">client_credentials</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">grant_type</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/token</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Basic ${wso2Token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extracting WSO2 AccessToken" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">wso2AccessToken</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">wso2AccessToken_NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: POST Register Push Token" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="push_token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${randomAlphaNumericString}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">push_token</stringProp>
                </elementProp>
                <elementProp name="device_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${randomNumericString}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">device_id</stringProp>
                </elementProp>
                <elementProp name="platform" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">IOS</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">platform</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/${msPath}/1.0/notifications/register_push_token</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Vitality-Client" elementType="Header">
                  <stringProp name="Header.name">Vitality-Client</stringProp>
                  <stringProp name="Header.value">Aetna</stringProp>
                </elementProp>
                <elementProp name="Vitality-Token" elementType="Header">
                  <stringProp name="Header.name">Vitality-Token</stringProp>
                  <stringProp name="Header.value">${ar_Token}</stringProp>
                </elementProp>
                <elementProp name="Vitality-App-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-App-Version</stringProp>
                  <stringProp name="Header.value">7</stringProp>
                </elementProp>
                <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                  <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                  <stringProp name="Header.value">IOS</stringProp>
                </elementProp>
                <elementProp name="Vitality-Language" elementType="Header">
                  <stringProp name="Header.name">Vitality-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Vitality-Device-Id" elementType="Header">
                  <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                  <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                </elementProp>
                <elementProp name="Vitality-Local-Time" elementType="Header">
                  <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                  <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                </elementProp>
                <elementProp name="Vitality-API-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-API-Version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion that Status = 1" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-161783867">&quot;status&quot;:1</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: POST Set Push Enabled" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="enabled" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">enabled</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/${msPath}/1.0/notifications/set_push_enabled</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Vitality-Client" elementType="Header">
                  <stringProp name="Header.name">Vitality-Client</stringProp>
                  <stringProp name="Header.value">Aetna</stringProp>
                </elementProp>
                <elementProp name="Vitality-Token" elementType="Header">
                  <stringProp name="Header.name">Vitality-Token</stringProp>
                  <stringProp name="Header.value">${ar_Token}</stringProp>
                </elementProp>
                <elementProp name="Vitality-App-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-App-Version</stringProp>
                  <stringProp name="Header.value">7</stringProp>
                </elementProp>
                <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                  <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                  <stringProp name="Header.value">IOS</stringProp>
                </elementProp>
                <elementProp name="Vitality-Language" elementType="Header">
                  <stringProp name="Header.name">Vitality-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Vitality-Device-Id" elementType="Header">
                  <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                  <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                </elementProp>
                <elementProp name="Vitality-Local-Time" elementType="Header">
                  <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                  <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                </elementProp>
                <elementProp name="Vitality-API-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-API-Version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: GET CG_Goals" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="offset" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">offset</stringProp>
                </elementProp>
                <elementProp name="limit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">15</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">limit</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/${msPath}/1.0/campaign_goals/goals</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Vitality-Client" elementType="Header">
                  <stringProp name="Header.name">Vitality-Client</stringProp>
                  <stringProp name="Header.value">Aetna</stringProp>
                </elementProp>
                <elementProp name="Vitality-Token" elementType="Header">
                  <stringProp name="Header.name">Vitality-Token</stringProp>
                  <stringProp name="Header.value">${ar_Token}</stringProp>
                </elementProp>
                <elementProp name="Vitality-App-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-App-Version</stringProp>
                  <stringProp name="Header.value">7</stringProp>
                </elementProp>
                <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                  <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                  <stringProp name="Header.value">IOS</stringProp>
                </elementProp>
                <elementProp name="Vitality-Language" elementType="Header">
                  <stringProp name="Header.name">Vitality-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Vitality-Device-Id" elementType="Header">
                  <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                  <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                </elementProp>
                <elementProp name="Vitality-Local-Time" elementType="Header">
                  <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                  <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                </elementProp>
                <elementProp name="Vitality-API-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-API-Version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="CGoalId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">CGoalId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.output.goalsArray.goals[0].goalId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="JSON Structure Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="408179302">adjudicator</stringProp>
                <stringProp name="241352577">buttons</stringProp>
                <stringProp name="915719548">eventMnemonic</stringProp>
                <stringProp name="-1318255029">campaignId</stringProp>
                <stringProp name="-1724546052">description</stringProp>
                <stringProp name="-1179356962">externalEndDate</stringProp>
                <stringProp name="-254860736">externalMemberId</stringProp>
                <stringProp name="-1240658034">goalId</stringProp>
                <stringProp name="2054867262">goalState</stringProp>
                <stringProp name="2055481093">goalTitle</stringProp>
                <stringProp name="199149798">howToAchieve</stringProp>
                <stringProp name="1316501932">internalEndDate</stringProp>
                <stringProp name="922683503">monitorEndDate</stringProp>
                <stringProp name="-1795632125">partnerId</stringProp>
                <stringProp name="-2129778896">startDate</stringProp>
                <stringProp name="-109999815">transmitGUID</stringProp>
                <stringProp name="2145596567">vitalityMemberId</stringProp>
                <stringProp name="-2070259289">status&quot;:1</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">34</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: GET CG_Goal" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="goalId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${CGoalId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">goalId</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/${msPath}/1.0/campaign_goals/goal</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Vitality-Client" elementType="Header">
                  <stringProp name="Header.name">Vitality-Client</stringProp>
                  <stringProp name="Header.value">Aetna</stringProp>
                </elementProp>
                <elementProp name="Vitality-Token" elementType="Header">
                  <stringProp name="Header.name">Vitality-Token</stringProp>
                  <stringProp name="Header.value">${ar_Token}</stringProp>
                </elementProp>
                <elementProp name="Vitality-App-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-App-Version</stringProp>
                  <stringProp name="Header.value">7</stringProp>
                </elementProp>
                <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                  <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                  <stringProp name="Header.value">IOS</stringProp>
                </elementProp>
                <elementProp name="Vitality-Language" elementType="Header">
                  <stringProp name="Header.name">Vitality-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Vitality-Device-Id" elementType="Header">
                  <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                  <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                </elementProp>
                <elementProp name="Vitality-Local-Time" elementType="Header">
                  <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                  <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                </elementProp>
                <elementProp name="Vitality-API-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-API-Version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: GET AR_Current_Goals" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/${msPath}/1.0/active_rewards/current_goals</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Vitality-Client" elementType="Header">
                  <stringProp name="Header.name">Vitality-Client</stringProp>
                  <stringProp name="Header.value">Aetna</stringProp>
                </elementProp>
                <elementProp name="Vitality-Token" elementType="Header">
                  <stringProp name="Header.name">Vitality-Token</stringProp>
                  <stringProp name="Header.value">${ar_Token}</stringProp>
                </elementProp>
                <elementProp name="Vitality-App-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-App-Version</stringProp>
                  <stringProp name="Header.value">7</stringProp>
                </elementProp>
                <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                  <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                  <stringProp name="Header.value">IOS</stringProp>
                </elementProp>
                <elementProp name="Vitality-Language" elementType="Header">
                  <stringProp name="Header.name">Vitality-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Vitality-Device-Id" elementType="Header">
                  <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                  <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                </elementProp>
                <elementProp name="Vitality-Local-Time" elementType="Header">
                  <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                  <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                </elementProp>
                <elementProp name="Vitality-API-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-API-Version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Goal ID" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">Goal_ID</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.output.goals[0].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: GET AR_Goals" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="goalType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">weekly</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">goalType</stringProp>
                </elementProp>
                <elementProp name="offset" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">offset</stringProp>
                </elementProp>
                <elementProp name="limit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">15</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">limit</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/${msPath}/1.0/active_rewards/goals</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Vitality-Client" elementType="Header">
                  <stringProp name="Header.name">Vitality-Client</stringProp>
                  <stringProp name="Header.value">Aetna</stringProp>
                </elementProp>
                <elementProp name="Vitality-Token" elementType="Header">
                  <stringProp name="Header.name">Vitality-Token</stringProp>
                  <stringProp name="Header.value">${ar_Token}</stringProp>
                </elementProp>
                <elementProp name="Vitality-App-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-App-Version</stringProp>
                  <stringProp name="Header.value">7</stringProp>
                </elementProp>
                <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                  <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                  <stringProp name="Header.value">IOS</stringProp>
                </elementProp>
                <elementProp name="Vitality-Language" elementType="Header">
                  <stringProp name="Header.name">Vitality-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Vitality-Device-Id" elementType="Header">
                  <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                  <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                </elementProp>
                <elementProp name="Vitality-Local-Time" elementType="Header">
                  <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                  <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                </elementProp>
                <elementProp name="Vitality-API-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-API-Version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: GET Purchase" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/${msPath}/1.0/apple_watch/purchase</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Vitality-Client" elementType="Header">
                  <stringProp name="Header.name">Vitality-Client</stringProp>
                  <stringProp name="Header.value">Aetna</stringProp>
                </elementProp>
                <elementProp name="Vitality-Token" elementType="Header">
                  <stringProp name="Header.name">Vitality-Token</stringProp>
                  <stringProp name="Header.value">${ar_Token}</stringProp>
                </elementProp>
                <elementProp name="Vitality-App-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-App-Version</stringProp>
                  <stringProp name="Header.value">7</stringProp>
                </elementProp>
                <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                  <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                  <stringProp name="Header.value">IOS</stringProp>
                </elementProp>
                <elementProp name="Vitality-Language" elementType="Header">
                  <stringProp name="Header.name">Vitality-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Vitality-Device-Id" elementType="Header">
                  <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                  <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                </elementProp>
                <elementProp name="Vitality-Local-Time" elementType="Header">
                  <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                  <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                </elementProp>
                <elementProp name="Vitality-API-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-API-Version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Currency Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="66470">CAD</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">6</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Purchase Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1850889110">&quot;installmentDayOfPeriod&quot;:12</stringProp>
                <stringProp name="850605392">&quot;numberOfInstallmentts&quot;:24</stringProp>
                <stringProp name="1819301357">&quot;amount&quot;:&quot;USD 2.75&quot;,&quot;amountType&quot;:&quot;DiscountLevel4&quot;</stringProp>
                <stringProp name="1819301326">&quot;amount&quot;:&quot;USD 2.75&quot;,&quot;amountType&quot;:&quot;DiscountLevel3&quot;</stringProp>
                <stringProp name="1819301295">&quot;amount&quot;:&quot;USD 2.75&quot;,&quot;amountType&quot;:&quot;DiscountLevel2&quot;</stringProp>
                <stringProp name="1819301264">&quot;amount&quot;:&quot;USD 2.75&quot;,&quot;amountType&quot;:&quot;DiscountLevel1&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: GET Repayment History" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/${msPath}/1.0/apple_watch/repayment_history</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Vitality-Client" elementType="Header">
                  <stringProp name="Header.name">Vitality-Client</stringProp>
                  <stringProp name="Header.value">Aetna</stringProp>
                </elementProp>
                <elementProp name="Vitality-Token" elementType="Header">
                  <stringProp name="Header.name">Vitality-Token</stringProp>
                  <stringProp name="Header.value">${ar_Token}</stringProp>
                </elementProp>
                <elementProp name="Vitality-App-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-App-Version</stringProp>
                  <stringProp name="Header.value">7</stringProp>
                </elementProp>
                <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                  <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                  <stringProp name="Header.value">IOS</stringProp>
                </elementProp>
                <elementProp name="Vitality-Language" elementType="Header">
                  <stringProp name="Header.name">Vitality-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Vitality-Device-Id" elementType="Header">
                  <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                  <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                </elementProp>
                <elementProp name="Vitality-Local-Time" elementType="Header">
                  <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                  <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                </elementProp>
                <elementProp name="Vitality-API-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-API-Version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="PurchaseId Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="137050516">10026 - Purchase Not Found</stringProp>
                <stringProp name="297521660">purchaseId</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">34</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Currency Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="66470">CAD</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">6</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Payment history Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1421797203">dayOfPeriod&quot;:12</stringProp>
                <stringProp name="-148443948">numberOfInstallments&quot;:24</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: GET AR_Eligibility" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/${msPath}/1.0/active_rewards/eligibility</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Vitality-Client" elementType="Header">
                  <stringProp name="Header.name">Vitality-Client</stringProp>
                  <stringProp name="Header.value">Aetna</stringProp>
                </elementProp>
                <elementProp name="Vitality-Token" elementType="Header">
                  <stringProp name="Header.name">Vitality-Token</stringProp>
                  <stringProp name="Header.value">${ar_Token}</stringProp>
                </elementProp>
                <elementProp name="Vitality-App-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-App-Version</stringProp>
                  <stringProp name="Header.value">7</stringProp>
                </elementProp>
                <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                  <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                  <stringProp name="Header.value">IOS</stringProp>
                </elementProp>
                <elementProp name="Vitality-Language" elementType="Header">
                  <stringProp name="Header.name">Vitality-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Vitality-Device-Id" elementType="Header">
                  <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                  <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                </elementProp>
                <elementProp name="Vitality-Local-Time" elementType="Header">
                  <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                  <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                </elementProp>
                <elementProp name="Vitality-API-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-API-Version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="100743639">eligible</stringProp>
                <stringProp name="-161783867">&quot;status&quot;:1</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: GET Home Page Widgets" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="filter" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">VITALITY_BUCKS</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">filter</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/${msPath}/1.0/dashboard/home_widgets</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Vitality-Client" elementType="Header">
                  <stringProp name="Header.name">Vitality-Client</stringProp>
                  <stringProp name="Header.value">Aetna</stringProp>
                </elementProp>
                <elementProp name="Vitality-Token" elementType="Header">
                  <stringProp name="Header.name">Vitality-Token</stringProp>
                  <stringProp name="Header.value">${ar_Token}</stringProp>
                </elementProp>
                <elementProp name="Vitality-App-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-App-Version</stringProp>
                  <stringProp name="Header.value">7</stringProp>
                </elementProp>
                <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                  <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                  <stringProp name="Header.value">IOS</stringProp>
                </elementProp>
                <elementProp name="Vitality-Language" elementType="Header">
                  <stringProp name="Header.name">Vitality-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Vitality-Device-Id" elementType="Header">
                  <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                  <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                </elementProp>
                <elementProp name="Vitality-Local-Time" elementType="Header">
                  <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                  <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                </elementProp>
                <elementProp name="Vitality-API-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-API-Version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="SUCCESS Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1149187101">SUCCESS</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: GET Events history" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="limit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">999</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">limit</stringProp>
                </elementProp>
                <elementProp name="offset" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">offset</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/${msPath}/1.0/events/history</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Vitality-Client" elementType="Header">
                  <stringProp name="Header.name">Vitality-Client</stringProp>
                  <stringProp name="Header.value">Aetna</stringProp>
                </elementProp>
                <elementProp name="Vitality-Token" elementType="Header">
                  <stringProp name="Header.name">Vitality-Token</stringProp>
                  <stringProp name="Header.value">${ar_Token}</stringProp>
                </elementProp>
                <elementProp name="Vitality-App-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-App-Version</stringProp>
                  <stringProp name="Header.value">7</stringProp>
                </elementProp>
                <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                  <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                  <stringProp name="Header.value">IOS</stringProp>
                </elementProp>
                <elementProp name="Vitality-Language" elementType="Header">
                  <stringProp name="Header.name">Vitality-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Vitality-Device-Id" elementType="Header">
                  <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                  <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                </elementProp>
                <elementProp name="Vitality-Local-Time" elementType="Header">
                  <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                  <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                </elementProp>
                <elementProp name="Vitality-API-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-API-Version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Currency Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1108336905">record_number</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Health Data Upload" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: GET Health Data Upload Token" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="scope" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">HEALTH_DATA_UPLOAD</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">scope</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/${msPath}/1.0/auth/token</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Client" elementType="Header">
                    <stringProp name="Header.name">Vitality-Client</stringProp>
                    <stringProp name="Header.value">Aetna</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Token" elementType="Header">
                    <stringProp name="Header.name">Vitality-Token</stringProp>
                    <stringProp name="Header.value">${ar_Token}</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-App-Version" elementType="Header">
                    <stringProp name="Header.name">Vitality-App-Version</stringProp>
                    <stringProp name="Header.value">7</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                    <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                    <stringProp name="Header.value">IOS</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Language" elementType="Header">
                    <stringProp name="Header.name">Vitality-Language</stringProp>
                    <stringProp name="Header.value">en</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Device-Id" elementType="Header">
                    <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                    <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Local-Time" elementType="Header">
                    <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                    <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-API-Version" elementType="Header">
                    <stringProp name="Header.name">Vitality-API-Version</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Health Data Token" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">hduToken</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.session.token</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: POST VDP: ROUTINE" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
 &quot;device&quot;: {&#xd;
   &quot;deviceId&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}&quot;,&#xd;
   &quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
   &quot;model&quot;: &quot;iOS 10.0.1&quot;&#xd;
 },&#xd;
	 &quot;header&quot;: {&#xd;
	   &quot;partnerSystem&quot;: &quot;Apple&quot;,&#xd;
	   &quot;processingType&quot;: &quot;BATCH&quot;,&#xd;
	   &quot;rawUploadData&quot;: &quot;&quot;,&#xd;
	   &quot;sessionId&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}&quot;,&#xd;
	   &quot;tenantId&quot;: &quot;27&quot;,&#xd;
	   &quot;uploadCount&quot;: 3,&#xd;
	   &quot;uploadDate&quot;: &quot;${dateToday}T00:00:00+03:00&quot;,&#xd;
	   &quot;user&quot;: {&#xd;
	     &quot;entityNo&quot;: &quot;${vitalityId}&quot;,&#xd;
	     &quot;partnerUserId&quot;: &quot;&quot;&#xd;
	  },&#xd;
	   &quot;verified&quot;: &quot;true&quot;&#xd;
	  },&#xd;
		 &quot;readings&quot;: [&#xd;
		   {&#xd;
		     &quot;dataCategory&quot;: &quot;BIOMETRIC&quot;,&#xd;
		     &quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00+03:00&quot;,&#xd;
		     &quot;healthData&quot;: {&#xd;
		     &quot;weight&quot;: {&#xd;
		     &quot;unitOfMeasurement&quot;: &quot;KILOGRAMS&quot;,&#xd;
		     &quot;value&quot;: 80.5&#xd;
		       }&#xd;
     },&#xd;
     &quot;integrity&quot;: &quot;UNVERIFIED&quot;,&#xd;
     &quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
     &quot;model&quot;: &quot;iOS 10.0.1&quot;,&#xd;
     &quot;partnerReadingId&quot;: &quot;${dateToday}${randomAlphaNumericString}&quot;,&#xd;
     &quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
     &quot;readingType&quot;: &quot;WEIGHT&quot;,&#xd;
     &quot;startTime&quot;: &quot;${dateToday}T00:00:00+03:00&quot;&#xd;
   },&#xd;
   {&#xd;
     &quot;dataCategory&quot;: &quot;ROUTINE&quot;,&#xd;
     &quot;duration&quot;: 86400,&#xd;
     &quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00+03:00&quot;,&#xd;
     &quot;integrity&quot;: &quot;VERIFIED&quot;,&#xd;
     &quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
     &quot;model&quot;: &quot;iOS 10.0.1&quot;,&#xd;
     &quot;partnerReadingId&quot;: &quot;${dateToday}${randomAlphaNumericString}&quot;,&#xd;
     &quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
     &quot;readingType&quot;: &quot;WALKING&quot;,&#xd;
     &quot;startTime&quot;: &quot;${dateToday}T00:00:00+03:00&quot;,&#xd;
     &quot;workout&quot;: {&#xd;
       &quot;energyExpenditure&quot;: {&#xd;
         &quot;unitOfMeasurement&quot;: &quot;KILOCALORIES&quot;,&#xd;
         &quot;value&quot;: 800&#xd;
       }&#xd;
     }&#xd;
   }&#xd;
   &#xd;
 ]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/${msPath}/1.0/health_data/upload</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Token" elementType="Header">
                    <stringProp name="Header.name">Vitality-Token</stringProp>
                    <stringProp name="Header.value">${hduToken}</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-App-Version" elementType="Header">
                    <stringProp name="Header.name">Vitality-App-Version</stringProp>
                    <stringProp name="Header.value">7</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Language" elementType="Header">
                    <stringProp name="Header.name">Vitality-Language</stringProp>
                    <stringProp name="Header.value">en</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Device-Id" elementType="Header">
                    <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                    <stringProp name="Header.value">swagger-3f802407-77b4-407c-a758-842af5830c2b</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Local-Time" elementType="Header">
                    <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                    <stringProp name="Header.value">${__time(yyyy-MM-dd,)}</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-API-Version" elementType="Header">
                    <stringProp name="Header.name">Vitality-API-Version</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                    <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                    <stringProp name="Header.value">IOS</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="APIs: 50%" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>50.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Activate" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: POST AR_Activate_FIEYW" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="programType" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">FIEYW</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">programType</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/${msPath}/1.0/active_rewards/activate</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Client" elementType="Header">
                      <stringProp name="Header.name">Vitality-Client</stringProp>
                      <stringProp name="Header.value">Aetna</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Token" elementType="Header">
                      <stringProp name="Header.name">Vitality-Token</stringProp>
                      <stringProp name="Header.value">${ar_Token}</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-App-Version" elementType="Header">
                      <stringProp name="Header.name">Vitality-App-Version</stringProp>
                      <stringProp name="Header.value">7</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                      <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                      <stringProp name="Header.value">IOS</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Language" elementType="Header">
                      <stringProp name="Header.name">Vitality-Language</stringProp>
                      <stringProp name="Header.value">en</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Device-Id" elementType="Header">
                      <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                      <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Local-Time" elementType="Header">
                      <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                      <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-API-Version" elementType="Header">
                      <stringProp name="Header.name">Vitality-API-Version</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: POST AR_Activate_FIBYOD" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="programType" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">FIBYOD</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">programType</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/${msPath}/1.0/active_rewards/activate</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Client" elementType="Header">
                      <stringProp name="Header.name">Vitality-Client</stringProp>
                      <stringProp name="Header.value">Aetna</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Token" elementType="Header">
                      <stringProp name="Header.name">Vitality-Token</stringProp>
                      <stringProp name="Header.value">${ar_Token}</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-App-Version" elementType="Header">
                      <stringProp name="Header.name">Vitality-App-Version</stringProp>
                      <stringProp name="Header.value">7</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                      <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                      <stringProp name="Header.value">IOS</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Language" elementType="Header">
                      <stringProp name="Header.name">Vitality-Language</stringProp>
                      <stringProp name="Header.value">en</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Device-Id" elementType="Header">
                      <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                      <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Local-Time" elementType="Header">
                      <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                      <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-API-Version" elementType="Header">
                      <stringProp name="Header.name">Vitality-API-Version</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: POST AR_Activate_SIBYOD" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="programType" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">SIBYOD</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">programType</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/${msPath}/1.0/active_rewards/activate</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Client" elementType="Header">
                      <stringProp name="Header.name">Vitality-Client</stringProp>
                      <stringProp name="Header.value">Aetna</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Token" elementType="Header">
                      <stringProp name="Header.name">Vitality-Token</stringProp>
                      <stringProp name="Header.value">${ar_Token}</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-App-Version" elementType="Header">
                      <stringProp name="Header.name">Vitality-App-Version</stringProp>
                      <stringProp name="Header.value">7</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                      <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                      <stringProp name="Header.value">IOS</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Language" elementType="Header">
                      <stringProp name="Header.name">Vitality-Language</stringProp>
                      <stringProp name="Header.value">en</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Device-Id" elementType="Header">
                      <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                      <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Local-Time" elementType="Header">
                      <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                      <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-API-Version" elementType="Header">
                      <stringProp name="Header.name">Vitality-API-Version</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ACTIVATED Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1303979599">ACTIVATED</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SSO to /Apple_Watch" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: POST SSO URL to AppleWAtch" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/${msPath}/1.0/sso/redesign?target=/apollo/apple_watch</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Vitality-Client" elementType="Header">
                      <stringProp name="Header.name">Vitality-Client</stringProp>
                      <stringProp name="Header.value">Aetna</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Token" elementType="Header">
                      <stringProp name="Header.name">Vitality-Token</stringProp>
                      <stringProp name="Header.value">${ar_Token}</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-App-Version" elementType="Header">
                      <stringProp name="Header.name">Vitality-App-Version</stringProp>
                      <stringProp name="Header.value">7</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                      <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                      <stringProp name="Header.value">IOS</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Language" elementType="Header">
                      <stringProp name="Header.name">Vitality-Language</stringProp>
                      <stringProp name="Header.value">en</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Device-Id" elementType="Header">
                      <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                      <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Local-Time" elementType="Header">
                      <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                      <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-API-Version" elementType="Header">
                      <stringProp name="Header.name">Vitality-API-Version</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ssoLink" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">awSSO</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;output&quot;:&quot;https://${ssoBase}/(.*?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                  <stringProp name="Scope.variable">ssoAW</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: SSO AppleWatch" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${ssoBase}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${awSSO}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
                  <collectionProp name="CookieManager.cookies"/>
                  <boolProp name="CookieManager.clearEachIteration">true</boolProp>
                </CookieManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Apple Watch page Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="704977160">View installment agreement</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SSO to /Mall" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: POST SSO URL to Mall" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/${msPath}/1.0/sso/redesign?target=/apollo/mall</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Vitality-Client" elementType="Header">
                      <stringProp name="Header.name">Vitality-Client</stringProp>
                      <stringProp name="Header.value">Aetna</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Token" elementType="Header">
                      <stringProp name="Header.name">Vitality-Token</stringProp>
                      <stringProp name="Header.value">${ar_Token}</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-App-Version" elementType="Header">
                      <stringProp name="Header.name">Vitality-App-Version</stringProp>
                      <stringProp name="Header.value">7</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                      <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                      <stringProp name="Header.value">IOS</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Language" elementType="Header">
                      <stringProp name="Header.name">Vitality-Language</stringProp>
                      <stringProp name="Header.value">en</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Device-Id" elementType="Header">
                      <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                      <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Local-Time" elementType="Header">
                      <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                      <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-API-Version" elementType="Header">
                      <stringProp name="Header.name">Vitality-API-Version</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ssoLink" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">mallSSO</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;output&quot;:&quot;https://${ssoBase}/(.*?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                  <stringProp name="Scope.variable">ssoAW</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: SSO Mall" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${ssoBase}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${mallSSO}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
                  <collectionProp name="CookieManager.cookies"/>
                  <boolProp name="CookieManager.clearEachIteration">true</boolProp>
                </CookieManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Gift Cards Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1964569124">Amazon</stringProp>
                    <stringProp name="-1166115254">App Store &amp; iTunes</stringProp>
                    <stringProp name="1905424970">Best Buy</stringProp>
                    <stringProp name="1622877843">CVS pharmacy</stringProp>
                    <stringProp name="452994361">CharityChoice</stringProp>
                    <stringProp name="-2038980848">Whole Foods Market</stringProp>
                    <stringProp name="875740454">Fandango</stringProp>
                    <stringProp name="2428021">Nike</stringProp>
                    <stringProp name="-140972890">Starbucks</stringProp>
                    <stringProp name="766369346">Target Gift Cards</stringProp>
                    <stringProp name="-1511446376">Walmart</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SSO to /Contact_us" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: POST SSO URL to Contact_us" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/${msPath}/1.0/sso/redesign?target=/vitality_content/contact_us</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Vitality-Client" elementType="Header">
                      <stringProp name="Header.name">Vitality-Client</stringProp>
                      <stringProp name="Header.value">Aetna</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Token" elementType="Header">
                      <stringProp name="Header.name">Vitality-Token</stringProp>
                      <stringProp name="Header.value">${ar_Token}</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-App-Version" elementType="Header">
                      <stringProp name="Header.name">Vitality-App-Version</stringProp>
                      <stringProp name="Header.value">7</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                      <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                      <stringProp name="Header.value">IOS</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Language" elementType="Header">
                      <stringProp name="Header.name">Vitality-Language</stringProp>
                      <stringProp name="Header.value">en</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Device-Id" elementType="Header">
                      <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                      <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Local-Time" elementType="Header">
                      <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                      <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-API-Version" elementType="Header">
                      <stringProp name="Header.name">Vitality-API-Version</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ssoLink" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">ContactUsSSO</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;output&quot;:&quot;https://${ssoBase}/(.*?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                  <stringProp name="Scope.variable">ssoAW</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: SSO Contact_us" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${ssoBase}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${ContactUsSSO}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
                  <collectionProp name="CookieManager.cookies"/>
                  <boolProp name="CookieManager.clearEachIteration">true</boolProp>
                </CookieManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Contact Us page Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="293979885">How can we help you?</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SSO to /Feedback" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: POST SSO URL to feedback" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/${msPath}/1.0/sso/redesign?target=/apollo/feedback</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Vitality-Client" elementType="Header">
                      <stringProp name="Header.name">Vitality-Client</stringProp>
                      <stringProp name="Header.value">Aetna</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Token" elementType="Header">
                      <stringProp name="Header.name">Vitality-Token</stringProp>
                      <stringProp name="Header.value">${ar_Token}</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-App-Version" elementType="Header">
                      <stringProp name="Header.name">Vitality-App-Version</stringProp>
                      <stringProp name="Header.value">7</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                      <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                      <stringProp name="Header.value">IOS</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Language" elementType="Header">
                      <stringProp name="Header.name">Vitality-Language</stringProp>
                      <stringProp name="Header.value">en</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Device-Id" elementType="Header">
                      <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                      <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Local-Time" elementType="Header">
                      <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                      <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-API-Version" elementType="Header">
                      <stringProp name="Header.name">Vitality-API-Version</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ssoLink" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">feedbackSSO</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;output&quot;:&quot;https://${ssoBase}/(.*?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                  <stringProp name="Scope.variable">ssoAW</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: SSO Feedback" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${ssoBase}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${feedbackSSO}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
                  <collectionProp name="CookieManager.cookies"/>
                  <boolProp name="CookieManager.clearEachIteration">true</boolProp>
                </CookieManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Feedback page Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-656796170">Tell us what you think of Attain</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SSO to /History" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: POST SSO URL to History" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/${msPath}/1.0/sso/redesign?target=/apollo/history</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Vitality-Client" elementType="Header">
                      <stringProp name="Header.name">Vitality-Client</stringProp>
                      <stringProp name="Header.value">Aetna</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Token" elementType="Header">
                      <stringProp name="Header.name">Vitality-Token</stringProp>
                      <stringProp name="Header.value">${ar_Token}</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-App-Version" elementType="Header">
                      <stringProp name="Header.name">Vitality-App-Version</stringProp>
                      <stringProp name="Header.value">7</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                      <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                      <stringProp name="Header.value">IOS</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Language" elementType="Header">
                      <stringProp name="Header.name">Vitality-Language</stringProp>
                      <stringProp name="Header.value">en</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Device-Id" elementType="Header">
                      <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                      <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Local-Time" elementType="Header">
                      <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                      <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-API-Version" elementType="Header">
                      <stringProp name="Header.name">Vitality-API-Version</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ssoLink" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">historySSO</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;output&quot;:&quot;https://${ssoBase}/(.*?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                  <stringProp name="Scope.variable">ssoAW</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: SSO Mall History" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${ssoBase}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${historySSO}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
                  <collectionProp name="CookieManager.cookies"/>
                  <boolProp name="CookieManager.clearEachIteration">true</boolProp>
                </CookieManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Mall History Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1838093228">Gift Card History</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: POST Pair Watch" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="programType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">AWTCH</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">programType</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/${msPath}/1.0/apple_watch/pair_watch</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Client" elementType="Header">
                    <stringProp name="Header.name">Vitality-Client</stringProp>
                    <stringProp name="Header.value">Aetna</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Token" elementType="Header">
                    <stringProp name="Header.name">Vitality-Token</stringProp>
                    <stringProp name="Header.value">${ar_Token}</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-App-Version" elementType="Header">
                    <stringProp name="Header.name">Vitality-App-Version</stringProp>
                    <stringProp name="Header.value">7</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                    <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                    <stringProp name="Header.value">IOS</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Language" elementType="Header">
                    <stringProp name="Header.name">Vitality-Language</stringProp>
                    <stringProp name="Header.value">en</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Device-Id" elementType="Header">
                    <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                    <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-API-Version" elementType="Header">
                    <stringProp name="Header.name">Vitality-API-Version</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                    <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="AWTCH Assertion" enabled="true">
                <stringProp name="JSON_PATH">$.request.programType</stringProp>
                <stringProp name="EXPECTED_VALUE">AWTCH</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">false</boolProp>
              </JSONPathAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Sapphire" enabled="true"/>
        <hashTree>
          <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${wso2Base}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout">30000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">300000</stringProp>
          </ConfigTestElement>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Encrypting Entity" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import java.security.MessageDigest;

MessageDigest digest = MessageDigest.getInstance(&quot;MD5&quot;);
byte[] bytes = digest.digest((&quot;${sapphireId}&quot; + &quot;${msSalt}&quot;).getBytes());
vars.put(&quot;sapphireIdEncrypted&quot;,javax.xml.bind.DatatypeConverter.printHexBinary(bytes).toLowerCase());</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST WSO2 Access Token" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="grant_type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">client_credentials</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">grant_type</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/token</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Basic ${wso2Token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extracting WSO2 AccessToken" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">wso2AccessToken</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST RTE Token: Generate" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;issuedDate&quot;: &quot;${dateToday}&quot;,&#xd;
  &quot;entityNo&quot;: null,&#xd;
  &quot;expiryDate&quot;: &quot;${dateTomorrow}&quot;,&#xd;
  &quot;verifiedDate&quot;: null,&#xd;
  &quot;partnerId&quot;: &quot;BESTBUY&quot;,&#xd;
  &quot;generatedBy&quot;: &quot;PERF-TEST&quot;,&#xd;
  &quot;tokenType&quot;: &quot;Token&quot;,&#xd;
  &quot;tokenValue&quot;: &quot;${randomAlphaNumericString}&quot;,&#xd;
  &quot;status&quot;: &quot;P&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${zuulHostRte}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">vitality-whitelabel-domain-service-1/svc/2/token.json</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.proxyHost">${zuulProxy}</stringProp>
            <stringProp name="HTTPSampler.proxyPort">${proxyPort}</stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="RTE Token: WhiteLable" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">sapphireRteToken</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.tokenValue</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Assert: sapphireRteToken" enabled="true">
              <stringProp name="JSON_PATH">$.tokenValue</stringProp>
              <stringProp name="EXPECTED_VALUE">${sapphireRteToken}</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST RTE Token Validation" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;validateTokenRequest&quot;: {&#xd;
    &quot;partnerId&quot;: &quot;BESTBUY&quot;,&#xd;
    &quot;tokenId&quot;: &quot;${sapphireRteToken}&quot;&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/whitelabel-rte/1.0/svc/2/validateToken</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${wso2AccessToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: Token is valid" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1616563228">validateTokenResponse</stringProp>
                <stringProp name="-374023120">tokenAttributes</stringProp>
                <stringProp name="-2031077811">isTokenValid</stringProp>
                <stringProp name="3569038">true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RTE: Sapphire Create a New User" enabled="false">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
 &quot;enrollMemberRequest&quot;: {&#xd;
   &quot;coverageEffectiveDate&quot;: &quot;${dateToday}&quot;,&#xd;
   &quot;dateOfBirth&quot;: &quot;${__RandomDate(yyyy-MM-dd,1930-01-01,2001-12-31,,)}&quot;,&#xd;
   &quot;firstName&quot;: &quot;${randomString}&quot;,&#xd;
   &quot;gender&quot;: &quot;${__chooseRandom(M,F,U,randomProduct)}&quot;,&#xd;
   &quot;lastName&quot;: &quot;${randomString}&quot;,&#xd;
   &quot;partnerId&quot;: &quot;BESTBUY&quot;,&#xd;
   &quot;uniqueId&quot;: &quot;${sapphireRteToken}&quot;,&#xd;
   &quot;zipCode&quot;: &quot;60605&quot;&#xd;
 }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/whitelabel-rte/1.0/svc/2/enrollMember</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${wso2AccessToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: Vitality ID present" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1203236063">errorMessage</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">6</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract entityNo" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">sapphireId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.enrollMemberResponse.vitalityId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="POST Activate" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST MS WSO2 Access Token" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="grant_type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">client_credentials</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">grant_type</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/token</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Basic ${msWso2Token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="msWso2Bearer" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">msWso2Bearer</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Activate" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;tenantId&quot;: &quot;32&quot;,&#xd;
&quot;mode&quot;: &quot;Activate&quot;,&#xd;
&quot;programme&quot;: {&#xd;
&quot;entityNumber&quot;: ${sapphireId}, &#xd;
&quot;programType&quot;: &quot;ActiveRewards&quot;,&#xd;
&quot;effectivePeriods&quot;: [&#xd;
{&#xd;
&quot;effectiveFrom&quot;: &quot;${dateToday}&quot;,&#xd;
&quot;effectiveTo&quot;: &quot;9999-12-30&quot;&#xd;
}&#xd;
]&#xd;
}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/${arPath}/1.0/Activation</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-vsl-timestamp</stringProp>
                    <stringProp name="Header.value">${timeStamp}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${msWso2Bearer}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Programme Activated Assertion " enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1044234867">Programme Activated</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Auth Token" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="entity_no" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${sapphireId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">entity_no</stringProp>
                </elementProp>
                <elementProp name="encrypted_entity_no" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${sapphireIdEncrypted}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">encrypted_entity_no</stringProp>
                </elementProp>
                <elementProp name="_p" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">IOS</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">_p</stringProp>
                </elementProp>
                <elementProp name="_v" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${mob.app.version}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">_v</stringProp>
                </elementProp>
                <elementProp name="_doc_browser_context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">_doc_browser_context</stringProp>
                </elementProp>
                <elementProp name="_c" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">BESTBUY</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">_c</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${msBase}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${msPath}/auth/simulate_auth</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Ignore Response Code" enabled="true">
              <collectionProp name="Asserion.test_strings"/>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Active Rewards Token" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">ar_Token</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.session.token</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-950083557">status&quot; : 1</stringProp>
                <stringProp name="-950083558">status&quot; : 0</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">34</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Accept T&amp;C" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/whitelabel-mobile-api/1.0/registration/accept_terms_and_conditions</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Vitality-Client" elementType="Header">
                  <stringProp name="Header.name">Vitality-Client</stringProp>
                  <stringProp name="Header.value">BESTBUY</stringProp>
                </elementProp>
                <elementProp name="Vitality-Token" elementType="Header">
                  <stringProp name="Header.name">Vitality-Token</stringProp>
                  <stringProp name="Header.value">${ar_Token}</stringProp>
                </elementProp>
                <elementProp name="Vitality-App-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-App-Version</stringProp>
                  <stringProp name="Header.value">7</stringProp>
                </elementProp>
                <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                  <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                  <stringProp name="Header.value">IOS</stringProp>
                </elementProp>
                <elementProp name="Vitality-Language" elementType="Header">
                  <stringProp name="Header.name">Vitality-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Vitality-Device-Id" elementType="Header">
                  <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                  <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                </elementProp>
                <elementProp name="Vitality-Local-Time" elementType="Header">
                  <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                  <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                </elementProp>
                <elementProp name="Vitality-API-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-API-Version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-160985414">first_name</stringProp>
                <stringProp name="2013122196">last_name</stringProp>
                <stringProp name="110541305">token</stringProp>
                <stringProp name="-1249512767">gender</stringProp>
                <stringProp name="-1181815352">date_of_birth</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Check Username: Valid" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="username" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${enviroment}${randomString}@sapphire.com</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">username</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/whitelabel-mobile-api/1.0/registration/check_username</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Vitality-Client" elementType="Header">
                  <stringProp name="Header.name">Vitality-Client</stringProp>
                  <stringProp name="Header.value">BESTBUY</stringProp>
                </elementProp>
                <elementProp name="Vitality-App-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-App-Version</stringProp>
                  <stringProp name="Header.value">7</stringProp>
                </elementProp>
                <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                  <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                  <stringProp name="Header.value">IOS</stringProp>
                </elementProp>
                <elementProp name="Vitality-Language" elementType="Header">
                  <stringProp name="Header.name">Vitality-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Vitality-Device-Id" elementType="Header">
                  <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                  <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                </elementProp>
                <elementProp name="Vitality-Local-Time" elementType="Header">
                  <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                  <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                </elementProp>
                <elementProp name="Vitality-API-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-API-Version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-161783867">&quot;status&quot;:1</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Check Username: Invalid" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="username" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${enviroment}${randomString}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">username</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/whitelabel-mobile-api/1.0/registration/check_username</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Vitality-Client" elementType="Header">
                  <stringProp name="Header.name">Vitality-Client</stringProp>
                  <stringProp name="Header.value">BESTBUY</stringProp>
                </elementProp>
                <elementProp name="Vitality-App-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-App-Version</stringProp>
                  <stringProp name="Header.value">7</stringProp>
                </elementProp>
                <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                  <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                  <stringProp name="Header.value">IOS</stringProp>
                </elementProp>
                <elementProp name="Vitality-Language" elementType="Header">
                  <stringProp name="Header.name">Vitality-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Vitality-Device-Id" elementType="Header">
                  <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                  <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                </elementProp>
                <elementProp name="Vitality-Local-Time" elementType="Header">
                  <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                  <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                </elementProp>
                <elementProp name="Vitality-API-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-API-Version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Ignore 500 code" enabled="true">
              <collectionProp name="Asserion.test_strings"/>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1694715979">You used an invalid email format</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Check Password" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="password" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">P@ssw0rd</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">password</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/whitelabel-mobile-api/1.0/registration/validate_password</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Vitality-Client" elementType="Header">
                  <stringProp name="Header.name">Vitality-Client</stringProp>
                  <stringProp name="Header.value">BESTBUY</stringProp>
                </elementProp>
                <elementProp name="Vitality-App-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-App-Version</stringProp>
                  <stringProp name="Header.value">7</stringProp>
                </elementProp>
                <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                  <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                  <stringProp name="Header.value">IOS</stringProp>
                </elementProp>
                <elementProp name="Vitality-Language" elementType="Header">
                  <stringProp name="Header.name">Vitality-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Vitality-Device-Id" elementType="Header">
                  <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                  <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                </elementProp>
                <elementProp name="Vitality-Local-Time" elementType="Header">
                  <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                  <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                </elementProp>
                <elementProp name="Vitality-API-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-API-Version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-161783867">&quot;status&quot;:1</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Get Security Questions" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/whitelabel-mobile-api/1.0/registration/get_security_questions</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Vitality-Client" elementType="Header">
                  <stringProp name="Header.name">Vitality-Client</stringProp>
                  <stringProp name="Header.value">BESTBUY</stringProp>
                </elementProp>
                <elementProp name="Vitality-Token" elementType="Header">
                  <stringProp name="Header.name">Vitality-Token</stringProp>
                  <stringProp name="Header.value">${ar_Token}</stringProp>
                </elementProp>
                <elementProp name="Vitality-App-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-App-Version</stringProp>
                  <stringProp name="Header.value">7</stringProp>
                </elementProp>
                <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                  <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                  <stringProp name="Header.value">IOS</stringProp>
                </elementProp>
                <elementProp name="Vitality-Language" elementType="Header">
                  <stringProp name="Header.name">Vitality-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Vitality-Device-Id" elementType="Header">
                  <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                  <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                </elementProp>
                <elementProp name="Vitality-Local-Time" elementType="Header">
                  <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                  <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                </elementProp>
                <elementProp name="Vitality-API-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-API-Version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Security Questions Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1756474666">What is your mother&apos;s maiden name?</stringProp>
                <stringProp name="-1356961676">In what city was your first job?</stringProp>
                <stringProp name="1564291278">What was your high school mascot?</stringProp>
                <stringProp name="-2093164811">What was your first pet&apos;s name?</stringProp>
                <stringProp name="1430685173">What was your first car?</stringProp>
                <stringProp name="1220463951">What was your childhood nickname?</stringProp>
                <stringProp name="-1442342085">What is your paternal grandmother&apos;s first name?</stringProp>
                <stringProp name="2019996010">In what city were you born?</stringProp>
                <stringProp name="-1737821990">What was the street name of your childhood home?</stringProp>
                <stringProp name="-407625967">What is the name of your favorite teacher?</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET AR Eligibility" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/whitelabel-mobile-api/1.0/active_rewards/eligibility</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Vitality-Client" elementType="Header">
                  <stringProp name="Header.name">Vitality-Client</stringProp>
                  <stringProp name="Header.value">BESTBUY</stringProp>
                </elementProp>
                <elementProp name="Vitality-Token" elementType="Header">
                  <stringProp name="Header.name">Vitality-Token</stringProp>
                  <stringProp name="Header.value">${ar_Token}</stringProp>
                </elementProp>
                <elementProp name="Vitality-App-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-App-Version</stringProp>
                  <stringProp name="Header.value">7</stringProp>
                </elementProp>
                <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                  <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                  <stringProp name="Header.value">IOS</stringProp>
                </elementProp>
                <elementProp name="Vitality-Language" elementType="Header">
                  <stringProp name="Header.name">Vitality-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Vitality-Device-Id" elementType="Header">
                  <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                  <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                </elementProp>
                <elementProp name="Vitality-Local-Time" elementType="Header">
                  <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                  <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                </elementProp>
                <elementProp name="Vitality-API-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-API-Version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Eligibility Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-68120096">APWatch</stringProp>
                <stringProp name="720178462">ActiveRewards</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET AR Goals" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="goalType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">weekly</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">goalType</stringProp>
                </elementProp>
                <elementProp name="offset" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">offset</stringProp>
                </elementProp>
                <elementProp name="limit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">15</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">limit</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/whitelabel-mobile-api/1.0/active_rewards/goals</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Vitality-Client" elementType="Header">
                  <stringProp name="Header.name">Vitality-Client</stringProp>
                  <stringProp name="Header.value">BESTBUY</stringProp>
                </elementProp>
                <elementProp name="Vitality-Token" elementType="Header">
                  <stringProp name="Header.name">Vitality-Token</stringProp>
                  <stringProp name="Header.value">${ar_Token}</stringProp>
                </elementProp>
                <elementProp name="Vitality-App-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-App-Version</stringProp>
                  <stringProp name="Header.value">7</stringProp>
                </elementProp>
                <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                  <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                  <stringProp name="Header.value">IOS</stringProp>
                </elementProp>
                <elementProp name="Vitality-Language" elementType="Header">
                  <stringProp name="Header.name">Vitality-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Vitality-Device-Id" elementType="Header">
                  <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                  <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                </elementProp>
                <elementProp name="Vitality-Local-Time" elementType="Header">
                  <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                  <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                </elementProp>
                <elementProp name="Vitality-API-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-API-Version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Goals Type Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-791707519">weekly</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET AR Current Goals" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/whitelabel-mobile-api/1.0/active_rewards/current_goals</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Vitality-Client" elementType="Header">
                  <stringProp name="Header.name">Vitality-Client</stringProp>
                  <stringProp name="Header.value">BESTBUY</stringProp>
                </elementProp>
                <elementProp name="Vitality-Token" elementType="Header">
                  <stringProp name="Header.name">Vitality-Token</stringProp>
                  <stringProp name="Header.value">${ar_Token}</stringProp>
                </elementProp>
                <elementProp name="Vitality-App-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-App-Version</stringProp>
                  <stringProp name="Header.value">7</stringProp>
                </elementProp>
                <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                  <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                  <stringProp name="Header.value">IOS</stringProp>
                </elementProp>
                <elementProp name="Vitality-Language" elementType="Header">
                  <stringProp name="Header.name">Vitality-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Vitality-Device-Id" elementType="Header">
                  <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                  <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                </elementProp>
                <elementProp name="Vitality-Local-Time" elementType="Header">
                  <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                  <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                </elementProp>
                <elementProp name="Vitality-API-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-API-Version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Goal ID" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">arGoalId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.output.goals[0].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Goals Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-791707519">weekly</stringProp>
                <stringProp name="656467758">Best Buy weekly reward configuration</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET AR Goal" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="goalId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${arGoalId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">goalId</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/whitelabel-mobile-api/1.0/active_rewards/goal</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Vitality-Client" elementType="Header">
                  <stringProp name="Header.name">Vitality-Client</stringProp>
                  <stringProp name="Header.value">BESTBUY</stringProp>
                </elementProp>
                <elementProp name="Vitality-Token" elementType="Header">
                  <stringProp name="Header.name">Vitality-Token</stringProp>
                  <stringProp name="Header.value">${ar_Token}</stringProp>
                </elementProp>
                <elementProp name="Vitality-App-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-App-Version</stringProp>
                  <stringProp name="Header.value">7</stringProp>
                </elementProp>
                <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                  <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                  <stringProp name="Header.value">IOS</stringProp>
                </elementProp>
                <elementProp name="Vitality-Language" elementType="Header">
                  <stringProp name="Header.name">Vitality-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Vitality-Device-Id" elementType="Header">
                  <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                  <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                </elementProp>
                <elementProp name="Vitality-Local-Time" elementType="Header">
                  <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                  <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                </elementProp>
                <elementProp name="Vitality-API-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-API-Version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Goals Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-791707519">weekly</stringProp>
                <stringProp name="656467758">Best Buy weekly reward configuration</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET AR Rewards Groups" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/whitelabel-mobile-api/1.0/active_rewards/get_rewards_groups</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Vitality-Client" elementType="Header">
                  <stringProp name="Header.name">Vitality-Client</stringProp>
                  <stringProp name="Header.value">BESTBUY</stringProp>
                </elementProp>
                <elementProp name="Vitality-Token" elementType="Header">
                  <stringProp name="Header.name">Vitality-Token</stringProp>
                  <stringProp name="Header.value">${ar_Token}</stringProp>
                </elementProp>
                <elementProp name="Vitality-App-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-App-Version</stringProp>
                  <stringProp name="Header.value">7</stringProp>
                </elementProp>
                <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                  <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                  <stringProp name="Header.value">IOS</stringProp>
                </elementProp>
                <elementProp name="Vitality-Language" elementType="Header">
                  <stringProp name="Header.name">Vitality-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Vitality-Device-Id" elementType="Header">
                  <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                  <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                </elementProp>
                <elementProp name="Vitality-Local-Time" elementType="Header">
                  <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                  <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                </elementProp>
                <elementProp name="Vitality-API-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-API-Version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Rewards Group Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2031199">BB10</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST VDP: ROUTINE" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
 &quot;device&quot;: {&#xd;
   &quot;deviceId&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}&quot;,&#xd;
   &quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
   &quot;model&quot;: &quot;iOS 10.0.1&quot;&#xd;
 },&#xd;
	 &quot;header&quot;: {&#xd;
	   &quot;partnerSystem&quot;: &quot;Apple&quot;,&#xd;
	   &quot;processingType&quot;: &quot;BATCH&quot;,&#xd;
	   &quot;rawUploadData&quot;: &quot;&quot;,&#xd;
	   &quot;sessionId&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}&quot;,&#xd;
	   &quot;tenantId&quot;: &quot;32&quot;,&#xd;
	   &quot;uploadCount&quot;: 3,&#xd;
	   &quot;uploadDate&quot;: &quot;${dateToday}T00:00:00+03:00&quot;,&#xd;
	   &quot;user&quot;: {&#xd;
	     &quot;entityNo&quot;: &quot;${sapphireId}&quot;,&#xd;
	     &quot;partnerUserId&quot;: &quot;&quot;&#xd;
	  },&#xd;
	   &quot;verified&quot;: &quot;true&quot;&#xd;
	  },&#xd;
		 &quot;readings&quot;: [&#xd;
		   {&#xd;
		     &quot;dataCategory&quot;: &quot;BIOMETRIC&quot;,&#xd;
		     &quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00+03:00&quot;,&#xd;
		     &quot;healthData&quot;: {&#xd;
		     &quot;weight&quot;: {&#xd;
		     &quot;unitOfMeasurement&quot;: &quot;KILOGRAMS&quot;,&#xd;
		     &quot;value&quot;: 80.5&#xd;
		       }&#xd;
     },&#xd;
     &quot;integrity&quot;: &quot;UNVERIFIED&quot;,&#xd;
     &quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
     &quot;model&quot;: &quot;iOS 10.0.1&quot;,&#xd;
     &quot;partnerReadingId&quot;: &quot;${dateToday}${randomAlphaNumericString}&quot;,&#xd;
     &quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
     &quot;readingType&quot;: &quot;WEIGHT&quot;,&#xd;
     &quot;startTime&quot;: &quot;${dateToday}T00:00:00+03:00&quot;&#xd;
   },&#xd;
   {&#xd;
     &quot;dataCategory&quot;: &quot;ROUTINE&quot;,&#xd;
     &quot;duration&quot;: 86400,&#xd;
     &quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00+03:00&quot;,&#xd;
     &quot;integrity&quot;: &quot;VERIFIED&quot;,&#xd;
     &quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
     &quot;model&quot;: &quot;iOS 10.0.1&quot;,&#xd;
     &quot;partnerReadingId&quot;: &quot;${dateToday}${randomAlphaNumericString}&quot;,&#xd;
     &quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
     &quot;readingType&quot;: &quot;WALKING&quot;,&#xd;
     &quot;startTime&quot;: &quot;${dateToday}T00:00:00+03:00&quot;,&#xd;
     &quot;workout&quot;: {&#xd;
       &quot;energyExpenditure&quot;: {&#xd;
         &quot;unitOfMeasurement&quot;: &quot;KILOCALORIES&quot;,&#xd;
         &quot;value&quot;: 1200&#xd;
       }&#xd;
     }&#xd;
   }&#xd;
   &#xd;
 ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/${msPath}/1.0/health_data/upload</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Vitality-Token" elementType="Header">
                  <stringProp name="Header.name">Vitality-Token</stringProp>
                  <stringProp name="Header.value">${ar_Token}</stringProp>
                </elementProp>
                <elementProp name="Vitality-App-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-App-Version</stringProp>
                  <stringProp name="Header.value">7</stringProp>
                </elementProp>
                <elementProp name="Vitality-Language" elementType="Header">
                  <stringProp name="Header.name">Vitality-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Vitality-Device-Id" elementType="Header">
                  <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                  <stringProp name="Header.value">swagger-3f802407-77b4-407c-a758-842af5830c2b</stringProp>
                </elementProp>
                <elementProp name="Vitality-Local-Time" elementType="Header">
                  <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                  <stringProp name="Header.value">${__time(yyyy-MM-dd,)}</stringProp>
                </elementProp>
                <elementProp name="Vitality-API-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-API-Version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                  <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                  <stringProp name="Header.value">IOS</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Health Data Upload Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1880474659">Successfully Uploaded Health Data to GDL</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET AR Streak Summary" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/whitelabel-mobile-api/1.0/active_rewards/streak_summary</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Vitality-Client" elementType="Header">
                  <stringProp name="Header.name">Vitality-Client</stringProp>
                  <stringProp name="Header.value">BESTBUY</stringProp>
                </elementProp>
                <elementProp name="Vitality-Token" elementType="Header">
                  <stringProp name="Header.name">Vitality-Token</stringProp>
                  <stringProp name="Header.value">${ar_Token}</stringProp>
                </elementProp>
                <elementProp name="Vitality-App-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-App-Version</stringProp>
                  <stringProp name="Header.value">7</stringProp>
                </elementProp>
                <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                  <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                  <stringProp name="Header.value">IOS</stringProp>
                </elementProp>
                <elementProp name="Vitality-Language" elementType="Header">
                  <stringProp name="Header.name">Vitality-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Vitality-Device-Id" elementType="Header">
                  <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                  <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                </elementProp>
                <elementProp name="Vitality-Local-Time" elementType="Header">
                  <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                  <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                </elementProp>
                <elementProp name="Vitality-API-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-API-Version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Streak Reward Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1736004014">best-buy-streak-reward</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Health Data Settings" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/whitelabel-mobile-api/1.0/health_data/settings</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Vitality-Client" elementType="Header">
                  <stringProp name="Header.name">Vitality-Client</stringProp>
                  <stringProp name="Header.value">BESTBUY</stringProp>
                </elementProp>
                <elementProp name="Vitality-Token" elementType="Header">
                  <stringProp name="Header.name">Vitality-Token</stringProp>
                  <stringProp name="Header.value">${ar_Token}</stringProp>
                </elementProp>
                <elementProp name="Vitality-App-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-App-Version</stringProp>
                  <stringProp name="Header.value">7</stringProp>
                </elementProp>
                <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                  <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                  <stringProp name="Header.value">IOS</stringProp>
                </elementProp>
                <elementProp name="Vitality-Language" elementType="Header">
                  <stringProp name="Header.name">Vitality-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Vitality-Device-Id" elementType="Header">
                  <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                  <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                </elementProp>
                <elementProp name="Vitality-Local-Time" elementType="Header">
                  <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                  <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                </elementProp>
                <elementProp name="Vitality-API-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-API-Version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Streak Reward Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2070259289">status&quot;:1</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Dashboard Vitality Bucks " enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/whitelabel-mobile-api/1.0/health_data/settings</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Vitality-Client" elementType="Header">
                  <stringProp name="Header.name">Vitality-Client</stringProp>
                  <stringProp name="Header.value">BESTBUY</stringProp>
                </elementProp>
                <elementProp name="Vitality-Token" elementType="Header">
                  <stringProp name="Header.name">Vitality-Token</stringProp>
                  <stringProp name="Header.value">${ar_Token}</stringProp>
                </elementProp>
                <elementProp name="Vitality-App-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-App-Version</stringProp>
                  <stringProp name="Header.value">7</stringProp>
                </elementProp>
                <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                  <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                  <stringProp name="Header.value">IOS</stringProp>
                </elementProp>
                <elementProp name="Vitality-Language" elementType="Header">
                  <stringProp name="Header.name">Vitality-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Vitality-Device-Id" elementType="Header">
                  <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                  <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                </elementProp>
                <elementProp name="Vitality-Local-Time" elementType="Header">
                  <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                  <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                </elementProp>
                <elementProp name="Vitality-API-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-API-Version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Vitality Bucks Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2070259289">status&quot;:1</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Register Push Token" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="push_token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${randomAlphaNumericString}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">push_token</stringProp>
                </elementProp>
                <elementProp name="device_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${randomNumericString}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">device_id</stringProp>
                </elementProp>
                <elementProp name="platform" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">IOS</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">platform</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/${msPath}/1.0/notifications/register_push_token</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Vitality-Client" elementType="Header">
                  <stringProp name="Header.name">Vitality-Client</stringProp>
                  <stringProp name="Header.value">BESTBUY</stringProp>
                </elementProp>
                <elementProp name="Vitality-Token" elementType="Header">
                  <stringProp name="Header.name">Vitality-Token</stringProp>
                  <stringProp name="Header.value">${ar_Token}</stringProp>
                </elementProp>
                <elementProp name="Vitality-App-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-App-Version</stringProp>
                  <stringProp name="Header.value">7</stringProp>
                </elementProp>
                <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                  <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                  <stringProp name="Header.value">IOS</stringProp>
                </elementProp>
                <elementProp name="Vitality-Language" elementType="Header">
                  <stringProp name="Header.name">Vitality-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Vitality-Device-Id" elementType="Header">
                  <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                  <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                </elementProp>
                <elementProp name="Vitality-Local-Time" elementType="Header">
                  <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                  <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                </elementProp>
                <elementProp name="Vitality-API-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-API-Version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion that Status = 1" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-161783867">&quot;status&quot;:1</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Set Push Enabled" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="enabled" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">enabled</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/${msPath}/1.0/notifications/set_push_enabled</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Vitality-Client" elementType="Header">
                  <stringProp name="Header.name">Vitality-Client</stringProp>
                  <stringProp name="Header.value">BESTBUY</stringProp>
                </elementProp>
                <elementProp name="Vitality-Token" elementType="Header">
                  <stringProp name="Header.name">Vitality-Token</stringProp>
                  <stringProp name="Header.value">${ar_Token}</stringProp>
                </elementProp>
                <elementProp name="Vitality-App-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-App-Version</stringProp>
                  <stringProp name="Header.value">7</stringProp>
                </elementProp>
                <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                  <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                  <stringProp name="Header.value">IOS</stringProp>
                </elementProp>
                <elementProp name="Vitality-Language" elementType="Header">
                  <stringProp name="Header.name">Vitality-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Vitality-Device-Id" elementType="Header">
                  <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                  <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                </elementProp>
                <elementProp name="Vitality-Local-Time" elementType="Header">
                  <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                  <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                </elementProp>
                <elementProp name="Vitality-API-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-API-Version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Feedback Faq" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/whitelabel-mobile-api/1.0/feedback/faq</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Vitality-Client" elementType="Header">
                  <stringProp name="Header.name">Vitality-Client</stringProp>
                  <stringProp name="Header.value">BESTBUY</stringProp>
                </elementProp>
                <elementProp name="Vitality-Token" elementType="Header">
                  <stringProp name="Header.name">Vitality-Token</stringProp>
                  <stringProp name="Header.value">${ar_Token}</stringProp>
                </elementProp>
                <elementProp name="Vitality-App-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-App-Version</stringProp>
                  <stringProp name="Header.value">7</stringProp>
                </elementProp>
                <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                  <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                  <stringProp name="Header.value">IOS</stringProp>
                </elementProp>
                <elementProp name="Vitality-Language" elementType="Header">
                  <stringProp name="Header.name">Vitality-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Vitality-Device-Id" elementType="Header">
                  <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                  <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                </elementProp>
                <elementProp name="Vitality-Local-Time" elementType="Header">
                  <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                  <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                </elementProp>
                <elementProp name="Vitality-API-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-API-Version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Feedback Faq Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2070259289">status&quot;:1</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Calories Thresholds" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="filter" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">HEALTH_DATA_THRESHOLDS</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">filter</stringProp>
                </elementProp>
                <elementProp name="weightKg" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">80</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">weightKg</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/whitelabel-mobile-api/1.0/user_settings/settings</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Vitality-Client" elementType="Header">
                  <stringProp name="Header.name">Vitality-Client</stringProp>
                  <stringProp name="Header.value">BESTBUY</stringProp>
                </elementProp>
                <elementProp name="Vitality-Token" elementType="Header">
                  <stringProp name="Header.name">Vitality-Token</stringProp>
                  <stringProp name="Header.value">${ar_Token}</stringProp>
                </elementProp>
                <elementProp name="Vitality-App-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-App-Version</stringProp>
                  <stringProp name="Header.value">7</stringProp>
                </elementProp>
                <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                  <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                  <stringProp name="Header.value">IOS</stringProp>
                </elementProp>
                <elementProp name="Vitality-Language" elementType="Header">
                  <stringProp name="Header.name">Vitality-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Vitality-Device-Id" elementType="Header">
                  <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                  <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                </elementProp>
                <elementProp name="Vitality-Local-Time" elementType="Header">
                  <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                  <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                </elementProp>
                <elementProp name="Vitality-API-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-API-Version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Thresholds" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">swawMnemonic;awawMnemonic;swawThreshold;awawThreshold</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.output.healthDataThresholdSettings.caloriesThresholds.thresholds[1].mnemonic;$.output.healthDataThresholdSettings.caloriesThresholds.thresholds[2].mnemonic;$.output.healthDataThresholdSettings.caloriesThresholds.thresholds[1].threshold;$.output.healthDataThresholdSettings.caloriesThresholds.thresholds[2].threshold</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND;NOT_FOUND;NOT_FOUND;NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: Token is valid" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1423148013">{&quot;validateTokenResponse&quot;:{&quot;isTokenValid&quot;:&quot;true&quot;}}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Mango Consumer" enabled="true"/>
        <hashTree>
          <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${wgBase}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </ConfigTestElement>
          <hashTree/>
          <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
            <collectionProp name="CookieManager.cookies"/>
            <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          </CookieManager>
          <hashTree/>
          <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
            <collectionProp name="UserParameters.names">
              <stringProp name="-563919673">mangoLogin</stringProp>
              <stringProp name="1375404157">mangoPassword</stringProp>
            </collectionProp>
            <collectionProp name="UserParameters.thread_values">
              <collectionProp name="-1140881113">
                <stringProp name="-1483517570">mangotestvg2@gmail.com</stringProp>
                <stringProp name="1707845512">Mango2019</stringProp>
              </collectionProp>
              <collectionProp name="378563172">
                <stringProp name="-1692822035">goldensnitch781@gmail.com</stringProp>
                <stringProp name="-1610026624">Test12345!</stringProp>
              </collectionProp>
              <collectionProp name="1916856074">
                <stringProp name="154628002">polyjuice74@gmail.com</stringProp>
                <stringProp name="-1610026624">Test12345!</stringProp>
              </collectionProp>
              <collectionProp name="-212530215">
                <stringProp name="-614097437">fredshouldhavelived@gmail.com</stringProp>
                <stringProp name="-1610026624">Test12345!</stringProp>
              </collectionProp>
              <collectionProp name="-717497903">
                <stringProp name="-2061826348">Gryffindor579@gmail.com</stringProp>
                <stringProp name="-1610026624">Test12345!</stringProp>
              </collectionProp>
              <collectionProp name="127340567">
                <stringProp name="2115215556">Ravenclaw3579@gmail.com</stringProp>
                <stringProp name="-1610026624">Test12345!</stringProp>
              </collectionProp>
              <collectionProp name="474187908">
                <stringProp name="-2000653568">hufflepuff9653456@gmail.com</stringProp>
                <stringProp name="-1610026624">Test12345!</stringProp>
              </collectionProp>
              <collectionProp name="394237045">
                <stringProp name="346552445">horcruxeshewhoshouldnotbenamed@gmail.com</stringProp>
                <stringProp name="-1610026624">Test12345!</stringProp>
              </collectionProp>
              <collectionProp name="-887331272">
                <stringProp name="15251756">ronweasly987654@gmail.com</stringProp>
                <stringProp name="-1610026624">Test12345!</stringProp>
              </collectionProp>
              <collectionProp name="-1690948447">
                <stringProp name="1308773047">grangerhermione645@gmail.com</stringProp>
                <stringProp name="-1610026624">Test12345!</stringProp>
              </collectionProp>
              <collectionProp name="-613411202">
                <stringProp name="-205416168">hp0109229@gmail.com</stringProp>
                <stringProp name="-1610026624">Test12345!</stringProp>
              </collectionProp>
              <collectionProp name="1054086687">
                <stringProp name="-238498634">mangotestvg@gmail.com</stringProp>
                <stringProp name="1707845512">Mango2019</stringProp>
              </collectionProp>
            </collectionProp>
            <boolProp name="UserParameters.per_iteration">false</boolProp>
          </UserParameters>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Mango: FTUJ" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Mango: Reg Personal Info" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">register/regpersonalinfo</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <stringProp name="HTTPSampler.concurrentPool"></stringProp>
              <stringProp name="HTTPSampler.embedded_url_re">https:${wgBase}/register/regpersonalinfo</stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout">30000</stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">X-XSRF-TOKEN</stringProp>
                <stringProp name="RegexExtractor.regex">meta name=&quot;_csrf&quot; content=&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOT FOUND</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Mango: Register new user on WG.com" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;firstName&quot;: &quot;F${randomString}&quot;,&#xd;
	&quot;lastName&quot;: &quot;L${randomString}&quot;,&#xd;
	&quot;login&quot;: &quot;${randomString}@mango.com&quot;,&#xd;
	&quot;password&quot;: &quot;Mango2019&quot;,&#xd;
	&quot;emailOptInInd&quot;: true,&#xd;
	&quot;tncAcceptInd&quot;: true,&#xd;
	&quot;smsOptInInd&quot;: false,&#xd;
	&quot;pliInd&quot;: false,&#xd;
	&quot;regSource&quot;: &quot;loyalty&quot;,&#xd;
	&quot;loyaltyType&quot;: &quot;enroll&quot;,&#xd;
	&quot;phoneNumber&quot;: &quot;77${randomNumericFour}${randomNumericFour}&quot;,&#xd;
	&quot;phoneType&quot;: &quot;cell&quot;,&#xd;
	&quot;dateOfBirth&quot;: &quot;10/10/1983&quot;,&#xd;
	&quot;address&quot;: {&#xd;
		&quot;zipCode&quot;: &quot;60622&quot;&#xd;
	}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">register/signup?instart_disable_injection=true</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool"></stringProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout">30000</stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-XSRF-TOKEN</stringProp>
                    <stringProp name="Header.value">${X-XSRF-TOKEN}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${wgBase}/login.jsp</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: ENROLL Status" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-933465782">ENROLL_SUCCESS</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Mango: RTE via WG.com" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">brhc/createVitalityId</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout">30000</stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract: vitalityId" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">mangoId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.vitalityId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract: jwtToken" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">jwtToken</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.jwt</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-202516509">Success</stringProp>
                  <stringProp name="1165624797">vitalityId</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET  PHYSICAL_ACTIVITY: SSO to Choose Goals page" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">PHYSICAL_ACTIVITY</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">type</stringProp>
                  </elementProp>
                  <elementProp name="jwtptn" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${jwtToken}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">jwtptn</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ssoBase}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">vitality/mango_goals/choose_goal</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">1</stringProp>
              <stringProp name="HTTPSampler.embedded_url_re">qa.powerofvitality.com</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Goal ID" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">physicalActivityGoalID</stringProp>
                <stringProp name="RegexExtractor.regex">name=&quot;goalId&quot; value=&quot;(.+)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="481331987">Choose a physical activity challenge</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Ignore CDN Errors" enabled="false">
                <collectionProp name="Asserion.test_strings"/>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Mango: Using JWT Token" enabled="true"/>
          <hashTree>
            <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ssoBase}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </ConfigTestElement>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname=" GET  PHYSICAL_ACTIVITY: Choose Challenge" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">PHYSICAL_ACTIVITY</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">type</stringProp>
                  </elementProp>
                  <elementProp name="jwtptn" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${jwtToken}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">jwtptn</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">vitality/mango_goals/choose_goal</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">1</stringProp>
              <stringProp name="HTTPSampler.embedded_url_re">qa.powerofvitality.com</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Goal ID" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">physicalActivityGoalID</stringProp>
                <stringProp name="RegexExtractor.regex">name=&quot;goalId&quot; value=&quot;(.+)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="481331987">Choose a physical activity challenge</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Ignore CDN Errors" enabled="false">
                <collectionProp name="Asserion.test_strings"/>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname=" GET  PHYSICAL_ACTIVITY: Choose Challenge NO SSO" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">PHYSICAL_ACTIVITY</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">type</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">vitality/mango_goals/choose_goal</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">1</stringProp>
              <stringProp name="HTTPSampler.embedded_url_re">qa.powerofvitality.com</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Goal ID" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">physicalActivityGoalID</stringProp>
                <stringProp name="RegexExtractor.regex">name=&quot;goalId&quot; value=&quot;(.+)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="481331987">Choose a physical activity challenge</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Ignore CDN Errors" enabled="false">
                <collectionProp name="Asserion.test_strings"/>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">true</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname=" POST PHYSICAL_ACTIVITY: Set Goal Active" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="goalId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${physicalActivityGoalID}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">goalId</stringProp>
                  </elementProp>
                  <elementProp name="targetCategoryType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">PHYSICAL_ACTIVITY</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">targetCategoryType</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">vitality/mango_goals/set_goal_active</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool"></stringProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract: personal goal Id" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">personalGoalIdPhysAct</stringProp>
                <stringProp name="RegexExtractor.regex">goalId=(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="717319708">current_goal_details</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname=" GET  PHYSICAL_ACTIVITY: Personal Goal Details" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="goalId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${personalGoalIdPhysAct}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">goalId</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">vitality/mango_goals/current_goal_details</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <stringProp name="HTTPSampler.concurrentPool"></stringProp>
              <stringProp name="HTTPSampler.embedded_url_re">qa.powerofvitality.com</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1832458561">About this 4-week challenge</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname=" GET PHYSICAL_ACTIVITY: Goal Progress" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="goalId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${personalGoalIdPhysAct}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">goalId</stringProp>
                  </elementProp>
                  <elementProp name="isCurrentWeek" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">isCurrentWeek</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">vitality/vap/getMangoGoalProgress</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <stringProp name="HTTPSampler.concurrentPool"></stringProp>
              <stringProp name="HTTPSampler.embedded_url_re">qa.powerofvitality.com</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="36500520">progressId</stringProp>
                  <stringProp name="-653206855">  &quot;status&quot; : 1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract: goalProgressId" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">goalProgressIdPhysAct</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.output.progressId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname=" POST PHYSICAL_ACTIVITY: Submit Goal Checkin" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{	&#xd;
	&quot;progressId&quot;:${goalProgressIdPhysAct},&#xd;
	&quot;dayIndexInWeek&quot;:1,&#xd;
	&quot;isChecked&quot;:true,&#xd;
	&quot;isCurrentWeek&quot;:true&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">vitality/vap/submitMangoGoalCheckin</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool"></stringProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract: personal goal Id" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">personalGoalIdPhysAct</stringProp>
                <stringProp name="RegexExtractor.regex">goalId=(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname=" POST PHYSICAL_ACTIVITY: Cancel Active Goal" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="goalId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${physicalActivityGoalID}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">goalId</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">vitality/vap/cancelActiveGoal</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool"></stringProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract: personal goal Id" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">personalGoalIdPhysAct</stringProp>
                <stringProp name="RegexExtractor.regex">goalId=(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname=" GET  LIFESTYLE: Choose challenge" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">LIFESTYLE</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">type</stringProp>
                  </elementProp>
                  <elementProp name="jwtptn" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${jwtToken}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">jwtptn</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">vitality/mango_goals/choose_goal</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">1</stringProp>
              <stringProp name="HTTPSampler.embedded_url_re">qa.powerofvitality.com</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Goal ID" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">lifeStyleGoalID</stringProp>
                <stringProp name="RegexExtractor.regex">name=&quot;goalId&quot; value=&quot;(.+)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1155597008">Choose a lifestyle challenge</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname=" GET  LIFESTYLE: Choose challenge NO SSO" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">LIFESTYLE</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">type</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">vitality/mango_goals/choose_goal</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">1</stringProp>
              <stringProp name="HTTPSampler.embedded_url_re">qa.powerofvitality.com</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Goal ID" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">lifeStyleGoalID</stringProp>
                <stringProp name="RegexExtractor.regex">name=&quot;goalId&quot; value=&quot;(.+)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1155597008">Choose a lifestyle challenge</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname=" POST LIFESTYLE: Set Goal Active" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="goalId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${lifeStyleGoalID}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">goalId</stringProp>
                  </elementProp>
                  <elementProp name="targetCategoryType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">LIFESTYLE</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">targetCategoryType</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">vitality/mango_goals/set_goal_active</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool"></stringProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract: personal goal Id" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">personalGoalIdLifeStyle</stringProp>
                <stringProp name="RegexExtractor.regex">goalId=(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="717319708">current_goal_details</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname=" GET LIFESTYLE: Personal Goal Details" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="goalId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${personalGoalIdLifeStyle}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">goalId</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">vitality/mango_goals/current_goal_details</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <stringProp name="HTTPSampler.concurrentPool"></stringProp>
              <stringProp name="HTTPSampler.embedded_url_re">qa.powerofvitality.com</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1832458561">About this 4-week challenge</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname=" GET LIFESTYLE: Goal Progress" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="goalId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${personalGoalIdLifeStyle}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">goalId</stringProp>
                  </elementProp>
                  <elementProp name="isCurrentWeek" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">isCurrentWeek</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">vitality/vap/getMangoGoalProgress</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <stringProp name="HTTPSampler.concurrentPool"></stringProp>
              <stringProp name="HTTPSampler.embedded_url_re">qa.powerofvitality.com</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="36500520">progressId</stringProp>
                  <stringProp name="-653206855">  &quot;status&quot; : 1</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract: goalProgressId" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">goalProgressIdLifeStyle</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.output.progressId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname=" POST LIFESTYLE: Submit Goal Checkin" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{	&#xd;
	&quot;progressId&quot;:${goalProgressIdLifeStyle},&#xd;
	&quot;dayIndexInWeek&quot;:1,&#xd;
	&quot;isChecked&quot;:true,&#xd;
	&quot;isCurrentWeek&quot;:true&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">vitality/vap/submitMangoGoalCheckin</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool"></stringProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract: personal goal Id" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">personalGoalIdPhysAct</stringProp>
                <stringProp name="RegexExtractor.regex">goalId=(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname=" POST LIFESTYLE: Cancel Active Goal" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="goalId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${personalGoalIdLifeStyle}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">goalId</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">vitality/vap/cancelActiveGoal</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">true</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool"></stringProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract: personal goal Id" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">personalGoalIdPhysAct</stringProp>
                <stringProp name="RegexExtractor.regex">goalId=(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname=" GET: Spin via WG" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="jwtptn" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${jwtToken}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">jwtptn</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ssoBase}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">vitality/mango_points_wheel/wheel_data/${wheelId}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re">https://qa.powerofvitality.com</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-2044230225">Now spin it.</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname=" Points Processed By Core" enabled="false">
              <boolProp name="TransactionController.parent">true</boolProp>
              <boolProp name="TransactionController.includeTimers">false</boolProp>
            </TransactionController>
            <hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Wait Until Processed" enabled="true">
                <stringProp name="WhileController.condition">${__groovy(vars.get(&quot;eventPoints&quot;) = &quot;0&quot;,)}</stringProp>
              </WhileController>
              <hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname=" VAP POINTS" enabled="true">
                  <boolProp name="TransactionController.includeTimers">false</boolProp>
                  <boolProp name="TransactionController.parent">true</boolProp>
                </TransactionController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname=" POST VAP: Login" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="j_username" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">dnesterov</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">j_username</stringProp>
                        </elementProp>
                        <elementProp name="j_password" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">Dimon4ik1010</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">j_password</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">vgtstg01-qa</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">http</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">vap/admin/j_spring_security_check</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</stringProp>
                        </elementProp>
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname=" GET VAP: User Policy" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="entity_no" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${mangoId}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">entity_no</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">vgtstg01-qa</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">http</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">vap/admin/view_points/get_policies</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">*/*</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract: Policy ID" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">policyId</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.output.policy</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname=" GET VAP: Points" enabled="true">
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="policy_no" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${policyId}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">policy_no</stringProp>
                        </elementProp>
                        <elementProp name="adjustment" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">0</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">adjustment</stringProp>
                        </elementProp>
                        <elementProp name="entity_no" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">${mangoId}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                          <boolProp name="HTTPArgument.use_equals">true</boolProp>
                          <stringProp name="Argument.name">entity_no</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">vgtstg01-qa</stringProp>
                    <stringProp name="HTTPSampler.port"></stringProp>
                    <stringProp name="HTTPSampler.protocol">http</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">vap/admin/view_points/get_status</stringProp>
                    <stringProp name="HTTPSampler.method">GET</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">*/*</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract: eventPoints" enabled="true">
                      <stringProp name="JSONPostProcessor.referenceNames">eventPoints</stringProp>
                      <stringProp name="JSONPostProcessor.jsonPathExprs">$.output.statistics.points_events.category[0].sub_category[0].det_category[0].points</stringProp>
                      <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
                      <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
                    </JSONPostProcessor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
                  <stringProp name="IfController.condition">${__groovy(vars.get(&quot;eventPoints&quot;) != &quot;0&quot;,)}</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                  <boolProp name="IfController.useExpression">true</boolProp>
                </IfController>
                <hashTree>
                  <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
                    <intProp name="ActionProcessor.action">3</intProp>
                    <intProp name="ActionProcessor.target">0</intProp>
                    <stringProp name="ActionProcessor.duration">0</stringProp>
                  </TestAction>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="John Hanckock" enabled="true"/>
        <hashTree>
          <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${wso2Base}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout">30000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">300000</stringProp>
          </ConfigTestElement>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST WSO2 Access Token" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="grant_type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">client_credentials</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">grant_type</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/token</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Basic ${wso2Token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extracting WSO2 AccessToken" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">wso2AccessToken</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RTE: JH" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;enrollJohnHancockMemberRequest&quot;: {&#xd;
		&quot;biometricIndicator&quot;: &quot;Y&quot;,&#xd;
		&quot;branchCode&quot;: &quot;PERM1&quot;,&#xd;
		&quot;coverageEffectiveDate&quot;: &quot;2019-01-01&quot;,&#xd;
		&quot;dateOfBirth&quot;: &quot;1979-09-17&quot;,&#xd;
		&quot;emailAddress&quot;: &quot;${randomString}@gmail.com&quot;,&#xd;
		&quot;employeeId&quot;: &quot;HER${randomNumericString}&quot;,&#xd;
		&quot;firstName&quot;: &quot;${randomString}&quot;,&#xd;
		&quot;gender&quot;: &quot;F&quot;,&#xd;
		&quot;jointLifeInd&quot;: &quot;Y&quot;,&#xd;
		&quot;lastName&quot;: &quot;${randomString}&quot;,&#xd;
		&quot;partnerId&quot;: &quot;JHDUMMY&quot;,&#xd;
		&quot;uniqueId&quot;: &quot;${randomString}&quot;,&#xd;
		&quot;upsoldIndicator&quot;: &quot;N&quot;&#xd;
	}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/vitality-johnhancock-enrolment-service-1/1.0/svc/2/enrollJohnHancockMember</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${wso2AccessToken}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: No Errors" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1203236063">errorMessage</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">6</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extractor jhId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">jhvitalityId;jhuniqueId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.enrollJohnHancockMemberResponse.vitalityId;$.enrollJohnHancockMemberResponse.uniqueId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND;NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assert: Entity is present" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1956472523">${jhvitalityId}</stringProp>
                <stringProp name="20515964">${jhuniqueId}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="VGPTIBCO: AR" enabled="true"/>
        <hashTree>
          <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${tibcoBase}</stringProp>
            <stringProp name="HTTPSampler.port">${tibcoPort}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </ConfigTestElement>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Activate: FIEYW" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
&quot;tenantId&quot;: &quot;27&quot;,&#xd;
&quot;mode&quot;: &quot;Activate&quot;,&#xd;
&quot;programme&quot;: {&#xd;
&quot;entityNumber&quot;: ${vitalityId}, &#xd;
&quot;programType&quot;: &quot;FIEYW&quot;,&#xd;
&quot;effectivePeriods&quot;: [&#xd;
{&#xd;
&quot;effectiveFrom&quot;: &quot;${dateToday}&quot;,&#xd;
&quot;effectiveTo&quot;: &quot;${dateTomorrow}&quot;&#xd;
}&#xd;
]&#xd;
}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">arapi/ActiveRewards/Activation</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-vsl-timestamp</stringProp>
                  <stringProp name="Header.value">${timeStamp}</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Programme Activated Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1044234867">Programme Activated</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Activate: FIBYOD" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
&quot;tenantId&quot;: &quot;27&quot;,&#xd;
&quot;mode&quot;: &quot;Activate&quot;,&#xd;
&quot;programme&quot;: {&#xd;
&quot;entityNumber&quot;: ${vitalityId}, &#xd;
&quot;programType&quot;: &quot;FIBYOD&quot;,&#xd;
&quot;effectivePeriods&quot;: [&#xd;
{&#xd;
&quot;effectiveFrom&quot;: &quot;${dateToday}&quot;,&#xd;
&quot;effectiveTo&quot;: &quot;${dateTomorrow}&quot;&#xd;
}&#xd;
]&#xd;
}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">arapi/ActiveRewards/Activation</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-vsl-timestamp</stringProp>
                  <stringProp name="Header.value">${timeStamp}</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Programme Activated Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1044234867">Programme Activated</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Activate: SIBYOD" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
&quot;tenantId&quot;: &quot;27&quot;,&#xd;
&quot;mode&quot;: &quot;Activate&quot;,&#xd;
&quot;programme&quot;: {&#xd;
&quot;entityNumber&quot;: ${vitalityId}, &#xd;
&quot;programType&quot;: &quot;SIBYOD&quot;,&#xd;
&quot;effectivePeriods&quot;: [&#xd;
{&#xd;
&quot;effectiveFrom&quot;: &quot;${dateToday}&quot;,&#xd;
&quot;effectiveTo&quot;: &quot;${dateTomorrow}&quot;&#xd;
}&#xd;
]&#xd;
}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">arapi/ActiveRewards/Activation</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-vsl-timestamp</stringProp>
                  <stringProp name="Header.value">${timeStamp}</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Programme Activated Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1044234867">Programme Activated</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET AW Eligibility" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="tenantId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">27</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">tenantId</stringProp>
                </elementProp>
                <elementProp name="memberId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${vitalityId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">memberId</stringProp>
                </elementProp>
                <elementProp name="eligibilityType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">WatchPurchase</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">eligibilityType</stringProp>
                </elementProp>
                <elementProp name="productIdentifier" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">AppleWatch</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">productIdentifier</stringProp>
                </elementProp>
                <elementProp name="effectiveDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${dateToday}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">effectiveDate</stringProp>
                </elementProp>
                <elementProp name="employerId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${employerIdFull}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">employerId</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">arapi/ActiveRewards/Eligibility</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-vsl-timestamp</stringProp>
                  <stringProp name="Header.value">${timeStamp}</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="253938965">Query WatchPurchase Eligibility Successful</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET AR Eligibility" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="tenantId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">27</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">tenantId</stringProp>
                </elementProp>
                <elementProp name="memberId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${vitalityId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">memberId</stringProp>
                </elementProp>
                <elementProp name="employerId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${employerIdFull}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">employerId</stringProp>
                </elementProp>
                <elementProp name="productIdentifier" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">FIEYW</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">productIdentifier</stringProp>
                </elementProp>
                <elementProp name="eligibilityType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">ActiveRewards</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">eligibilityType</stringProp>
                </elementProp>
                <elementProp name="effectiveDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${dateToday}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">effectiveDate</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">arapi/ActiveRewards/Eligibility</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-vsl-timestamp</stringProp>
                  <stringProp name="Header.value">${timeStamp}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="861054727">Query ActiveRewards Eligibility Successful</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Purchase" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="tenantId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">27</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">tenantId</stringProp>
                </elementProp>
                <elementProp name="memberId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${vitalityId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">memberId</stringProp>
                </elementProp>
                <elementProp name="mode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">Purchaser</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">mode</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">arapi/ActiveRewards/Purchase</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-vsl-timestamp</stringProp>
                  <stringProp name="Header.value">${timeStamp}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1183280647">View Purchase Retrieve Successfully</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Repayment History" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="tenantId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">27</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">tenantId</stringProp>
                </elementProp>
                <elementProp name="memberId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${vitalityId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">memberId</stringProp>
                </elementProp>
                <elementProp name="purchaseType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">AppleWatch</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">purchaseType</stringProp>
                </elementProp>
                <elementProp name="effectiveFrom" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${dateToday}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">effectiveFrom</stringProp>
                </elementProp>
                <elementProp name="effectiveTo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${dateTomorrow}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">effectiveTo</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">arapi/ActiveRewards/RepaymentHistory</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-vsl-timestamp</stringProp>
                  <stringProp name="Header.value">${timeStamp}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1867169789">success</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract: Purchase Id" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">purchaseId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.payload.content.purchase[0].purchaseId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract: OrderReference" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">OrderReference</stringProp>
              <stringProp name="RegexExtractor.regex">(\d*),&quot;purchaseReferenceType&quot;:&quot;OrderReference&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Watch Dispatch" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;purchaseReference&quot;: &quot;${OrderReference}&quot;,&#xd;
	&quot;purchaseReferenceType&quot;: &quot;OrderReference&quot;,&#xd;
	&quot;distributorReferenceNumber&quot;: &quot;${purchaseId}&quot;,&#xd;
	&quot;courier&quot;: &quot;DHL&quot;,&#xd;
	&quot;orderTrackingNumber&quot;: &quot;KN1234&quot;,&#xd;
	&quot;dateOfDispatch&quot;: &quot;${dateToday}T19:00:01Z&quot;,&#xd;
	&quot;tenantId&quot;: &quot;27&quot;,&#xd;
	&quot;purchaseId&quot;: &quot;${purchaseId}&quot;,&#xd;
	&quot;supplierId&quot;: &quot;${awSupplierId}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">arapi/ActiveRewards/WatchDispatch</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-vsl-timestamp</stringProp>
                  <stringProp name="Header.value">${timeStamp}</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Watch Dispatch Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2132625647">Watch Dispatch successful</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Watch Catalogue" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="memberId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${vitalityId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">memberId</stringProp>
                </elementProp>
                <elementProp name="tenantId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">27</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">tenantId</stringProp>
                </elementProp>
                <elementProp name="productIdentifier" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">AppleWatch</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">productIdentifier</stringProp>
                </elementProp>
                <elementProp name="effectiveDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${__time(yyyy-MM-dd,)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">effectiveDate</stringProp>
                </elementProp>
                <elementProp name="employerId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${employerIdFull}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">employerId</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">arapi/ActiveRewards/WatchCatalogue</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-vsl-timestamp</stringProp>
                  <stringProp name="Header.value">${timeStamp}</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-78471895">Successfully Retrieved Watch Catalogues and Pricing</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Discount Tiers" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="tenantId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">27</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">tenantId</stringProp>
                </elementProp>
                <elementProp name="productModelIdentifier" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">Series3GPS,42mm</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">productModelIdentifier</stringProp>
                </elementProp>
                <elementProp name="effectiveDate" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${__time(yyyy-MM-dd,)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">effectiveDate</stringProp>
                </elementProp>
                <elementProp name="employerId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${employerIdFull}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">employerId</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">arapi/ActiveRewards/DiscountTiers</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-vsl-timestamp</stringProp>
                  <stringProp name="Header.value">${timeStamp}</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1355352835">Successfully Retrieved Discount Tiers</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Order Now" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="employerId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${employerIdFull}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">employerId</stringProp>
                </elementProp>
                <elementProp name="tenantId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">27</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">tenantId</stringProp>
                </elementProp>
                <elementProp name="effectiveFrom" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">2018-01-01</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">effectiveFrom</stringProp>
                </elementProp>
                <elementProp name="effectiveTo" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">9999-12-31</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">effectiveTo</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">arapi/ActiveRewards/OrderNow</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-vsl-timestamp</stringProp>
                  <stringProp name="Header.value">${timeStamp}</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1948390975">successfully retrieved vitality information</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Latest Remaining Balance" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="purchaseId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${purchaseId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">purchaseId</stringProp>
                </elementProp>
                <elementProp name="tenantId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">27</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">tenantId</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">arapi/ActiveRewards/LatestRemainingBalance</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-vsl-timestamp</stringProp>
                  <stringProp name="Header.value">${timeStamp}</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1891684817">latest remaining balance returned successfully</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Pair Watch" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;tenantId&quot;: 27,&#xd;
	&quot;programType&quot;: &quot;AWTCH&quot;,&#xd;
	&quot;purchaseDeviceId&quot;: &quot;${purchaseId}&quot;,&#xd;
	&quot;entityNumber&quot;: &quot;${vitalityId}&quot;,&#xd;
	&quot;pairedDate&quot;: &quot;&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">arapi/ActiveRewards/PairWatch</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">x-vsl-timestamp</stringProp>
                  <stringProp name="Header.value">${timeStamp}</stringProp>
                </elementProp>
                <elementProp name="content-type" elementType="Header">
                  <stringProp name="Header.name">content-type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="success Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1867169789">success</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <kg.apc.jmeter.threads.UltimateThreadGroup guiclass="kg.apc.jmeter.threads.UltimateThreadGroupGui" testclass="kg.apc.jmeter.threads.UltimateThreadGroup" testname="Sapphire 100K/H" enabled="false">
        <collectionProp name="ultimatethreadgroupdata">
          <collectionProp name="-1316561217">
            <stringProp name="49679">230</stringProp>
            <stringProp name="1815">90</stringProp>
            <stringProp name="53430">600</stringProp>
            <stringProp name="1718874">8310</stringProp>
            <stringProp name="48">0</stringProp>
          </collectionProp>
          <collectionProp name="-1364568823">
            <stringProp name="49586">200</stringProp>
            <stringProp name="1509531">1260</stringProp>
            <stringProp name="53430">600</stringProp>
            <stringProp name="1687254">7140</stringProp>
            <stringProp name="48">0</stringProp>
          </collectionProp>
          <collectionProp name="-805632598">
            <stringProp name="49586">200</stringProp>
            <stringProp name="1541244">2460</stringProp>
            <stringProp name="53430">600</stringProp>
            <stringProp name="1635360">5940</stringProp>
            <stringProp name="48">0</stringProp>
          </collectionProp>
          <collectionProp name="-1291009732">
            <stringProp name="49586">200</stringProp>
            <stringProp name="1572957">3660</stringProp>
            <stringProp name="53430">600</stringProp>
            <stringProp name="1603647">4740</stringProp>
            <stringProp name="48">0</stringProp>
          </collectionProp>
          <collectionProp name="-504283117">
            <stringProp name="49586">200</stringProp>
            <stringProp name="1604670">4860</stringProp>
            <stringProp name="53430">600</stringProp>
            <stringProp name="1571934">3540</stringProp>
            <stringProp name="48">0</stringProp>
          </collectionProp>
          <collectionProp name="-1719965038">
            <stringProp name="49586">200</stringProp>
            <stringProp name="1656564">6060</stringProp>
            <stringProp name="53430">600</stringProp>
            <stringProp name="1540221">2340</stringProp>
            <stringProp name="48">0</stringProp>
          </collectionProp>
        </collectionProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
      </kg.apc.jmeter.threads.UltimateThreadGroup>
      <hashTree>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${wso2Base}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout">30000</stringProp>
          <stringProp name="HTTPSampler.response_timeout">300000</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Encrypting Entity" enabled="true">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">import java.security.MessageDigest;

MessageDigest digest = MessageDigest.getInstance(&quot;MD5&quot;);
byte[] bytes = digest.digest((&quot;${sapphireId}&quot; + &quot;${msSalt}&quot;).getBytes());
vars.put(&quot;sapphireIdEncrypted&quot;,javax.xml.bind.DatatypeConverter.printHexBinary(bytes).toLowerCase());</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Sapphire: POST WSO2 Access Token" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="grant_type" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">client_credentials</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">grant_type</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api/token</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Basic ${wso2Token}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extracting WSO2 AccessToken" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">wso2AccessToken</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="Sample.scope">all</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Sapphire: GET Auth Token" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="entity_no" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${sapphireId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">entity_no</stringProp>
              </elementProp>
              <elementProp name="encrypted_entity_no" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${sapphireIdEncrypted}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">encrypted_entity_no</stringProp>
              </elementProp>
              <elementProp name="_p" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">IOS</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_p</stringProp>
              </elementProp>
              <elementProp name="_v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${mob.app.version}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_v</stringProp>
              </elementProp>
              <elementProp name="_doc_browser_context" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_doc_browser_context</stringProp>
              </elementProp>
              <elementProp name="_c" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">BESTBUY</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_c</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${msBase}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${msPath}/auth/simulate_auth</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Ignore Response Code" enabled="true">
            <collectionProp name="Asserion.test_strings"/>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Active Rewards Token" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">ar_Token</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.session.token</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-950083557">status&quot; : 1</stringProp>
              <stringProp name="-950083558">status&quot; : 0</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">34</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Sapphire: GET AR Eligibility" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api/whitelabel-mobile-api/1.0/active_rewards/eligibility</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
              </elementProp>
              <elementProp name="Vitality-Client" elementType="Header">
                <stringProp name="Header.name">Vitality-Client</stringProp>
                <stringProp name="Header.value">BESTBUY</stringProp>
              </elementProp>
              <elementProp name="Vitality-Token" elementType="Header">
                <stringProp name="Header.name">Vitality-Token</stringProp>
                <stringProp name="Header.value">${ar_Token}</stringProp>
              </elementProp>
              <elementProp name="Vitality-App-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-App-Version</stringProp>
                <stringProp name="Header.value">7</stringProp>
              </elementProp>
              <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                <stringProp name="Header.value">IOS</stringProp>
              </elementProp>
              <elementProp name="Vitality-Language" elementType="Header">
                <stringProp name="Header.name">Vitality-Language</stringProp>
                <stringProp name="Header.value">en</stringProp>
              </elementProp>
              <elementProp name="Vitality-Device-Id" elementType="Header">
                <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
              </elementProp>
              <elementProp name="Vitality-Local-Time" elementType="Header">
                <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
              </elementProp>
              <elementProp name="Vitality-API-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-API-Version</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Eligibility Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-68120096">APWatch</stringProp>
              <stringProp name="720178462">ActiveRewards</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Sapphire: GET AR Goals" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="goalType" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">weekly</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">goalType</stringProp>
              </elementProp>
              <elementProp name="offset" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">offset</stringProp>
              </elementProp>
              <elementProp name="limit" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">15</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">limit</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api/whitelabel-mobile-api/1.0/active_rewards/goals</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
              </elementProp>
              <elementProp name="Vitality-Client" elementType="Header">
                <stringProp name="Header.name">Vitality-Client</stringProp>
                <stringProp name="Header.value">BESTBUY</stringProp>
              </elementProp>
              <elementProp name="Vitality-Token" elementType="Header">
                <stringProp name="Header.name">Vitality-Token</stringProp>
                <stringProp name="Header.value">${ar_Token}</stringProp>
              </elementProp>
              <elementProp name="Vitality-App-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-App-Version</stringProp>
                <stringProp name="Header.value">7</stringProp>
              </elementProp>
              <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                <stringProp name="Header.value">IOS</stringProp>
              </elementProp>
              <elementProp name="Vitality-Language" elementType="Header">
                <stringProp name="Header.name">Vitality-Language</stringProp>
                <stringProp name="Header.value">en</stringProp>
              </elementProp>
              <elementProp name="Vitality-Device-Id" elementType="Header">
                <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
              </elementProp>
              <elementProp name="Vitality-Local-Time" elementType="Header">
                <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
              </elementProp>
              <elementProp name="Vitality-API-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-API-Version</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Goals Type Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-791707519">weekly</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Sapphire: GET AR Current Goals" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api/whitelabel-mobile-api/1.0/active_rewards/current_goals</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
              </elementProp>
              <elementProp name="Vitality-Client" elementType="Header">
                <stringProp name="Header.name">Vitality-Client</stringProp>
                <stringProp name="Header.value">BESTBUY</stringProp>
              </elementProp>
              <elementProp name="Vitality-Token" elementType="Header">
                <stringProp name="Header.name">Vitality-Token</stringProp>
                <stringProp name="Header.value">${ar_Token}</stringProp>
              </elementProp>
              <elementProp name="Vitality-App-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-App-Version</stringProp>
                <stringProp name="Header.value">7</stringProp>
              </elementProp>
              <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                <stringProp name="Header.value">IOS</stringProp>
              </elementProp>
              <elementProp name="Vitality-Language" elementType="Header">
                <stringProp name="Header.name">Vitality-Language</stringProp>
                <stringProp name="Header.value">en</stringProp>
              </elementProp>
              <elementProp name="Vitality-Device-Id" elementType="Header">
                <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
              </elementProp>
              <elementProp name="Vitality-Local-Time" elementType="Header">
                <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
              </elementProp>
              <elementProp name="Vitality-API-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-API-Version</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Goal ID" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">arGoalId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.output.goals[0].id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Goals Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-791707519">weekly</stringProp>
              <stringProp name="656467758">Best Buy weekly reward configuration</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Sapphire: GET AR Goal" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="goalId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${arGoalId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">goalId</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api/whitelabel-mobile-api/1.0/active_rewards/goal</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
              </elementProp>
              <elementProp name="Vitality-Client" elementType="Header">
                <stringProp name="Header.name">Vitality-Client</stringProp>
                <stringProp name="Header.value">BESTBUY</stringProp>
              </elementProp>
              <elementProp name="Vitality-Token" elementType="Header">
                <stringProp name="Header.name">Vitality-Token</stringProp>
                <stringProp name="Header.value">${ar_Token}</stringProp>
              </elementProp>
              <elementProp name="Vitality-App-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-App-Version</stringProp>
                <stringProp name="Header.value">7</stringProp>
              </elementProp>
              <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                <stringProp name="Header.value">IOS</stringProp>
              </elementProp>
              <elementProp name="Vitality-Language" elementType="Header">
                <stringProp name="Header.name">Vitality-Language</stringProp>
                <stringProp name="Header.value">en</stringProp>
              </elementProp>
              <elementProp name="Vitality-Device-Id" elementType="Header">
                <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
              </elementProp>
              <elementProp name="Vitality-Local-Time" elementType="Header">
                <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
              </elementProp>
              <elementProp name="Vitality-API-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-API-Version</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Goals Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-791707519">weekly</stringProp>
              <stringProp name="656467758">Best Buy weekly reward configuration</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Sapphire: GET AR Rewards Groups" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api/whitelabel-mobile-api/1.0/active_rewards/get_rewards_groups</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
              </elementProp>
              <elementProp name="Vitality-Client" elementType="Header">
                <stringProp name="Header.name">Vitality-Client</stringProp>
                <stringProp name="Header.value">BESTBUY</stringProp>
              </elementProp>
              <elementProp name="Vitality-Token" elementType="Header">
                <stringProp name="Header.name">Vitality-Token</stringProp>
                <stringProp name="Header.value">${ar_Token}</stringProp>
              </elementProp>
              <elementProp name="Vitality-App-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-App-Version</stringProp>
                <stringProp name="Header.value">7</stringProp>
              </elementProp>
              <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                <stringProp name="Header.value">IOS</stringProp>
              </elementProp>
              <elementProp name="Vitality-Language" elementType="Header">
                <stringProp name="Header.name">Vitality-Language</stringProp>
                <stringProp name="Header.value">en</stringProp>
              </elementProp>
              <elementProp name="Vitality-Device-Id" elementType="Header">
                <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
              </elementProp>
              <elementProp name="Vitality-Local-Time" elementType="Header">
                <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
              </elementProp>
              <elementProp name="Vitality-API-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-API-Version</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Rewards Group Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2031199">BB10</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Sapphire: POST VDP: ROUTINE" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
 &quot;device&quot;: {&#xd;
   &quot;deviceId&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}&quot;,&#xd;
   &quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
   &quot;model&quot;: &quot;iOS 10.0.1&quot;&#xd;
 },&#xd;
	 &quot;header&quot;: {&#xd;
	   &quot;partnerSystem&quot;: &quot;Apple&quot;,&#xd;
	   &quot;processingType&quot;: &quot;BATCH&quot;,&#xd;
	   &quot;rawUploadData&quot;: &quot;&quot;,&#xd;
	   &quot;sessionId&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}&quot;,&#xd;
	   &quot;tenantId&quot;: &quot;32&quot;,&#xd;
	   &quot;uploadCount&quot;: 3,&#xd;
	   &quot;uploadDate&quot;: &quot;${dateToday}T00:00:00+03:00&quot;,&#xd;
	   &quot;user&quot;: {&#xd;
	     &quot;entityNo&quot;: &quot;${sapphireId}&quot;,&#xd;
	     &quot;partnerUserId&quot;: &quot;&quot;&#xd;
	  },&#xd;
	   &quot;verified&quot;: &quot;true&quot;&#xd;
	  },&#xd;
		 &quot;readings&quot;: [&#xd;
		   {&#xd;
		     &quot;dataCategory&quot;: &quot;BIOMETRIC&quot;,&#xd;
		     &quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00+03:00&quot;,&#xd;
		     &quot;healthData&quot;: {&#xd;
		     &quot;weight&quot;: {&#xd;
		     &quot;unitOfMeasurement&quot;: &quot;KILOGRAMS&quot;,&#xd;
		     &quot;value&quot;: 80.5&#xd;
		       }&#xd;
     },&#xd;
     &quot;integrity&quot;: &quot;UNVERIFIED&quot;,&#xd;
     &quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
     &quot;model&quot;: &quot;iOS 10.0.1&quot;,&#xd;
     &quot;partnerReadingId&quot;: &quot;${dateToday}${randomAlphaNumericString}&quot;,&#xd;
     &quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
     &quot;readingType&quot;: &quot;WEIGHT&quot;,&#xd;
     &quot;startTime&quot;: &quot;${dateToday}T00:00:00+03:00&quot;&#xd;
   },&#xd;
   {&#xd;
     &quot;dataCategory&quot;: &quot;ROUTINE&quot;,&#xd;
     &quot;duration&quot;: 86400,&#xd;
     &quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00+03:00&quot;,&#xd;
     &quot;integrity&quot;: &quot;VERIFIED&quot;,&#xd;
     &quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
     &quot;model&quot;: &quot;iOS 10.0.1&quot;,&#xd;
     &quot;partnerReadingId&quot;: &quot;${dateToday}${randomAlphaNumericString}&quot;,&#xd;
     &quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
     &quot;readingType&quot;: &quot;WALKING&quot;,&#xd;
     &quot;startTime&quot;: &quot;${dateToday}T00:00:00+03:00&quot;,&#xd;
     &quot;workout&quot;: {&#xd;
       &quot;energyExpenditure&quot;: {&#xd;
         &quot;unitOfMeasurement&quot;: &quot;KILOCALORIES&quot;,&#xd;
         &quot;value&quot;: 800&#xd;
       }&#xd;
     }&#xd;
   }&#xd;
   &#xd;
 ]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api/${msPath}/1.0/health_data/upload</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Vitality-Token" elementType="Header">
                <stringProp name="Header.name">Vitality-Token</stringProp>
                <stringProp name="Header.value">${ar_Token}</stringProp>
              </elementProp>
              <elementProp name="Vitality-App-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-App-Version</stringProp>
                <stringProp name="Header.value">7</stringProp>
              </elementProp>
              <elementProp name="Vitality-Language" elementType="Header">
                <stringProp name="Header.name">Vitality-Language</stringProp>
                <stringProp name="Header.value">en</stringProp>
              </elementProp>
              <elementProp name="Vitality-Device-Id" elementType="Header">
                <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                <stringProp name="Header.value">swagger-3f802407-77b4-407c-a758-842af5830c2b</stringProp>
              </elementProp>
              <elementProp name="Vitality-Local-Time" elementType="Header">
                <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                <stringProp name="Header.value">${__time(yyyy-MM-dd,)}</stringProp>
              </elementProp>
              <elementProp name="Vitality-API-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-API-Version</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                <stringProp name="Header.value">IOS</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Health Data Upload Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1880474659">Successfully Uploaded Health Data to GDL</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Sapphire: GET AR Streak Summary" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api/whitelabel-mobile-api/1.0/active_rewards/streak_summary</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
              </elementProp>
              <elementProp name="Vitality-Client" elementType="Header">
                <stringProp name="Header.name">Vitality-Client</stringProp>
                <stringProp name="Header.value">BESTBUY</stringProp>
              </elementProp>
              <elementProp name="Vitality-Token" elementType="Header">
                <stringProp name="Header.name">Vitality-Token</stringProp>
                <stringProp name="Header.value">${ar_Token}</stringProp>
              </elementProp>
              <elementProp name="Vitality-App-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-App-Version</stringProp>
                <stringProp name="Header.value">7</stringProp>
              </elementProp>
              <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                <stringProp name="Header.value">IOS</stringProp>
              </elementProp>
              <elementProp name="Vitality-Language" elementType="Header">
                <stringProp name="Header.name">Vitality-Language</stringProp>
                <stringProp name="Header.value">en</stringProp>
              </elementProp>
              <elementProp name="Vitality-Device-Id" elementType="Header">
                <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
              </elementProp>
              <elementProp name="Vitality-Local-Time" elementType="Header">
                <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
              </elementProp>
              <elementProp name="Vitality-API-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-API-Version</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Streak Reward Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1736004014">best-buy-streak-reward</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Sapphire: GET Health Data Settings" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api/whitelabel-mobile-api/1.0/health_data/settings</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
              </elementProp>
              <elementProp name="Vitality-Client" elementType="Header">
                <stringProp name="Header.name">Vitality-Client</stringProp>
                <stringProp name="Header.value">BESTBUY</stringProp>
              </elementProp>
              <elementProp name="Vitality-Token" elementType="Header">
                <stringProp name="Header.name">Vitality-Token</stringProp>
                <stringProp name="Header.value">${ar_Token}</stringProp>
              </elementProp>
              <elementProp name="Vitality-App-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-App-Version</stringProp>
                <stringProp name="Header.value">7</stringProp>
              </elementProp>
              <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                <stringProp name="Header.value">IOS</stringProp>
              </elementProp>
              <elementProp name="Vitality-Language" elementType="Header">
                <stringProp name="Header.name">Vitality-Language</stringProp>
                <stringProp name="Header.value">en</stringProp>
              </elementProp>
              <elementProp name="Vitality-Device-Id" elementType="Header">
                <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
              </elementProp>
              <elementProp name="Vitality-Local-Time" elementType="Header">
                <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
              </elementProp>
              <elementProp name="Vitality-API-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-API-Version</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Streak Reward Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-2070259289">status&quot;:1</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Sapphire: GET Dashboard Vitality Bucks " enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api/whitelabel-mobile-api/1.0/health_data/settings</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
              </elementProp>
              <elementProp name="Vitality-Client" elementType="Header">
                <stringProp name="Header.name">Vitality-Client</stringProp>
                <stringProp name="Header.value">BESTBUY</stringProp>
              </elementProp>
              <elementProp name="Vitality-Token" elementType="Header">
                <stringProp name="Header.name">Vitality-Token</stringProp>
                <stringProp name="Header.value">${ar_Token}</stringProp>
              </elementProp>
              <elementProp name="Vitality-App-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-App-Version</stringProp>
                <stringProp name="Header.value">7</stringProp>
              </elementProp>
              <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                <stringProp name="Header.value">IOS</stringProp>
              </elementProp>
              <elementProp name="Vitality-Language" elementType="Header">
                <stringProp name="Header.name">Vitality-Language</stringProp>
                <stringProp name="Header.value">en</stringProp>
              </elementProp>
              <elementProp name="Vitality-Device-Id" elementType="Header">
                <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
              </elementProp>
              <elementProp name="Vitality-Local-Time" elementType="Header">
                <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
              </elementProp>
              <elementProp name="Vitality-API-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-API-Version</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Vitality Bucks Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-2070259289">status&quot;:1</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Sapphire: POST Register Push Token" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="push_token" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${randomAlphaNumericString}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">push_token</stringProp>
              </elementProp>
              <elementProp name="device_id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${randomNumericString}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">device_id</stringProp>
              </elementProp>
              <elementProp name="platform" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">IOS</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">platform</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api/${msPath}/1.0/notifications/register_push_token</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
              </elementProp>
              <elementProp name="Vitality-Client" elementType="Header">
                <stringProp name="Header.name">Vitality-Client</stringProp>
                <stringProp name="Header.value">BESTBUY</stringProp>
              </elementProp>
              <elementProp name="Vitality-Token" elementType="Header">
                <stringProp name="Header.name">Vitality-Token</stringProp>
                <stringProp name="Header.value">${ar_Token}</stringProp>
              </elementProp>
              <elementProp name="Vitality-App-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-App-Version</stringProp>
                <stringProp name="Header.value">7</stringProp>
              </elementProp>
              <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                <stringProp name="Header.value">IOS</stringProp>
              </elementProp>
              <elementProp name="Vitality-Language" elementType="Header">
                <stringProp name="Header.name">Vitality-Language</stringProp>
                <stringProp name="Header.value">en</stringProp>
              </elementProp>
              <elementProp name="Vitality-Device-Id" elementType="Header">
                <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
              </elementProp>
              <elementProp name="Vitality-Local-Time" elementType="Header">
                <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
              </elementProp>
              <elementProp name="Vitality-API-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-API-Version</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion that Status = 1" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-161783867">&quot;status&quot;:1</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Sapphire: POST Set Push Enabled" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="enabled" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">enabled</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api/${msPath}/1.0/notifications/set_push_enabled</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
              </elementProp>
              <elementProp name="Vitality-Client" elementType="Header">
                <stringProp name="Header.name">Vitality-Client</stringProp>
                <stringProp name="Header.value">BESTBUY</stringProp>
              </elementProp>
              <elementProp name="Vitality-Token" elementType="Header">
                <stringProp name="Header.name">Vitality-Token</stringProp>
                <stringProp name="Header.value">${ar_Token}</stringProp>
              </elementProp>
              <elementProp name="Vitality-App-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-App-Version</stringProp>
                <stringProp name="Header.value">7</stringProp>
              </elementProp>
              <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                <stringProp name="Header.value">IOS</stringProp>
              </elementProp>
              <elementProp name="Vitality-Language" elementType="Header">
                <stringProp name="Header.name">Vitality-Language</stringProp>
                <stringProp name="Header.value">en</stringProp>
              </elementProp>
              <elementProp name="Vitality-Device-Id" elementType="Header">
                <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
              </elementProp>
              <elementProp name="Vitality-Local-Time" elementType="Header">
                <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
              </elementProp>
              <elementProp name="Vitality-API-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-API-Version</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="APIs: 50%" enabled="true">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">false</boolProp>
          <intProp name="ThroughputController.maxThroughput">1</intProp>
          <FloatProperty>
            <name>ThroughputController.percentThroughput</name>
            <value>50.0</value>
            <savedValue>0.0</savedValue>
          </FloatProperty>
        </ThroughputController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Sapphire: POST Accept T&amp;C" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/whitelabel-mobile-api/1.0/registration/accept_terms_and_conditions</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Vitality-Client" elementType="Header">
                  <stringProp name="Header.name">Vitality-Client</stringProp>
                  <stringProp name="Header.value">BESTBUY</stringProp>
                </elementProp>
                <elementProp name="Vitality-Token" elementType="Header">
                  <stringProp name="Header.name">Vitality-Token</stringProp>
                  <stringProp name="Header.value">${ar_Token}</stringProp>
                </elementProp>
                <elementProp name="Vitality-App-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-App-Version</stringProp>
                  <stringProp name="Header.value">7</stringProp>
                </elementProp>
                <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                  <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                  <stringProp name="Header.value">IOS</stringProp>
                </elementProp>
                <elementProp name="Vitality-Language" elementType="Header">
                  <stringProp name="Header.name">Vitality-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Vitality-Device-Id" elementType="Header">
                  <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                  <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                </elementProp>
                <elementProp name="Vitality-Local-Time" elementType="Header">
                  <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                  <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                </elementProp>
                <elementProp name="Vitality-API-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-API-Version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-160985414">first_name</stringProp>
                <stringProp name="2013122196">last_name</stringProp>
                <stringProp name="110541305">token</stringProp>
                <stringProp name="-1249512767">gender</stringProp>
                <stringProp name="-1181815352">date_of_birth</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Sapphire: POST Check Username: Valid" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="username" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${enviroment}${randomString}@sapphire.com</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">username</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/whitelabel-mobile-api/1.0/registration/check_username</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Vitality-Client" elementType="Header">
                  <stringProp name="Header.name">Vitality-Client</stringProp>
                  <stringProp name="Header.value">BESTBUY</stringProp>
                </elementProp>
                <elementProp name="Vitality-App-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-App-Version</stringProp>
                  <stringProp name="Header.value">7</stringProp>
                </elementProp>
                <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                  <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                  <stringProp name="Header.value">IOS</stringProp>
                </elementProp>
                <elementProp name="Vitality-Language" elementType="Header">
                  <stringProp name="Header.name">Vitality-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Vitality-Device-Id" elementType="Header">
                  <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                  <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                </elementProp>
                <elementProp name="Vitality-Local-Time" elementType="Header">
                  <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                  <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                </elementProp>
                <elementProp name="Vitality-API-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-API-Version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-161783867">&quot;status&quot;:1</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Sapphire: POST Check Username: Invalid" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="username" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${enviroment}${randomString}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">username</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/whitelabel-mobile-api/1.0/registration/check_username</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Vitality-Client" elementType="Header">
                  <stringProp name="Header.name">Vitality-Client</stringProp>
                  <stringProp name="Header.value">BESTBUY</stringProp>
                </elementProp>
                <elementProp name="Vitality-App-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-App-Version</stringProp>
                  <stringProp name="Header.value">7</stringProp>
                </elementProp>
                <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                  <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                  <stringProp name="Header.value">IOS</stringProp>
                </elementProp>
                <elementProp name="Vitality-Language" elementType="Header">
                  <stringProp name="Header.name">Vitality-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Vitality-Device-Id" elementType="Header">
                  <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                  <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                </elementProp>
                <elementProp name="Vitality-Local-Time" elementType="Header">
                  <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                  <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                </elementProp>
                <elementProp name="Vitality-API-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-API-Version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Ignore 500 code" enabled="true">
              <collectionProp name="Asserion.test_strings"/>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1694715979">You used an invalid email format</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Sapphire: POST Check Password" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="password" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">P@ssw0rd</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">password</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/whitelabel-mobile-api/1.0/registration/validate_password</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Vitality-Client" elementType="Header">
                  <stringProp name="Header.name">Vitality-Client</stringProp>
                  <stringProp name="Header.value">BESTBUY</stringProp>
                </elementProp>
                <elementProp name="Vitality-App-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-App-Version</stringProp>
                  <stringProp name="Header.value">7</stringProp>
                </elementProp>
                <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                  <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                  <stringProp name="Header.value">IOS</stringProp>
                </elementProp>
                <elementProp name="Vitality-Language" elementType="Header">
                  <stringProp name="Header.name">Vitality-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Vitality-Device-Id" elementType="Header">
                  <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                  <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                </elementProp>
                <elementProp name="Vitality-Local-Time" elementType="Header">
                  <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                  <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                </elementProp>
                <elementProp name="Vitality-API-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-API-Version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-161783867">&quot;status&quot;:1</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Sapphire: GET Get Security Questions" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/whitelabel-mobile-api/1.0/registration/get_security_questions</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Vitality-Client" elementType="Header">
                  <stringProp name="Header.name">Vitality-Client</stringProp>
                  <stringProp name="Header.value">BESTBUY</stringProp>
                </elementProp>
                <elementProp name="Vitality-Token" elementType="Header">
                  <stringProp name="Header.name">Vitality-Token</stringProp>
                  <stringProp name="Header.value">${ar_Token}</stringProp>
                </elementProp>
                <elementProp name="Vitality-App-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-App-Version</stringProp>
                  <stringProp name="Header.value">7</stringProp>
                </elementProp>
                <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                  <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                  <stringProp name="Header.value">IOS</stringProp>
                </elementProp>
                <elementProp name="Vitality-Language" elementType="Header">
                  <stringProp name="Header.name">Vitality-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Vitality-Device-Id" elementType="Header">
                  <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                  <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                </elementProp>
                <elementProp name="Vitality-Local-Time" elementType="Header">
                  <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                  <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                </elementProp>
                <elementProp name="Vitality-API-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-API-Version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Security Questions Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1756474666">What is your mother&apos;s maiden name?</stringProp>
                <stringProp name="-1356961676">In what city was your first job?</stringProp>
                <stringProp name="1564291278">What was your high school mascot?</stringProp>
                <stringProp name="-2093164811">What was your first pet&apos;s name?</stringProp>
                <stringProp name="1430685173">What was your first car?</stringProp>
                <stringProp name="1220463951">What was your childhood nickname?</stringProp>
                <stringProp name="-1442342085">What is your paternal grandmother&apos;s first name?</stringProp>
                <stringProp name="2019996010">In what city were you born?</stringProp>
                <stringProp name="-1737821990">What was the street name of your childhood home?</stringProp>
                <stringProp name="-407625967">What is the name of your favorite teacher?</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Sapphire: GET Feedback Faq" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/whitelabel-mobile-api/1.0/feedback/faq</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Vitality-Client" elementType="Header">
                  <stringProp name="Header.name">Vitality-Client</stringProp>
                  <stringProp name="Header.value">BESTBUY</stringProp>
                </elementProp>
                <elementProp name="Vitality-Token" elementType="Header">
                  <stringProp name="Header.name">Vitality-Token</stringProp>
                  <stringProp name="Header.value">${ar_Token}</stringProp>
                </elementProp>
                <elementProp name="Vitality-App-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-App-Version</stringProp>
                  <stringProp name="Header.value">7</stringProp>
                </elementProp>
                <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                  <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                  <stringProp name="Header.value">IOS</stringProp>
                </elementProp>
                <elementProp name="Vitality-Language" elementType="Header">
                  <stringProp name="Header.name">Vitality-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Vitality-Device-Id" elementType="Header">
                  <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                  <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                </elementProp>
                <elementProp name="Vitality-Local-Time" elementType="Header">
                  <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                  <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                </elementProp>
                <elementProp name="Vitality-API-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-API-Version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Feedback Faq Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2070259289">status&quot;:1</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Sapphire: POST Activate" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Sapphire: POST MS WSO2 Access Token" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="grant_type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">client_credentials</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">grant_type</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/token</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Basic ${msWso2Token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="msWso2Bearer" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">msWso2Bearer</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Sapphire: POST Activate" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;tenantId&quot;: &quot;32&quot;,&#xd;
&quot;mode&quot;: &quot;Activate&quot;,&#xd;
&quot;programme&quot;: {&#xd;
&quot;entityNumber&quot;: ${sapphireId}, &#xd;
&quot;programType&quot;: &quot;ActiveRewards&quot;,&#xd;
&quot;effectivePeriods&quot;: [&#xd;
{&#xd;
&quot;effectiveFrom&quot;: &quot;${dateToday}&quot;,&#xd;
&quot;effectiveTo&quot;: &quot;9999-12-30&quot;&#xd;
}&#xd;
]&#xd;
}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/${arPath}/1.0/Activation</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-vsl-timestamp</stringProp>
                    <stringProp name="Header.value">${timeStamp}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${msWso2Bearer}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Programme Activated Assertion " enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1044234867">Programme Activated</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <kg.apc.jmeter.threads.UltimateThreadGroup guiclass="kg.apc.jmeter.threads.UltimateThreadGroupGui" testclass="kg.apc.jmeter.threads.UltimateThreadGroup" testname="Apollo 120K/H" enabled="false">
        <collectionProp name="ultimatethreadgroupdata">
          <collectionProp name="-1316561217">
            <stringProp name="49679">230</stringProp>
            <stringProp name="1815">90</stringProp>
            <stringProp name="53430">600</stringProp>
            <stringProp name="1718874">8310</stringProp>
            <stringProp name="48">0</stringProp>
          </collectionProp>
          <collectionProp name="1591748106">
            <stringProp name="49648">220</stringProp>
            <stringProp name="1509531">1260</stringProp>
            <stringProp name="53430">600</stringProp>
            <stringProp name="1687254">7140</stringProp>
            <stringProp name="48">0</stringProp>
          </collectionProp>
          <collectionProp name="-1089950858">
            <stringProp name="49617">210</stringProp>
            <stringProp name="1541244">2460</stringProp>
            <stringProp name="53430">600</stringProp>
            <stringProp name="1635360">5940</stringProp>
            <stringProp name="48">0</stringProp>
          </collectionProp>
          <collectionProp name="996922184">
            <stringProp name="50547">300</stringProp>
            <stringProp name="1572957">3660</stringProp>
            <stringProp name="53430">600</stringProp>
            <stringProp name="1603647">4740</stringProp>
            <stringProp name="48">0</stringProp>
          </collectionProp>
          <collectionProp name="1783648799">
            <stringProp name="50547">300</stringProp>
            <stringProp name="1604670">4860</stringProp>
            <stringProp name="53430">600</stringProp>
            <stringProp name="1571934">3540</stringProp>
            <stringProp name="48">0</stringProp>
          </collectionProp>
          <collectionProp name="567966878">
            <stringProp name="50547">300</stringProp>
            <stringProp name="1656564">6060</stringProp>
            <stringProp name="53430">600</stringProp>
            <stringProp name="1540221">2340</stringProp>
            <stringProp name="48">0</stringProp>
          </collectionProp>
        </collectionProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
      </kg.apc.jmeter.threads.UltimateThreadGroup>
      <hashTree>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${wso2Base}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout">30000</stringProp>
          <stringProp name="HTTPSampler.response_timeout">300000</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: GET Auth Token" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="entity_no" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${vitalityId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">entity_no</stringProp>
              </elementProp>
              <elementProp name="encrypted_entity_no" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${vitality_IdEncrypted}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">encrypted_entity_no</stringProp>
              </elementProp>
              <elementProp name="_p" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">IOS</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_p</stringProp>
              </elementProp>
              <elementProp name="_v" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${mob.app.version}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_v</stringProp>
              </elementProp>
              <elementProp name="_doc_browser_context" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_doc_browser_context</stringProp>
              </elementProp>
              <elementProp name="_c" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Aetna</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">_c</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${msBase}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${msPath}/auth/simulate_auth</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Active Rewards Token" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">ar_Token</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.session.token</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="LLT Assertion" enabled="true">
            <stringProp name="JSON_PATH">$.session.timeout</stringProp>
            <stringProp name="EXPECTED_VALUE">2280</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
          </JSONPathAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: POST Apollo WSO2 Access Token" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="grant_type" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">client_credentials</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">grant_type</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api/token</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Basic ${wso2Token}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extracting WSO2 AccessToken" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">wso2AccessToken</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="Sample.scope">all</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">wso2AccessToken_NOT_FOUND</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: POST Register Push Token" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="push_token" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${randomAlphaNumericString}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">push_token</stringProp>
              </elementProp>
              <elementProp name="device_id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${randomNumericString}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">device_id</stringProp>
              </elementProp>
              <elementProp name="platform" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">IOS</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">platform</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api/${msPath}/1.0/notifications/register_push_token</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
              </elementProp>
              <elementProp name="Vitality-Client" elementType="Header">
                <stringProp name="Header.name">Vitality-Client</stringProp>
                <stringProp name="Header.value">Aetna</stringProp>
              </elementProp>
              <elementProp name="Vitality-Token" elementType="Header">
                <stringProp name="Header.name">Vitality-Token</stringProp>
                <stringProp name="Header.value">${ar_Token}</stringProp>
              </elementProp>
              <elementProp name="Vitality-App-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-App-Version</stringProp>
                <stringProp name="Header.value">7</stringProp>
              </elementProp>
              <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                <stringProp name="Header.value">IOS</stringProp>
              </elementProp>
              <elementProp name="Vitality-Language" elementType="Header">
                <stringProp name="Header.name">Vitality-Language</stringProp>
                <stringProp name="Header.value">en</stringProp>
              </elementProp>
              <elementProp name="Vitality-Device-Id" elementType="Header">
                <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
              </elementProp>
              <elementProp name="Vitality-Local-Time" elementType="Header">
                <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
              </elementProp>
              <elementProp name="Vitality-API-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-API-Version</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion that Status = 1" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-161783867">&quot;status&quot;:1</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: POST Set Push Enabled" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="enabled" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">enabled</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api/${msPath}/1.0/notifications/set_push_enabled</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
              </elementProp>
              <elementProp name="Vitality-Client" elementType="Header">
                <stringProp name="Header.name">Vitality-Client</stringProp>
                <stringProp name="Header.value">Aetna</stringProp>
              </elementProp>
              <elementProp name="Vitality-Token" elementType="Header">
                <stringProp name="Header.name">Vitality-Token</stringProp>
                <stringProp name="Header.value">${ar_Token}</stringProp>
              </elementProp>
              <elementProp name="Vitality-App-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-App-Version</stringProp>
                <stringProp name="Header.value">7</stringProp>
              </elementProp>
              <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                <stringProp name="Header.value">IOS</stringProp>
              </elementProp>
              <elementProp name="Vitality-Language" elementType="Header">
                <stringProp name="Header.name">Vitality-Language</stringProp>
                <stringProp name="Header.value">en</stringProp>
              </elementProp>
              <elementProp name="Vitality-Device-Id" elementType="Header">
                <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
              </elementProp>
              <elementProp name="Vitality-Local-Time" elementType="Header">
                <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
              </elementProp>
              <elementProp name="Vitality-API-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-API-Version</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: GET CG_Goals" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="offset" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">offset</stringProp>
              </elementProp>
              <elementProp name="limit" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">15</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">limit</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api/${msPath}/1.0/campaign_goals/goals</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
              </elementProp>
              <elementProp name="Vitality-Client" elementType="Header">
                <stringProp name="Header.name">Vitality-Client</stringProp>
                <stringProp name="Header.value">Aetna</stringProp>
              </elementProp>
              <elementProp name="Vitality-Token" elementType="Header">
                <stringProp name="Header.name">Vitality-Token</stringProp>
                <stringProp name="Header.value">${ar_Token}</stringProp>
              </elementProp>
              <elementProp name="Vitality-App-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-App-Version</stringProp>
                <stringProp name="Header.value">7</stringProp>
              </elementProp>
              <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                <stringProp name="Header.value">IOS</stringProp>
              </elementProp>
              <elementProp name="Vitality-Language" elementType="Header">
                <stringProp name="Header.name">Vitality-Language</stringProp>
                <stringProp name="Header.value">en</stringProp>
              </elementProp>
              <elementProp name="Vitality-Device-Id" elementType="Header">
                <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
              </elementProp>
              <elementProp name="Vitality-Local-Time" elementType="Header">
                <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
              </elementProp>
              <elementProp name="Vitality-API-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-API-Version</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="CGoalId" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">CGoalId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.output.goalsArray.goals[0].goalId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="JSON Structure Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="408179302">adjudicator</stringProp>
              <stringProp name="241352577">buttons</stringProp>
              <stringProp name="915719548">eventMnemonic</stringProp>
              <stringProp name="-1318255029">campaignId</stringProp>
              <stringProp name="-1724546052">description</stringProp>
              <stringProp name="-1179356962">externalEndDate</stringProp>
              <stringProp name="-254860736">externalMemberId</stringProp>
              <stringProp name="-1240658034">goalId</stringProp>
              <stringProp name="2054867262">goalState</stringProp>
              <stringProp name="2055481093">goalTitle</stringProp>
              <stringProp name="199149798">howToAchieve</stringProp>
              <stringProp name="1316501932">internalEndDate</stringProp>
              <stringProp name="922683503">monitorEndDate</stringProp>
              <stringProp name="-1795632125">partnerId</stringProp>
              <stringProp name="-2129778896">startDate</stringProp>
              <stringProp name="-109999815">transmitGUID</stringProp>
              <stringProp name="2145596567">vitalityMemberId</stringProp>
              <stringProp name="-2070259289">status&quot;:1</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">34</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: GET CG_Goal" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="goalId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${CGoalId}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">goalId</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api/${msPath}/1.0/campaign_goals/goal</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
              </elementProp>
              <elementProp name="Vitality-Client" elementType="Header">
                <stringProp name="Header.name">Vitality-Client</stringProp>
                <stringProp name="Header.value">Aetna</stringProp>
              </elementProp>
              <elementProp name="Vitality-Token" elementType="Header">
                <stringProp name="Header.name">Vitality-Token</stringProp>
                <stringProp name="Header.value">${ar_Token}</stringProp>
              </elementProp>
              <elementProp name="Vitality-App-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-App-Version</stringProp>
                <stringProp name="Header.value">7</stringProp>
              </elementProp>
              <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                <stringProp name="Header.value">IOS</stringProp>
              </elementProp>
              <elementProp name="Vitality-Language" elementType="Header">
                <stringProp name="Header.name">Vitality-Language</stringProp>
                <stringProp name="Header.value">en</stringProp>
              </elementProp>
              <elementProp name="Vitality-Device-Id" elementType="Header">
                <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
              </elementProp>
              <elementProp name="Vitality-Local-Time" elementType="Header">
                <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
              </elementProp>
              <elementProp name="Vitality-API-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-API-Version</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: GET AR_Current_Goals" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api/${msPath}/1.0/active_rewards/current_goals</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
              </elementProp>
              <elementProp name="Vitality-Client" elementType="Header">
                <stringProp name="Header.name">Vitality-Client</stringProp>
                <stringProp name="Header.value">Aetna</stringProp>
              </elementProp>
              <elementProp name="Vitality-Token" elementType="Header">
                <stringProp name="Header.name">Vitality-Token</stringProp>
                <stringProp name="Header.value">${ar_Token}</stringProp>
              </elementProp>
              <elementProp name="Vitality-App-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-App-Version</stringProp>
                <stringProp name="Header.value">7</stringProp>
              </elementProp>
              <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                <stringProp name="Header.value">IOS</stringProp>
              </elementProp>
              <elementProp name="Vitality-Language" elementType="Header">
                <stringProp name="Header.name">Vitality-Language</stringProp>
                <stringProp name="Header.value">en</stringProp>
              </elementProp>
              <elementProp name="Vitality-Device-Id" elementType="Header">
                <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
              </elementProp>
              <elementProp name="Vitality-Local-Time" elementType="Header">
                <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
              </elementProp>
              <elementProp name="Vitality-API-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-API-Version</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Goal ID" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">Goal_ID</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.output.goals[0].id</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: GET AR_Goals" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="goalType" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">weekly</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">goalType</stringProp>
              </elementProp>
              <elementProp name="offset" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">offset</stringProp>
              </elementProp>
              <elementProp name="limit" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">15</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">limit</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api/${msPath}/1.0/active_rewards/goals</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
              </elementProp>
              <elementProp name="Vitality-Client" elementType="Header">
                <stringProp name="Header.name">Vitality-Client</stringProp>
                <stringProp name="Header.value">Aetna</stringProp>
              </elementProp>
              <elementProp name="Vitality-Token" elementType="Header">
                <stringProp name="Header.name">Vitality-Token</stringProp>
                <stringProp name="Header.value">${ar_Token}</stringProp>
              </elementProp>
              <elementProp name="Vitality-App-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-App-Version</stringProp>
                <stringProp name="Header.value">7</stringProp>
              </elementProp>
              <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                <stringProp name="Header.value">IOS</stringProp>
              </elementProp>
              <elementProp name="Vitality-Language" elementType="Header">
                <stringProp name="Header.name">Vitality-Language</stringProp>
                <stringProp name="Header.value">en</stringProp>
              </elementProp>
              <elementProp name="Vitality-Device-Id" elementType="Header">
                <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
              </elementProp>
              <elementProp name="Vitality-Local-Time" elementType="Header">
                <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
              </elementProp>
              <elementProp name="Vitality-API-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-API-Version</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: GET Purchase" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api/${msPath}/1.0/apple_watch/purchase</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
              </elementProp>
              <elementProp name="Vitality-Client" elementType="Header">
                <stringProp name="Header.name">Vitality-Client</stringProp>
                <stringProp name="Header.value">Aetna</stringProp>
              </elementProp>
              <elementProp name="Vitality-Token" elementType="Header">
                <stringProp name="Header.name">Vitality-Token</stringProp>
                <stringProp name="Header.value">${ar_Token}</stringProp>
              </elementProp>
              <elementProp name="Vitality-App-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-App-Version</stringProp>
                <stringProp name="Header.value">7</stringProp>
              </elementProp>
              <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                <stringProp name="Header.value">IOS</stringProp>
              </elementProp>
              <elementProp name="Vitality-Language" elementType="Header">
                <stringProp name="Header.name">Vitality-Language</stringProp>
                <stringProp name="Header.value">en</stringProp>
              </elementProp>
              <elementProp name="Vitality-Device-Id" elementType="Header">
                <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
              </elementProp>
              <elementProp name="Vitality-Local-Time" elementType="Header">
                <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
              </elementProp>
              <elementProp name="Vitality-API-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-API-Version</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Currency Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="66470">CAD</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Purchase Assertion" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1850889110">&quot;installmentDayOfPeriod&quot;:12</stringProp>
              <stringProp name="850605392">&quot;numberOfInstallmentts&quot;:24</stringProp>
              <stringProp name="1819301357">&quot;amount&quot;:&quot;USD 2.75&quot;,&quot;amountType&quot;:&quot;DiscountLevel4&quot;</stringProp>
              <stringProp name="1819301326">&quot;amount&quot;:&quot;USD 2.75&quot;,&quot;amountType&quot;:&quot;DiscountLevel3&quot;</stringProp>
              <stringProp name="1819301295">&quot;amount&quot;:&quot;USD 2.75&quot;,&quot;amountType&quot;:&quot;DiscountLevel2&quot;</stringProp>
              <stringProp name="1819301264">&quot;amount&quot;:&quot;USD 2.75&quot;,&quot;amountType&quot;:&quot;DiscountLevel1&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: GET Repayment History" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api/${msPath}/1.0/apple_watch/repayment_history</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
              </elementProp>
              <elementProp name="Vitality-Client" elementType="Header">
                <stringProp name="Header.name">Vitality-Client</stringProp>
                <stringProp name="Header.value">Aetna</stringProp>
              </elementProp>
              <elementProp name="Vitality-Token" elementType="Header">
                <stringProp name="Header.name">Vitality-Token</stringProp>
                <stringProp name="Header.value">${ar_Token}</stringProp>
              </elementProp>
              <elementProp name="Vitality-App-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-App-Version</stringProp>
                <stringProp name="Header.value">7</stringProp>
              </elementProp>
              <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                <stringProp name="Header.value">IOS</stringProp>
              </elementProp>
              <elementProp name="Vitality-Language" elementType="Header">
                <stringProp name="Header.name">Vitality-Language</stringProp>
                <stringProp name="Header.value">en</stringProp>
              </elementProp>
              <elementProp name="Vitality-Device-Id" elementType="Header">
                <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
              </elementProp>
              <elementProp name="Vitality-Local-Time" elementType="Header">
                <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
              </elementProp>
              <elementProp name="Vitality-API-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-API-Version</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="PurchaseId Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="137050516">10026 - Purchase Not Found</stringProp>
              <stringProp name="297521660">purchaseId</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">34</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Currency Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="66470">CAD</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Payment history Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1421797203">dayOfPeriod&quot;:12</stringProp>
              <stringProp name="-148443948">numberOfInstallments&quot;:24</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: GET AR_Eligibility" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api/${msPath}/1.0/active_rewards/eligibility</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
              </elementProp>
              <elementProp name="Vitality-Client" elementType="Header">
                <stringProp name="Header.name">Vitality-Client</stringProp>
                <stringProp name="Header.value">Aetna</stringProp>
              </elementProp>
              <elementProp name="Vitality-Token" elementType="Header">
                <stringProp name="Header.name">Vitality-Token</stringProp>
                <stringProp name="Header.value">${ar_Token}</stringProp>
              </elementProp>
              <elementProp name="Vitality-App-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-App-Version</stringProp>
                <stringProp name="Header.value">7</stringProp>
              </elementProp>
              <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                <stringProp name="Header.value">IOS</stringProp>
              </elementProp>
              <elementProp name="Vitality-Language" elementType="Header">
                <stringProp name="Header.name">Vitality-Language</stringProp>
                <stringProp name="Header.value">en</stringProp>
              </elementProp>
              <elementProp name="Vitality-Device-Id" elementType="Header">
                <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
              </elementProp>
              <elementProp name="Vitality-Local-Time" elementType="Header">
                <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
              </elementProp>
              <elementProp name="Vitality-API-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-API-Version</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="100743639">eligible</stringProp>
              <stringProp name="-161783867">&quot;status&quot;:1</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: GET Home Page Widgets" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="filter" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">VITALITY_BUCKS</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">filter</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api/${msPath}/1.0/dashboard/home_widgets</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
              </elementProp>
              <elementProp name="Vitality-Client" elementType="Header">
                <stringProp name="Header.name">Vitality-Client</stringProp>
                <stringProp name="Header.value">Aetna</stringProp>
              </elementProp>
              <elementProp name="Vitality-Token" elementType="Header">
                <stringProp name="Header.name">Vitality-Token</stringProp>
                <stringProp name="Header.value">${ar_Token}</stringProp>
              </elementProp>
              <elementProp name="Vitality-App-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-App-Version</stringProp>
                <stringProp name="Header.value">7</stringProp>
              </elementProp>
              <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                <stringProp name="Header.value">IOS</stringProp>
              </elementProp>
              <elementProp name="Vitality-Language" elementType="Header">
                <stringProp name="Header.name">Vitality-Language</stringProp>
                <stringProp name="Header.value">en</stringProp>
              </elementProp>
              <elementProp name="Vitality-Device-Id" elementType="Header">
                <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
              </elementProp>
              <elementProp name="Vitality-Local-Time" elementType="Header">
                <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
              </elementProp>
              <elementProp name="Vitality-API-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-API-Version</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="SUCCESS Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1149187101">SUCCESS</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: GET Events history" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="limit" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">999</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">limit</stringProp>
              </elementProp>
              <elementProp name="offset" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">offset</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">api/${msPath}/1.0/events/history</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Vitality-Client" elementType="Header">
                <stringProp name="Header.name">Vitality-Client</stringProp>
                <stringProp name="Header.value">Aetna</stringProp>
              </elementProp>
              <elementProp name="Vitality-Token" elementType="Header">
                <stringProp name="Header.name">Vitality-Token</stringProp>
                <stringProp name="Header.value">${ar_Token}</stringProp>
              </elementProp>
              <elementProp name="Vitality-App-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-App-Version</stringProp>
                <stringProp name="Header.value">7</stringProp>
              </elementProp>
              <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                <stringProp name="Header.value">IOS</stringProp>
              </elementProp>
              <elementProp name="Vitality-Language" elementType="Header">
                <stringProp name="Header.name">Vitality-Language</stringProp>
                <stringProp name="Header.value">en</stringProp>
              </elementProp>
              <elementProp name="Vitality-Device-Id" elementType="Header">
                <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
              </elementProp>
              <elementProp name="Vitality-Local-Time" elementType="Header">
                <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
              </elementProp>
              <elementProp name="Vitality-API-Version" elementType="Header">
                <stringProp name="Header.name">Vitality-API-Version</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Currency Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1108336905">record_number</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Health Data Upload" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: GET Health Data Upload Token" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="scope" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">HEALTH_DATA_UPLOAD</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">scope</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/${msPath}/1.0/auth/token</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Vitality-Client" elementType="Header">
                  <stringProp name="Header.name">Vitality-Client</stringProp>
                  <stringProp name="Header.value">Aetna</stringProp>
                </elementProp>
                <elementProp name="Vitality-Token" elementType="Header">
                  <stringProp name="Header.name">Vitality-Token</stringProp>
                  <stringProp name="Header.value">${ar_Token}</stringProp>
                </elementProp>
                <elementProp name="Vitality-App-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-App-Version</stringProp>
                  <stringProp name="Header.value">7</stringProp>
                </elementProp>
                <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                  <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                  <stringProp name="Header.value">IOS</stringProp>
                </elementProp>
                <elementProp name="Vitality-Language" elementType="Header">
                  <stringProp name="Header.name">Vitality-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Vitality-Device-Id" elementType="Header">
                  <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                  <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                </elementProp>
                <elementProp name="Vitality-Local-Time" elementType="Header">
                  <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                  <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                </elementProp>
                <elementProp name="Vitality-API-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-API-Version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Health Data Token" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">hduToken</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.session.token</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: POST VDP: ROUTINE" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
 &quot;device&quot;: {&#xd;
   &quot;deviceId&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}&quot;,&#xd;
   &quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
   &quot;model&quot;: &quot;iOS 10.0.1&quot;&#xd;
 },&#xd;
	 &quot;header&quot;: {&#xd;
	   &quot;partnerSystem&quot;: &quot;Apple&quot;,&#xd;
	   &quot;processingType&quot;: &quot;BATCH&quot;,&#xd;
	   &quot;rawUploadData&quot;: &quot;&quot;,&#xd;
	   &quot;sessionId&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}&quot;,&#xd;
	   &quot;tenantId&quot;: &quot;27&quot;,&#xd;
	   &quot;uploadCount&quot;: 3,&#xd;
	   &quot;uploadDate&quot;: &quot;${dateToday}T00:00:00+03:00&quot;,&#xd;
	   &quot;user&quot;: {&#xd;
	     &quot;entityNo&quot;: &quot;${vitalityId}&quot;,&#xd;
	     &quot;partnerUserId&quot;: &quot;&quot;&#xd;
	  },&#xd;
	   &quot;verified&quot;: &quot;true&quot;&#xd;
	  },&#xd;
		 &quot;readings&quot;: [&#xd;
		   {&#xd;
		     &quot;dataCategory&quot;: &quot;BIOMETRIC&quot;,&#xd;
		     &quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00+03:00&quot;,&#xd;
		     &quot;healthData&quot;: {&#xd;
		     &quot;weight&quot;: {&#xd;
		     &quot;unitOfMeasurement&quot;: &quot;KILOGRAMS&quot;,&#xd;
		     &quot;value&quot;: 80.5&#xd;
		       }&#xd;
     },&#xd;
     &quot;integrity&quot;: &quot;UNVERIFIED&quot;,&#xd;
     &quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
     &quot;model&quot;: &quot;iOS 10.0.1&quot;,&#xd;
     &quot;partnerReadingId&quot;: &quot;${dateToday}${randomAlphaNumericString}&quot;,&#xd;
     &quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
     &quot;readingType&quot;: &quot;WEIGHT&quot;,&#xd;
     &quot;startTime&quot;: &quot;${dateToday}T00:00:00+03:00&quot;&#xd;
   },&#xd;
   {&#xd;
     &quot;dataCategory&quot;: &quot;ROUTINE&quot;,&#xd;
     &quot;duration&quot;: 86400,&#xd;
     &quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00+03:00&quot;,&#xd;
     &quot;integrity&quot;: &quot;VERIFIED&quot;,&#xd;
     &quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
     &quot;model&quot;: &quot;iOS 10.0.1&quot;,&#xd;
     &quot;partnerReadingId&quot;: &quot;${dateToday}${randomAlphaNumericString}&quot;,&#xd;
     &quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
     &quot;readingType&quot;: &quot;WALKING&quot;,&#xd;
     &quot;startTime&quot;: &quot;${dateToday}T00:00:00+03:00&quot;,&#xd;
     &quot;workout&quot;: {&#xd;
       &quot;energyExpenditure&quot;: {&#xd;
         &quot;unitOfMeasurement&quot;: &quot;KILOCALORIES&quot;,&#xd;
         &quot;value&quot;: 800&#xd;
       }&#xd;
     }&#xd;
   }&#xd;
   &#xd;
 ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/${msPath}/1.0/health_data/upload</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Vitality-Token" elementType="Header">
                  <stringProp name="Header.name">Vitality-Token</stringProp>
                  <stringProp name="Header.value">${hduToken}</stringProp>
                </elementProp>
                <elementProp name="Vitality-App-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-App-Version</stringProp>
                  <stringProp name="Header.value">7</stringProp>
                </elementProp>
                <elementProp name="Vitality-Language" elementType="Header">
                  <stringProp name="Header.name">Vitality-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Vitality-Device-Id" elementType="Header">
                  <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                  <stringProp name="Header.value">swagger-3f802407-77b4-407c-a758-842af5830c2b</stringProp>
                </elementProp>
                <elementProp name="Vitality-Local-Time" elementType="Header">
                  <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                  <stringProp name="Header.value">${__time(yyyy-MM-dd,)}</stringProp>
                </elementProp>
                <elementProp name="Vitality-API-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-API-Version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                  <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                  <stringProp name="Header.value">IOS</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="APIs: 50%" enabled="true">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">false</boolProp>
          <intProp name="ThroughputController.maxThroughput">1</intProp>
          <FloatProperty>
            <name>ThroughputController.percentThroughput</name>
            <value>50.0</value>
            <savedValue>0.0</savedValue>
          </FloatProperty>
        </ThroughputController>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Activate" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: POST AR_Activate_FIEYW" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="programType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">FIEYW</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">programType</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/${msPath}/1.0/active_rewards/activate</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Client" elementType="Header">
                    <stringProp name="Header.name">Vitality-Client</stringProp>
                    <stringProp name="Header.value">Aetna</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Token" elementType="Header">
                    <stringProp name="Header.name">Vitality-Token</stringProp>
                    <stringProp name="Header.value">${ar_Token}</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-App-Version" elementType="Header">
                    <stringProp name="Header.name">Vitality-App-Version</stringProp>
                    <stringProp name="Header.value">7</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                    <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                    <stringProp name="Header.value">IOS</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Language" elementType="Header">
                    <stringProp name="Header.name">Vitality-Language</stringProp>
                    <stringProp name="Header.value">en</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Device-Id" elementType="Header">
                    <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                    <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Local-Time" elementType="Header">
                    <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                    <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-API-Version" elementType="Header">
                    <stringProp name="Header.name">Vitality-API-Version</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: POST AR_Activate_FIBYOD" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="programType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">FIBYOD</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">programType</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/${msPath}/1.0/active_rewards/activate</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Client" elementType="Header">
                    <stringProp name="Header.name">Vitality-Client</stringProp>
                    <stringProp name="Header.value">Aetna</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Token" elementType="Header">
                    <stringProp name="Header.name">Vitality-Token</stringProp>
                    <stringProp name="Header.value">${ar_Token}</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-App-Version" elementType="Header">
                    <stringProp name="Header.name">Vitality-App-Version</stringProp>
                    <stringProp name="Header.value">7</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                    <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                    <stringProp name="Header.value">IOS</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Language" elementType="Header">
                    <stringProp name="Header.name">Vitality-Language</stringProp>
                    <stringProp name="Header.value">en</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Device-Id" elementType="Header">
                    <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                    <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Local-Time" elementType="Header">
                    <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                    <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-API-Version" elementType="Header">
                    <stringProp name="Header.name">Vitality-API-Version</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: POST AR_Activate_SIBYOD" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="programType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">SIBYOD</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">programType</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/${msPath}/1.0/active_rewards/activate</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Client" elementType="Header">
                    <stringProp name="Header.name">Vitality-Client</stringProp>
                    <stringProp name="Header.value">Aetna</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Token" elementType="Header">
                    <stringProp name="Header.name">Vitality-Token</stringProp>
                    <stringProp name="Header.value">${ar_Token}</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-App-Version" elementType="Header">
                    <stringProp name="Header.name">Vitality-App-Version</stringProp>
                    <stringProp name="Header.value">7</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                    <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                    <stringProp name="Header.value">IOS</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Language" elementType="Header">
                    <stringProp name="Header.name">Vitality-Language</stringProp>
                    <stringProp name="Header.value">en</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Device-Id" elementType="Header">
                    <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                    <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Local-Time" elementType="Header">
                    <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                    <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-API-Version" elementType="Header">
                    <stringProp name="Header.name">Vitality-API-Version</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ACTIVATED Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1303979599">ACTIVATED</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SSO to /Apple_Watch" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: POST SSO URL to AppleWAtch" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/${msPath}/1.0/sso/redesign?target=/apollo/apple_watch</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Vitality-Client" elementType="Header">
                    <stringProp name="Header.name">Vitality-Client</stringProp>
                    <stringProp name="Header.value">Aetna</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Token" elementType="Header">
                    <stringProp name="Header.name">Vitality-Token</stringProp>
                    <stringProp name="Header.value">${ar_Token}</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-App-Version" elementType="Header">
                    <stringProp name="Header.name">Vitality-App-Version</stringProp>
                    <stringProp name="Header.value">7</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                    <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                    <stringProp name="Header.value">IOS</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Language" elementType="Header">
                    <stringProp name="Header.name">Vitality-Language</stringProp>
                    <stringProp name="Header.value">en</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Device-Id" elementType="Header">
                    <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                    <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Local-Time" elementType="Header">
                    <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                    <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-API-Version" elementType="Header">
                    <stringProp name="Header.name">Vitality-API-Version</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ssoLink" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">awSSO</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;output&quot;:&quot;https://${ssoBase}/(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="Scope.variable">ssoAW</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: SSO AppleWatch" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ssoBase}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${awSSO}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
                <collectionProp name="CookieManager.cookies"/>
                <boolProp name="CookieManager.clearEachIteration">true</boolProp>
              </CookieManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Apple Watch page Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="704977160">View installment agreement</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SSO to /Mall" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: POST SSO URL to Mall" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/${msPath}/1.0/sso/redesign?target=/apollo/mall</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Vitality-Client" elementType="Header">
                    <stringProp name="Header.name">Vitality-Client</stringProp>
                    <stringProp name="Header.value">Aetna</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Token" elementType="Header">
                    <stringProp name="Header.name">Vitality-Token</stringProp>
                    <stringProp name="Header.value">${ar_Token}</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-App-Version" elementType="Header">
                    <stringProp name="Header.name">Vitality-App-Version</stringProp>
                    <stringProp name="Header.value">7</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                    <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                    <stringProp name="Header.value">IOS</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Language" elementType="Header">
                    <stringProp name="Header.name">Vitality-Language</stringProp>
                    <stringProp name="Header.value">en</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Device-Id" elementType="Header">
                    <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                    <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Local-Time" elementType="Header">
                    <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                    <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-API-Version" elementType="Header">
                    <stringProp name="Header.name">Vitality-API-Version</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ssoLink" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">mallSSO</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;output&quot;:&quot;https://${ssoBase}/(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="Scope.variable">ssoAW</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: SSO Mall" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ssoBase}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${mallSSO}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
                <collectionProp name="CookieManager.cookies"/>
                <boolProp name="CookieManager.clearEachIteration">true</boolProp>
              </CookieManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Gift Cards Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1964569124">Amazon</stringProp>
                  <stringProp name="-1298938887">App Store and iTunes</stringProp>
                  <stringProp name="1905424970">Best Buy</stringProp>
                  <stringProp name="1622877843">CVS pharmacy</stringProp>
                  <stringProp name="452994361">CharityChoice</stringProp>
                  <stringProp name="-2038980848">Whole Foods Market</stringProp>
                  <stringProp name="875740454">Fandango</stringProp>
                  <stringProp name="2428021">Nike</stringProp>
                  <stringProp name="-140972890">Starbucks</stringProp>
                  <stringProp name="766369346">Target Gift Cards</stringProp>
                  <stringProp name="-1511446376">Walmart</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SSO to /Contact_us" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: POST SSO URL to Contact_us" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/${msPath}/1.0/sso/redesign?target=/vitality_content/contact_us</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Vitality-Client" elementType="Header">
                    <stringProp name="Header.name">Vitality-Client</stringProp>
                    <stringProp name="Header.value">Aetna</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Token" elementType="Header">
                    <stringProp name="Header.name">Vitality-Token</stringProp>
                    <stringProp name="Header.value">${ar_Token}</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-App-Version" elementType="Header">
                    <stringProp name="Header.name">Vitality-App-Version</stringProp>
                    <stringProp name="Header.value">7</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                    <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                    <stringProp name="Header.value">IOS</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Language" elementType="Header">
                    <stringProp name="Header.name">Vitality-Language</stringProp>
                    <stringProp name="Header.value">en</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Device-Id" elementType="Header">
                    <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                    <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Local-Time" elementType="Header">
                    <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                    <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-API-Version" elementType="Header">
                    <stringProp name="Header.name">Vitality-API-Version</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ssoLink" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">ContactUsSSO</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;output&quot;:&quot;https://${ssoBase}/(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="Scope.variable">ssoAW</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: SSO Contact_us" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ssoBase}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${ContactUsSSO}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
                <collectionProp name="CookieManager.cookies"/>
                <boolProp name="CookieManager.clearEachIteration">true</boolProp>
              </CookieManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Contact Us page Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="293979885">How can we help you?</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SSO to /Feedback" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: POST SSO URL to feedback" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/${msPath}/1.0/sso/redesign?target=/apollo/feedback</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Vitality-Client" elementType="Header">
                    <stringProp name="Header.name">Vitality-Client</stringProp>
                    <stringProp name="Header.value">Aetna</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Token" elementType="Header">
                    <stringProp name="Header.name">Vitality-Token</stringProp>
                    <stringProp name="Header.value">${ar_Token}</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-App-Version" elementType="Header">
                    <stringProp name="Header.name">Vitality-App-Version</stringProp>
                    <stringProp name="Header.value">7</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                    <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                    <stringProp name="Header.value">IOS</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Language" elementType="Header">
                    <stringProp name="Header.name">Vitality-Language</stringProp>
                    <stringProp name="Header.value">en</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Device-Id" elementType="Header">
                    <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                    <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Local-Time" elementType="Header">
                    <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                    <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-API-Version" elementType="Header">
                    <stringProp name="Header.name">Vitality-API-Version</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ssoLink" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">feedbackSSO</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;output&quot;:&quot;https://${ssoBase}/(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="Scope.variable">ssoAW</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: SSO Feedback" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ssoBase}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${feedbackSSO}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
                <collectionProp name="CookieManager.cookies"/>
                <boolProp name="CookieManager.clearEachIteration">true</boolProp>
              </CookieManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Feedback page Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-656796170">Tell us what you think of Attain</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SSO to /History" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: POST SSO URL to History" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/${msPath}/1.0/sso/redesign?target=/apollo/history</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Vitality-Client" elementType="Header">
                    <stringProp name="Header.name">Vitality-Client</stringProp>
                    <stringProp name="Header.value">Aetna</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Token" elementType="Header">
                    <stringProp name="Header.name">Vitality-Token</stringProp>
                    <stringProp name="Header.value">${ar_Token}</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-App-Version" elementType="Header">
                    <stringProp name="Header.name">Vitality-App-Version</stringProp>
                    <stringProp name="Header.value">7</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                    <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                    <stringProp name="Header.value">IOS</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Language" elementType="Header">
                    <stringProp name="Header.name">Vitality-Language</stringProp>
                    <stringProp name="Header.value">en</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Device-Id" elementType="Header">
                    <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                    <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Local-Time" elementType="Header">
                    <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                    <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-API-Version" elementType="Header">
                    <stringProp name="Header.name">Vitality-API-Version</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ssoLink" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">historySSO</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;output&quot;:&quot;https://${ssoBase}/(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
                <stringProp name="Sample.scope">all</stringProp>
                <stringProp name="Scope.variable">ssoAW</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: SSO Mall History" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${ssoBase}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${historySSO}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
                <collectionProp name="CookieManager.cookies"/>
                <boolProp name="CookieManager.clearEachIteration">true</boolProp>
              </CookieManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Mall History Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1838093228">Gift Card History</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: POST Pair Watch" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="programType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">AWTCH</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">programType</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/${msPath}/1.0/apple_watch/pair_watch</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Vitality-Client" elementType="Header">
                  <stringProp name="Header.name">Vitality-Client</stringProp>
                  <stringProp name="Header.value">Aetna</stringProp>
                </elementProp>
                <elementProp name="Vitality-Token" elementType="Header">
                  <stringProp name="Header.name">Vitality-Token</stringProp>
                  <stringProp name="Header.value">${ar_Token}</stringProp>
                </elementProp>
                <elementProp name="Vitality-App-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-App-Version</stringProp>
                  <stringProp name="Header.value">7</stringProp>
                </elementProp>
                <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                  <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                  <stringProp name="Header.value">IOS</stringProp>
                </elementProp>
                <elementProp name="Vitality-Language" elementType="Header">
                  <stringProp name="Header.name">Vitality-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Vitality-Device-Id" elementType="Header">
                  <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                  <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                </elementProp>
                <elementProp name="Vitality-API-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-API-Version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                  <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="AWTCH Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.request.programType</stringProp>
              <stringProp name="EXPECTED_VALUE">AWTCH</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <kg.apc.jmeter.threads.UltimateThreadGroup guiclass="kg.apc.jmeter.threads.UltimateThreadGroupGui" testclass="kg.apc.jmeter.threads.UltimateThreadGroup" testname="Apo/Sap: 200K/H" enabled="false">
        <collectionProp name="ultimatethreadgroupdata">
          <collectionProp name="-1569225849">
            <stringProp name="49679">230</stringProp>
            <stringProp name="1815">90</stringProp>
            <stringProp name="53430">600</stringProp>
            <stringProp name="46767888">11880</stringProp>
            <stringProp name="48">0</stringProp>
          </collectionProp>
          <collectionProp name="2108024287">
            <stringProp name="49648">220</stringProp>
            <stringProp name="1509531">1260</stringProp>
            <stringProp name="53430">600</stringProp>
            <stringProp name="46736175">10680</stringProp>
            <stringProp name="48">0</stringProp>
          </collectionProp>
          <collectionProp name="-1407100699">
            <stringProp name="49617">210</stringProp>
            <stringProp name="1541244">2460</stringProp>
            <stringProp name="53430">600</stringProp>
            <stringProp name="1749843">9480</stringProp>
            <stringProp name="48">0</stringProp>
          </collectionProp>
          <collectionProp name="-1584987879">
            <stringProp name="49586">200</stringProp>
            <stringProp name="1572957">3660</stringProp>
            <stringProp name="53430">600</stringProp>
            <stringProp name="1718130">8280</stringProp>
            <stringProp name="48">0</stringProp>
          </collectionProp>
          <collectionProp name="-798285351">
            <stringProp name="49586">200</stringProp>
            <stringProp name="1604670">4860</stringProp>
            <stringProp name="53430">600</stringProp>
            <stringProp name="1686417">7080</stringProp>
            <stringProp name="48">0</stringProp>
          </collectionProp>
          <collectionProp name="136535065">
            <stringProp name="49586">200</stringProp>
            <stringProp name="1656564">6060</stringProp>
            <stringProp name="53430">600</stringProp>
            <stringProp name="1634523">5880</stringProp>
            <stringProp name="48">0</stringProp>
          </collectionProp>
          <collectionProp name="421195865">
            <stringProp name="49586">200</stringProp>
            <stringProp name="1688277">7260</stringProp>
            <stringProp reference="../../collectionProp[6]/stringProp[3]"/>
            <stringProp name="1602810">4680</stringProp>
            <stringProp name="48">0</stringProp>
          </collectionProp>
          <collectionProp name="460285456">
            <stringProp name="49586">200</stringProp>
            <stringProp name="1719990">8460</stringProp>
            <stringProp reference="../../collectionProp[6]/stringProp[3]"/>
            <stringProp name="1571097">3480</stringProp>
            <stringProp reference="../../collectionProp[6]/stringProp[5]"/>
          </collectionProp>
          <collectionProp name="-1154428263">
            <stringProp name="49586">200</stringProp>
            <stringProp name="1751703">9660</stringProp>
            <stringProp name="53430">600</stringProp>
            <stringProp name="1539384">2280</stringProp>
            <stringProp name="48">0</stringProp>
          </collectionProp>
        </collectionProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
      </kg.apc.jmeter.threads.UltimateThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Apollo" enabled="true"/>
        <hashTree>
          <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${wso2Base}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout">30000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">300000</stringProp>
          </ConfigTestElement>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: GET Auth Token" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="entity_no" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${vitalityId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">entity_no</stringProp>
                </elementProp>
                <elementProp name="encrypted_entity_no" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${vitality_IdEncrypted}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">encrypted_entity_no</stringProp>
                </elementProp>
                <elementProp name="_p" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">IOS</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">_p</stringProp>
                </elementProp>
                <elementProp name="_v" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${mob.app.version}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">_v</stringProp>
                </elementProp>
                <elementProp name="_doc_browser_context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">_doc_browser_context</stringProp>
                </elementProp>
                <elementProp name="_c" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">Aetna</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">_c</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${msBase}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${msPath}/auth/simulate_auth</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Active Rewards Token" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">ar_Token</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.session.token</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="LLT Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.session.timeout</stringProp>
              <stringProp name="EXPECTED_VALUE">2280</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: POST Apollo WSO2 Access Token" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="grant_type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">client_credentials</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">grant_type</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/token</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Basic ${wso2Token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extracting WSO2 AccessToken" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">wso2AccessToken</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">wso2AccessToken_NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: POST Register Push Token" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="push_token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${randomAlphaNumericString}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">push_token</stringProp>
                </elementProp>
                <elementProp name="device_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${randomNumericString}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">device_id</stringProp>
                </elementProp>
                <elementProp name="platform" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">IOS</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">platform</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/${msPath}/1.0/notifications/register_push_token</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Vitality-Client" elementType="Header">
                  <stringProp name="Header.name">Vitality-Client</stringProp>
                  <stringProp name="Header.value">Aetna</stringProp>
                </elementProp>
                <elementProp name="Vitality-Token" elementType="Header">
                  <stringProp name="Header.name">Vitality-Token</stringProp>
                  <stringProp name="Header.value">${ar_Token}</stringProp>
                </elementProp>
                <elementProp name="Vitality-App-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-App-Version</stringProp>
                  <stringProp name="Header.value">7</stringProp>
                </elementProp>
                <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                  <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                  <stringProp name="Header.value">IOS</stringProp>
                </elementProp>
                <elementProp name="Vitality-Language" elementType="Header">
                  <stringProp name="Header.name">Vitality-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Vitality-Device-Id" elementType="Header">
                  <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                  <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                </elementProp>
                <elementProp name="Vitality-Local-Time" elementType="Header">
                  <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                  <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                </elementProp>
                <elementProp name="Vitality-API-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-API-Version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion that Status = 1" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-161783867">&quot;status&quot;:1</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: POST Set Push Enabled" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="enabled" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">enabled</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/${msPath}/1.0/notifications/set_push_enabled</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Vitality-Client" elementType="Header">
                  <stringProp name="Header.name">Vitality-Client</stringProp>
                  <stringProp name="Header.value">Aetna</stringProp>
                </elementProp>
                <elementProp name="Vitality-Token" elementType="Header">
                  <stringProp name="Header.name">Vitality-Token</stringProp>
                  <stringProp name="Header.value">${ar_Token}</stringProp>
                </elementProp>
                <elementProp name="Vitality-App-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-App-Version</stringProp>
                  <stringProp name="Header.value">7</stringProp>
                </elementProp>
                <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                  <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                  <stringProp name="Header.value">IOS</stringProp>
                </elementProp>
                <elementProp name="Vitality-Language" elementType="Header">
                  <stringProp name="Header.name">Vitality-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Vitality-Device-Id" elementType="Header">
                  <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                  <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                </elementProp>
                <elementProp name="Vitality-Local-Time" elementType="Header">
                  <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                  <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                </elementProp>
                <elementProp name="Vitality-API-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-API-Version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: GET CG_Goals" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="offset" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">offset</stringProp>
                </elementProp>
                <elementProp name="limit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">15</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">limit</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/${msPath}/1.0/campaign_goals/goals</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Vitality-Client" elementType="Header">
                  <stringProp name="Header.name">Vitality-Client</stringProp>
                  <stringProp name="Header.value">Aetna</stringProp>
                </elementProp>
                <elementProp name="Vitality-Token" elementType="Header">
                  <stringProp name="Header.name">Vitality-Token</stringProp>
                  <stringProp name="Header.value">${ar_Token}</stringProp>
                </elementProp>
                <elementProp name="Vitality-App-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-App-Version</stringProp>
                  <stringProp name="Header.value">7</stringProp>
                </elementProp>
                <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                  <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                  <stringProp name="Header.value">IOS</stringProp>
                </elementProp>
                <elementProp name="Vitality-Language" elementType="Header">
                  <stringProp name="Header.name">Vitality-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Vitality-Device-Id" elementType="Header">
                  <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                  <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                </elementProp>
                <elementProp name="Vitality-Local-Time" elementType="Header">
                  <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                  <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                </elementProp>
                <elementProp name="Vitality-API-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-API-Version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="CGoalId" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">CGoalId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.output.goalsArray.goals[0].goalId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="JSON Structure Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="408179302">adjudicator</stringProp>
                <stringProp name="241352577">buttons</stringProp>
                <stringProp name="915719548">eventMnemonic</stringProp>
                <stringProp name="-1318255029">campaignId</stringProp>
                <stringProp name="-1724546052">description</stringProp>
                <stringProp name="-1179356962">externalEndDate</stringProp>
                <stringProp name="-254860736">externalMemberId</stringProp>
                <stringProp name="-1240658034">goalId</stringProp>
                <stringProp name="2054867262">goalState</stringProp>
                <stringProp name="2055481093">goalTitle</stringProp>
                <stringProp name="199149798">howToAchieve</stringProp>
                <stringProp name="1316501932">internalEndDate</stringProp>
                <stringProp name="922683503">monitorEndDate</stringProp>
                <stringProp name="-1795632125">partnerId</stringProp>
                <stringProp name="-2129778896">startDate</stringProp>
                <stringProp name="-109999815">transmitGUID</stringProp>
                <stringProp name="2145596567">vitalityMemberId</stringProp>
                <stringProp name="-2070259289">status&quot;:1</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">34</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: GET CG_Goal" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="goalId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${CGoalId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">goalId</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/${msPath}/1.0/campaign_goals/goal</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Vitality-Client" elementType="Header">
                  <stringProp name="Header.name">Vitality-Client</stringProp>
                  <stringProp name="Header.value">Aetna</stringProp>
                </elementProp>
                <elementProp name="Vitality-Token" elementType="Header">
                  <stringProp name="Header.name">Vitality-Token</stringProp>
                  <stringProp name="Header.value">${ar_Token}</stringProp>
                </elementProp>
                <elementProp name="Vitality-App-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-App-Version</stringProp>
                  <stringProp name="Header.value">7</stringProp>
                </elementProp>
                <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                  <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                  <stringProp name="Header.value">IOS</stringProp>
                </elementProp>
                <elementProp name="Vitality-Language" elementType="Header">
                  <stringProp name="Header.name">Vitality-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Vitality-Device-Id" elementType="Header">
                  <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                  <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                </elementProp>
                <elementProp name="Vitality-Local-Time" elementType="Header">
                  <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                  <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                </elementProp>
                <elementProp name="Vitality-API-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-API-Version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: GET AR_Current_Goals" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/${msPath}/1.0/active_rewards/current_goals</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Vitality-Client" elementType="Header">
                  <stringProp name="Header.name">Vitality-Client</stringProp>
                  <stringProp name="Header.value">Aetna</stringProp>
                </elementProp>
                <elementProp name="Vitality-Token" elementType="Header">
                  <stringProp name="Header.name">Vitality-Token</stringProp>
                  <stringProp name="Header.value">${ar_Token}</stringProp>
                </elementProp>
                <elementProp name="Vitality-App-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-App-Version</stringProp>
                  <stringProp name="Header.value">7</stringProp>
                </elementProp>
                <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                  <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                  <stringProp name="Header.value">IOS</stringProp>
                </elementProp>
                <elementProp name="Vitality-Language" elementType="Header">
                  <stringProp name="Header.name">Vitality-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Vitality-Device-Id" elementType="Header">
                  <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                  <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                </elementProp>
                <elementProp name="Vitality-Local-Time" elementType="Header">
                  <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                  <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                </elementProp>
                <elementProp name="Vitality-API-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-API-Version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Goal ID" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">Goal_ID</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.output.goals[0].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: GET AR_Goals" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="goalType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">weekly</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">goalType</stringProp>
                </elementProp>
                <elementProp name="offset" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">offset</stringProp>
                </elementProp>
                <elementProp name="limit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">15</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">limit</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/${msPath}/1.0/active_rewards/goals</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Vitality-Client" elementType="Header">
                  <stringProp name="Header.name">Vitality-Client</stringProp>
                  <stringProp name="Header.value">Aetna</stringProp>
                </elementProp>
                <elementProp name="Vitality-Token" elementType="Header">
                  <stringProp name="Header.name">Vitality-Token</stringProp>
                  <stringProp name="Header.value">${ar_Token}</stringProp>
                </elementProp>
                <elementProp name="Vitality-App-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-App-Version</stringProp>
                  <stringProp name="Header.value">7</stringProp>
                </elementProp>
                <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                  <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                  <stringProp name="Header.value">IOS</stringProp>
                </elementProp>
                <elementProp name="Vitality-Language" elementType="Header">
                  <stringProp name="Header.name">Vitality-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Vitality-Device-Id" elementType="Header">
                  <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                  <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                </elementProp>
                <elementProp name="Vitality-Local-Time" elementType="Header">
                  <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                  <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                </elementProp>
                <elementProp name="Vitality-API-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-API-Version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: GET Purchase" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/${msPath}/1.0/apple_watch/purchase</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Vitality-Client" elementType="Header">
                  <stringProp name="Header.name">Vitality-Client</stringProp>
                  <stringProp name="Header.value">Aetna</stringProp>
                </elementProp>
                <elementProp name="Vitality-Token" elementType="Header">
                  <stringProp name="Header.name">Vitality-Token</stringProp>
                  <stringProp name="Header.value">${ar_Token}</stringProp>
                </elementProp>
                <elementProp name="Vitality-App-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-App-Version</stringProp>
                  <stringProp name="Header.value">7</stringProp>
                </elementProp>
                <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                  <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                  <stringProp name="Header.value">IOS</stringProp>
                </elementProp>
                <elementProp name="Vitality-Language" elementType="Header">
                  <stringProp name="Header.name">Vitality-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Vitality-Device-Id" elementType="Header">
                  <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                  <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                </elementProp>
                <elementProp name="Vitality-Local-Time" elementType="Header">
                  <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                  <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                </elementProp>
                <elementProp name="Vitality-API-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-API-Version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Currency Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="66470">CAD</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">6</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Purchase Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1850889110">&quot;installmentDayOfPeriod&quot;:12</stringProp>
                <stringProp name="850605392">&quot;numberOfInstallmentts&quot;:24</stringProp>
                <stringProp name="1819301357">&quot;amount&quot;:&quot;USD 2.75&quot;,&quot;amountType&quot;:&quot;DiscountLevel4&quot;</stringProp>
                <stringProp name="1819301326">&quot;amount&quot;:&quot;USD 2.75&quot;,&quot;amountType&quot;:&quot;DiscountLevel3&quot;</stringProp>
                <stringProp name="1819301295">&quot;amount&quot;:&quot;USD 2.75&quot;,&quot;amountType&quot;:&quot;DiscountLevel2&quot;</stringProp>
                <stringProp name="1819301264">&quot;amount&quot;:&quot;USD 2.75&quot;,&quot;amountType&quot;:&quot;DiscountLevel1&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: GET Repayment History" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/${msPath}/1.0/apple_watch/repayment_history</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Vitality-Client" elementType="Header">
                  <stringProp name="Header.name">Vitality-Client</stringProp>
                  <stringProp name="Header.value">Aetna</stringProp>
                </elementProp>
                <elementProp name="Vitality-Token" elementType="Header">
                  <stringProp name="Header.name">Vitality-Token</stringProp>
                  <stringProp name="Header.value">${ar_Token}</stringProp>
                </elementProp>
                <elementProp name="Vitality-App-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-App-Version</stringProp>
                  <stringProp name="Header.value">7</stringProp>
                </elementProp>
                <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                  <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                  <stringProp name="Header.value">IOS</stringProp>
                </elementProp>
                <elementProp name="Vitality-Language" elementType="Header">
                  <stringProp name="Header.name">Vitality-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Vitality-Device-Id" elementType="Header">
                  <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                  <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                </elementProp>
                <elementProp name="Vitality-Local-Time" elementType="Header">
                  <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                  <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                </elementProp>
                <elementProp name="Vitality-API-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-API-Version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="PurchaseId Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="137050516">10026 - Purchase Not Found</stringProp>
                <stringProp name="297521660">purchaseId</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">34</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Currency Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="66470">CAD</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">6</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Payment history Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1421797203">dayOfPeriod&quot;:12</stringProp>
                <stringProp name="-148443948">numberOfInstallments&quot;:24</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: GET AR_Eligibility" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/${msPath}/1.0/active_rewards/eligibility</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Vitality-Client" elementType="Header">
                  <stringProp name="Header.name">Vitality-Client</stringProp>
                  <stringProp name="Header.value">Aetna</stringProp>
                </elementProp>
                <elementProp name="Vitality-Token" elementType="Header">
                  <stringProp name="Header.name">Vitality-Token</stringProp>
                  <stringProp name="Header.value">${ar_Token}</stringProp>
                </elementProp>
                <elementProp name="Vitality-App-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-App-Version</stringProp>
                  <stringProp name="Header.value">7</stringProp>
                </elementProp>
                <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                  <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                  <stringProp name="Header.value">IOS</stringProp>
                </elementProp>
                <elementProp name="Vitality-Language" elementType="Header">
                  <stringProp name="Header.name">Vitality-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Vitality-Device-Id" elementType="Header">
                  <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                  <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                </elementProp>
                <elementProp name="Vitality-Local-Time" elementType="Header">
                  <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                  <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                </elementProp>
                <elementProp name="Vitality-API-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-API-Version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="100743639">eligible</stringProp>
                <stringProp name="-161783867">&quot;status&quot;:1</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: GET Home Page Widgets" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="filter" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">VITALITY_BUCKS</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">filter</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/${msPath}/1.0/dashboard/home_widgets</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Vitality-Client" elementType="Header">
                  <stringProp name="Header.name">Vitality-Client</stringProp>
                  <stringProp name="Header.value">Aetna</stringProp>
                </elementProp>
                <elementProp name="Vitality-Token" elementType="Header">
                  <stringProp name="Header.name">Vitality-Token</stringProp>
                  <stringProp name="Header.value">${ar_Token}</stringProp>
                </elementProp>
                <elementProp name="Vitality-App-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-App-Version</stringProp>
                  <stringProp name="Header.value">7</stringProp>
                </elementProp>
                <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                  <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                  <stringProp name="Header.value">IOS</stringProp>
                </elementProp>
                <elementProp name="Vitality-Language" elementType="Header">
                  <stringProp name="Header.name">Vitality-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Vitality-Device-Id" elementType="Header">
                  <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                  <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                </elementProp>
                <elementProp name="Vitality-Local-Time" elementType="Header">
                  <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                  <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                </elementProp>
                <elementProp name="Vitality-API-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-API-Version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="SUCCESS Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1149187101">SUCCESS</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: GET Events history" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="limit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">999</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">limit</stringProp>
                </elementProp>
                <elementProp name="offset" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">offset</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/${msPath}/1.0/events/history</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Vitality-Client" elementType="Header">
                  <stringProp name="Header.name">Vitality-Client</stringProp>
                  <stringProp name="Header.value">Aetna</stringProp>
                </elementProp>
                <elementProp name="Vitality-Token" elementType="Header">
                  <stringProp name="Header.name">Vitality-Token</stringProp>
                  <stringProp name="Header.value">${ar_Token}</stringProp>
                </elementProp>
                <elementProp name="Vitality-App-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-App-Version</stringProp>
                  <stringProp name="Header.value">7</stringProp>
                </elementProp>
                <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                  <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                  <stringProp name="Header.value">IOS</stringProp>
                </elementProp>
                <elementProp name="Vitality-Language" elementType="Header">
                  <stringProp name="Header.name">Vitality-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Vitality-Device-Id" elementType="Header">
                  <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                  <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                </elementProp>
                <elementProp name="Vitality-Local-Time" elementType="Header">
                  <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                  <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                </elementProp>
                <elementProp name="Vitality-API-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-API-Version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Currency Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1108336905">record_number</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Health Data Upload" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: GET Health Data Upload Token" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="scope" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">HEALTH_DATA_UPLOAD</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">scope</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/${msPath}/1.0/auth/token</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Client" elementType="Header">
                    <stringProp name="Header.name">Vitality-Client</stringProp>
                    <stringProp name="Header.value">Aetna</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Token" elementType="Header">
                    <stringProp name="Header.name">Vitality-Token</stringProp>
                    <stringProp name="Header.value">${ar_Token}</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-App-Version" elementType="Header">
                    <stringProp name="Header.name">Vitality-App-Version</stringProp>
                    <stringProp name="Header.value">7</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                    <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                    <stringProp name="Header.value">IOS</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Language" elementType="Header">
                    <stringProp name="Header.name">Vitality-Language</stringProp>
                    <stringProp name="Header.value">en</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Device-Id" elementType="Header">
                    <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                    <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Local-Time" elementType="Header">
                    <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                    <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-API-Version" elementType="Header">
                    <stringProp name="Header.name">Vitality-API-Version</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Health Data Token" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">hduToken</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.session.token</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: POST VDP: ROUTINE" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
 &quot;device&quot;: {&#xd;
   &quot;deviceId&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}&quot;,&#xd;
   &quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
   &quot;model&quot;: &quot;iOS 10.0.1&quot;&#xd;
 },&#xd;
	 &quot;header&quot;: {&#xd;
	   &quot;partnerSystem&quot;: &quot;Apple&quot;,&#xd;
	   &quot;processingType&quot;: &quot;BATCH&quot;,&#xd;
	   &quot;rawUploadData&quot;: &quot;&quot;,&#xd;
	   &quot;sessionId&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}&quot;,&#xd;
	   &quot;tenantId&quot;: &quot;27&quot;,&#xd;
	   &quot;uploadCount&quot;: 3,&#xd;
	   &quot;uploadDate&quot;: &quot;${dateToday}T00:00:00+03:00&quot;,&#xd;
	   &quot;user&quot;: {&#xd;
	     &quot;entityNo&quot;: &quot;${vitalityId}&quot;,&#xd;
	     &quot;partnerUserId&quot;: &quot;&quot;&#xd;
	  },&#xd;
	   &quot;verified&quot;: &quot;true&quot;&#xd;
	  },&#xd;
		 &quot;readings&quot;: [&#xd;
		   {&#xd;
		     &quot;dataCategory&quot;: &quot;BIOMETRIC&quot;,&#xd;
		     &quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00+03:00&quot;,&#xd;
		     &quot;healthData&quot;: {&#xd;
		     &quot;weight&quot;: {&#xd;
		     &quot;unitOfMeasurement&quot;: &quot;KILOGRAMS&quot;,&#xd;
		     &quot;value&quot;: 80.5&#xd;
		       }&#xd;
     },&#xd;
     &quot;integrity&quot;: &quot;UNVERIFIED&quot;,&#xd;
     &quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
     &quot;model&quot;: &quot;iOS 10.0.1&quot;,&#xd;
     &quot;partnerReadingId&quot;: &quot;${dateToday}${randomAlphaNumericString}&quot;,&#xd;
     &quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
     &quot;readingType&quot;: &quot;WEIGHT&quot;,&#xd;
     &quot;startTime&quot;: &quot;${dateToday}T00:00:00+03:00&quot;&#xd;
   },&#xd;
   {&#xd;
     &quot;dataCategory&quot;: &quot;ROUTINE&quot;,&#xd;
     &quot;duration&quot;: 86400,&#xd;
     &quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00+03:00&quot;,&#xd;
     &quot;integrity&quot;: &quot;VERIFIED&quot;,&#xd;
     &quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
     &quot;model&quot;: &quot;iOS 10.0.1&quot;,&#xd;
     &quot;partnerReadingId&quot;: &quot;${dateToday}${randomAlphaNumericString}&quot;,&#xd;
     &quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
     &quot;readingType&quot;: &quot;WALKING&quot;,&#xd;
     &quot;startTime&quot;: &quot;${dateToday}T00:00:00+03:00&quot;,&#xd;
     &quot;workout&quot;: {&#xd;
       &quot;energyExpenditure&quot;: {&#xd;
         &quot;unitOfMeasurement&quot;: &quot;KILOCALORIES&quot;,&#xd;
         &quot;value&quot;: 800&#xd;
       }&#xd;
     }&#xd;
   }&#xd;
   &#xd;
 ]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/${msPath}/1.0/health_data/upload</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Token" elementType="Header">
                    <stringProp name="Header.name">Vitality-Token</stringProp>
                    <stringProp name="Header.value">${hduToken}</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-App-Version" elementType="Header">
                    <stringProp name="Header.name">Vitality-App-Version</stringProp>
                    <stringProp name="Header.value">7</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Language" elementType="Header">
                    <stringProp name="Header.name">Vitality-Language</stringProp>
                    <stringProp name="Header.value">en</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Device-Id" elementType="Header">
                    <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                    <stringProp name="Header.value">swagger-3f802407-77b4-407c-a758-842af5830c2b</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Local-Time" elementType="Header">
                    <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                    <stringProp name="Header.value">${__time(yyyy-MM-dd,)}</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-API-Version" elementType="Header">
                    <stringProp name="Header.name">Vitality-API-Version</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                    <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                    <stringProp name="Header.value">IOS</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="APIs: 50%" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>50.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Activate" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: POST AR_Activate_FIEYW" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="programType" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">FIEYW</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">programType</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/${msPath}/1.0/active_rewards/activate</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Client" elementType="Header">
                      <stringProp name="Header.name">Vitality-Client</stringProp>
                      <stringProp name="Header.value">Aetna</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Token" elementType="Header">
                      <stringProp name="Header.name">Vitality-Token</stringProp>
                      <stringProp name="Header.value">${ar_Token}</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-App-Version" elementType="Header">
                      <stringProp name="Header.name">Vitality-App-Version</stringProp>
                      <stringProp name="Header.value">7</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                      <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                      <stringProp name="Header.value">IOS</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Language" elementType="Header">
                      <stringProp name="Header.name">Vitality-Language</stringProp>
                      <stringProp name="Header.value">en</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Device-Id" elementType="Header">
                      <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                      <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Local-Time" elementType="Header">
                      <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                      <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-API-Version" elementType="Header">
                      <stringProp name="Header.name">Vitality-API-Version</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: POST AR_Activate_FIBYOD" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="programType" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">FIBYOD</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">programType</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/${msPath}/1.0/active_rewards/activate</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Client" elementType="Header">
                      <stringProp name="Header.name">Vitality-Client</stringProp>
                      <stringProp name="Header.value">Aetna</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Token" elementType="Header">
                      <stringProp name="Header.name">Vitality-Token</stringProp>
                      <stringProp name="Header.value">${ar_Token}</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-App-Version" elementType="Header">
                      <stringProp name="Header.name">Vitality-App-Version</stringProp>
                      <stringProp name="Header.value">7</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                      <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                      <stringProp name="Header.value">IOS</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Language" elementType="Header">
                      <stringProp name="Header.name">Vitality-Language</stringProp>
                      <stringProp name="Header.value">en</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Device-Id" elementType="Header">
                      <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                      <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Local-Time" elementType="Header">
                      <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                      <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-API-Version" elementType="Header">
                      <stringProp name="Header.name">Vitality-API-Version</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: POST AR_Activate_SIBYOD" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="programType" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">SIBYOD</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">programType</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/${msPath}/1.0/active_rewards/activate</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Client" elementType="Header">
                      <stringProp name="Header.name">Vitality-Client</stringProp>
                      <stringProp name="Header.value">Aetna</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Token" elementType="Header">
                      <stringProp name="Header.name">Vitality-Token</stringProp>
                      <stringProp name="Header.value">${ar_Token}</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-App-Version" elementType="Header">
                      <stringProp name="Header.name">Vitality-App-Version</stringProp>
                      <stringProp name="Header.value">7</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                      <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                      <stringProp name="Header.value">IOS</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Language" elementType="Header">
                      <stringProp name="Header.name">Vitality-Language</stringProp>
                      <stringProp name="Header.value">en</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Device-Id" elementType="Header">
                      <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                      <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Local-Time" elementType="Header">
                      <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                      <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-API-Version" elementType="Header">
                      <stringProp name="Header.name">Vitality-API-Version</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ACTIVATED Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1303979599">ACTIVATED</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SSO to /Apple_Watch" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: POST SSO URL to AppleWAtch" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/${msPath}/1.0/sso/redesign?target=/apollo/apple_watch</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Vitality-Client" elementType="Header">
                      <stringProp name="Header.name">Vitality-Client</stringProp>
                      <stringProp name="Header.value">Aetna</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Token" elementType="Header">
                      <stringProp name="Header.name">Vitality-Token</stringProp>
                      <stringProp name="Header.value">${ar_Token}</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-App-Version" elementType="Header">
                      <stringProp name="Header.name">Vitality-App-Version</stringProp>
                      <stringProp name="Header.value">7</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                      <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                      <stringProp name="Header.value">IOS</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Language" elementType="Header">
                      <stringProp name="Header.name">Vitality-Language</stringProp>
                      <stringProp name="Header.value">en</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Device-Id" elementType="Header">
                      <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                      <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Local-Time" elementType="Header">
                      <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                      <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-API-Version" elementType="Header">
                      <stringProp name="Header.name">Vitality-API-Version</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ssoLink" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">awSSO</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;output&quot;:&quot;https://${ssoBase}/(.*?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                  <stringProp name="Scope.variable">ssoAW</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: SSO AppleWatch" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${ssoBase}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${awSSO}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
                  <collectionProp name="CookieManager.cookies"/>
                  <boolProp name="CookieManager.clearEachIteration">true</boolProp>
                </CookieManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Apple Watch page Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="704977160">View installment agreement</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SSO to /Mall" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: POST SSO URL to Mall" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/${msPath}/1.0/sso/redesign?target=/apollo/mall</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Vitality-Client" elementType="Header">
                      <stringProp name="Header.name">Vitality-Client</stringProp>
                      <stringProp name="Header.value">Aetna</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Token" elementType="Header">
                      <stringProp name="Header.name">Vitality-Token</stringProp>
                      <stringProp name="Header.value">${ar_Token}</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-App-Version" elementType="Header">
                      <stringProp name="Header.name">Vitality-App-Version</stringProp>
                      <stringProp name="Header.value">7</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                      <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                      <stringProp name="Header.value">IOS</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Language" elementType="Header">
                      <stringProp name="Header.name">Vitality-Language</stringProp>
                      <stringProp name="Header.value">en</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Device-Id" elementType="Header">
                      <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                      <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Local-Time" elementType="Header">
                      <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                      <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-API-Version" elementType="Header">
                      <stringProp name="Header.name">Vitality-API-Version</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ssoLink" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">mallSSO</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;output&quot;:&quot;https://${ssoBase}/(.*?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                  <stringProp name="Scope.variable">ssoAW</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: SSO Mall" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${ssoBase}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${mallSSO}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
                  <collectionProp name="CookieManager.cookies"/>
                  <boolProp name="CookieManager.clearEachIteration">true</boolProp>
                </CookieManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Gift Cards Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1964569124">Amazon</stringProp>
                    <stringProp name="-1298938887">App Store and iTunes</stringProp>
                    <stringProp name="1905424970">Best Buy</stringProp>
                    <stringProp name="1622877843">CVS pharmacy</stringProp>
                    <stringProp name="452994361">CharityChoice</stringProp>
                    <stringProp name="-2038980848">Whole Foods Market</stringProp>
                    <stringProp name="875740454">Fandango</stringProp>
                    <stringProp name="2428021">Nike</stringProp>
                    <stringProp name="-140972890">Starbucks</stringProp>
                    <stringProp name="766369346">Target Gift Cards</stringProp>
                    <stringProp name="-1511446376">Walmart</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SSO to /Contact_us" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: POST SSO URL to Contact_us" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/${msPath}/1.0/sso/redesign?target=/vitality_content/contact_us</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Vitality-Client" elementType="Header">
                      <stringProp name="Header.name">Vitality-Client</stringProp>
                      <stringProp name="Header.value">Aetna</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Token" elementType="Header">
                      <stringProp name="Header.name">Vitality-Token</stringProp>
                      <stringProp name="Header.value">${ar_Token}</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-App-Version" elementType="Header">
                      <stringProp name="Header.name">Vitality-App-Version</stringProp>
                      <stringProp name="Header.value">7</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                      <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                      <stringProp name="Header.value">IOS</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Language" elementType="Header">
                      <stringProp name="Header.name">Vitality-Language</stringProp>
                      <stringProp name="Header.value">en</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Device-Id" elementType="Header">
                      <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                      <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Local-Time" elementType="Header">
                      <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                      <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-API-Version" elementType="Header">
                      <stringProp name="Header.name">Vitality-API-Version</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ssoLink" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">ContactUsSSO</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;output&quot;:&quot;https://${ssoBase}/(.*?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                  <stringProp name="Scope.variable">ssoAW</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: SSO Contact_us" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${ssoBase}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${ContactUsSSO}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
                  <collectionProp name="CookieManager.cookies"/>
                  <boolProp name="CookieManager.clearEachIteration">true</boolProp>
                </CookieManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Contact Us page Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="293979885">How can we help you?</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SSO to /Feedback" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: POST SSO URL to feedback" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/${msPath}/1.0/sso/redesign?target=/apollo/feedback</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Vitality-Client" elementType="Header">
                      <stringProp name="Header.name">Vitality-Client</stringProp>
                      <stringProp name="Header.value">Aetna</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Token" elementType="Header">
                      <stringProp name="Header.name">Vitality-Token</stringProp>
                      <stringProp name="Header.value">${ar_Token}</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-App-Version" elementType="Header">
                      <stringProp name="Header.name">Vitality-App-Version</stringProp>
                      <stringProp name="Header.value">7</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                      <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                      <stringProp name="Header.value">IOS</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Language" elementType="Header">
                      <stringProp name="Header.name">Vitality-Language</stringProp>
                      <stringProp name="Header.value">en</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Device-Id" elementType="Header">
                      <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                      <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Local-Time" elementType="Header">
                      <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                      <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-API-Version" elementType="Header">
                      <stringProp name="Header.name">Vitality-API-Version</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ssoLink" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">feedbackSSO</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;output&quot;:&quot;https://${ssoBase}/(.*?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                  <stringProp name="Scope.variable">ssoAW</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: SSO Feedback" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${ssoBase}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${feedbackSSO}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
                  <collectionProp name="CookieManager.cookies"/>
                  <boolProp name="CookieManager.clearEachIteration">true</boolProp>
                </CookieManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Feedback page Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-656796170">Tell us what you think of Attain</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="SSO to /History" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: POST SSO URL to History" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain"></stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">api/${msPath}/1.0/sso/redesign?target=/apollo/history</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Vitality-Client" elementType="Header">
                      <stringProp name="Header.name">Vitality-Client</stringProp>
                      <stringProp name="Header.value">Aetna</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Token" elementType="Header">
                      <stringProp name="Header.name">Vitality-Token</stringProp>
                      <stringProp name="Header.value">${ar_Token}</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-App-Version" elementType="Header">
                      <stringProp name="Header.name">Vitality-App-Version</stringProp>
                      <stringProp name="Header.value">7</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                      <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                      <stringProp name="Header.value">IOS</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Language" elementType="Header">
                      <stringProp name="Header.name">Vitality-Language</stringProp>
                      <stringProp name="Header.value">en</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Device-Id" elementType="Header">
                      <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                      <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-Local-Time" elementType="Header">
                      <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                      <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                    </elementProp>
                    <elementProp name="Vitality-API-Version" elementType="Header">
                      <stringProp name="Header.name">Vitality-API-Version</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="ssoLink" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">historySSO</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;output&quot;:&quot;https://${ssoBase}/(.*?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default"></stringProp>
                  <stringProp name="RegexExtractor.match_number">0</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                  <stringProp name="Scope.variable">ssoAW</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: SSO Mall History" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${ssoBase}</stringProp>
                <stringProp name="HTTPSampler.port"></stringProp>
                <stringProp name="HTTPSampler.protocol"></stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${historySSO}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.implementation">Java</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
                  <collectionProp name="CookieManager.cookies"/>
                  <boolProp name="CookieManager.clearEachIteration">true</boolProp>
                </CookieManager>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Mall History Assertion" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1838093228">Gift Card History</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">2</intProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Apollo: POST Pair Watch" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="programType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">AWTCH</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">programType</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/${msPath}/1.0/apple_watch/pair_watch</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Client" elementType="Header">
                    <stringProp name="Header.name">Vitality-Client</stringProp>
                    <stringProp name="Header.value">Aetna</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Token" elementType="Header">
                    <stringProp name="Header.name">Vitality-Token</stringProp>
                    <stringProp name="Header.value">${ar_Token}</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-App-Version" elementType="Header">
                    <stringProp name="Header.name">Vitality-App-Version</stringProp>
                    <stringProp name="Header.value">7</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                    <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                    <stringProp name="Header.value">IOS</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Language" elementType="Header">
                    <stringProp name="Header.name">Vitality-Language</stringProp>
                    <stringProp name="Header.value">en</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-Device-Id" elementType="Header">
                    <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                    <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                  </elementProp>
                  <elementProp name="Vitality-API-Version" elementType="Header">
                    <stringProp name="Header.name">Vitality-API-Version</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                    <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="AWTCH Assertion" enabled="true">
                <stringProp name="JSON_PATH">$.request.programType</stringProp>
                <stringProp name="EXPECTED_VALUE">AWTCH</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">false</boolProp>
              </JSONPathAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Sapphire" enabled="true"/>
        <hashTree>
          <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${wso2Base}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path"></stringProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout">30000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">300000</stringProp>
          </ConfigTestElement>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Encrypting Entity" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import java.security.MessageDigest;

MessageDigest digest = MessageDigest.getInstance(&quot;MD5&quot;);
byte[] bytes = digest.digest((&quot;${sapphireId}&quot; + &quot;${msSalt}&quot;).getBytes());
vars.put(&quot;sapphireIdEncrypted&quot;,javax.xml.bind.DatatypeConverter.printHexBinary(bytes).toLowerCase());</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Sapphire: POST WSO2 Access Token" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="grant_type" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">client_credentials</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">grant_type</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/token</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Basic ${wso2Token}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extracting WSO2 AccessToken" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">wso2AccessToken</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="POST Activate" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Sapphire: POST MS WSO2 Access Token" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="grant_type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">client_credentials</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">grant_type</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/token</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Basic ${msWso2Token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="msWso2Bearer" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">msWso2Bearer</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.access_token</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="Sample.scope">all</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Sapphire: POST Activate" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;tenantId&quot;: &quot;32&quot;,&#xd;
&quot;mode&quot;: &quot;Activate&quot;,&#xd;
&quot;programme&quot;: {&#xd;
&quot;entityNumber&quot;: ${sapphireId}, &#xd;
&quot;programType&quot;: &quot;ActiveRewards&quot;,&#xd;
&quot;effectivePeriods&quot;: [&#xd;
{&#xd;
&quot;effectiveFrom&quot;: &quot;${dateToday}&quot;,&#xd;
&quot;effectiveTo&quot;: &quot;9999-12-30&quot;&#xd;
}&#xd;
]&#xd;
}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">api/${arPath}/1.0/Activation</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">x-vsl-timestamp</stringProp>
                    <stringProp name="Header.value">${timeStamp}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${msWso2Bearer}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Programme Activated Assertion " enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1044234867">Programme Activated</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Sapphire: GET Auth Token" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="entity_no" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${sapphireId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">entity_no</stringProp>
                </elementProp>
                <elementProp name="encrypted_entity_no" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${sapphireIdEncrypted}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">encrypted_entity_no</stringProp>
                </elementProp>
                <elementProp name="_p" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">IOS</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">_p</stringProp>
                </elementProp>
                <elementProp name="_v" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${mob.app.version}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">_v</stringProp>
                </elementProp>
                <elementProp name="_doc_browser_context" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">_doc_browser_context</stringProp>
                </elementProp>
                <elementProp name="_c" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">BESTBUY</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">_c</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${msBase}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${msPath}/auth/simulate_auth</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Ignore Response Code" enabled="true">
              <collectionProp name="Asserion.test_strings"/>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Active Rewards Token" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">ar_Token</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.session.token</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-950083557">status&quot; : 1</stringProp>
                <stringProp name="-950083558">status&quot; : 0</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">34</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Sapphire: POST Accept T&amp;C" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/whitelabel-mobile-api/1.0/registration/accept_terms_and_conditions</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Vitality-Client" elementType="Header">
                  <stringProp name="Header.name">Vitality-Client</stringProp>
                  <stringProp name="Header.value">BESTBUY</stringProp>
                </elementProp>
                <elementProp name="Vitality-Token" elementType="Header">
                  <stringProp name="Header.name">Vitality-Token</stringProp>
                  <stringProp name="Header.value">${ar_Token}</stringProp>
                </elementProp>
                <elementProp name="Vitality-App-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-App-Version</stringProp>
                  <stringProp name="Header.value">7</stringProp>
                </elementProp>
                <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                  <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                  <stringProp name="Header.value">IOS</stringProp>
                </elementProp>
                <elementProp name="Vitality-Language" elementType="Header">
                  <stringProp name="Header.name">Vitality-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Vitality-Device-Id" elementType="Header">
                  <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                  <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                </elementProp>
                <elementProp name="Vitality-Local-Time" elementType="Header">
                  <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                  <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                </elementProp>
                <elementProp name="Vitality-API-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-API-Version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-160985414">first_name</stringProp>
                <stringProp name="2013122196">last_name</stringProp>
                <stringProp name="110541305">token</stringProp>
                <stringProp name="-1249512767">gender</stringProp>
                <stringProp name="-1181815352">date_of_birth</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Sapphire: POST Check Username: Valid" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="username" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${enviroment}${randomString}@sapphire.com</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">username</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/whitelabel-mobile-api/1.0/registration/check_username</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Vitality-Client" elementType="Header">
                  <stringProp name="Header.name">Vitality-Client</stringProp>
                  <stringProp name="Header.value">BESTBUY</stringProp>
                </elementProp>
                <elementProp name="Vitality-App-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-App-Version</stringProp>
                  <stringProp name="Header.value">7</stringProp>
                </elementProp>
                <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                  <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                  <stringProp name="Header.value">IOS</stringProp>
                </elementProp>
                <elementProp name="Vitality-Language" elementType="Header">
                  <stringProp name="Header.name">Vitality-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Vitality-Device-Id" elementType="Header">
                  <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                  <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                </elementProp>
                <elementProp name="Vitality-Local-Time" elementType="Header">
                  <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                  <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                </elementProp>
                <elementProp name="Vitality-API-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-API-Version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-161783867">&quot;status&quot;:1</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Sapphire: POST Check Username: Invalid" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="username" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${enviroment}${randomString}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">username</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/whitelabel-mobile-api/1.0/registration/check_username</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Vitality-Client" elementType="Header">
                  <stringProp name="Header.name">Vitality-Client</stringProp>
                  <stringProp name="Header.value">BESTBUY</stringProp>
                </elementProp>
                <elementProp name="Vitality-App-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-App-Version</stringProp>
                  <stringProp name="Header.value">7</stringProp>
                </elementProp>
                <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                  <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                  <stringProp name="Header.value">IOS</stringProp>
                </elementProp>
                <elementProp name="Vitality-Language" elementType="Header">
                  <stringProp name="Header.name">Vitality-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Vitality-Device-Id" elementType="Header">
                  <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                  <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                </elementProp>
                <elementProp name="Vitality-Local-Time" elementType="Header">
                  <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                  <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                </elementProp>
                <elementProp name="Vitality-API-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-API-Version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Ignore 500 code" enabled="true">
              <collectionProp name="Asserion.test_strings"/>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">true</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1694715979">You used an invalid email format</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Sapphire: POST Check Password" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="password" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">P@ssw0rd</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">password</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/whitelabel-mobile-api/1.0/registration/validate_password</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Vitality-Client" elementType="Header">
                  <stringProp name="Header.name">Vitality-Client</stringProp>
                  <stringProp name="Header.value">BESTBUY</stringProp>
                </elementProp>
                <elementProp name="Vitality-App-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-App-Version</stringProp>
                  <stringProp name="Header.value">7</stringProp>
                </elementProp>
                <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                  <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                  <stringProp name="Header.value">IOS</stringProp>
                </elementProp>
                <elementProp name="Vitality-Language" elementType="Header">
                  <stringProp name="Header.name">Vitality-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Vitality-Device-Id" elementType="Header">
                  <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                  <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                </elementProp>
                <elementProp name="Vitality-Local-Time" elementType="Header">
                  <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                  <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                </elementProp>
                <elementProp name="Vitality-API-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-API-Version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-161783867">&quot;status&quot;:1</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Sapphire: GET Get Security Questions" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/whitelabel-mobile-api/1.0/registration/get_security_questions</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Vitality-Client" elementType="Header">
                  <stringProp name="Header.name">Vitality-Client</stringProp>
                  <stringProp name="Header.value">BESTBUY</stringProp>
                </elementProp>
                <elementProp name="Vitality-Token" elementType="Header">
                  <stringProp name="Header.name">Vitality-Token</stringProp>
                  <stringProp name="Header.value">${ar_Token}</stringProp>
                </elementProp>
                <elementProp name="Vitality-App-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-App-Version</stringProp>
                  <stringProp name="Header.value">7</stringProp>
                </elementProp>
                <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                  <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                  <stringProp name="Header.value">IOS</stringProp>
                </elementProp>
                <elementProp name="Vitality-Language" elementType="Header">
                  <stringProp name="Header.name">Vitality-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Vitality-Device-Id" elementType="Header">
                  <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                  <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                </elementProp>
                <elementProp name="Vitality-Local-Time" elementType="Header">
                  <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                  <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                </elementProp>
                <elementProp name="Vitality-API-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-API-Version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Security Questions Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1756474666">What is your mother&apos;s maiden name?</stringProp>
                <stringProp name="-1356961676">In what city was your first job?</stringProp>
                <stringProp name="1564291278">What was your high school mascot?</stringProp>
                <stringProp name="-2093164811">What was your first pet&apos;s name?</stringProp>
                <stringProp name="1430685173">What was your first car?</stringProp>
                <stringProp name="1220463951">What was your childhood nickname?</stringProp>
                <stringProp name="-1442342085">What is your paternal grandmother&apos;s first name?</stringProp>
                <stringProp name="2019996010">In what city were you born?</stringProp>
                <stringProp name="-1737821990">What was the street name of your childhood home?</stringProp>
                <stringProp name="-407625967">What is the name of your favorite teacher?</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Sapphire: GET AR Eligibility" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/whitelabel-mobile-api/1.0/active_rewards/eligibility</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Vitality-Client" elementType="Header">
                  <stringProp name="Header.name">Vitality-Client</stringProp>
                  <stringProp name="Header.value">BESTBUY</stringProp>
                </elementProp>
                <elementProp name="Vitality-Token" elementType="Header">
                  <stringProp name="Header.name">Vitality-Token</stringProp>
                  <stringProp name="Header.value">${ar_Token}</stringProp>
                </elementProp>
                <elementProp name="Vitality-App-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-App-Version</stringProp>
                  <stringProp name="Header.value">7</stringProp>
                </elementProp>
                <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                  <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                  <stringProp name="Header.value">IOS</stringProp>
                </elementProp>
                <elementProp name="Vitality-Language" elementType="Header">
                  <stringProp name="Header.name">Vitality-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Vitality-Device-Id" elementType="Header">
                  <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                  <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                </elementProp>
                <elementProp name="Vitality-Local-Time" elementType="Header">
                  <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                  <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                </elementProp>
                <elementProp name="Vitality-API-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-API-Version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Eligibility Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-68120096">APWatch</stringProp>
                <stringProp name="720178462">ActiveRewards</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Sapphire: GET AR Goals" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="goalType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">weekly</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">goalType</stringProp>
                </elementProp>
                <elementProp name="offset" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">offset</stringProp>
                </elementProp>
                <elementProp name="limit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">15</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">limit</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/whitelabel-mobile-api/1.0/active_rewards/goals</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Vitality-Client" elementType="Header">
                  <stringProp name="Header.name">Vitality-Client</stringProp>
                  <stringProp name="Header.value">BESTBUY</stringProp>
                </elementProp>
                <elementProp name="Vitality-Token" elementType="Header">
                  <stringProp name="Header.name">Vitality-Token</stringProp>
                  <stringProp name="Header.value">${ar_Token}</stringProp>
                </elementProp>
                <elementProp name="Vitality-App-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-App-Version</stringProp>
                  <stringProp name="Header.value">7</stringProp>
                </elementProp>
                <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                  <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                  <stringProp name="Header.value">IOS</stringProp>
                </elementProp>
                <elementProp name="Vitality-Language" elementType="Header">
                  <stringProp name="Header.name">Vitality-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Vitality-Device-Id" elementType="Header">
                  <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                  <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                </elementProp>
                <elementProp name="Vitality-Local-Time" elementType="Header">
                  <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                  <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                </elementProp>
                <elementProp name="Vitality-API-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-API-Version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Goals Type Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-791707519">weekly</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Sapphire: GET AR Current Goals" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/whitelabel-mobile-api/1.0/active_rewards/current_goals</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Vitality-Client" elementType="Header">
                  <stringProp name="Header.name">Vitality-Client</stringProp>
                  <stringProp name="Header.value">BESTBUY</stringProp>
                </elementProp>
                <elementProp name="Vitality-Token" elementType="Header">
                  <stringProp name="Header.name">Vitality-Token</stringProp>
                  <stringProp name="Header.value">${ar_Token}</stringProp>
                </elementProp>
                <elementProp name="Vitality-App-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-App-Version</stringProp>
                  <stringProp name="Header.value">7</stringProp>
                </elementProp>
                <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                  <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                  <stringProp name="Header.value">IOS</stringProp>
                </elementProp>
                <elementProp name="Vitality-Language" elementType="Header">
                  <stringProp name="Header.name">Vitality-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Vitality-Device-Id" elementType="Header">
                  <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                  <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                </elementProp>
                <elementProp name="Vitality-Local-Time" elementType="Header">
                  <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                  <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                </elementProp>
                <elementProp name="Vitality-API-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-API-Version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Goal ID" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">arGoalId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.output.goals[0].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NOT_FOUND</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Goals Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-791707519">weekly</stringProp>
                <stringProp name="656467758">Best Buy weekly reward configuration</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Sapphire: GET AR Goal" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="goalId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${arGoalId}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">goalId</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/whitelabel-mobile-api/1.0/active_rewards/goal</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Vitality-Client" elementType="Header">
                  <stringProp name="Header.name">Vitality-Client</stringProp>
                  <stringProp name="Header.value">BESTBUY</stringProp>
                </elementProp>
                <elementProp name="Vitality-Token" elementType="Header">
                  <stringProp name="Header.name">Vitality-Token</stringProp>
                  <stringProp name="Header.value">${ar_Token}</stringProp>
                </elementProp>
                <elementProp name="Vitality-App-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-App-Version</stringProp>
                  <stringProp name="Header.value">7</stringProp>
                </elementProp>
                <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                  <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                  <stringProp name="Header.value">IOS</stringProp>
                </elementProp>
                <elementProp name="Vitality-Language" elementType="Header">
                  <stringProp name="Header.name">Vitality-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Vitality-Device-Id" elementType="Header">
                  <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                  <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                </elementProp>
                <elementProp name="Vitality-Local-Time" elementType="Header">
                  <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                  <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                </elementProp>
                <elementProp name="Vitality-API-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-API-Version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Goals Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-791707519">weekly</stringProp>
                <stringProp name="656467758">Best Buy weekly reward configuration</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Sapphire: GET AR Rewards Groups" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/whitelabel-mobile-api/1.0/active_rewards/get_rewards_groups</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Vitality-Client" elementType="Header">
                  <stringProp name="Header.name">Vitality-Client</stringProp>
                  <stringProp name="Header.value">BESTBUY</stringProp>
                </elementProp>
                <elementProp name="Vitality-Token" elementType="Header">
                  <stringProp name="Header.name">Vitality-Token</stringProp>
                  <stringProp name="Header.value">${ar_Token}</stringProp>
                </elementProp>
                <elementProp name="Vitality-App-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-App-Version</stringProp>
                  <stringProp name="Header.value">7</stringProp>
                </elementProp>
                <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                  <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                  <stringProp name="Header.value">IOS</stringProp>
                </elementProp>
                <elementProp name="Vitality-Language" elementType="Header">
                  <stringProp name="Header.name">Vitality-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Vitality-Device-Id" elementType="Header">
                  <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                  <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                </elementProp>
                <elementProp name="Vitality-Local-Time" elementType="Header">
                  <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                  <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                </elementProp>
                <elementProp name="Vitality-API-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-API-Version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Rewards Group Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2031199">BB10</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Sapphire: POST VDP: ROUTINE" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
 &quot;device&quot;: {&#xd;
   &quot;deviceId&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}&quot;,&#xd;
   &quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
   &quot;model&quot;: &quot;iOS 10.0.1&quot;&#xd;
 },&#xd;
	 &quot;header&quot;: {&#xd;
	   &quot;partnerSystem&quot;: &quot;Apple&quot;,&#xd;
	   &quot;processingType&quot;: &quot;BATCH&quot;,&#xd;
	   &quot;rawUploadData&quot;: &quot;&quot;,&#xd;
	   &quot;sessionId&quot;: &quot;${randomAlphaNumericString}-${randomAlphaNumericString}&quot;,&#xd;
	   &quot;tenantId&quot;: &quot;32&quot;,&#xd;
	   &quot;uploadCount&quot;: 3,&#xd;
	   &quot;uploadDate&quot;: &quot;${dateToday}T00:00:00+03:00&quot;,&#xd;
	   &quot;user&quot;: {&#xd;
	     &quot;entityNo&quot;: &quot;${sapphireId}&quot;,&#xd;
	     &quot;partnerUserId&quot;: &quot;&quot;&#xd;
	  },&#xd;
	   &quot;verified&quot;: &quot;true&quot;&#xd;
	  },&#xd;
		 &quot;readings&quot;: [&#xd;
		   {&#xd;
		     &quot;dataCategory&quot;: &quot;BIOMETRIC&quot;,&#xd;
		     &quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00+03:00&quot;,&#xd;
		     &quot;healthData&quot;: {&#xd;
		     &quot;weight&quot;: {&#xd;
		     &quot;unitOfMeasurement&quot;: &quot;KILOGRAMS&quot;,&#xd;
		     &quot;value&quot;: 80.5&#xd;
		       }&#xd;
     },&#xd;
     &quot;integrity&quot;: &quot;UNVERIFIED&quot;,&#xd;
     &quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
     &quot;model&quot;: &quot;iOS 10.0.1&quot;,&#xd;
     &quot;partnerReadingId&quot;: &quot;${dateToday}${randomAlphaNumericString}&quot;,&#xd;
     &quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
     &quot;readingType&quot;: &quot;WEIGHT&quot;,&#xd;
     &quot;startTime&quot;: &quot;${dateToday}T00:00:00+03:00&quot;&#xd;
   },&#xd;
   {&#xd;
     &quot;dataCategory&quot;: &quot;ROUTINE&quot;,&#xd;
     &quot;duration&quot;: 86400,&#xd;
     &quot;endTime&quot;: &quot;${dateTomorrow}T00:00:00+03:00&quot;,&#xd;
     &quot;integrity&quot;: &quot;VERIFIED&quot;,&#xd;
     &quot;manufacturer&quot;: &quot;Apple&quot;,&#xd;
     &quot;model&quot;: &quot;iOS 10.0.1&quot;,&#xd;
     &quot;partnerReadingId&quot;: &quot;${dateToday}${randomAlphaNumericString}&quot;,&#xd;
     &quot;partnerSystemSource&quot;: &quot;Apple Health&quot;,&#xd;
     &quot;readingType&quot;: &quot;WALKING&quot;,&#xd;
     &quot;startTime&quot;: &quot;${dateToday}T00:00:00+03:00&quot;,&#xd;
     &quot;workout&quot;: {&#xd;
       &quot;energyExpenditure&quot;: {&#xd;
         &quot;unitOfMeasurement&quot;: &quot;KILOCALORIES&quot;,&#xd;
         &quot;value&quot;: 800&#xd;
       }&#xd;
     }&#xd;
   }&#xd;
   &#xd;
 ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/${msPath}/1.0/health_data/upload</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Vitality-Token" elementType="Header">
                  <stringProp name="Header.name">Vitality-Token</stringProp>
                  <stringProp name="Header.value">${ar_Token}</stringProp>
                </elementProp>
                <elementProp name="Vitality-App-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-App-Version</stringProp>
                  <stringProp name="Header.value">7</stringProp>
                </elementProp>
                <elementProp name="Vitality-Language" elementType="Header">
                  <stringProp name="Header.name">Vitality-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Vitality-Device-Id" elementType="Header">
                  <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                  <stringProp name="Header.value">swagger-3f802407-77b4-407c-a758-842af5830c2b</stringProp>
                </elementProp>
                <elementProp name="Vitality-Local-Time" elementType="Header">
                  <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                  <stringProp name="Header.value">${__time(yyyy-MM-dd,)}</stringProp>
                </elementProp>
                <elementProp name="Vitality-API-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-API-Version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                  <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                  <stringProp name="Header.value">IOS</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Health Data Upload Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1880474659">Successfully Uploaded Health Data to GDL</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Sapphire: GET AR Streak Summary" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/whitelabel-mobile-api/1.0/active_rewards/streak_summary</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Vitality-Client" elementType="Header">
                  <stringProp name="Header.name">Vitality-Client</stringProp>
                  <stringProp name="Header.value">BESTBUY</stringProp>
                </elementProp>
                <elementProp name="Vitality-Token" elementType="Header">
                  <stringProp name="Header.name">Vitality-Token</stringProp>
                  <stringProp name="Header.value">${ar_Token}</stringProp>
                </elementProp>
                <elementProp name="Vitality-App-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-App-Version</stringProp>
                  <stringProp name="Header.value">7</stringProp>
                </elementProp>
                <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                  <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                  <stringProp name="Header.value">IOS</stringProp>
                </elementProp>
                <elementProp name="Vitality-Language" elementType="Header">
                  <stringProp name="Header.name">Vitality-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Vitality-Device-Id" elementType="Header">
                  <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                  <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                </elementProp>
                <elementProp name="Vitality-Local-Time" elementType="Header">
                  <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                  <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                </elementProp>
                <elementProp name="Vitality-API-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-API-Version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Streak Reward Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1736004014">best-buy-streak-reward</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Sapphire: GET Health Data Settings" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/whitelabel-mobile-api/1.0/health_data/settings</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Vitality-Client" elementType="Header">
                  <stringProp name="Header.name">Vitality-Client</stringProp>
                  <stringProp name="Header.value">BESTBUY</stringProp>
                </elementProp>
                <elementProp name="Vitality-Token" elementType="Header">
                  <stringProp name="Header.name">Vitality-Token</stringProp>
                  <stringProp name="Header.value">${ar_Token}</stringProp>
                </elementProp>
                <elementProp name="Vitality-App-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-App-Version</stringProp>
                  <stringProp name="Header.value">7</stringProp>
                </elementProp>
                <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                  <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                  <stringProp name="Header.value">IOS</stringProp>
                </elementProp>
                <elementProp name="Vitality-Language" elementType="Header">
                  <stringProp name="Header.name">Vitality-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Vitality-Device-Id" elementType="Header">
                  <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                  <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                </elementProp>
                <elementProp name="Vitality-Local-Time" elementType="Header">
                  <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                  <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                </elementProp>
                <elementProp name="Vitality-API-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-API-Version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Streak Reward Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2070259289">status&quot;:1</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Sapphire: GET Dashboard Vitality Bucks " enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/whitelabel-mobile-api/1.0/health_data/settings</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Vitality-Client" elementType="Header">
                  <stringProp name="Header.name">Vitality-Client</stringProp>
                  <stringProp name="Header.value">BESTBUY</stringProp>
                </elementProp>
                <elementProp name="Vitality-Token" elementType="Header">
                  <stringProp name="Header.name">Vitality-Token</stringProp>
                  <stringProp name="Header.value">${ar_Token}</stringProp>
                </elementProp>
                <elementProp name="Vitality-App-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-App-Version</stringProp>
                  <stringProp name="Header.value">7</stringProp>
                </elementProp>
                <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                  <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                  <stringProp name="Header.value">IOS</stringProp>
                </elementProp>
                <elementProp name="Vitality-Language" elementType="Header">
                  <stringProp name="Header.name">Vitality-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Vitality-Device-Id" elementType="Header">
                  <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                  <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                </elementProp>
                <elementProp name="Vitality-Local-Time" elementType="Header">
                  <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                  <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                </elementProp>
                <elementProp name="Vitality-API-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-API-Version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Vitality Bucks Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2070259289">status&quot;:1</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Sapphire: POST Register Push Token" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="push_token" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${randomAlphaNumericString}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">push_token</stringProp>
                </elementProp>
                <elementProp name="device_id" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${randomNumericString}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">device_id</stringProp>
                </elementProp>
                <elementProp name="platform" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">IOS</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">platform</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/${msPath}/1.0/notifications/register_push_token</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Vitality-Client" elementType="Header">
                  <stringProp name="Header.name">Vitality-Client</stringProp>
                  <stringProp name="Header.value">BESTBUY</stringProp>
                </elementProp>
                <elementProp name="Vitality-Token" elementType="Header">
                  <stringProp name="Header.name">Vitality-Token</stringProp>
                  <stringProp name="Header.value">${ar_Token}</stringProp>
                </elementProp>
                <elementProp name="Vitality-App-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-App-Version</stringProp>
                  <stringProp name="Header.value">7</stringProp>
                </elementProp>
                <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                  <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                  <stringProp name="Header.value">IOS</stringProp>
                </elementProp>
                <elementProp name="Vitality-Language" elementType="Header">
                  <stringProp name="Header.name">Vitality-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Vitality-Device-Id" elementType="Header">
                  <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                  <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                </elementProp>
                <elementProp name="Vitality-Local-Time" elementType="Header">
                  <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                  <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                </elementProp>
                <elementProp name="Vitality-API-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-API-Version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion that Status = 1" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-161783867">&quot;status&quot;:1</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Sapphire: POST Set Push Enabled" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="enabled" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">enabled</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/${msPath}/1.0/notifications/set_push_enabled</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Vitality-Client" elementType="Header">
                  <stringProp name="Header.name">Vitality-Client</stringProp>
                  <stringProp name="Header.value">BESTBUY</stringProp>
                </elementProp>
                <elementProp name="Vitality-Token" elementType="Header">
                  <stringProp name="Header.name">Vitality-Token</stringProp>
                  <stringProp name="Header.value">${ar_Token}</stringProp>
                </elementProp>
                <elementProp name="Vitality-App-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-App-Version</stringProp>
                  <stringProp name="Header.value">7</stringProp>
                </elementProp>
                <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                  <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                  <stringProp name="Header.value">IOS</stringProp>
                </elementProp>
                <elementProp name="Vitality-Language" elementType="Header">
                  <stringProp name="Header.name">Vitality-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Vitality-Device-Id" elementType="Header">
                  <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                  <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                </elementProp>
                <elementProp name="Vitality-Local-Time" elementType="Header">
                  <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                  <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                </elementProp>
                <elementProp name="Vitality-API-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-API-Version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Sapphire: GET Feedback Faq" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">api/whitelabel-mobile-api/1.0/feedback/faq</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json;charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Vitality-Client" elementType="Header">
                  <stringProp name="Header.name">Vitality-Client</stringProp>
                  <stringProp name="Header.value">BESTBUY</stringProp>
                </elementProp>
                <elementProp name="Vitality-Token" elementType="Header">
                  <stringProp name="Header.name">Vitality-Token</stringProp>
                  <stringProp name="Header.value">${ar_Token}</stringProp>
                </elementProp>
                <elementProp name="Vitality-App-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-App-Version</stringProp>
                  <stringProp name="Header.value">7</stringProp>
                </elementProp>
                <elementProp name="Vitality-Mobile-Platform" elementType="Header">
                  <stringProp name="Header.name">Vitality-Mobile-Platform</stringProp>
                  <stringProp name="Header.value">IOS</stringProp>
                </elementProp>
                <elementProp name="Vitality-Language" elementType="Header">
                  <stringProp name="Header.name">Vitality-Language</stringProp>
                  <stringProp name="Header.value">en</stringProp>
                </elementProp>
                <elementProp name="Vitality-Device-Id" elementType="Header">
                  <stringProp name="Header.name">Vitality-Device-Id</stringProp>
                  <stringProp name="Header.value">swagger-bc3f0025-d400-43b9-9b49-ad579fa0128f</stringProp>
                </elementProp>
                <elementProp name="Vitality-Local-Time" elementType="Header">
                  <stringProp name="Header.name">Vitality-Local-Time</stringProp>
                  <stringProp name="Header.value">${dateToday}T09:45:39.0TCDT-05:00</stringProp>
                </elementProp>
                <elementProp name="Vitality-API-Version" elementType="Header">
                  <stringProp name="Header.name">Vitality-API-Version</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Feedback Faq Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2070259289">status&quot;:1</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <kg.apc.jmeter.threads.UltimateThreadGroup guiclass="kg.apc.jmeter.threads.UltimateThreadGroupGui" testclass="kg.apc.jmeter.threads.UltimateThreadGroup" testname="api.pov: 14K/Hour" enabled="false">
        <collectionProp name="ultimatethreadgroupdata">
          <collectionProp name="603343804">
            <stringProp name="1820">95</stringProp>
            <stringProp name="1722">60</stringProp>
            <stringProp name="53430">600</stringProp>
            <stringProp name="1545987">2940</stringProp>
            <stringProp name="48">0</stringProp>
          </collectionProp>
          <collectionProp name="-930564596">
            <stringProp name="1815">90</stringProp>
            <stringProp name="1509531">1260</stringProp>
            <stringProp name="53430">600</stringProp>
            <stringProp name="1514274">1740</stringProp>
            <stringProp name="48">0</stringProp>
          </collectionProp>
          <collectionProp name="1438100645">
            <stringProp name="1789">85</stringProp>
            <stringProp name="1541244">2460</stringProp>
            <stringProp name="53430">600</stringProp>
            <stringProp name="52593">540</stringProp>
            <stringProp reference="../../collectionProp/stringProp[5]"/>
          </collectionProp>
        </collectionProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
      </kg.apc.jmeter.threads.UltimateThreadGroup>
      <hashTree/>
      <kg.apc.jmeter.threads.UltimateThreadGroup guiclass="kg.apc.jmeter.threads.UltimateThreadGroupGui" testclass="kg.apc.jmeter.threads.UltimateThreadGroup" testname="api.pov: 45K/Hour" enabled="false">
        <collectionProp name="ultimatethreadgroupdata">
          <collectionProp name="-527403147">
            <stringProp name="49679">230</stringProp>
            <stringProp name="1722">60</stringProp>
            <stringProp name="53430">600</stringProp>
            <stringProp name="1545987">2940</stringProp>
            <stringProp name="48">0</stringProp>
          </collectionProp>
          <collectionProp name="-113934633">
            <stringProp name="49648">220</stringProp>
            <stringProp name="1509531">1260</stringProp>
            <stringProp name="53430">600</stringProp>
            <stringProp name="1514274">1740</stringProp>
            <stringProp name="48">0</stringProp>
          </collectionProp>
          <collectionProp name="-1445691831">
            <stringProp name="49617">210</stringProp>
            <stringProp name="1541244">2460</stringProp>
            <stringProp name="53430">600</stringProp>
            <stringProp name="52593">540</stringProp>
            <stringProp name="48">0</stringProp>
          </collectionProp>
        </collectionProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
      </kg.apc.jmeter.threads.UltimateThreadGroup>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Yelp" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1514078571000</longProp>
        <longProp name="ThreadGroup.end_time">1514078571000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">600</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
        </CookieManager>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="accept" elementType="Header">
              <stringProp name="Header.name">accept</stringProp>
              <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</stringProp>
            </elementProp>
            <elementProp name="accept-encoding" elementType="Header">
              <stringProp name="Header.name">accept-encoding</stringProp>
              <stringProp name="Header.value">gzip, deflate, br</stringProp>
            </elementProp>
            <elementProp name="accept-language" elementType="Header">
              <stringProp name="Header.name">accept-language</stringProp>
              <stringProp name="Header.value">en-US,en;q=0.9,ru;q=0.8,uk;q=0.7,de;q=0.6,la;q=0.5</stringProp>
            </elementProp>
            <elementProp name="cache-control" elementType="Header">
              <stringProp name="Header.name">cache-control</stringProp>
              <stringProp name="Header.value">max-age=0</stringProp>
            </elementProp>
            <elementProp name="sec-fetch-dest" elementType="Header">
              <stringProp name="Header.name">sec-fetch-dest</stringProp>
              <stringProp name="Header.value">document</stringProp>
            </elementProp>
            <elementProp name="sec-fetch-mode" elementType="Header">
              <stringProp name="Header.name">sec-fetch-mode</stringProp>
              <stringProp name="Header.value">navigate</stringProp>
            </elementProp>
            <elementProp name="sec-fetch-site" elementType="Header">
              <stringProp name="Header.name">sec-fetch-site</stringProp>
              <stringProp name="Header.value">none</stringProp>
            </elementProp>
            <elementProp name="sec-fetch-user" elementType="Header">
              <stringProp name="Header.name">sec-fetch-user</stringProp>
              <stringProp name="Header.value">?1</stringProp>
            </elementProp>
            <elementProp name="upgrade-insecure-requests" elementType="Header">
              <stringProp name="Header.name">upgrade-insecure-requests</stringProp>
              <stringProp name="Header.value">1</stringProp>
            </elementProp>
            <elementProp name="user-agent" elementType="Header">
              <stringProp name="Header.name">user-agent</stringProp>
              <stringProp name="Header.value">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.87 Safari/537.36</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Yelp: Search For Nova Fix" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">www.yelp.com</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">biz/nova-fix-chicago-2</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.implementation">Java</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="phone.number.1" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">phone.number.1</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;LocalBusiness&quot;, &quot;telephone&quot;: &quot;+(.*)}</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="phone.number.2" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">phone.number.2</stringProp>
            <stringProp name="RegexExtractor.regex">&lt;span itemprop=&quot;telephone&quot;&gt;([\w|\W]*?).*&lt;/span&gt;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="phone.number.3" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">phone.number.3</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;phoneNumber&quot;:&quot;(.*)&quot;,&quot;bizWebsiteFrameLinkProps</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">NOT_FOUND</stringProp>
            <stringProp name="RegexExtractor.match_number"></stringProp>
          </RegexExtractor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion phone.number.1" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1092347628">17737416682</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">phone.number.1</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion phone.number.2" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1716888307">741-6682</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">phone.number.2</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion phone.number.3" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-399594635">(773) 741-6682</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">8</intProp>
            <stringProp name="Assertion.scope">variable</stringProp>
            <stringProp name="Scope.variable">phone.number.3</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>true</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>true</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <boolProp name="saveHeaders">false</boolProp>
      </ResultCollector>
      <hashTree/>
      <BackendListener guiclass="BackendListenerGui" testclass="BackendListener" testname="Backend Listener" enabled="true">
        <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="influxdbMetricsSender" elementType="Argument">
              <stringProp name="Argument.name">influxdbMetricsSender</stringProp>
              <stringProp name="Argument.value">org.apache.jmeter.visualizers.backend.influxdb.HttpMetricsSender</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="influxdbUrl" elementType="Argument">
              <stringProp name="Argument.name">influxdbUrl</stringProp>
              <stringProp name="Argument.value">http://localhost:8086/write?db=jmeter</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="application" elementType="Argument">
              <stringProp name="Argument.name">application</stringProp>
              <stringProp name="Argument.value">application name</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="measurement" elementType="Argument">
              <stringProp name="Argument.name">measurement</stringProp>
              <stringProp name="Argument.value">jmeter</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="summaryOnly" elementType="Argument">
              <stringProp name="Argument.name">summaryOnly</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="samplersRegex" elementType="Argument">
              <stringProp name="Argument.name">samplersRegex</stringProp>
              <stringProp name="Argument.value">.*</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="percentiles" elementType="Argument">
              <stringProp name="Argument.name">percentiles</stringProp>
              <stringProp name="Argument.value">99;95;90</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="testTitle" elementType="Argument">
              <stringProp name="Argument.name">testTitle</stringProp>
              <stringProp name="Argument.value">Test name</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="eventTags" elementType="Argument">
              <stringProp name="Argument.name">eventTags</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </elementProp>
        <stringProp name="classname">org.apache.jmeter.visualizers.backend.influxdb.InfluxdbBackendListenerClient</stringProp>
      </BackendListener>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.HitsPerSecondGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Hits per Second" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>true</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">1000</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
